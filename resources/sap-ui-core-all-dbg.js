// This file has been generated by the SAPUI5 'AllInOne' Builder
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/** 
 * Device and Feature Detection API of the SAP UI5 Library.
 *
 * @version 1.18.9
 * @namespace
 * @name sap.ui.Device
 * @public
 */

//Declare Module if API is available
if(window.jQuery && window.jQuery.sap && window.jQuery.sap.declare){
	window.jQuery.sap.declare("sap.ui.Device", false);
}

//Introduce namespace if it does not yet exist
if(typeof window.sap !== "object" && typeof window.sap !== "function" ){
	  window.sap = {};
}
if(typeof window.sap.ui !== "object"){
	window.sap.ui = {};
}

(function() {

	//Skip initialization if API is already available
	if(typeof window.sap.ui.Device === "object" || typeof window.sap.ui.Device === "function" ){
		return;
	}
	
	var device = {};

////-------------------------- Logging -------------------------------------
	/* since we cannot use the logging from jquery.sap.global.js, we need to come up with a seperate
	 * solution for the device API
	 */
	// helper function for date formatting
	function pad0(i,w) { return ("000" + String(i)).slice(-w); }

	var FATAL=0, ERROR=1, WARNING=2, INFO=3, DEBUG=4, TRACE=5;

	var deviceLogger = function() {
		this.defaultComponent = 'DEVICE';
		this.sWindowName = (window.top == window) ? "" : "[" + window.location.pathname.split('/').slice(-1)[0] + "] ";
	// Creates a new log entry depending on its level and component.
		this.log = function (iLevel, sMessage, sComponent) {
			sComponent = sComponent || this.defaultComponent  || '';
				var oNow = new Date(),
					oLogEntry = {
						time     : pad0(oNow.getHours(),2)+":"+pad0(oNow.getMinutes(),2)+":"+pad0(oNow.getSeconds(),2),
						date     : pad0(oNow.getFullYear(),4) + "-" + pad0(oNow.getMonth()+1,2) + "-" + pad0(oNow.getDate(),2),
						timestamp: oNow.getTime(),
						level    : iLevel,
						message  : sMessage || "",
						component: sComponent || ""
					};
				if (window.console) { // in IE and FF, console might not exist; in FF it might even disappear
					var logText = oLogEntry.date + " " + oLogEntry.time + " " + this.sWindowName + oLogEntry.message + " - " + oLogEntry.component;
					switch(iLevel) {
					case FATAL:
					case ERROR: console.error(logText); break;
					case WARNING: console.warn(logText); break;
					case INFO: console.info ? console.info(logText) : console.log(logText); break;    // info not available in iOS simulator
					case DEBUG: console.debug ? console.debug(logText) : console.log(logText); break; // debug not available in IE, fallback to log
					case TRACE: console.trace ? console.trace(logText) : console.log(logText); break; // trace not available in IE, fallback to log (no trace)
					}
				}
				return oLogEntry;
		};
	};
// instantiate new logger		
	var logger = new deviceLogger();
	logger.log(INFO, "Device API logging initialized");


//******** Event Management ******** (see Event Provider)

	var mEventRegistry = {};

	function attachEvent(sEventId, fnFunction, oListener) {
		if(!mEventRegistry[sEventId]){
			mEventRegistry[sEventId] = [];
		}
		mEventRegistry[sEventId].push({oListener: oListener, fFunction:fnFunction});
	};

	function detachEvent(sEventId, fnFunction, oListener) {
		var aEventListeners = mEventRegistry[sEventId];
		
		if (!aEventListeners) {
			return this;
		}

		for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
			if (aEventListeners[i].fFunction === fnFunction && aEventListeners[i].oListener === oListener) {
				aEventListeners.splice(i,1);
				break;
			}
		}
		if(aEventListeners.length == 0) {
			delete mEventRegistry[sEventId];
		}
	};

	function fireEvent(sEventId, mParameters) {
		var aEventListeners = mEventRegistry[sEventId], oInfo;
		if (aEventListeners) {
			aEventListeners = aEventListeners.slice();
			for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
				oInfo = aEventListeners[i];
				oInfo.fFunction.call(oInfo.oListener || window, mParameters);
			}
		}
	};

//******** OS Detection ********

	/** 
	 * Contains information about the operating system of the device.
	 * 
	 * @namespace
	 * @name sap.ui.Device.os
	 * @public
	 */
	/**
	 * Enumeration containing the names of known operating systems.
	 * 
	 * @namespace
	 * @name sap.ui.Device.os.OS
	 * @public
	 */
	/**
	 * The name of the operating system.
	 * 
	 * @see sap.ui.Device.os#OS
	 * @name sap.ui.Device.os#name
	 * @type String
	 * @public
	 */
	/**
	 * The version as string. Might be empty if no version can be determined.
	 * 
	 * @name sap.ui.Device.os#versionStr
	 * @type String
	 * @public
	 */
	/**
	 * The version as float. Might be -1 if no version can be determined.
	 * 
	 * @name sap.ui.Device.os#version
	 * @type float
	 * @public
	 */
	/**
	 * Flag indicating the Windows operating system.
	 * 
	 * @name sap.ui.Device.os#windows
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the Linux operating system.
	 * 
	 * @name sap.ui.Device.os#linux
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the MAC operating system.
	 * 
	 * @name sap.ui.Device.os#macintosh
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the iOS operating system.
	 * 
	 * @name sap.ui.Device.os#ios
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the Android operating system.
	 * 
	 * @name sap.ui.Device.os#android
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the Blackberry operating system.
	 * 
	 * @name sap.ui.Device.os#blackberry
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the Windows Phone operating system.
	 * 
	 * @name sap.ui.Device.os#windows_phone
	 * @type boolean
	 * @public
	 */
	
	/**
	 * Windows operating system name.
	 * 
	 * @see sap.ui.Device.os#name
	 * @name sap.ui.Device.os.OS#WINDOWS
	 * @public
	 */
	/**
	 * MAC operating system name.
	 * 
	 * @see sap.ui.Device.os#name
	 * @name sap.ui.Device.os.OS#MACINTOSH
	 * @public
	 */
	/**
	 * Linux operating system name.
	 * 
	 * @see sap.ui.Device.os#name
	 * @name sap.ui.Device.os.OS#LINUX
	 * @public
	 */
	/**
	 * iOS operating system name.
	 * 
	 * @see sap.ui.Device.os#name
	 * @name sap.ui.Device.os.OS#IOS
	 * @public
	 */
	/**
	 * Android operating system name.
	 * 
	 * @see sap.ui.Device.os#name
	 * @name sap.ui.Device.os.OS#ANDROID
	 * @public
	 */
	/**
	 * Blackberry operating system name.
	 * 
	 * @see sap.ui.Device.os#name
	 * @name sap.ui.Device.os.OS#BLACKBERRY
	 * @public
	 */
	/**
	 * Windows Phone operating system name.
	 * 
	 * @see sap.ui.Device.os#name
	 * @name sap.ui.Device.os.OS#WINDOWS_PHONE
	 * @public
	 */
	
	var OS = {
		"WINDOWS": "win",
		"MACINTOSH": "mac",
		"LINUX": "linux",
		"IOS": "iOS",
		"ANDROID": "Android",
		"BLACKBERRY": "bb",
		"WINDOWS_PHONE": "winphone"
	};

	function getOS(userAgent){ // may return null!!
		function getDesktopOS(){
			var pf = navigator.platform;
			if(pf.indexOf("Win") != -1 ){
				return {"name": OS.WINDOWS, "versionStr": ""};
			}else if(pf.indexOf("Mac") != -1){
				return {"name": OS.MACINTOSH, "versionStr": ""};
			}else if(pf.indexOf("Linux") != -1){
				return {"name": OS.LINUX, "versionStr": ""};
			}
			logger.log(INFO, "OS detection returned no result");
			return null;
		}

		userAgent = userAgent || navigator.userAgent;
		var platform = /\(([a-zA-Z ]+);\s(?:[U]?[;]?)([\D]+)((?:[\d._]*))(?:.*[\)][^\d]*)([\d.]*)\s/;
		var result = userAgent.match(platform);
		if (result){
			var appleDevices = /iPhone|iPad|iPod/;
			var bbDevices = /PlayBook|BlackBerry/;
			if (result[0].match(appleDevices)){
				result[3] = result[3].replace(/_/g, ".");
				//result[1] contains info of devices
				return({"name": OS.IOS, "versionStr": result[3]});
			} else if (result[2].match(/Android/)) {
				result[2] = result[2].replace(/\s/g, "");
				return({"name": OS.ANDROID, "versionStr": result[3]});
			} else if (result[0].match(bbDevices)) {
				return({"name": OS.BLACKBERRY, "versionStr": result[4]});
			} else {
				// currently we only support iOS, Android, BlackBerry 6.0+ , everything else will be ignored, if more platforms should be supported, logic can be placed here
				return getDesktopOS();
			} 

		} else if (userAgent.indexOf("(BB10;") > 0) { 
			// BlackBery 10 has a different structure...
			platform = /\sVersion\/([\d.]+)\s/;
			result = userAgent.match(platform);
			if (result){
				return {"name": OS.BLACKBERRY, "versionStr": result[1]};
			} else {
				return {"name": OS.BLACKBERRY, "versionStr": '10'};
			}

		} else {
			// Windows phone has a different structure, so we need to check with another regExp.
			platform = /Windows Phone (?:OS )?([\d.]*)/;
			result = userAgent.match(platform);
			if (result){
				return({"name": OS.WINDOWS_PHONE, "versionStr": result[1]});
			} else {
				return getDesktopOS();
			}
		}
	};
	
	function setOS() {
		device.os = getOS() || {};
		device.os.OS = OS;
		device.os.version = device.os.versionStr ? parseFloat(device.os.versionStr) : -1;

		if(device.os.name){
			for(var b in OS){
				if(OS[b] === device.os.name){
					device.os[b.toLowerCase()] = true;
				}
			}
		}
	}
	setOS();



//******** Browser Detection ********
	
	/** 
	 * Contains information about the used browser.
	 * 
	 * @namespace
	 * @name sap.ui.Device.browser
	 * @public
	 */
	
	/**
	 * Enumeration containing the names of known browsers.
	 * 
	 * @namespace
	 * @name sap.ui.Device.browser.BROWSER
	 * @public
	 */
	
	/**
	 * The name of the browser.
	 * 
	 * @see sap.ui.Device.browser#BROWSER
	 * @name sap.ui.Device.browser#name
	 * @type String
	 * @public
	 */
	/**
	 * The version as string. Might be empty if no version can be determined.
	 * 
	 * @name sap.ui.Device.browser#versionStr
	 * @type String
	 * @public
	 */
	/**
	 * The version as float. Might be -1 if no version can be determined.
	 * 
	 * @name sap.ui.Device.browser#version
	 * @type float
	 * @public
	 */
	/**
	 * Flag indicating whether the mobile variant of the browser is used.
	 * 
	 * @name sap.ui.Device.browser#mobile
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the Internet Explorer browser.
	 * 
	 * @name sap.ui.Device.browser#internet_explorer
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the Firefox browser.
	 * 
	 * @name sap.ui.Device.browser#firefox
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the Chrome browser.
	 * 
	 * @name sap.ui.Device.browser#chrome
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating the Safari browser.
	 * 
	 * @name sap.ui.Device.browser#safari
	 * @type boolean
	 * @public
	 */
	
	/**
	 * Internet Explorer browser name.
	 * 
	 * @see sap.ui.Device.browser#name
	 * @name sap.ui.Device.browser.BROWSER#INTERNET_EXPLORER
	 * @public
	 */
	/**
	 * Firefox browser name.
	 * 
	 * @see sap.ui.Device.browser#name
	 * @name sap.ui.Device.browser.BROWSER#FIREFOX
	 * @public
	 */
	/**
	 * Chrome browser name.
	 * 
	 * @see sap.ui.Device.browser#name
	 * @name sap.ui.Device.browser.BROWSER#CHROME
	 * @public
	 */
	/**
	 * Safari browser name.
	 * 
	 * @see sap.ui.Device.browser#name
	 * @name sap.ui.Device.browser.BROWSER#SAFARI
	 * @public
	 */
	/**
	 * Android stock browser name.
	 * 
	 * @see sap.ui.Device.browser#name
	 * @name sap.ui.Device.browser.BROWSER#ANDROID
	 * @public
	 */
	
	var BROWSER = {
		"INTERNET_EXPLORER": "ie",
		"FIREFOX": "ff",
		"CHROME": "cr",
		"SAFARI": "sf",
		"ANDROID": "an"
	};

	var ua = navigator.userAgent;

	/*!
	 * Taken from jQuery JavaScript Library v1.7.1
	 * http://jquery.com/
	 *
	 * Copyright 2011, John Resig
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 * http://jquery.org/license
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 * Copyright 2011, The Dojo Foundation
	 * Released under the MIT, BSD, and GPL Licenses.
	 *
	 * Date: Mon Nov 21 21:11:03 2011 -0500
	 */
	function calcBrowser(){
		var _ua = ua.toLowerCase();

		var rwebkit = /(webkit)[ \/]([\w.]+)/;
		var ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/;
		var rmsie = /(msie) ([\w.]+)/;
		//TODO this might needs to be adjusted in future IE version > 11
		var rmsienew = /(trident)\/[\w.]+;.*rv:([\w.]+)/;
		var rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/;

		var match = rwebkit.exec( _ua ) ||
					ropera.exec( _ua ) ||
					rmsie.exec( _ua ) ||
					rmsienew.exec( _ua ) ||
					_ua.indexOf("compatible") < 0 && rmozilla.exec( _ua ) ||
					[];

		var res = { browser: match[1] || "", version: match[2] || "0" };
		res[res.browser] = true;
		return res;
	};

	function getBrowser() {
		var b = calcBrowser();

		// jQuery checks for user agent strings. We differentiate between browsers
		if ( b.mozilla ) {
			if ( ua.match(/Firefox\/(\d+\.\d+)/) ) {
				var version = parseFloat(RegExp.$1);
				return {
					name: BROWSER.FIREFOX,
					versionStr: ""+version,
					version: version,
					mobile: false
				}
			}
		} else if ( b.webkit ) {
			// webkit version is needed for calculation if the mobile android device is a tablet (calculation of other mobile devices work without)
			var regExpWebkitVersion = ua.toLowerCase().match(/webkit[\/]([\d.]+)/);
			if (regExpWebkitVersion) {
				var webkitVersion = regExpWebkitVersion[1];
			}
			var oExpMobile = /Mobile/;
			if ( ua.match(/Chrome\/(\d+\.\d+).\d+/) ) {
				var version = parseFloat(RegExp.$1);
				return {
					name: BROWSER.CHROME,
					versionStr: ""+version,
					version: version,
					mobile: oExpMobile.test(ua),
					webkit: true,
					webkitVersion: webkitVersion
				}
			} else if( ua.match(/Android .+ Version\/(\d+\.\d+)/) ) {
				var version = parseFloat(RegExp.$1);
				return {
					name: BROWSER.ANDROID,
					versionStr: ""+version,
					version: version,
					mobile: oExpMobile.test(ua),
					webkit: true,
					webkitVersion: webkitVersion
				}
			} else { // Safari might have an issue with ua.match(...); thus changing
				var oExp = /Version\/(\d+\.\d+).*Safari/;
				if(oExp.test(ua)) {
					var version = parseFloat(oExp.exec(ua)[1]);
					return {
						name: BROWSER.SAFARI,
						versionStr: ""+version,
						version: version,
						mobile: oExpMobile.test(ua),
						webkit: true
					}
				}else{
					// unknown webkit browser
					return {
						mobile: oExpMobile.test(ua),
						webkit: true,
						webkitVersion: webkitVersion
					}
				}
			}
		} else if ( b.msie || b.trident ) {
			var version;
			// recognize IE8 when running in compat mode (only then the documentMode property is there)
			if (document.documentMode) {
				if(document.documentMode === 7) { // OK, obviously we are IE and seem to be 7... but as documentMode is there this cannot be IE7!
					version = 8.0;
				}else{
					version = parseFloat(document.documentMode);
				}
			} else {
				version = parseFloat(b.version);
			}
			return {
				name: BROWSER.INTERNET_EXPLORER,
				versionStr: ""+version,
				version: version,
				mobile: false
			}
		}
		return {
			name: "",
			versionStr: "",
			version: -1,
			mobile: false
		}
	};
	
	function setBrowser() {
		device.browser = getBrowser();
		device.browser.BROWSER = BROWSER;
		
		if(device.browser.name){
			for(var b in BROWSER){
				if(BROWSER[b] === device.browser.name){
					device.browser[b.toLowerCase()] = true;
				}
			}
		}
	}
	setBrowser();


	

//******** Support Detection ********
	
	/** 
	 * Contains information about detected capabilities of the used browser or device.
	 * 
	 * @namespace
	 * @name sap.ui.Device.support
	 * @public
	 */
	
	/**
	 * Flag indicating whether touch events are supported.
	 * 
	 * @name sap.ui.Device.support#touch
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating whether media queries via JavaScript are supported.
	 * 
	 * @name sap.ui.Device.support#matchmedia
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating whether events on JavaScript media queries are supported.
	 * 
	 * @name sap.ui.Device.support#matchmedialistener
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating whether the native orientationchange event is supported.
	 * 
	 * @name sap.ui.Device.support#orientation
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating whether the device has a Retina display.
	 * 
	 * @name sap.ui.Device.support#retina
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating whether WebSockets are supported.
	 * 
	 * @name sap.ui.Device.support#websocket
	 * @type boolean
	 * @public
	 */

	device.support = {};

	//Maybe better to but this on device.browser because there are cases that a browser can touch but a device can't!
	device.support.touch = !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof window.DocumentTouch);

	device.support.matchmedia = !!window.matchMedia;
	device.support.matchmedialistener = !!(device.support.matchmedia && !!window.matchMedia("screen and (max-width:0px)").addListener); //IE10 doesn't like empty string as argument for matchMedia
	if(device.browser.safari && device.browser.version < 6){
		//Safari seems to have addListener but no events are fired ?!
		device.support.matchmedialistener = false;
	}

	device.support.orientation = !!("orientation" in window && "onorientationchange" in window);

	device.support.retina = (window.retina||window.devicePixelRatio >= 2);

	device.support.websocket = ('WebSocket' in window);

//******** Match Media ********
	
	/** 
	 * Event API for Screen width media queries.
	 * 
	 * @namespace
	 * @name sap.ui.Device.media
	 * @public
	 */
	device.media = {};
	
	/**
	 * Enumeration containing the names of predefined Screen width media query range sets.
	 * 
	 * @namespace
	 * @name sap.ui.Device.media.RANGESETS
	 * @public
	 */
	
	/**
	 * A 3 step range set (S-L).
	 * 
	 * @name sap.ui.Device.media.RANGESETS#SAP_3STEPS
	 * @public
	 */
	/**
	 * A 4 step range set (S-XL).
	 * 
	 * @name sap.ui.Device.media.RANGESETS#SAP_4STEPS
	 * @public
	 */
	/**
	 * A 6 step range set (XS-XXL).
	 * 
	 * @name sap.ui.Device.media.RANGESETS#SAP_6STEPS
	 * @public
	 */
	/**
	 * A 3 step range set (Phone, Tablet, Desktop).
	 * 
	 * This range set is initialized always by default.
	 * 
	 * @name sap.ui.Device.media.RANGESETS#SAP_STANDARD
	 * @public
	 */
	
	var RANGESETS = {
		"SAP_3STEPS": "3Step",
		"SAP_4STEPS": "4Step",
		"SAP_6STEPS": "6Step",
		"SAP_STANDARD": "Std"
	};
	device.media.RANGESETS = RANGESETS;
	
	device.media._predefinedRangeSets = {};
	device.media._predefinedRangeSets[RANGESETS.SAP_3STEPS] = {points: [520, 960], unit: "px", name: RANGESETS.SAP_3STEPS, names: ["S", "M", "L"]};
	device.media._predefinedRangeSets[RANGESETS.SAP_4STEPS] = {points: [520, 760, 960], unit: "px", name: RANGESETS.SAP_4STEPS, names: ["S", "M", "L", "XL"]};
	device.media._predefinedRangeSets[RANGESETS.SAP_6STEPS] = {points: [241, 400, 541, 768, 960], unit: "px", name: RANGESETS.SAP_6STEPS, names: ["XS", "S", "M", "L", "XL", "XXL"]};
	device.media._predefinedRangeSets[RANGESETS.SAP_STANDARD] = {points: [600, 1024], unit: "px", name: RANGESETS.SAP_STANDARD, names: ["Phone", "Tablet", "Desktop"]};
	
	var _defaultRangeSet = RANGESETS.SAP_STANDARD;
	var media_timeout = device.support.matchmedialistener ? 0 : 100;
	var _querysets = {};
	var media_currentwidth = null;
	
	function getQuery(from, to, unit){
		unit = unit || "px";
		var q = "screen";
		if(from > 0){
			q = q + " and (min-width:"+from+unit+")";
		}
		if(to > 0){
			q = q + " and (max-width:"+to+unit+")";
		}
		return q;
	};
	
	function handleChange(name){
		if(!device.support.matchmedialistener && media_currentwidth == windowSize()[0]){
			return; //Skip unnecessary resize events
		}
		
		if(_querysets[name].timer){
			clearTimeout(_querysets[name].timer);
			_querysets[name].timer = null;
		}
		
		_querysets[name].timer = setTimeout(function() {
			var mParams = checkQueries(name, false);
			if(mParams){
				fireEvent("media_"+name, mParams);
			}
		}, media_timeout);
	};
	
	function getRangeInfo(sSetName, iRangeIdx){
		var q = _querysets[sSetName].queries[iRangeIdx];
		var info = {from: q.from, unit: _querysets[sSetName].unit};
		if(q.to >= 0){
			info.to = q.to;
		}
		if(_querysets[sSetName].names){
			info.name = _querysets[sSetName].names[iRangeIdx];
		}
		return info;
	};
	
	function checkQueries(name, infoOnly){
		if(_querysets[name]){
			var aQueries = _querysets[name].queries;
			var info = null;
			for(var i=0, len = aQueries.length; i < len; i++){
				var q = aQueries[i];
				if((q != _querysets[name].currentquery || infoOnly) && device.media.matches(q.from, q.to, _querysets[name].unit)){
					if(!infoOnly){
						_querysets[name].currentquery = q;
					}
					if(!_querysets[name].noClasses && _querysets[name].names && !infoOnly){
						refreshCSSClasses(name, _querysets[name].names[i]);
					}
					info = getRangeInfo(name, i);
				}
			}
			
			return info;
		}
		logger.log(WARNING, "No queryset with name " + name + " found", 'DEVICE.MEDIA');
		return null;
	};
	
	function refreshCSSClasses(sSetName, sRangeName, bRemove){
		 var sClassPrefix = "sapUiMedia-"+sSetName+"-";
		 changeRootCSSClass(sClassPrefix+sRangeName, bRemove, sClassPrefix);
	};
	
	function changeRootCSSClass(sClassName, bRemove, sPrefix){
		var oRoot = document.documentElement;
		if (oRoot.className.length == 0){
			if(!bRemove){
				oRoot.className = sClassName;
			}
		}else{
			var aCurrentClasses = oRoot.className.split(" ");
			var sNewClasses = "";
			for(var i=0; i<aCurrentClasses.length; i++){
				if((sPrefix && aCurrentClasses[i].indexOf(sPrefix) != 0) || (!sPrefix && aCurrentClasses[i] != sClassName)){
					sNewClasses = sNewClasses + aCurrentClasses[i] + " ";
				}
			}
			if(!bRemove){
				sNewClasses = sNewClasses + sClassName;
			}
			oRoot.className = sNewClasses;
		}
	};
	
	function windowSize(){
		return [document.documentElement.clientWidth, document.documentElement.clientHeight];
	};
	
	function convertToPx(val, unit){
		if(unit === "em" || unit === "rem"){
			var s = window.getComputedStyle || function(e) {
	  			return e.currentStyle;
	  		}
	  		var x = s(document.documentElement).fontSize;
	  		var f = (x && x.indexOf("px") >= 0) ? parseFloat(x, 10) : 16;
	  		return val*f;
		}
		return val;
	};

	function match_legacy(from, to, unit){
		from = convertToPx(from, unit);
		to = convertToPx(to, unit);
		
		var width = windowSize()[0];
		var a = from < 0 || from <= width;
		var b = to < 0 || width <= to;
		return a && b;
	};

	function match(from, to, unit){
		var q = getQuery(from, to, unit);
		return window.matchMedia(q).matches;
	};

	device.media.matches = device.support.matchmedia ? match : match_legacy;
	
	/**
	 * Registers the given handler to the range change event, which is fired when a new range of the set is entered.
	 * 
	 * The handler has one map parameter <code>mParams</code>:
	 * <ul>
	 * <li>mParams.from: the range start value</li>
	 * <li>mParams.to: the range end value, not defined for the last range (INFINITY)</li>
	 * <li>mParams.unit: the used unit, e.g. px</li>
	 * <li>mParams.name: the range name if defined</li>
	 * </ul>
	 * 
	 * @param {Function} fnFunction The function to call, when the range change event occurs.
	 * @param {Object} [oListener] The 'this' context of the handler function.
	 * @param {String} sName The name of the range set to listen to.
	 * @name sap.ui.Device.media#attachHandler
	 * @function
	 * @public
	 */
	device.media.attachHandler = function(fnFunction, oListener, sName){
		var name = sName || _defaultRangeSet;
		attachEvent("media_"+name, fnFunction, oListener);
	};

	/**
	 * Deregisters a previously registered handler from the range change event.
	 * 
	 * @param {Function} fnFunction The function to call, when the range change event occurs.
	 * @param {Object} [oListener] The 'this' context of the handler function.
	 * @param {String} sName The name of the range set to listen to.
	 * @name sap.ui.Device.media#detachHandler
	 * @function
	 * @public
	 */
	device.media.detachHandler = function(fnFunction, oListener, sName){
		var name = sName || _defaultRangeSet;
		detachEvent("media_"+name, fnFunction, oListener);
	};
	
	/** 
	 * Initializes a Screen width media query range set.
	 * 
	 * This function can either be called only with the name parameter to initialize a predefined range set,
	 * e.g. <code>sap.ui.Device.media.initRangeSet(sap.ui.Device.media.RANGESETS.SAP_3STEPS)</code>.
	 * 
	 * Or it is possible to define a custom range set as in the following example:
	 * <code>sap.ui.Device.media.initRangeSet("MyRangeSet", [200, 400], "px", ["Small", "Medium", "Large"])</code> defines 3 ranges:
	 * <ul>
	 * <li>0px-199.999px with name "Small"</li>
	 * <li>200px-399.999px with name "Medium"</li>
	 * <li>400px-INFINITY with name "Large"</li>
	 * </ul>
	 * 
	 * The range names are optional. If they are specified also a CSS class (e.g. sapUiMedia-MyRangeSet-Small) is added to the document root
	 * depending on the current active range. This can be suppressed via parameter <code>bSuppressClasses</code>.
	 * 
	 * @param {String} sName The name of the range set. Either a predefined or custom one. The name must be a valid id (consist of letters and digits).
	 * @param {int[]} aRangeBorders The range borders
	 * @param {String} [sUnit] The unit which should be used. Allowed values are px (default), em or rem.
	 * @param {String[]} [aRangeNames] The names of the ranges. The names must be a valid id (consist of letters and digits).
	 * @param {boolean} [bSuppressClasses] Whether writing CSS classes to the document root should be suppressed
	 * @name sap.ui.Device.media#initRangeSet
	 * @function
	 * @public
	 */
	device.media.initRangeSet = function(sName, aRangeBorders, sUnit, aRangeNames, bSuppressClasses){	
		//TODO Do some Assertions and parameter checking
		var oConfig;
		if(!sName){
			oConfig = device.media._predefinedRangeSets[_defaultRangeSet];
		}else if(sName && device.media._predefinedRangeSets[sName]){
			oConfig = device.media._predefinedRangeSets[sName];
		}else{
			oConfig = {name: sName, unit: (sUnit || "px").toLowerCase(), points: aRangeBorders || [], names: aRangeNames, noClasses: !!bSuppressClasses};
		}
		
		if(device.media.hasRangeSet(oConfig.name)){
			return;
			logger.log(INFO, "Range set " + oConfig.name + " hase already been initialized", 'DEVICE.MEDIA');
		}
		
		sName = oConfig.name;
		oConfig.queries = [];
		oConfig.timer = null;
		oConfig.currentquery = null;
		oConfig.listener = function(){
			return handleChange(sName);
		};
			
		var from, to, query;
		var aPoints = oConfig.points;
		for(var i=0, len = aPoints.length; i <= len; i++){
			from = (i == 0) ? 0 : aPoints[i-1];
			to = (i == aPoints.length) ? -1 : aPoints[i];
			query = getQuery(from, to, oConfig.unit);
			oConfig.queries.push({
				query: query,
				from: from,
				to: to
			});
		};
		
		if(oConfig.names && oConfig.names.length != oConfig.queries.length){
			oConfig.names = null;
		}
		
		_querysets[oConfig.name] = oConfig;
			
		if(device.support.matchmedialistener){ //FF, Safari, Chrome, IE10?
			var queries = oConfig.queries;
			for(var i=0; i<queries.length; i++){
				var q = queries[i];
				q.media = window.matchMedia(q.query);
				q.media.addListener(oConfig.listener);
			}
		}else{ //IE, Safari (<6?)	
			if (window.addEventListener) {
				window.addEventListener("resize", oConfig.listener, false);
				window.addEventListener("orientationchange", oConfig.listener, false);
			}else{ //IE8
				window.attachEvent("onresize", oConfig.listener);
			}
		}
		
		oConfig.listener();
	};
	
	/**
	 * Returns information about the current active range of the range set with the given name.
	 * 
	 * @param {String} sName The name of the range set.
	 * @name sap.ui.Device.media#getCurrentRange
	 * @return {Map} the information about the current active range (same structure like the handler parameters (@see sap.ui.Device.media#attachHandler))
	 * @function
	 * @public
	 */
	device.media.getCurrentRange = function(sName){
		if(!device.media.hasRangeSet(sName)){
			return null;
		}
		return checkQueries(sName, true);
	};
	
	/**
	 * Returns whether a range set with the given name is initialized.
	 * 
	 * @param {String} sName The name of the range set.
	 * @name sap.ui.Device.media#hasRangeSet
	 * @return {boolean}
	 * @function
	 * @public
	 */
	device.media.hasRangeSet = function(sName){
		return sName && !!_querysets[sName];
	};
	
	/**
	 * Removes a previously initialized range set and detaches all registered handlers.
	 * 
	 * Initialized predefined range sets (@see sap.ui.Device.media#RANGESETS) cannot be removed.
	 * 
	 * @param {String} sName The name of the range set.
	 * @name sap.ui.Device.media#removeRangeSet
	 * @function
	 * @protected
	 */
	device.media.removeRangeSet = function(sName){
		if(!device.media.hasRangeSet(sName)){
			logger.log(INFO, "RangeSet " + sName + " not found, thus could not be removed.", 'DEVICE.MEDIA');
			return;
		}

		for(var x in RANGESETS){
			if(sName === RANGESETS[x]){
				logger.log(WARNING, "Cannot remove default rangeset - no action taken.", 'DEVICE.MEDIA');
				return; 
			}
		}
		
		var oConfig = _querysets[sName];
		if(device.support.matchmedialistener){ //FF, Safari, Chrome, IE10?
			var queries = oConfig.queries;
			for(var i=0; i<queries.length; i++){
				queries[i].media.removeListener(oConfig.listener);
			}
		}else{ //IE, Safari (<6?)	
			if (window.removeEventListener) {
				window.removeEventListener("resize", oConfig.listener, false);
				window.removeEventListener("orientationchange", oConfig.listener, false);
			}else{ //IE8
				window.detachEvent("onresize", oConfig.listener);
			}
		}
		
		refreshCSSClasses(sName, "", true);
		delete mEventRegistry["media_"+sName];
		delete _querysets[sName];
	};

	
//******** Orientation Detection ********
	
	/** 
	 * Orientation Change Event API.
	 * 
	 * @namespace
	 * @name sap.ui.Device.orientation
	 * @public
	 */

	device.orientation = {};

	/** 
	 * Resize Event API.
	 * 
	 * @namespace
	 * @name sap.ui.Device.resize
	 * @public
	 */
	device.resize = {};
	
	/**
	 * Registers the given handler to the orientation change event.
	 * 
	 * The handler has one map parameter <code>mParams</code>:
	 * <ul>
	 * <li>mParams.landscape: whether the orientation is currently landscape</li>
	 * </ul>
	 * 
	 * @param {Function} fnFunction The function to call, when the orientation change event occurs.
	 * @param {Object} [oListener] The 'this' context of the handler function.
	 * @name sap.ui.Device.orientation#attachHandler
	 * @function
	 * @public
	 */
	device.orientation.attachHandler = function(fnFunction, oListener){
		attachEvent("orientation", fnFunction, oListener);
	};

	/**
	 * Registers the given handler to the resize event.
	 * 
	 * The handler has one map parameter <code>mParams</code>:
	 * <ul>
	 * <li>mParams.height: new height of the window</li>
	 * <li>mParams.width: new width of the window</li>
	 * </ul>
	 * 
	 * @param {Function} fnFunction The function to call, when the resize event occurs.
	 * @param {Object} [oListener] The 'this' context of the handler function.
	 * @name sap.ui.Device.resize#attachHandler
	 * @function
	 * @public
	 */
	device.resize.attachHandler = function(fnFunction, oListener){
		attachEvent("resize", fnFunction, oListener);
	};
	
	/**
	 * Deregisters a previously registered handler from the orientation change event.
	 * @param {Function} fnFunction The function to call, when the orientation change event occurs.
	 * @param {Object} [oListener] The 'this' context of the handler function.
	 * @name sap.ui.Device.orientation#detachHandler
	 * @function
	 * @public
	 */
	device.orientation.detachHandler = function(fnFunction, oListener){
		detachEvent("orientation", fnFunction, oListener);
	};

	/**
	 * Deregisters a previously registered handler from the resize event.
	 * @param {Function} fnFunction The function to call, when the resize event occurs.
	 * @param {Object} [oListener] The 'this' context of the handler function.
	 * @name sap.ui.Device.resize#detachHandler
	 * @function
	 * @public
	 */
	device.resize.detachHandler = function(fnFunction, oListener){
		detachEvent("resize", fnFunction, oListener);
	};

	function setOrientationInfo(oInfo){
		oInfo.landscape = isLandscape(true);
		oInfo.portrait = !oInfo.landscape;
	};
	
	function handleOrientationChange(){
		setOrientationInfo(device.orientation);
		fireEvent("orientation", {landscape: device.orientation.landscape});
	};
	
	function handleResizeChange(){
		setResizeInfo(device.resize);
		fireEvent("resize", {height: device.resize.height, width: device.resize.width});
	};

	function setResizeInfo(oInfo){
		oInfo.width = windowSize()[0];
		oInfo.height = windowSize()[1];
	};

	function handleOrientationResizeChange(){
		var wasL = device.orientation.landscape;
		var isL = isLandscape();
		if(wasL != isL){
			handleOrientationChange();
		}
		//throttle resize events because most browsers throw one or more resize events per pixel
		//for every resize event inside the period from 150ms (starting from the first resize event),
		//we only fire one resize event after this period
		if (!iResizeTimeout) {
			iResizeTimeout = window.setTimeout(handleResizeTimeout, 150);
		}
	};

	function handleResizeTimeout() {
		handleResizeChange();
		iResizeTimeout = null;
	};

	var bOrientationchange = false;
	var bResize = false;
	var iOrientationTimeout;
	var iResizeTimeout;
	var iClearFlagTimeout;
	var iWindowHeightOld = windowSize()[1];
	var iWindowWidthOld = windowSize()[0];
	var bKeyboardOpen = false;
	var iLastResizeTime;
	
	function isLandscape(bFromOrientationChange){
		if (device.support.touch && device.support.orientation) {
			//if on screen keyboard is open and the call of this method is from orientation change listener, reverse the last value.
			//this is because when keyboard opens on android device, the height can be less than the width even in portrait mode.
			if(bKeyboardOpen && bFromOrientationChange){
				return !device.orientation.landscape;
			}
			//when keyboard opens, the last orientation change value will be retured.
			if(bKeyboardOpen){
				return device.orientation.landscape;
			}
			//otherwise compare the width and height of window
		} else {
			//most desktop browsers and windows phone/tablet which not support orientationchange
			if(device.support.matchmedia && device.support.orientation){
				return !!window.matchMedia("(orientation: landscape)").matches;
			}
		}
		var size = windowSize();
		return size[0] > size[1];
	};

	function handleMobileOrientationResizeChange(evt) {
		if (evt.type == "resize") {
			var iWindowHeightNew = windowSize()[1];
			var iWindowWidthNew = windowSize()[0];
			var iTime = new Date().getTime();
			//skip multiple resize events by only one orientationchange
			if(iWindowHeightNew === iWindowHeightOld && iWindowWidthNew === iWindowWidthOld){
				return;
			}
			bResize = true;
			//on mobile devices opening the keyboard on some devices leads to a resize event
			//in this case only the height changes, not the width
			if ((iWindowHeightOld != iWindowHeightNew) && (iWindowWidthOld == iWindowWidthNew)) {
				//Asus Transformer tablet fires two resize events when orientation changes while keyboard is open.
				//Between these two events, only the height changes. The check of if keyboard is open has to be skipped because
				//it may be judged as keyboard closed but the keyboard is still open which will affect the orientation detection
				if(!iLastResizeTime || (iTime - iLastResizeTime > 300)){
					bKeyboardOpen = (iWindowHeightNew < iWindowHeightOld);
				}
				handleResizeChange();
			} else {
				iWindowWidthOld = iWindowWidthNew;
			}
			iLastResizeTime = iTime;
			iWindowHeightOld = iWindowHeightNew;
			
			if(iClearFlagTimeout){
				window.clearTimeout(iClearFlagTimeout);
				iClearFlagTimeout = null;
			}
			//Some Android build-in browser fires a resize event after the viewport is applied.
			//This resize event has to be dismissed otherwise when the next orientationchange event happens,
			//a UI5 resize event will be fired with the wrong window size.
			iClearFlagTimeout = window.setTimeout(clearFlags, 1200);
		} else if (evt.type == "orientationchange") {
			bOrientationchange = true;
		}

		if (iOrientationTimeout) {
			clearTimeout(iOrientationTimeout);
			iOrientationTimeout = null;
		}
		iOrientationTimeout = window.setTimeout(handleMobileTimeout, 50);
	};
	
	function handleMobileTimeout() {
		if (bOrientationchange && bResize) {
			handleOrientationChange();
			handleResizeChange();
			bOrientationchange = false;
			bResize = false;
			if(iClearFlagTimeout){
				window.clearTimeout(iClearFlagTimeout);
				iClearFlagTimeout = null;
			}
		}
		iOrientationTimeout = null;
	};
	
	function clearFlags(){
		bOrientationchange = false;
		bResize = false;
		iClearFlagTimeout = null;
	};
	
//******** System Detection ********

	/** 
	 * Contains information about the system.
	 * 
	 * @namespace
	 * @name sap.ui.Device.system
	 * @public
	 */
	/**
	 * Enumeration containing the names of known types of the devices.
	 * 
	 * @namespace
	 * @name sap.ui.Device.system.SYSTEMTYPE
	 * @public
	 */
	/**
	 * Flag indicating if the device is a tablet.
	 * 
	 * @name sap.ui.Device.system#tablet
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating if the device is a phone.
	 * 
	 * @name sap.ui.Device.system#phone
	 * @type boolean
	 * @public
	 */
	/**
	 * Flag indicating if the device is a desktop.
	 * 
	 * @name sap.ui.Device.system#desktop
	 * @type boolean
	 * @public
	 */

	var SYSTEMTYPE = {
			"TABLET" : "tablet",
			"PHONE" : "phone",
			"DESKTOP" : "desktop"
	};
	
	device.system = {};

	//TODO: Must also be called in the update function (see pending change https://git.wdf.sap.corp:8080/#/c/259290/)
	function getSystem(_simMobileOnDesktop) {
		var t = isTablet();
		
		var s = {};
		s.tablet = (device.support.touch || !!_simMobileOnDesktop) && t;
		s.phone = (device.support.touch || !!_simMobileOnDesktop) && !t;
		s.desktop = !s.tablet && !s.phone;
		s.SYSTEMTYPE = SYSTEMTYPE;
		
		for(var type in SYSTEMTYPE){
			changeRootCSSClass("sap-"+SYSTEMTYPE[type], !s[SYSTEMTYPE[type]]);
		}
		return s;
	};

	function isTablet() {
		var android_phone = (/(?=android)(?=.*mobile)/i.test(navigator.userAgent));
		if (device.os.name === device.os.OS.IOS) {
			return /ipad/i.test(navigator.userAgent);
		} else {
			if(device.support.touch) {
				//in real mobile device
				var densityFactor = window.devicePixelRatio ? window.devicePixelRatio : 1; // may be undefined in Windows Phone devices
				if ((device.os.name === device.os.OS.ANDROID) && device.browser.webkit && (device.browser.webkitVersion > 537.10)) {
					// On Android sometimes window.screen.width returns the logical CSS pixels, sometimes the physical device pixels;
					// Tests on multiple devices suggest this depends on the Webkit version.
					// The Webkit patch which changed the behavior was done here: https://bugs.webkit.org/show_bug.cgi?id=106460
					// Chrome 27 with Webkit 537.36 returns the logical pixels,
					// Chrome 18 with Webkit 535.19 returns the physical pixels.
					// The BlackBerry 10 browser with Webkit 537.10+ returns the physical pixels.
					// So it appears like somewhere above Webkit 537.10 we do not hve to divide by the devicePixelRatio anymore.
					densityFactor = 1;
				}

				//this is how android distinguishes between tablet and phone
				//http://android-developers.blogspot.de/2011/07/new-tools-for-managing-screen-sizes.html
				var bTablet = (Math.min(window.screen.width / densityFactor, window.screen.height / densityFactor) >= 600);
				
				// special workaround for Nexus 7 where the window.screen.width is 600px or 601px in portrait mode (=> tablet) 
				// but window.screen.height 552px in landscape mode (=> phone), because the browser UI takes some space on top.
				// So the detected device type depends on the orientation :-(
				// actually this is a Chrome bug, as "width"/"height" should return the entire screen's dimensions and
				// "availWidth"/"availHeight" should return the size available after subtracting the browser UI
				if (isLandscape() 
						&& (window.screen.height === 552 || window.screen.height === 553) // old/new Nexus 7  
						&& (/Nexus 7/i.test(navigator.userAgent))) {
					bTablet = true;
				}
				
				return bTablet;

			} else {
				//in desktop browser
				var android_tablet = (device.os.name === device.os.OS.ANDROID) && !android_phone;
				return android_tablet;
			}
		}
	};
	
	function setSystem(_simMobileOnDesktop) {
		device.system = getSystem(_simMobileOnDesktop);
		if (device.system.tablet || device.system.phone) {
			device.browser.mobile = true;
		}
	}
	setSystem();

//******** Update browser settings for test purposes ********

	device._update = function(_simMobileOnDesktop) {
		ua = navigator.userAgent;
		logger.log(WARNING, "Device API values manipulated: NOT PRODUCTIVE FEATURE!!! This should be only used for test purposes. Only use if you know what you are doing.");
		setBrowser();
		setOS();
		setSystem(_simMobileOnDesktop);
	}

//********************************************************
	
	setResizeInfo(device.resize);
	setOrientationInfo(device.orientation);

	//Add API to global namespace
	window.sap.ui.Device = device;

	// Add handler for orientationchange and resize after initialization of Device API (IE8 fires onresize synchronously)
	if (device.support.touch && device.support.orientation) {
		//logic for mobile devices which support orientationchange (like ios, android, blackberry)
		window.addEventListener("resize", handleMobileOrientationResizeChange, false);
		window.addEventListener("orientationchange", handleMobileOrientationResizeChange, false);
	} else {
		if (window.addEventListener) {
			//most desktop browsers and windows phone/tablet which not support orientationchange
			window.addEventListener("resize", handleOrientationResizeChange, false);
		} else {
			//IE8
			window.attachEvent("onresize", handleOrientationResizeChange);
		}
	}

	//Always initialize the default media range set
	device.media.initRangeSet();

  // define module if API is available
	if(window.jQuery && jQuery.sap && jQuery.sap.define){
		jQuery.sap.define("sap/ui/Device", [], function() { return device; });
	}

}());

/*!
 * URI.js - Mutating URLs
 * IPv6 Support
 *
 * Version: 1.11.2
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.com/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */
(function (root, factory) {
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (typeof exports === 'object') {
        // Node
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else {
        // Browser globals (root is window)
        root.IPv6 = factory(root);
    }
}(this, function (root) {
"use strict";

/*
var _in = "fe80:0000:0000:0000:0204:61ff:fe9d:f156";
var _out = IPv6.best(_in);
var _expected = "fe80::204:61ff:fe9d:f156";

console.log(_in, _out, _expected, _out === _expected);
*/

// save current IPv6 variable, if any
var _IPv6 = root && root.IPv6;

function best(address) {
    // based on:
    // Javascript to test an IPv6 address for proper format, and to
    // present the "best text representation" according to IETF Draft RFC at
    // http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04
    // 8 Feb 2010 Rich Brown, Dartware, LLC
    // Please feel free to use this code as long as you provide a link to
    // http://www.intermapper.com
    // http://intermapper.com/support/tools/IPV6-Validator.aspx
    // http://download.dartware.com/thirdparty/ipv6validator.js

    var _address = address.toLowerCase();
    var segments = _address.split(':');
    var length = segments.length;
    var total = 8;

    // trim colons (:: or ::a:b:c… or …a:b:c::)
    if (segments[0] === '' && segments[1] === '' && segments[2] === '') {
        // must have been ::
        // remove first two items
        segments.shift();
        segments.shift();
    } else if (segments[0] === '' && segments[1] === '') {
        // must have been ::xxxx
        // remove the first item
        segments.shift();
    } else if (segments[length - 1] === '' && segments[length - 2] === '') {
        // must have been xxxx::
        segments.pop();
    }

    length = segments.length;

    // adjust total segments for IPv4 trailer
    if (segments[length - 1].indexOf('.') !== -1) {
        // found a "." which means IPv4
        total = 7;
    }

    // fill empty segments them with "0000"
    var pos;
    for (pos = 0; pos < length; pos++) {
        if (segments[pos] === '') {
            break;
        }
    }

    if (pos < total) {
        segments.splice(pos, 1, '0000');
        while (segments.length < total) {
            segments.splice(pos, 0, '0000');
        }

        length = segments.length;
    }

    // strip leading zeros
    var _segments;
    for (var i = 0; i < total; i++) {
        _segments = segments[i].split("");
        for (var j = 0; j < 3 ; j++) {
            if (_segments[0] === '0' && _segments.length > 1) {
                _segments.splice(0,1);
            } else {
                break;
            }
        }

        segments[i] = _segments.join("");
    }

    // find longest sequence of zeroes and coalesce them into one segment
    var best = -1;
    var _best = 0;
    var _current = 0;
    var current = -1;
    var inzeroes = false;
    // i; already declared

    for (i = 0; i < total; i++) {
        if (inzeroes) {
            if (segments[i] === '0') {
                _current += 1;
            } else {
                inzeroes = false;
                if (_current > _best) {
                    best = current;
                    _best = _current;
                }
            }
        } else {
            if (segments[i] == '0') {
                inzeroes = true;
                current = i;
                _current = 1;
            }
        }
    }

    if (_current > _best) {
        best = current;
        _best = _current;
    }

    if (_best > 1) {
        segments.splice(best, _best, "");
    }

    length = segments.length;

    // assemble remaining segments
    var result = '';
    if (segments[0] === '')  {
        beststr = ":";
    }

    for (i = 0; i < length; i++) {
        result += segments[i];
        if (i === length - 1) {
            break;
        }

        result += ':';
    }

    if (segments[length - 1] === '') {
        result += ":";
    }

    return result;
};

function noConflict(){
    if (root.IPv6 === this) {
        root.IPv6 = _IPv6;
    }
    
    return this;
};

return {
    best: best,
    noConflict: noConflict
};
}));
/*!
 * URI.js - Mutating URLs
 * Second Level Domain (SLD) Support
 *
 * Version: 1.11.2
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.com/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */

(function (root, factory) {
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (typeof exports === 'object') {
        // Node
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else {
        // Browser globals (root is window)
        root.SecondLevelDomains = factory(root);
    }
}(this, function (root) {
"use strict";

// save current SecondLevelDomains variable, if any
var _SecondLevelDomains = root && root.SecondLevelDomains;

var hasOwn = Object.prototype.hasOwnProperty;
var SLD = {
    // list of known Second Level Domains
    // converted list of SLDs from https://github.com/gavingmiller/second-level-domains
    // ----
    // publicsuffix.org is more current and actually used by a couple of browsers internally.
    // downside is it also contains domains like "dyndns.org" - which is fine for the security
    // issues browser have to deal with (SOP for cookies, etc) - but is way overboard for URI.js
    // ----
    list: {
        "ac":"com|gov|mil|net|org",
        "ae":"ac|co|gov|mil|name|net|org|pro|sch",
        "af":"com|edu|gov|net|org",
        "al":"com|edu|gov|mil|net|org",
        "ao":"co|ed|gv|it|og|pb",
        "ar":"com|edu|gob|gov|int|mil|net|org|tur",
        "at":"ac|co|gv|or",
        "au":"asn|com|csiro|edu|gov|id|net|org",
        "ba":"co|com|edu|gov|mil|net|org|rs|unbi|unmo|unsa|untz|unze",
        "bb":"biz|co|com|edu|gov|info|net|org|store|tv",
        "bh":"biz|cc|com|edu|gov|info|net|org",
        "bn":"com|edu|gov|net|org",
        "bo":"com|edu|gob|gov|int|mil|net|org|tv",
        "br":"adm|adv|agr|am|arq|art|ato|b|bio|blog|bmd|cim|cng|cnt|com|coop|ecn|edu|eng|esp|etc|eti|far|flog|fm|fnd|fot|fst|g12|ggf|gov|imb|ind|inf|jor|jus|lel|mat|med|mil|mus|net|nom|not|ntr|odo|org|ppg|pro|psc|psi|qsl|rec|slg|srv|tmp|trd|tur|tv|vet|vlog|wiki|zlg",
        "bs":"com|edu|gov|net|org",
        "bz":"du|et|om|ov|rg",
        "ca":"ab|bc|mb|nb|nf|nl|ns|nt|nu|on|pe|qc|sk|yk",
        "ck":"biz|co|edu|gen|gov|info|net|org",
        "cn":"ac|ah|bj|com|cq|edu|fj|gd|gov|gs|gx|gz|ha|hb|he|hi|hl|hn|jl|js|jx|ln|mil|net|nm|nx|org|qh|sc|sd|sh|sn|sx|tj|tw|xj|xz|yn|zj",
        "co":"com|edu|gov|mil|net|nom|org",
        "cr":"ac|c|co|ed|fi|go|or|sa",
        "cy":"ac|biz|com|ekloges|gov|ltd|name|net|org|parliament|press|pro|tm",
        "do":"art|com|edu|gob|gov|mil|net|org|sld|web",
        "dz":"art|asso|com|edu|gov|net|org|pol",
        "ec":"com|edu|fin|gov|info|med|mil|net|org|pro",
        "eg":"com|edu|eun|gov|mil|name|net|org|sci",
        "er":"com|edu|gov|ind|mil|net|org|rochest|w",
        "es":"com|edu|gob|nom|org",
        "et":"biz|com|edu|gov|info|name|net|org",
        "fj":"ac|biz|com|info|mil|name|net|org|pro",
        "fk":"ac|co|gov|net|nom|org",
        "fr":"asso|com|f|gouv|nom|prd|presse|tm",
        "gg":"co|net|org",
        "gh":"com|edu|gov|mil|org",
        "gn":"ac|com|gov|net|org",
        "gr":"com|edu|gov|mil|net|org",
        "gt":"com|edu|gob|ind|mil|net|org",
        "gu":"com|edu|gov|net|org",
        "hk":"com|edu|gov|idv|net|org",
        "id":"ac|co|go|mil|net|or|sch|web",
        "il":"ac|co|gov|idf|k12|muni|net|org",
        "in":"ac|co|edu|ernet|firm|gen|gov|i|ind|mil|net|nic|org|res",
        "iq":"com|edu|gov|i|mil|net|org",
        "ir":"ac|co|dnssec|gov|i|id|net|org|sch",
        "it":"edu|gov",
        "je":"co|net|org",
        "jo":"com|edu|gov|mil|name|net|org|sch",
        "jp":"ac|ad|co|ed|go|gr|lg|ne|or",
        "ke":"ac|co|go|info|me|mobi|ne|or|sc",
        "kh":"com|edu|gov|mil|net|org|per",
        "ki":"biz|com|de|edu|gov|info|mob|net|org|tel",
        "km":"asso|com|coop|edu|gouv|k|medecin|mil|nom|notaires|pharmaciens|presse|tm|veterinaire",
        "kn":"edu|gov|net|org",
        "kr":"ac|busan|chungbuk|chungnam|co|daegu|daejeon|es|gangwon|go|gwangju|gyeongbuk|gyeonggi|gyeongnam|hs|incheon|jeju|jeonbuk|jeonnam|k|kg|mil|ms|ne|or|pe|re|sc|seoul|ulsan",
        "kw":"com|edu|gov|net|org",
        "ky":"com|edu|gov|net|org",
        "kz":"com|edu|gov|mil|net|org",
        "lb":"com|edu|gov|net|org",
        "lk":"assn|com|edu|gov|grp|hotel|int|ltd|net|ngo|org|sch|soc|web",
        "lr":"com|edu|gov|net|org",
        "lv":"asn|com|conf|edu|gov|id|mil|net|org",
        "ly":"com|edu|gov|id|med|net|org|plc|sch",
        "ma":"ac|co|gov|m|net|org|press",
        "mc":"asso|tm",
        "me":"ac|co|edu|gov|its|net|org|priv",
        "mg":"com|edu|gov|mil|nom|org|prd|tm",
        "mk":"com|edu|gov|inf|name|net|org|pro",
        "ml":"com|edu|gov|net|org|presse",
        "mn":"edu|gov|org",
        "mo":"com|edu|gov|net|org",
        "mt":"com|edu|gov|net|org",
        "mv":"aero|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro",
        "mw":"ac|co|com|coop|edu|gov|int|museum|net|org",
        "mx":"com|edu|gob|net|org",
        "my":"com|edu|gov|mil|name|net|org|sch",
        "nf":"arts|com|firm|info|net|other|per|rec|store|web",
        "ng":"biz|com|edu|gov|mil|mobi|name|net|org|sch",
        "ni":"ac|co|com|edu|gob|mil|net|nom|org",
        "np":"com|edu|gov|mil|net|org",
        "nr":"biz|com|edu|gov|info|net|org",
        "om":"ac|biz|co|com|edu|gov|med|mil|museum|net|org|pro|sch",
        "pe":"com|edu|gob|mil|net|nom|org|sld",
        "ph":"com|edu|gov|i|mil|net|ngo|org",
        "pk":"biz|com|edu|fam|gob|gok|gon|gop|gos|gov|net|org|web",
        "pl":"art|bialystok|biz|com|edu|gda|gdansk|gorzow|gov|info|katowice|krakow|lodz|lublin|mil|net|ngo|olsztyn|org|poznan|pwr|radom|slupsk|szczecin|torun|warszawa|waw|wroc|wroclaw|zgora",
        "pr":"ac|biz|com|edu|est|gov|info|isla|name|net|org|pro|prof",
        "ps":"com|edu|gov|net|org|plo|sec",
        "pw":"belau|co|ed|go|ne|or",
        "ro":"arts|com|firm|info|nom|nt|org|rec|store|tm|www",
        "rs":"ac|co|edu|gov|in|org",
        "sb":"com|edu|gov|net|org",
        "sc":"com|edu|gov|net|org",
        "sh":"co|com|edu|gov|net|nom|org",
        "sl":"com|edu|gov|net|org",
        "st":"co|com|consulado|edu|embaixada|gov|mil|net|org|principe|saotome|store",
        "sv":"com|edu|gob|org|red",
        "sz":"ac|co|org",
        "tr":"av|bbs|bel|biz|com|dr|edu|gen|gov|info|k12|name|net|org|pol|tel|tsk|tv|web",
        "tt":"aero|biz|cat|co|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel",
        "tw":"club|com|ebiz|edu|game|gov|idv|mil|net|org",
        "mu":"ac|co|com|gov|net|or|org",
        "mz":"ac|co|edu|gov|org",
        "na":"co|com",
        "nz":"ac|co|cri|geek|gen|govt|health|iwi|maori|mil|net|org|parliament|school",
        "pa":"abo|ac|com|edu|gob|ing|med|net|nom|org|sld",
        "pt":"com|edu|gov|int|net|nome|org|publ",
        "py":"com|edu|gov|mil|net|org",
        "qa":"com|edu|gov|mil|net|org",
        "re":"asso|com|nom",
        "ru":"ac|adygeya|altai|amur|arkhangelsk|astrakhan|bashkiria|belgorod|bir|bryansk|buryatia|cbg|chel|chelyabinsk|chita|chukotka|chuvashia|com|dagestan|e-burg|edu|gov|grozny|int|irkutsk|ivanovo|izhevsk|jar|joshkar-ola|kalmykia|kaluga|kamchatka|karelia|kazan|kchr|kemerovo|khabarovsk|khakassia|khv|kirov|koenig|komi|kostroma|kranoyarsk|kuban|kurgan|kursk|lipetsk|magadan|mari|mari-el|marine|mil|mordovia|mosreg|msk|murmansk|nalchik|net|nnov|nov|novosibirsk|nsk|omsk|orenburg|org|oryol|penza|perm|pp|pskov|ptz|rnd|ryazan|sakhalin|samara|saratov|simbirsk|smolensk|spb|stavropol|stv|surgut|tambov|tatarstan|tom|tomsk|tsaritsyn|tsk|tula|tuva|tver|tyumen|udm|udmurtia|ulan-ude|vladikavkaz|vladimir|vladivostok|volgograd|vologda|voronezh|vrn|vyatka|yakutia|yamal|yekaterinburg|yuzhno-sakhalinsk",
        "rw":"ac|co|com|edu|gouv|gov|int|mil|net",
        "sa":"com|edu|gov|med|net|org|pub|sch",
        "sd":"com|edu|gov|info|med|net|org|tv",
        "se":"a|ac|b|bd|c|d|e|f|g|h|i|k|l|m|n|o|org|p|parti|pp|press|r|s|t|tm|u|w|x|y|z",
        "sg":"com|edu|gov|idn|net|org|per",
        "sn":"art|com|edu|gouv|org|perso|univ",
        "sy":"com|edu|gov|mil|net|news|org",
        "th":"ac|co|go|in|mi|net|or",
        "tj":"ac|biz|co|com|edu|go|gov|info|int|mil|name|net|nic|org|test|web",
        "tn":"agrinet|com|defense|edunet|ens|fin|gov|ind|info|intl|mincom|nat|net|org|perso|rnrt|rns|rnu|tourism",
        "tz":"ac|co|go|ne|or",
        "ua":"biz|cherkassy|chernigov|chernovtsy|ck|cn|co|com|crimea|cv|dn|dnepropetrovsk|donetsk|dp|edu|gov|if|in|ivano-frankivsk|kh|kharkov|kherson|khmelnitskiy|kiev|kirovograd|km|kr|ks|kv|lg|lugansk|lutsk|lviv|me|mk|net|nikolaev|od|odessa|org|pl|poltava|pp|rovno|rv|sebastopol|sumy|te|ternopil|uzhgorod|vinnica|vn|zaporizhzhe|zhitomir|zp|zt",
        "ug":"ac|co|go|ne|or|org|sc",
        "uk":"ac|bl|british-library|co|cym|gov|govt|icnet|jet|lea|ltd|me|mil|mod|national-library-scotland|nel|net|nhs|nic|nls|org|orgn|parliament|plc|police|sch|scot|soc",
        "us":"dni|fed|isa|kids|nsn",
        "uy":"com|edu|gub|mil|net|org",
        "ve":"co|com|edu|gob|info|mil|net|org|web",
        "vi":"co|com|k12|net|org",
        "vn":"ac|biz|com|edu|gov|health|info|int|name|net|org|pro",
        "ye":"co|com|gov|ltd|me|net|org|plc",
        "yu":"ac|co|edu|gov|org",
        "za":"ac|agric|alt|bourse|city|co|cybernet|db|edu|gov|grondar|iaccess|imt|inca|landesign|law|mil|net|ngo|nis|nom|olivetti|org|pix|school|tm|web",
        "zm":"ac|co|com|edu|gov|net|org|sch"
    },
    // SLD expression for each TLD
    //expressions: {},
    // SLD expression for all TLDs
    has_expression: null,
    is_expression: null,
    // validate domain is a known SLD
    has: function(domain) {
        return !!domain.match(SLD.has_expression);
    },
    is: function(domain) {
        return !!domain.match(SLD.is_expression);
    },
    get: function(domain) {
        var t = domain.match(SLD.has_expression);
        return t && t[1] || null;
    },
    noConflict: function(){
      if (root.SecondLevelDomains === this) {
        root.SecondLevelDomains = _SecondLevelDomains;
      }
      return this;
    },
    init: function() {
        var t = '';
        for (var tld in SLD.list) {
            if (!hasOwn.call(SLD.list, tld)) {
                continue;
            }

            var expression = '(' + SLD.list[tld] + ')\.' + tld;
            //SLD.expressions[tld] = new RegExp('\.' + expression + '$', 'i');
            t += '|(' + expression + ')';
        }

        SLD.has_expression = new RegExp('\\.(' + t.substr(1) + ')$', 'i');
        SLD.is_expression = new RegExp('^(' + t.substr(1) + ')$', 'i');
    }
};

SLD.init();

return SLD;
}));
/*!
 * URI.js - Mutating URLs
 *
 * Version: 1.11.2
 *
 * Author: Rodney Rehm
 * Web: http://medialize.github.com/URI.js/
 *
 * Licensed under
 *   MIT License http://www.opensource.org/licenses/mit-license
 *   GPL v3 http://opensource.org/licenses/GPL-3.0
 *
 */
(function (root, factory) {
    // https://github.com/umdjs/umd/blob/master/returnExports.js
    if (typeof exports === 'object') {
        // Node
        module.exports = factory(require('./punycode'), require('./IPv6'), require('./SecondLevelDomains'));
    } else if (typeof define === 'function' && define.amd ) {
      // AMD. Register as an anonymous module.
      // ##### BEGIN: MODIFIED BY SAP
      // define(['./punycode', './IPv6', './SecondLevelDomains'], factory);
      // we can't support loading URI.js via AMD define. URI.js is packaged with SAPUI5 code 
      // and define() doesn't execute synchronously. So the UI5 code executed after URI.js 
      // fails as it is missing the URI.js code.
      // Instead we use the standard init code and only expose the result via define()
      // The (optional) dependencies are lost or must be loaded in advance
      root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
      define([], function() { return root.URI; });
      // ##### END: MODIFIED BY SAP
    } else {
        // Browser globals (root is window)
        root.URI = factory(root.punycode, root.IPv6, root.SecondLevelDomains, root);
    }
}(this, function (punycode, IPv6, SLD, root) {
"use strict";

// save current URI variable, if any
var _URI = root && root.URI;

function URI(url, base) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof URI)) {
        return new URI(url, base);
    }

    if (url === undefined) {
        if (typeof location !== 'undefined') {
            url = location.href + "";
        } else {
            url = "";
        }
    }

    this.href(url);

    // resolve to base according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#constructor
    if (base !== undefined) {
        return this.absoluteTo(base);
    }

    return this;
};

var p = URI.prototype;
var hasOwn = Object.prototype.hasOwnProperty;

function escapeRegEx(string) {
    // https://github.com/medialize/URI.js/commit/85ac21783c11f8ccab06106dba9735a31a86924d#commitcomment-821963
    return string.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
}

function getType(value) {
    // IE8 doesn't return [Object Undefined] but [Object Object] for undefined value
    if (value === undefined) {
        return 'Undefined';
    }

    return String(Object.prototype.toString.call(value)).slice(8, -1);
}

function isArray(obj) {
    return getType(obj) === "Array";
}

function filterArrayValues(data, value) {
    var lookup = {};
    var i, length;

    if (isArray(value)) {
        for (i = 0, length = value.length; i < length; i++) {
            lookup[value[i]] = true;
        }
    } else {
        lookup[value] = true;
    }

    for (i = 0, length = data.length; i < length; i++) {
        if (lookup[data[i]] !== undefined) {
            data.splice(i, 1);
            length--;
            i--;
        }
    }

    return data;
}

function arrayContains(list, value) {
    var i, length;
    
    // value may be string, number, array, regexp
    if (isArray(value)) {
        // Note: this can be optimized to O(n) (instead of current O(m * n))
        for (i = 0, length = value.length; i < length; i++) {
            if (!arrayContains(list, value[i])) {
                return false;
            }
        }
        
        return true;
    }
    
    var _type = getType(value);
    for (i = 0, length = list.length; i < length; i++) {
        if (_type === 'RegExp') {
            if (typeof list[i] === 'string' && list[i].match(value)) {
                return true;
            }
        } else if (list[i] === value) {
            return true;
        }
    }

    return false;
}

function arraysEqual(one, two) {
    if (!isArray(one) || !isArray(two)) {
        return false;
    }
    
    // arrays can't be equal if they have different amount of content
    if (one.length !== two.length) {
        return false;
    }

    one.sort();
    two.sort();

    for (var i = 0, l = one.length; i < l; i++) {
        if (one[i] !== two[i]) {
            return false;
        }
    }
    
    return true;
}

URI._parts = function() {
    return {
        protocol: null,
        username: null,
        password: null,
        hostname: null,
        urn: null,
        port: null,
        path: null,
        query: null,
        fragment: null,
        // state
        duplicateQueryParameters: URI.duplicateQueryParameters,
        escapeQuerySpace: URI.escapeQuerySpace
    };
};
// state: allow duplicate query parameters (a=1&a=1)
URI.duplicateQueryParameters = false;
// state: replaces + with %20 (space in query strings)
URI.escapeQuerySpace = true;
// static properties
URI.protocol_expression = /^[a-z][a-z0-9-+-]*$/i;
URI.idn_expression = /[^a-z0-9\.-]/i;
URI.punycode_expression = /(xn--)/i;
// well, 333.444.555.666 matches, but it sure ain't no IPv4 - do we care?
URI.ip4_expression = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;
// credits to Rich Brown
// source: http://forums.intermapper.com/viewtopic.php?p=1096#1096
// specification: http://www.ietf.org/rfc/rfc4291.txt
URI.ip6_expression = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/;
// gruber revised expression - http://rodneyrehm.de/t/url-regex.html
URI.find_uri_expression = /\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?«»“”‘’]))/ig;
// http://www.iana.org/assignments/uri-schemes.html
// http://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers#Well-known_ports
URI.defaultPorts = {
    http: "80",
    https: "443",
    ftp: "21",
    gopher: "70",
    ws: "80",
    wss: "443"
};
// allowed hostname characters according to RFC 3986
// ALPHA DIGIT "-" "." "_" "~" "!" "$" "&" "'" "(" ")" "*" "+" "," ";" "=" %encoded
// I've never seen a (non-IDN) hostname other than: ALPHA DIGIT . -
URI.invalid_hostname_characters = /[^a-zA-Z0-9\.-]/;
// map DOM Elements to their URI attribute
URI.domAttributes = {
    'a': 'href',
    'blockquote': 'cite',
    'link': 'href',
    'base': 'href',
    'script': 'src',
    'form': 'action',
    'img': 'src',
    'area': 'href',
    'iframe': 'src',
    'embed': 'src',
    'source': 'src',
    'track': 'src',
    'input': 'src' // but only if type="image"
};
URI.getDomAttribute = function(node) {
    if (!node || !node.nodeName) {
        return undefined;
    }
    
    var nodeName = node.nodeName.toLowerCase();
    // <input> should only expose src for type="image"
    if (nodeName === 'input' && node.type !== 'image') {
        return undefined;
    }
    
    return URI.domAttributes[nodeName];
};

function escapeForDumbFirefox36(value) {
    // https://github.com/medialize/URI.js/issues/91
    return escape(value);
}

// encoding / decoding according to RFC3986
function strictEncodeURIComponent(string) {
    // see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/encodeURIComponent
    return encodeURIComponent(string)
        .replace(/[!'()*]/g, escapeForDumbFirefox36)
        .replace(/\*/g, "%2A");
}
URI.encode = strictEncodeURIComponent;
URI.decode = decodeURIComponent;
URI.iso8859 = function() {
    URI.encode = escape;
    URI.decode = unescape;
};
URI.unicode = function() {
    URI.encode = strictEncodeURIComponent;
    URI.decode = decodeURIComponent;
};
URI.characters = {
    pathname: {
        encode: {
            // RFC3986 2.1: For consistency, URI producers and normalizers should
            // use uppercase hexadecimal digits for all percent-encodings.
            expression: /%(24|26|2B|2C|3B|3D|3A|40)/ig,
            map: {
                // -._~!'()*
                "%24": "$",
                "%26": "&",
                "%2B": "+",
                "%2C": ",",
                "%3B": ";",
                "%3D": "=",
                "%3A": ":",
                "%40": "@"
            }
        },
        decode: {
            expression: /[\/\?#]/g,
            map: {
                "/": "%2F",
                "?": "%3F",
                "#": "%23"
            }
        }
    },
    reserved: {
        encode: {
            // RFC3986 2.1: For consistency, URI producers and normalizers should
            // use uppercase hexadecimal digits for all percent-encodings.
            expression: /%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/ig,
            map: {
                // gen-delims
                "%3A": ":",
                "%2F": "/",
                "%3F": "?",
                "%23": "#",
                "%5B": "[",
                "%5D": "]",
                "%40": "@",
                // sub-delims
                "%21": "!",
                "%24": "$",
                "%26": "&",
                "%27": "'",
                "%28": "(",
                "%29": ")",
                "%2A": "*",
                "%2B": "+",
                "%2C": ",",
                "%3B": ";",
                "%3D": "="
            }
        }
    }
};
URI.encodeQuery = function(string, escapeQuerySpace) {
    var escaped = URI.encode(string + "");
    return escapeQuerySpace ? escaped.replace(/%20/g, '+') : escaped;
};
URI.decodeQuery = function(string, escapeQuerySpace) {
    string += "";
    try {
        return URI.decode(escapeQuerySpace ? string.replace(/\+/g, '%20') : string);
    } catch(e) {
        // we're not going to mess with weird encodings,
        // give up and return the undecoded original string
        // see https://github.com/medialize/URI.js/issues/87
        // see https://github.com/medialize/URI.js/issues/92
        return string;
    }
};
URI.recodePath = function(string) {
    var segments = (string + "").split('/');
    for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = URI.encodePathSegment(URI.decode(segments[i]));
    }

    return segments.join('/');
};
URI.decodePath = function(string) {
    var segments = (string + "").split('/');
    for (var i = 0, length = segments.length; i < length; i++) {
        segments[i] = URI.decodePathSegment(segments[i]);
    }

    return segments.join('/');
};
// generate encode/decode path functions
var _parts = {'encode':'encode', 'decode':'decode'};
var _part;
var generateAccessor = function(_group, _part) {
    return function(string) {
        return URI[_part](string + "").replace(URI.characters[_group][_part].expression, function(c) {
            return URI.characters[_group][_part].map[c];
        });
    };
};

for (_part in _parts) {
    URI[_part + "PathSegment"] = generateAccessor("pathname", _parts[_part]);
}

URI.encodeReserved = generateAccessor("reserved", "encode");

URI.parse = function(string, parts) {
    var pos;
    if (!parts) {
        parts = {};
    }
    // [protocol"://"[username[":"password]"@"]hostname[":"port]"/"?][path]["?"querystring]["#"fragment]

    // extract fragment
    pos = string.indexOf('#');
    if (pos > -1) {
        // escaping?
        parts.fragment = string.substring(pos + 1) || null;
        string = string.substring(0, pos);
    }

    // extract query
    pos = string.indexOf('?');
    if (pos > -1) {
        // escaping?
        parts.query = string.substring(pos + 1) || null;
        string = string.substring(0, pos);
    }

    // extract protocol
    if (string.substring(0, 2) === '//') {
        // relative-scheme
        parts.protocol = null;
        string = string.substring(2);
        // extract "user:pass@host:port"
        string = URI.parseAuthority(string, parts);
    } else {
        pos = string.indexOf(':');
        if (pos > -1) {
            parts.protocol = string.substring(0, pos) || null;
            if (parts.protocol && !parts.protocol.match(URI.protocol_expression)) {
                // : may be within the path
                parts.protocol = undefined;
            } else if (parts.protocol === 'file') {
                // the file scheme: does not contain an authority
                string = string.substring(pos + 3);
            } else if (string.substring(pos + 1, pos + 3) === '//') {
                string = string.substring(pos + 3);

                // extract "user:pass@host:port"
                string = URI.parseAuthority(string, parts);
            } else {
                string = string.substring(pos + 1);
                parts.urn = true;
            }
        }
    }

    // what's left must be the path
    parts.path = string;

    // and we're done
    return parts;
};
URI.parseHost = function(string, parts) {
    // extract host:port
    var pos = string.indexOf('/');
    var bracketPos;
    var t;

    if (pos === -1) {
        pos = string.length;
    }

    if (string.charAt(0) === "[") {
        // IPv6 host - http://tools.ietf.org/html/draft-ietf-6man-text-addr-representation-04#section-6
        // I claim most client software breaks on IPv6 anyways. To simplify things, URI only accepts
        // IPv6+port in the format [2001:db8::1]:80 (for the time being)
        bracketPos = string.indexOf(']');
        parts.hostname = string.substring(1, bracketPos) || null;
        parts.port = string.substring(bracketPos+2, pos) || null;
    } else if (string.indexOf(':') !== string.lastIndexOf(':')) {
        // IPv6 host contains multiple colons - but no port
        // this notation is actually not allowed by RFC 3986, but we're a liberal parser
        parts.hostname = string.substring(0, pos) || null;
        parts.port = null;
    } else {
        t = string.substring(0, pos).split(':');
        parts.hostname = t[0] || null;
        parts.port = t[1] || null;
    }

    if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
        pos++;
        string = "/" + string;
    }

    return string.substring(pos) || '/';
};
URI.parseAuthority = function(string, parts) {
    string = URI.parseUserinfo(string, parts);
    return URI.parseHost(string, parts);
};
URI.parseUserinfo = function(string, parts) {
    // extract username:password
    var firstSlash = string.indexOf('/');
    var pos = firstSlash > -1 
        ? string.lastIndexOf('@', firstSlash) 
        : string.indexOf('@');
    var t;

    // authority@ must come before /path
    if (pos > -1 && (firstSlash === -1 || pos < firstSlash)) {
        t = string.substring(0, pos).split(':');
        parts.username = t[0] ? URI.decode(t[0]) : null;
        t.shift();
        parts.password = t[0] ? URI.decode(t.join(':')) : null;
        string = string.substring(pos + 1);
    } else {
        parts.username = null;
        parts.password = null;
    }

    return string;
};
URI.parseQuery = function(string, escapeQuerySpace) {
    if (!string) {
        return {};
    }

    // throw out the funky business - "?"[name"="value"&"]+
    string = string.replace(/&+/g, '&').replace(/^\?*&*|&+$/g, '');

    if (!string) {
        return {};
    }

    var items = {};
    var splits = string.split('&');
    var length = splits.length;
    var v, name, value;

    for (var i = 0; i < length; i++) {
        v = splits[i].split('=');
        name = URI.decodeQuery(v.shift(), escapeQuerySpace);
        // no "=" is null according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#collect-url-parameters
        value = v.length ? URI.decodeQuery(v.join('='), escapeQuerySpace) : null;

        if (items[name]) {
            if (typeof items[name] === "string") {
                items[name] = [items[name]];
            }

            items[name].push(value);
        } else {
            items[name] = value;
        }
    }

    return items;
};

URI.build = function(parts) {
    var t = "";

    if (parts.protocol) {
        t += parts.protocol + ":";
    }

    if (!parts.urn && (t || parts.hostname)) {
        t += '//';
    }

    t += (URI.buildAuthority(parts) || '');

    if (typeof parts.path === "string") {
        if (parts.path.charAt(0) !== '/' && typeof parts.hostname === "string") {
            t += '/';
        }

        t += parts.path;
    }

    if (typeof parts.query === "string" && parts.query) {
        t += '?' + parts.query;
    }

    if (typeof parts.fragment === "string" && parts.fragment) {
        t += '#' + parts.fragment;
    }
    return t;
};
URI.buildHost = function(parts) {
    var t = "";

    if (!parts.hostname) {
        return "";
    } else if (URI.ip6_expression.test(parts.hostname)) {
        if (parts.port) {
            t += "[" + parts.hostname + "]:" + parts.port;
        } else {
            // don't know if we should always wrap IPv6 in []
            // the RFC explicitly says SHOULD, not MUST.
            t += parts.hostname;
        }
    } else {
        t += parts.hostname;
        if (parts.port) {
            t += ':' + parts.port;
        }
    }

    return t;
};
URI.buildAuthority = function(parts) {
    return URI.buildUserinfo(parts) + URI.buildHost(parts);
};
URI.buildUserinfo = function(parts) {
    var t = "";

    if (parts.username) {
        t += URI.encode(parts.username);

        if (parts.password) {
            t += ':' + URI.encode(parts.password);
        }

        t += "@";
    }

    return t;
};
URI.buildQuery = function(data, duplicateQueryParameters, escapeQuerySpace) {
    // according to http://tools.ietf.org/html/rfc3986 or http://labs.apache.org/webarch/uri/rfc/rfc3986.html
    // being »-._~!$&'()*+,;=:@/?« %HEX and alnum are allowed
    // the RFC explicitly states ?/foo being a valid use case, no mention of parameter syntax!
    // URI.js treats the query string as being application/x-www-form-urlencoded
    // see http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type

    var t = "";
    var unique, key, i, length;
    for (key in data) {
        if (hasOwn.call(data, key) && key) {
            if (isArray(data[key])) {
                unique = {};
                for (i = 0, length = data[key].length; i < length; i++) {
                    if (data[key][i] !== undefined && unique[data[key][i] + ""] === undefined) {
                        t += "&" + URI.buildQueryParameter(key, data[key][i], escapeQuerySpace);
                        if (duplicateQueryParameters !== true) {
                            unique[data[key][i] + ""] = true;
                        }
                    }
                }
            } else if (data[key] !== undefined) {
                t += '&' + URI.buildQueryParameter(key, data[key], escapeQuerySpace);
            }
        }
    }

    return t.substring(1);
};
URI.buildQueryParameter = function(name, value, escapeQuerySpace) {
    // http://www.w3.org/TR/REC-html40/interact/forms.html#form-content-type -- application/x-www-form-urlencoded
    // don't append "=" for null values, according to http://dvcs.w3.org/hg/url/raw-file/tip/Overview.html#url-parameter-serialization
    return URI.encodeQuery(name, escapeQuerySpace) + (value !== null ? "=" + URI.encodeQuery(value, escapeQuerySpace) : "");
};

URI.addQuery = function(data, name, value) {
    if (typeof name === "object") {
        for (var key in name) {
            if (hasOwn.call(name, key)) {
                URI.addQuery(data, key, name[key]);
            }
        }
    } else if (typeof name === "string") {
        if (data[name] === undefined) {
            data[name] = value;
            return;
        } else if (typeof data[name] === "string") {
            data[name] = [data[name]];
        }

        if (!isArray(value)) {
            value = [value];
        }

        data[name] = data[name].concat(value);
    } else {
        throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
    }
};
URI.removeQuery = function(data, name, value) {
    var i, length, key;
    
    if (isArray(name)) {
        for (i = 0, length = name.length; i < length; i++) {
            data[name[i]] = undefined;
        }
    } else if (typeof name === "object") {
        for (key in name) {
            if (hasOwn.call(name, key)) {
                URI.removeQuery(data, key, name[key]);
            }
        }
    } else if (typeof name === "string") {
        if (value !== undefined) {
            if (data[name] === value) {
                data[name] = undefined;
            } else if (isArray(data[name])) {
                data[name] = filterArrayValues(data[name], value);
            }
        } else {
            data[name] = undefined;
        }
    } else {
        throw new TypeError("URI.addQuery() accepts an object, string as the first parameter");
    }
};
URI.hasQuery = function(data, name, value, withinArray) {
    if (typeof name === "object") {
        for (var key in name) {
            if (hasOwn.call(name, key)) {
                if (!URI.hasQuery(data, key, name[key])) {
                    return false;
                }
            }
        }
        
        return true;
    } else if (typeof name !== "string") {
        throw new TypeError("URI.hasQuery() accepts an object, string as the name parameter");
    }

    switch (getType(value)) {
        case 'Undefined':
            // true if exists (but may be empty)
            return name in data; // data[name] !== undefined;

        case 'Boolean':
            // true if exists and non-empty
            var _booly = Boolean(isArray(data[name]) ? data[name].length : data[name]);
            return value === _booly;

        case 'Function':
            // allow complex comparison
            return !!value(data[name], name, data);

        case 'Array':
            if (!isArray(data[name])) {
                return false;
            }

            var op = withinArray ? arrayContains : arraysEqual;
            return op(data[name], value);

        case 'RegExp':
            if (!isArray(data[name])) {
                return Boolean(data[name] && data[name].match(value));
            }

            if (!withinArray) {
                return false;
            }

            return arrayContains(data[name], value);

        case 'Number':
            value = String(value);
            // omit break;
        case 'String':
            if (!isArray(data[name])) {
                return data[name] === value;
            }

            if (!withinArray) {
                return false;
            }

            return arrayContains(data[name], value);

        default:
            throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter");
    }
};


URI.commonPath = function(one, two) {
    var length = Math.min(one.length, two.length);
    var pos;

    // find first non-matching character
    for (pos = 0; pos < length; pos++) {
        if (one.charAt(pos) !== two.charAt(pos)) {
            pos--;
            break;
        }
    }

    if (pos < 1) {
        return one.charAt(0) === two.charAt(0) && one.charAt(0) === '/' ? '/' : '';
    }
    
    // revert to last /
    if (one.charAt(pos) !== '/' || two.charAt(pos) !== '/') {
        pos = one.substring(0, pos).lastIndexOf('/');
    }

    return one.substring(0, pos + 1);
};

URI.withinString = function(string, callback) {
    // expression used is "gruber revised" (@gruber v2) determined to be the best solution in
    // a regex sprint we did a couple of ages ago at
    // * http://mathiasbynens.be/demo/url-regex
    // * http://rodneyrehm.de/t/url-regex.html

    return string.replace(URI.find_uri_expression, callback);
};

URI.ensureValidHostname = function(v) {
    // Theoretically URIs allow percent-encoding in Hostnames (according to RFC 3986)
    // they are not part of DNS and therefore ignored by URI.js

    if (v.match(URI.invalid_hostname_characters)) {
        // test punycode
        if (!punycode) {
            throw new TypeError("Hostname '" + v + "' contains characters other than [A-Z0-9.-] and Punycode.js is not available");
        }

        if (punycode.toASCII(v).match(URI.invalid_hostname_characters)) {
            throw new TypeError("Hostname '" + v + "' contains characters other than [A-Z0-9.-]");
        }
    }
};

// noConflict
URI.noConflict = function(removeAll) {
    if (removeAll) {
        var unconflicted = {
            URI: this.noConflict()
        };

        if (URITemplate && typeof URITemplate.noConflict == "function") {
            unconflicted.URITemplate = URITemplate.noConflict();
        }

        if (IPv6 && typeof IPv6.noConflict == "function") {
            unconflicted.IPv6 = IPv6.noConflict();
        }

        if (SecondLevelDomains && typeof SecondLevelDomains.noConflict == "function") {
            unconflicted.SecondLevelDomains = SecondLevelDomains.noConflict();
        }

        return unconflicted;
    } else if (root.URI === this) {
        root.URI = _URI;
    }

    return this;
};

p.build = function(deferBuild) {
    if (deferBuild === true) {
        this._deferred_build = true;
    } else if (deferBuild === undefined || this._deferred_build) {
        this._string = URI.build(this._parts);
        this._deferred_build = false;
    }

    return this;
};

p.clone = function() {
    return new URI(this);
};

p.valueOf = p.toString = function() {
    return this.build(false)._string;
};

// generate simple accessors
_parts = {protocol: 'protocol', username: 'username', password: 'password', hostname: 'hostname',  port: 'port'};
generateAccessor = function(_part){
    return function(v, build) {
        if (v === undefined) {
            return this._parts[_part] || "";
        } else {
            this._parts[_part] = v || null;
            this.build(!build);
            return this;
        }
    };
};

for (_part in _parts) {                                                                                                                                                                                        
    p[_part] = generateAccessor(_parts[_part]);
}

// generate accessors with optionally prefixed input
_parts = {query: '?', fragment: '#'};
generateAccessor = function(_part, _key){
    return function(v, build) {
        if (v === undefined) {
            return this._parts[_part] || "";
        } else {
            if (v !== null) {
                v = v + "";
                if (v.charAt(0) === _key) {
                    v = v.substring(1);
                }
            }

            this._parts[_part] = v;
            this.build(!build);
            return this;
        }
    };
};

for (_part in _parts) {
    p[_part] = generateAccessor(_part, _parts[_part]);
}

// generate accessors with prefixed output
_parts = {search: ['?', 'query'], hash: ['#', 'fragment']};
generateAccessor = function(_part, _key){
    return function(v, build) {
        var t = this[_part](v, build);
        return typeof t === "string" && t.length ? (_key + t) : t;
    };
};

for (_part in _parts) {
    p[_part] = generateAccessor(_parts[_part][1], _parts[_part][0]);
}

p.pathname = function(v, build) {
    if (v === undefined || v === true) {
        var res = this._parts.path || (this._parts.hostname ? '/' : '');
        return v ? URI.decodePath(res) : res;
    } else {
        this._parts.path = v ? URI.recodePath(v) : "/";
        this.build(!build);
        return this;
    }
};
p.path = p.pathname;
p.href = function(href, build) {
    var key;
    
    if (href === undefined) {
        return this.toString();
    }

    this._string = "";
    this._parts = URI._parts();

    var _URI = href instanceof URI;
    var _object = typeof href === "object" && (href.hostname || href.path || href.pathname);
    if (href.nodeName) {
        var attribute = URI.getDomAttribute(href);
        href = href[attribute] || "";
        _object = false;
    }
    
    // window.location is reported to be an object, but it's not the sort
    // of object we're looking for: 
    // * location.protocol ends with a colon
    // * location.query != object.search
    // * location.hash != object.fragment
    // simply serializing the unknown object should do the trick 
    // (for location, not for everything...)
    if (!_URI && _object && href.pathname !== undefined) {
        href = href.toString();
    }

    if (typeof href === "string") {
        this._parts = URI.parse(href, this._parts);
    } else if (_URI || _object) {
        var src = _URI ? href._parts : href;
        for (key in src) {
            if (hasOwn.call(this._parts, key)) {
                this._parts[key] = src[key];
            }
        }
    } else {
        throw new TypeError("invalid input");
    }

    this.build(!build);
    return this;
};

// identification accessors
p.is = function(what) {
    var ip = false;
    var ip4 = false;
    var ip6 = false;
    var name = false;
    var sld = false;
    var idn = false;
    var punycode = false;
    var relative = !this._parts.urn;

    if (this._parts.hostname) {
        relative = false;
        ip4 = URI.ip4_expression.test(this._parts.hostname);
        ip6 = URI.ip6_expression.test(this._parts.hostname);
        ip = ip4 || ip6;
        name = !ip;
        sld = name && SLD && SLD.has(this._parts.hostname);
        idn = name && URI.idn_expression.test(this._parts.hostname);
        punycode = name && URI.punycode_expression.test(this._parts.hostname);
    }

    switch (what.toLowerCase()) {
        case 'relative':
            return relative;

        case 'absolute':
            return !relative;

        // hostname identification
        case 'domain':
        case 'name':
            return name;

        case 'sld':
            return sld;

        case 'ip':
            return ip;

        case 'ip4':
        case 'ipv4':
        case 'inet4':
            return ip4;

        case 'ip6':
        case 'ipv6':
        case 'inet6':
            return ip6;

        case 'idn':
            return idn;

        case 'url':
            return !this._parts.urn;

        case 'urn':
            return !!this._parts.urn;

        case 'punycode':
            return punycode;
    }

    return null;
};

// component specific input validation
var _protocol = p.protocol;
var _port = p.port;
var _hostname = p.hostname;

p.protocol = function(v, build) {
    if (v !== undefined) {
        if (v) {
            // accept trailing ://
            v = v.replace(/:(\/\/)?$/, '');

            if (v.match(/[^a-zA-z0-9\.+-]/)) {
                throw new TypeError("Protocol '" + v + "' contains characters other than [A-Z0-9.+-]");
            }
        }
    }
    return _protocol.call(this, v, build);
};
p.scheme = p.protocol;
p.port = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (v !== undefined) {
        if (v === 0) {
            v = null;
        }

        if (v) {
            v += "";
            if (v.charAt(0) === ":") {
                v = v.substring(1);
            }

            if (v.match(/[^0-9]/)) {
                throw new TypeError("Port '" + v + "' contains characters other than [0-9]");
            }
        }
    }
    return _port.call(this, v, build);
};
p.hostname = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (v !== undefined) {
        var x = {};
        URI.parseHost(v, x);
        v = x.hostname;
    }
    return _hostname.call(this, v, build);
};

// compound accessors
p.host = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (v === undefined) {
        return this._parts.hostname ? URI.buildHost(this._parts) : "";
    } else {
        URI.parseHost(v, this._parts);
        this.build(!build);
        return this;
    }
};
p.authority = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (v === undefined) {
        return this._parts.hostname ? URI.buildAuthority(this._parts) : "";
    } else {
        URI.parseAuthority(v, this._parts);
        this.build(!build);
        return this;
    }
};
p.userinfo = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (v === undefined) {
        if (!this._parts.username) {
            return "";
        }

        var t = URI.buildUserinfo(this._parts);
        return t.substring(0, t.length -1);
    } else {
        if (v[v.length-1] !== '@') {
            v += '@';
        }

        URI.parseUserinfo(v, this._parts);
        this.build(!build);
        return this;
    }
};
p.resource = function(v, build) {
    var parts;
    
    if (v === undefined) {
        return this.path() + this.search() + this.hash();
    }
    
    parts = URI.parse(v);
    this._parts.path = parts.path;
    this._parts.query = parts.query;
    this._parts.fragment = parts.fragment;
    this.build(!build);
    return this;
};

// fraction accessors
p.subdomain = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    // convenience, return "www" from "www.example.org"
    if (v === undefined) {
        if (!this._parts.hostname || this.is('IP')) {
            return "";
        }

        // grab domain and add another segment
        var end = this._parts.hostname.length - this.domain().length - 1;
        return this._parts.hostname.substring(0, end) || "";
    } else {
        var e = this._parts.hostname.length - this.domain().length;
        var sub = this._parts.hostname.substring(0, e);
        var replace = new RegExp('^' + escapeRegEx(sub));

        if (v && v.charAt(v.length - 1) !== '.') {
            v += ".";
        }

        if (v) {
            URI.ensureValidHostname(v);
        }

        this._parts.hostname = this._parts.hostname.replace(replace, v);
        this.build(!build);
        return this;
    }
};
p.domain = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
        build = v;
        v = undefined;
    }

    // convenience, return "example.org" from "www.example.org"
    if (v === undefined) {
        if (!this._parts.hostname || this.is('IP')) {
            return "";
        }

        // if hostname consists of 1 or 2 segments, it must be the domain
        var t = this._parts.hostname.match(/\./g);
        if (t && t.length < 2) {
            return this._parts.hostname;
        }

        // grab tld and add another segment
        var end = this._parts.hostname.length - this.tld(build).length - 1;
        end = this._parts.hostname.lastIndexOf('.', end -1) + 1;
        return this._parts.hostname.substring(end) || "";
    } else {
        if (!v) {
            throw new TypeError("cannot set domain empty");
        }

        URI.ensureValidHostname(v);

        if (!this._parts.hostname || this.is('IP')) {
            this._parts.hostname = v;
        } else {
            var replace = new RegExp(escapeRegEx(this.domain()) + "$");
            this._parts.hostname = this._parts.hostname.replace(replace, v);
        }

        this.build(!build);
        return this;
    }
};
p.tld = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (typeof v === 'boolean') {
        build = v;
        v = undefined;
    }

    // return "org" from "www.example.org"
    if (v === undefined) {
        if (!this._parts.hostname || this.is('IP')) {
            return "";
        }

        var pos = this._parts.hostname.lastIndexOf('.');
        var tld = this._parts.hostname.substring(pos + 1);

        if (build !== true && SLD && SLD.list[tld.toLowerCase()]) {
            return SLD.get(this._parts.hostname) || tld;
        }

        return tld;
    } else {
        var replace;
        
        if (!v) {
            throw new TypeError("cannot set TLD empty");
        } else if (v.match(/[^a-zA-Z0-9-]/)) {
            if (SLD && SLD.is(v)) {
                replace = new RegExp(escapeRegEx(this.tld()) + "$");
                this._parts.hostname = this._parts.hostname.replace(replace, v);
            } else {
                throw new TypeError("TLD '" + v + "' contains characters other than [A-Z0-9]");
            }
        } else if (!this._parts.hostname || this.is('IP')) {
            throw new ReferenceError("cannot set TLD on non-domain host");
        } else {
            replace = new RegExp(escapeRegEx(this.tld()) + "$");
            this._parts.hostname = this._parts.hostname.replace(replace, v);
        }

        this.build(!build);
        return this;
    }
};
p.directory = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
        if (!this._parts.path && !this._parts.hostname) {
            return '';
        }

        if (this._parts.path === '/') {
            return '/';
        }

        var end = this._parts.path.length - this.filename().length - 1;
        var res = this._parts.path.substring(0, end) || (this._parts.hostname ? "/" : "");

        return v ? URI.decodePath(res) : res;

    } else {
        var e = this._parts.path.length - this.filename().length;
        var directory = this._parts.path.substring(0, e);
        var replace = new RegExp('^' + escapeRegEx(directory));

        // fully qualifier directories begin with a slash
        if (!this.is('relative')) {
            if (!v) {
                v = '/';
            }

            if (v.charAt(0) !== '/') {
                v = "/" + v;
            }
        }

        // directories always end with a slash
        if (v && v.charAt(v.length - 1) !== '/') {
            v += '/';
        }

        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);
        this.build(!build);
        return this;
    }
};
p.filename = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
        if (!this._parts.path || this._parts.path === '/') {
            return "";
        }

        var pos = this._parts.path.lastIndexOf('/');
        var res = this._parts.path.substring(pos+1);

        return v ? URI.decodePathSegment(res) : res;
    } else {
        var mutatedDirectory = false;
        
        if (v.charAt(0) === '/') {
            v = v.substring(1);
        }

        if (v.match(/\.?\//)) {
            mutatedDirectory = true;
        }

        var replace = new RegExp(escapeRegEx(this.filename()) + "$");
        v = URI.recodePath(v);
        this._parts.path = this._parts.path.replace(replace, v);

        if (mutatedDirectory) {
            this.normalizePath(build);
        } else {
            this.build(!build);
        }

        return this;
    }
};
p.suffix = function(v, build) {
    if (this._parts.urn) {
        return v === undefined ? '' : this;
    }

    if (v === undefined || v === true) {
        if (!this._parts.path || this._parts.path === '/') {
            return "";
        }

        var filename = this.filename();
        var pos = filename.lastIndexOf('.');
        var s, res;

        if (pos === -1) {
            return "";
        }

        // suffix may only contain alnum characters (yup, I made this up.)
        s = filename.substring(pos+1);
        res = (/^[a-z0-9%]+$/i).test(s) ? s : "";
        return v ? URI.decodePathSegment(res) : res;
    } else {
        if (v.charAt(0) === '.') {
            v = v.substring(1);
        }

        var suffix = this.suffix();
        var replace;

        if (!suffix) {
            if (!v) {
                return this;
            }

            this._parts.path += '.' + URI.recodePath(v);
        } else if (!v) {
            replace = new RegExp(escapeRegEx("." + suffix) + "$");
        } else {
            replace = new RegExp(escapeRegEx(suffix) + "$");
        }

        if (replace) {
            v = URI.recodePath(v);
            this._parts.path = this._parts.path.replace(replace, v);
        }

        this.build(!build);
        return this;
    }
};
p.segment = function(segment, v, build) {
    var separator = this._parts.urn ? ':' : '/';
    var path = this.path();
    var absolute = path.substring(0, 1) === '/';
    var segments = path.split(separator);

    if (segment !== undefined && typeof segment !== 'number') {
        build = v;
        v = segment;
        segment = undefined;
    }

    if (segment !== undefined && typeof segment !== 'number') {
        throw new Error("Bad segment '" + segment + "', must be 0-based integer");
    }

    if (absolute) {
        segments.shift();
    }

    if (segment < 0) {
        // allow negative indexes to address from the end
        segment = Math.max(segments.length + segment, 0);
    }

    if (v === undefined) {
        return segment === undefined
            ? segments
            : segments[segment];
    } else if (segment === null || segments[segment] === undefined) {
        if (isArray(v)) {
            segments = [];
            // collapse empty elements within array
            for (var i=0, l=v.length; i < l; i++) {
                if (!v[i].length && (!segments.length || !segments[segments.length -1].length)) {
                    continue;
                }
                
                if (segments.length && !segments[segments.length -1].length) {
                    segments.pop();
                }
                
                segments.push(v[i]);
            }
        } else if (v || (typeof v === "string")) {
            if (segments[segments.length -1] === "") {
                // empty trailing elements have to be overwritten
                // to prevent results such as /foo//bar
                segments[segments.length -1] = v;
            } else {
                segments.push(v);
            }
        }
    } else {
        if (v || (typeof v === "string" && v.length)) {
            segments[segment] = v;
        } else {
            segments.splice(segment, 1);
        }
    }

    if (absolute) {
        segments.unshift("");
    }

    return this.path(segments.join(separator), build);
};
p.segmentCoded = function(segment, v, build) {
    var segments, i, l;

    if (typeof segment !== 'number') {
        build = v;
        v = segment;
        segment = undefined;
    }

    if (v === undefined) {
        segments = this.segment(segment, v, build);
        if (!isArray(segments)) {
            segments = segments !== undefined ? URI.decode(segments) : undefined;
        } else {
            for (i = 0, l = segments.length; i < l; i++) {
                segments[i] = URI.decode(segments[i]);
            }
        }

        return segments;
    }

    if (!isArray(v)) {
        v = typeof v === 'string' ? URI.encode(v) : v;
    } else {
        for (i = 0, l = v.length; i < l; i++) {
            v[i] = URI.decode(v[i]);
        }
    }

    return this.segment(segment, v, build);
};

// mutating query string
var q = p.query;
p.query = function(v, build) {
    if (v === true) {
        return URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    } else if (typeof v === "function") {
        var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
        var result = v.call(this, data);
        this._parts.query = URI.buildQuery(result || data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        this.build(!build);
        return this;
    } else if (v !== undefined && typeof v !== "string") {
        this._parts.query = URI.buildQuery(v, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
        this.build(!build);
        return this;
    } else {
        return q.call(this, v, build);
    }
};
p.setQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    
    if (typeof name === "object") {
        for (var key in name) {
            if (hasOwn.call(name, key)) {
                data[key] = name[key];
            }
        }
    } else if (typeof name === "string") {
        data[name] = value !== undefined ? value : null;
    } else {
        throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");
    }
    
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== "string") {
        build = value;
    }

    this.build(!build);
    return this;
};
p.addQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.addQuery(data, name, value === undefined ? null : value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== "string") {
        build = value;
    }

    this.build(!build);
    return this;
};
p.removeQuery = function(name, value, build) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    URI.removeQuery(data, name, value);
    this._parts.query = URI.buildQuery(data, this._parts.duplicateQueryParameters, this._parts.escapeQuerySpace);
    if (typeof name !== "string") {
        build = value;
    }

    this.build(!build);
    return this;
};
p.hasQuery = function(name, value, withinArray) {
    var data = URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace);
    return URI.hasQuery(data, name, value, withinArray);
};
p.setSearch = p.setQuery;
p.addSearch = p.addQuery;
p.removeSearch = p.removeQuery;
p.hasSearch = p.hasQuery;

// sanitizing URLs
p.normalize = function() {
    if (this._parts.urn) {
        return this
            .normalizeProtocol(false)
            .normalizeQuery(false)
            .normalizeFragment(false)
            .build();
    }

    return this
        .normalizeProtocol(false)
        .normalizeHostname(false)
        .normalizePort(false)
        .normalizePath(false)
        .normalizeQuery(false)
        .normalizeFragment(false)
        .build();
};
p.normalizeProtocol = function(build) {
    if (typeof this._parts.protocol === "string") {
        this._parts.protocol = this._parts.protocol.toLowerCase();
        this.build(!build);
    }

    return this;
};
p.normalizeHostname = function(build) {
    if (this._parts.hostname) {
        if (this.is('IDN') && punycode) {
            this._parts.hostname = punycode.toASCII(this._parts.hostname);
        } else if (this.is('IPv6') && IPv6) {
            this._parts.hostname = IPv6.best(this._parts.hostname);
        }

        this._parts.hostname = this._parts.hostname.toLowerCase();
        this.build(!build);
    }

    return this;
};
p.normalizePort = function(build) {
    // remove port of it's the protocol's default
    if (typeof this._parts.protocol === "string" && this._parts.port === URI.defaultPorts[this._parts.protocol]) {
        this._parts.port = null;
        this.build(!build);
    }

    return this;
};
p.normalizePath = function(build) {
    if (this._parts.urn) {
        return this;
    }

    if (!this._parts.path || this._parts.path === '/') {
        return this;
    }

    var _was_relative;
    var _path = this._parts.path;
    var _parent, _pos;

    // handle relative paths
    if (_path.charAt(0) !== '/') {
        _was_relative = true;
        _path = '/' + _path;
    }

    // resolve simples
    _path = _path
        .replace(/(\/(\.\/)+)|(\/\.$)/g, '/')
        .replace(/\/{2,}/g, '/');

    // resolve parents
    while (true) {
        _parent = _path.indexOf('/../');
        if (_parent === -1) {
            // no more ../ to resolve
            break;
        } else if (_parent === 0) {
            // top level cannot be relative...
            _path = _path.substring(3);
            break;
        }

        _pos = _path.substring(0, _parent).lastIndexOf('/');
        if (_pos === -1) {
            _pos = _parent;
        }
        _path = _path.substring(0, _pos) + _path.substring(_parent + 3);
    }

    // revert to relative
    if (_was_relative && this.is('relative')) {
        _path = _path.substring(1);
    }

    _path = URI.recodePath(_path);
    this._parts.path = _path;
    this.build(!build);
    return this;
};
p.normalizePathname = p.normalizePath;
p.normalizeQuery = function(build) {
    if (typeof this._parts.query === "string") {
        if (!this._parts.query.length) {
            this._parts.query = null;
        } else {
            this.query(URI.parseQuery(this._parts.query, this._parts.escapeQuerySpace));
        }

        this.build(!build);
    }

    return this;
};
p.normalizeFragment = function(build) {
    if (!this._parts.fragment) {
        this._parts.fragment = null;
        this.build(!build);
    }

    return this;
};
p.normalizeSearch = p.normalizeQuery;
p.normalizeHash = p.normalizeFragment;

p.iso8859 = function() {
    // expect unicode input, iso8859 output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = escape;
    URI.decode = decodeURIComponent;
    this.normalize();
    URI.encode = e;
    URI.decode = d;
    return this;
};

p.unicode = function() {
    // expect iso8859 input, unicode output
    var e = URI.encode;
    var d = URI.decode;

    URI.encode = strictEncodeURIComponent;
    URI.decode = unescape;
    this.normalize();
    URI.encode = e;
    URI.decode = d;
    return this;
};

p.readable = function() {
    var uri = this.clone();
    // removing username, password, because they shouldn't be displayed according to RFC 3986
    uri.username("").password("").normalize();
    var t = '';
    if (uri._parts.protocol) {
        t += uri._parts.protocol + '://';
    }

    if (uri._parts.hostname) {
        if (uri.is('punycode') && punycode) {
            t += punycode.toUnicode(uri._parts.hostname);
            if (uri._parts.port) {
                t += ":" + uri._parts.port;
            }
        } else {
            t += uri.host();
        }
    }

    if (uri._parts.hostname && uri._parts.path && uri._parts.path.charAt(0) !== '/') {
        t += '/';
    }

    t += uri.path(true);
    if (uri._parts.query) {
        var q = '';
        for (var i = 0, qp = uri._parts.query.split('&'), l = qp.length; i < l; i++) {
            var kv = (qp[i] || "").split('=');
            q += '&' + URI.decodeQuery(kv[0], this._parts.escapeQuerySpace)
                .replace(/&/g, '%26');

            if (kv[1] !== undefined) {
                q += "=" + URI.decodeQuery(kv[1], this._parts.escapeQuerySpace)
                    .replace(/&/g, '%26');
            }
        }
        t += '?' + q.substring(1);
    }

    t += URI.decodeQuery(uri.hash(), true);
    return t;
};

// resolving relative and absolute URLs
p.absoluteTo = function(base) {
    var resolved = this.clone();
    var properties = ['protocol', 'username', 'password', 'hostname', 'port'];
    var basedir, i, p;

    if (this._parts.urn) {
        throw new Error('URNs do not have any generally defined hierarchical components');
    }

    if (!(base instanceof URI)) {
        base = new URI(base);
    }
    
    if (!resolved._parts.protocol) {
        resolved._parts.protocol = base._parts.protocol;
    }
    
    if (this._parts.hostname) {
        return resolved;
    }

    for (i = 0; p = properties[i]; i++) {
        resolved._parts[p] = base._parts[p];
    }
    
    properties = ['query', 'path'];
    for (i = 0; p = properties[i]; i++) {
        if (!resolved._parts[p] && base._parts[p]) {
            resolved._parts[p] = base._parts[p];
        }
    }

    if (resolved.path().charAt(0) !== '/') {
        basedir = base.directory();
        resolved._parts.path = (basedir ? (basedir + '/') : '') + resolved._parts.path;
        resolved.normalizePath();
    }

    resolved.build();
    return resolved;
};
p.relativeTo = function(base) {
    var relative = this.clone().normalize();
    var relativeParts, baseParts, common, relativePath, basePath;

    if (relative._parts.urn) {
        throw new Error('URNs do not have any generally defined hierarchical components');
    }

    base = new URI(base).normalize();
    relativeParts = relative._parts;
    baseParts = base._parts;
    relativePath = relative.path();
    basePath = base.path();

    if (relativePath.charAt(0) !== '/') {
        throw new Error('URI is already relative');
    }

    if (basePath.charAt(0) !== '/') {
        throw new Error('Cannot calculate a URI relative to another relative URI');
    }

    if (relativeParts.protocol === baseParts.protocol) {
        relativeParts.protocol = null;
    }

    if (relativeParts.username !== baseParts.username || relativeParts.password !== baseParts.password) {
        return relative.build();
    }

    if (relativeParts.protocol !== null || relativeParts.username !== null || relativeParts.password !== null) {
        return relative.build();
    }

    if (relativeParts.hostname === baseParts.hostname && relativeParts.port === baseParts.port) {
        relativeParts.hostname = null;
        relativeParts.port = null;
    } else {
        return relative.build();
    }

    if (relativePath === basePath) {
        relativeParts.path = '';
        return relative.build();
    }
    
    // determine common sub path
    common = URI.commonPath(relative.path(), base.path());

    // If the paths have nothing in common, return a relative URL with the absolute path.
    if (!common) {
        return relative.build();
    }

    var parents = baseParts.path
        .substring(common.length)
        .replace(/[^\/]*$/, '')
        .replace(/.*?\//g, '../');

    relativeParts.path = parents + relativeParts.path.substring(common.length);

    return relative.build();
};

// comparing URIs
p.equals = function(uri) {
    var one = this.clone();
    var two = new URI(uri);
    var one_map = {};
    var two_map = {};
    var checked = {};
    var one_query, two_query, key;

    one.normalize();
    two.normalize();

    // exact match
    if (one.toString() === two.toString()) {
        return true;
    }

    // extract query string
    one_query = one.query();
    two_query = two.query();
    one.query("");
    two.query("");

    // definitely not equal if not even non-query parts match
    if (one.toString() !== two.toString()) {
        return false;
    }

    // query parameters have the same length, even if they're permuted
    if (one_query.length !== two_query.length) {
        return false;
    }

    one_map = URI.parseQuery(one_query, this._parts.escapeQuerySpace);
    two_map = URI.parseQuery(two_query, this._parts.escapeQuerySpace);

    for (key in one_map) {
        if (hasOwn.call(one_map, key)) {
            if (!isArray(one_map[key])) {
                if (one_map[key] !== two_map[key]) {
                    return false;
                }
            } else if (!arraysEqual(one_map[key], two_map[key])) {
                return false;
            }

            checked[key] = true;
        }
    }

    for (key in two_map) {
        if (hasOwn.call(two_map, key)) {
            if (!checked[key]) {
                // two contains a parameter not present in one
                return false;
            }
        }
    }

    return true;
};

// state
p.duplicateQueryParameters = function(v) {
    this._parts.duplicateQueryParameters = !!v;
    return this;
};

p.escapeQuerySpace = function(v) {
    this._parts.escapeQuerySpace = !!v;
    return this;
};

return URI;
}));
/*

Copyright (C) 2011 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

// lib/handlebars/browser-prefix.js
var Handlebars = {};

(function(Handlebars, undefined) {
;
// lib/handlebars/base.js

Handlebars.VERSION = "1.0.0";
Handlebars.COMPILER_REVISION = 4;

Handlebars.REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '>= 1.0.0'
};

Handlebars.helpers  = {};
Handlebars.partials = {};

var toString = Object.prototype.toString,
    functionType = '[object Function]',
    objectType = '[object Object]';

Handlebars.registerHelper = function(name, fn, inverse) {
  if (toString.call(name) === objectType) {
    if (inverse || fn) { throw new Handlebars.Exception('Arg not supported with multiple helpers'); }
    Handlebars.Utils.extend(this.helpers, name);
  } else {
    if (inverse) { fn.not = inverse; }
    this.helpers[name] = fn;
  }
};

Handlebars.registerPartial = function(name, str) {
  if (toString.call(name) === objectType) {
    Handlebars.Utils.extend(this.partials,  name);
  } else {
    this.partials[name] = str;
  }
};

Handlebars.registerHelper('helperMissing', function(arg) {
  if(arguments.length === 2) {
    return undefined;
  } else {
    throw new Error("Missing helper: '" + arg + "'");
  }
});

Handlebars.registerHelper('blockHelperMissing', function(context, options) {
  var inverse = options.inverse || function() {}, fn = options.fn;

  var type = toString.call(context);

  if(type === functionType) { context = context.call(this); }

  if(context === true) {
    return fn(this);
  } else if(context === false || context == null) {
    return inverse(this);
  } else if(type === "[object Array]") {
    if(context.length > 0) {
      return Handlebars.helpers.each(context, options);
    } else {
      return inverse(this);
    }
  } else {
    return fn(context);
  }
});

Handlebars.K = function() {};

Handlebars.createFrame = Object.create || function(object) {
  Handlebars.K.prototype = object;
  var obj = new Handlebars.K();
  Handlebars.K.prototype = null;
  return obj;
};

Handlebars.logger = {
  DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,

  methodMap: {0: 'debug', 1: 'info', 2: 'warn', 3: 'error'},

  // can be overridden in the host environment
  log: function(level, obj) {
    if (Handlebars.logger.level <= level) {
      var method = Handlebars.logger.methodMap[level];
      if (typeof console !== 'undefined' && console[method]) {
        console[method].call(console, obj);
      }
    }
  }
};

Handlebars.log = function(level, obj) { Handlebars.logger.log(level, obj); };

Handlebars.registerHelper('each', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  var i = 0, ret = "", data;

  var type = toString.call(context);
  if(type === functionType) { context = context.call(this); }

  if (options.data) {
    data = Handlebars.createFrame(options.data);
  }

  if(context && typeof context === 'object') {
    if(context instanceof Array){
      for(var j = context.length; i<j; i++) {
        if (data) { data.index = i; }
        ret = ret + fn(context[i], { data: data });
      }
    } else {
      for(var key in context) {
        if(context.hasOwnProperty(key)) {
          if(data) { data.key = key; }
          ret = ret + fn(context[key], {data: data});
          i++;
        }
      }
    }
  }

  if(i === 0){
    ret = inverse(this);
  }

  return ret;
});

Handlebars.registerHelper('if', function(conditional, options) {
  var type = toString.call(conditional);
  if(type === functionType) { conditional = conditional.call(this); }

  if(!conditional || Handlebars.Utils.isEmpty(conditional)) {
    return options.inverse(this);
  } else {
    return options.fn(this);
  }
});

Handlebars.registerHelper('unless', function(conditional, options) {
  return Handlebars.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn});
});

Handlebars.registerHelper('with', function(context, options) {
  var type = toString.call(context);
  if(type === functionType) { context = context.call(this); }

  if (!Handlebars.Utils.isEmpty(context)) return options.fn(context);
});

Handlebars.registerHelper('log', function(context, options) {
  var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
  Handlebars.log(level, context);
});
;
// lib/handlebars/compiler/parser.js
/* Jison generated parser */
var handlebars = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"simpleInverse":6,"statements":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"CLOSE_UNESCAPED":24,"OPEN_PARTIAL":25,"partialName":26,"params":27,"hash":28,"dataName":29,"param":30,"STRING":31,"INTEGER":32,"BOOLEAN":33,"hashSegments":34,"hashSegment":35,"ID":36,"EQUALS":37,"DATA":38,"pathSegments":39,"SEP":40,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"CLOSE_UNESCAPED",25:"OPEN_PARTIAL",31:"STRING",32:"INTEGER",33:"BOOLEAN",36:"ID",37:"EQUALS",38:"DATA",40:"SEP"},
productions_: [0,[3,2],[4,2],[4,3],[4,2],[4,1],[4,1],[4,0],[7,1],[7,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[6,2],[17,3],[17,2],[17,2],[17,1],[17,1],[27,2],[27,1],[30,1],[30,1],[30,1],[30,1],[30,1],[28,1],[34,2],[34,1],[35,3],[35,3],[35,3],[35,3],[35,3],[26,1],[26,1],[26,1],[29,2],[21,1],[39,3],[39,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = new yy.ProgramNode([], $$[$0]); 
break;
case 3: this.$ = new yy.ProgramNode($$[$0-2], $$[$0]); 
break;
case 4: this.$ = new yy.ProgramNode($$[$0-1], []); 
break;
case 5: this.$ = new yy.ProgramNode($$[$0]); 
break;
case 6: this.$ = new yy.ProgramNode([], []); 
break;
case 7: this.$ = new yy.ProgramNode([]); 
break;
case 8: this.$ = [$$[$0]]; 
break;
case 9: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 10: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0]); 
break;
case 11: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0]); 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = $$[$0]; 
break;
case 14: this.$ = new yy.ContentNode($$[$0]); 
break;
case 15: this.$ = new yy.CommentNode($$[$0]); 
break;
case 16: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 17: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 18: this.$ = $$[$0-1]; 
break;
case 19:
    // Parsing out the '&' escape token at this level saves ~500 bytes after min due to the removal of one parser node.
    this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], $$[$0-2][2] === '&');
  
break;
case 20: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true); 
break;
case 21: this.$ = new yy.PartialNode($$[$0-1]); 
break;
case 22: this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]); 
break;
case 23: 
break;
case 24: this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]]; 
break;
case 25: this.$ = [[$$[$0-1]].concat($$[$0]), null]; 
break;
case 26: this.$ = [[$$[$0-1]], $$[$0]]; 
break;
case 27: this.$ = [[$$[$0]], null]; 
break;
case 28: this.$ = [[$$[$0]], null]; 
break;
case 29: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 30: this.$ = [$$[$0]]; 
break;
case 31: this.$ = $$[$0]; 
break;
case 32: this.$ = new yy.StringNode($$[$0]); 
break;
case 33: this.$ = new yy.IntegerNode($$[$0]); 
break;
case 34: this.$ = new yy.BooleanNode($$[$0]); 
break;
case 35: this.$ = $$[$0]; 
break;
case 36: this.$ = new yy.HashNode($$[$0]); 
break;
case 37: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 38: this.$ = [$$[$0]]; 
break;
case 39: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 40: this.$ = [$$[$0-2], new yy.StringNode($$[$0])]; 
break;
case 41: this.$ = [$$[$0-2], new yy.IntegerNode($$[$0])]; 
break;
case 42: this.$ = [$$[$0-2], new yy.BooleanNode($$[$0])]; 
break;
case 43: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 44: this.$ = new yy.PartialNameNode($$[$0]); 
break;
case 45: this.$ = new yy.PartialNameNode(new yy.StringNode($$[$0])); 
break;
case 46: this.$ = new yy.PartialNameNode(new yy.IntegerNode($$[$0])); 
break;
case 47: this.$ = new yy.DataNode($$[$0]); 
break;
case 48: this.$ = new yy.IdNode($$[$0]); 
break;
case 49: $$[$0-2].push({part: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; 
break;
case 50: this.$ = [{part: $$[$0]}]; 
break;
}
},
table: [{3:1,4:2,5:[2,7],6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],22:[1,14],23:[1,15],25:[1,16]},{1:[3]},{5:[1,17]},{5:[2,6],7:18,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,6],22:[1,14],23:[1,15],25:[1,16]},{5:[2,5],6:20,8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,5],22:[1,14],23:[1,15],25:[1,16]},{17:23,18:[1,22],21:24,29:25,36:[1,28],38:[1,27],39:26},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],25:[2,8]},{4:29,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],25:[1,16]},{4:30,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],25:[1,16]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],25:[2,12]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],25:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],25:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],25:[2,15]},{17:31,21:24,29:25,36:[1,28],38:[1,27],39:26},{17:32,21:24,29:25,36:[1,28],38:[1,27],39:26},{17:33,21:24,29:25,36:[1,28],38:[1,27],39:26},{21:35,26:34,31:[1,36],32:[1,37],36:[1,28],39:26},{1:[2,1]},{5:[2,2],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,2],22:[1,14],23:[1,15],25:[1,16]},{17:23,21:24,29:25,36:[1,28],38:[1,27],39:26},{5:[2,4],7:38,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,4],22:[1,14],23:[1,15],25:[1,16]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],25:[2,9]},{5:[2,23],14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],25:[2,23]},{18:[1,39]},{18:[2,27],21:44,24:[2,27],27:40,28:41,29:48,30:42,31:[1,45],32:[1,46],33:[1,47],34:43,35:49,36:[1,50],38:[1,27],39:26},{18:[2,28],24:[2,28]},{18:[2,48],24:[2,48],31:[2,48],32:[2,48],33:[2,48],36:[2,48],38:[2,48],40:[1,51]},{21:52,36:[1,28],39:26},{18:[2,50],24:[2,50],31:[2,50],32:[2,50],33:[2,50],36:[2,50],38:[2,50],40:[2,50]},{10:53,20:[1,54]},{10:55,20:[1,54]},{18:[1,56]},{18:[1,57]},{24:[1,58]},{18:[1,59],21:60,36:[1,28],39:26},{18:[2,44],36:[2,44]},{18:[2,45],36:[2,45]},{18:[2,46],36:[2,46]},{5:[2,3],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,3],22:[1,14],23:[1,15],25:[1,16]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],25:[2,17]},{18:[2,25],21:44,24:[2,25],28:61,29:48,30:62,31:[1,45],32:[1,46],33:[1,47],34:43,35:49,36:[1,50],38:[1,27],39:26},{18:[2,26],24:[2,26]},{18:[2,30],24:[2,30],31:[2,30],32:[2,30],33:[2,30],36:[2,30],38:[2,30]},{18:[2,36],24:[2,36],35:63,36:[1,64]},{18:[2,31],24:[2,31],31:[2,31],32:[2,31],33:[2,31],36:[2,31],38:[2,31]},{18:[2,32],24:[2,32],31:[2,32],32:[2,32],33:[2,32],36:[2,32],38:[2,32]},{18:[2,33],24:[2,33],31:[2,33],32:[2,33],33:[2,33],36:[2,33],38:[2,33]},{18:[2,34],24:[2,34],31:[2,34],32:[2,34],33:[2,34],36:[2,34],38:[2,34]},{18:[2,35],24:[2,35],31:[2,35],32:[2,35],33:[2,35],36:[2,35],38:[2,35]},{18:[2,38],24:[2,38],36:[2,38]},{18:[2,50],24:[2,50],31:[2,50],32:[2,50],33:[2,50],36:[2,50],37:[1,65],38:[2,50],40:[2,50]},{36:[1,66]},{18:[2,47],24:[2,47],31:[2,47],32:[2,47],33:[2,47],36:[2,47],38:[2,47]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],25:[2,10]},{21:67,36:[1,28],39:26},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],25:[2,11]},{14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],25:[2,16]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],25:[2,19]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],25:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],25:[2,21]},{18:[1,68]},{18:[2,24],24:[2,24]},{18:[2,29],24:[2,29],31:[2,29],32:[2,29],33:[2,29],36:[2,29],38:[2,29]},{18:[2,37],24:[2,37],36:[2,37]},{37:[1,65]},{21:69,29:73,31:[1,70],32:[1,71],33:[1,72],36:[1,28],38:[1,27],39:26},{18:[2,49],24:[2,49],31:[2,49],32:[2,49],33:[2,49],36:[2,49],38:[2,49],40:[2,49]},{18:[1,74]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],25:[2,22]},{18:[2,39],24:[2,39],36:[2,39]},{18:[2,40],24:[2,40],36:[2,40]},{18:[2,41],24:[2,41],36:[2,41]},{18:[2,42],24:[2,42],36:[2,42]},{18:[2,43],24:[2,43],36:[2,43]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],25:[2,18]}],
defaultActions: {17:[2,1]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0: yy_.yytext = "\\"; return 14; 
break;
case 1:
                                   if(yy_.yytext.slice(-1) !== "\\") this.begin("mu");
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1), this.begin("emu");
                                   if(yy_.yytext) return 14;
                                 
break;
case 2: return 14; 
break;
case 3:
                                   if(yy_.yytext.slice(-1) !== "\\") this.popState();
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1);
                                   return 14;
                                 
break;
case 4: yy_.yytext = yy_.yytext.substr(0, yy_.yyleng-4); this.popState(); return 15; 
break;
case 5: return 25; 
break;
case 6: return 16; 
break;
case 7: return 20; 
break;
case 8: return 19; 
break;
case 9: return 19; 
break;
case 10: return 23; 
break;
case 11: return 22; 
break;
case 12: this.popState(); this.begin('com'); 
break;
case 13: yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-5); this.popState(); return 15; 
break;
case 14: return 22; 
break;
case 15: return 37; 
break;
case 16: return 36; 
break;
case 17: return 36; 
break;
case 18: return 40; 
break;
case 19: /*ignore whitespace*/ 
break;
case 20: this.popState(); return 24; 
break;
case 21: this.popState(); return 18; 
break;
case 22: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 31; 
break;
case 23: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\'/g,"'"); return 31; 
break;
case 24: return 38; 
break;
case 25: return 33; 
break;
case 26: return 33; 
break;
case 27: return 32; 
break;
case 28: return 36; 
break;
case 29: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 36; 
break;
case 30: return 'INVALID'; 
break;
case 31: return 5; 
break;
}
};
lexer.rules = [/^(?:\\\\(?=(\{\{)))/,/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[}\/ ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:-?[0-9]+(?=[}\s]))/,/^(?:[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.]))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/];
lexer.conditions = {"mu":{"rules":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],"inclusive":false},"emu":{"rules":[3],"inclusive":false},"com":{"rules":[4],"inclusive":false},"INITIAL":{"rules":[0,1,2,31],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();;
// lib/handlebars/compiler/base.js

Handlebars.Parser = handlebars;

Handlebars.parse = function(input) {

  // Just return if an already-compile AST was passed in.
  if(input.constructor === Handlebars.AST.ProgramNode) { return input; }

  Handlebars.Parser.yy = Handlebars.AST;
  return Handlebars.Parser.parse(input);
};
;
// lib/handlebars/compiler/ast.js
Handlebars.AST = {};

Handlebars.AST.ProgramNode = function(statements, inverse) {
  this.type = "program";
  this.statements = statements;
  if(inverse) { this.inverse = new Handlebars.AST.ProgramNode(inverse); }
};

Handlebars.AST.MustacheNode = function(rawParams, hash, unescaped) {
  this.type = "mustache";
  this.escaped = !unescaped;
  this.hash = hash;

  var id = this.id = rawParams[0];
  var params = this.params = rawParams.slice(1);

  // a mustache is an eligible helper if:
  // * its id is simple (a single part, not `this` or `..`)
  var eligibleHelper = this.eligibleHelper = id.isSimple;

  // a mustache is definitely a helper if:
  // * it is an eligible helper, and
  // * it has at least one parameter or hash segment
  this.isHelper = eligibleHelper && (params.length || hash);

  // if a mustache is an eligible helper but not a definite
  // helper, it is ambiguous, and will be resolved in a later
  // pass or at runtime.
};

Handlebars.AST.PartialNode = function(partialName, context) {
  this.type         = "partial";
  this.partialName  = partialName;
  this.context      = context;
};

Handlebars.AST.BlockNode = function(mustache, program, inverse, close) {
  var verifyMatch = function(open, close) {
    if(open.original !== close.original) {
      throw new Handlebars.Exception(open.original + " doesn't match " + close.original);
    }
  };

  verifyMatch(mustache.id, close);
  this.type = "block";
  this.mustache = mustache;
  this.program  = program;
  this.inverse  = inverse;

  if (this.inverse && !this.program) {
    this.isInverse = true;
  }
};

Handlebars.AST.ContentNode = function(string) {
  this.type = "content";
  this.string = string;
};

Handlebars.AST.HashNode = function(pairs) {
  this.type = "hash";
  this.pairs = pairs;
};

Handlebars.AST.IdNode = function(parts) {
  this.type = "ID";

  var original = "",
      dig = [],
      depth = 0;

  for(var i=0,l=parts.length; i<l; i++) {
    var part = parts[i].part;
    original += (parts[i].separator || '') + part;

    if (part === ".." || part === "." || part === "this") {
      if (dig.length > 0) { throw new Handlebars.Exception("Invalid path: " + original); }
      else if (part === "..") { depth++; }
      else { this.isScoped = true; }
    }
    else { dig.push(part); }
  }

  this.original = original;
  this.parts    = dig;
  this.string   = dig.join('.');
  this.depth    = depth;

  // an ID is simple if it only has one part, and that part is not
  // `..` or `this`.
  this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;

  this.stringModeValue = this.string;
};

Handlebars.AST.PartialNameNode = function(name) {
  this.type = "PARTIAL_NAME";
  this.name = name.original;
};

Handlebars.AST.DataNode = function(id) {
  this.type = "DATA";
  this.id = id;
};

Handlebars.AST.StringNode = function(string) {
  this.type = "STRING";
  this.original =
    this.string =
    this.stringModeValue = string;
};

Handlebars.AST.IntegerNode = function(integer) {
  this.type = "INTEGER";
  this.original =
    this.integer = integer;
  this.stringModeValue = Number(integer);
};

Handlebars.AST.BooleanNode = function(bool) {
  this.type = "BOOLEAN";
  this.bool = bool;
  this.stringModeValue = bool === "true";
};

Handlebars.AST.CommentNode = function(comment) {
  this.type = "comment";
  this.comment = comment;
};
;
// lib/handlebars/utils.js

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

Handlebars.Exception = function(message) {
  var tmp = Error.prototype.constructor.apply(this, arguments);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }
};
Handlebars.Exception.prototype = new Error();

// Build out our basic SafeString type
Handlebars.SafeString = function(string) {
  this.string = string;
};
Handlebars.SafeString.prototype.toString = function() {
  return this.string.toString();
};

var escape = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

var badChars = /[&<>"'`]/g;
var possible = /[&<>"'`]/;

var escapeChar = function(chr) {
  return escape[chr] || "&amp;";
};

Handlebars.Utils = {
  extend: function(obj, value) {
    for(var key in value) {
      if(value.hasOwnProperty(key)) {
        obj[key] = value[key];
      }
    }
  },

  escapeExpression: function(string) {
    // don't escape SafeStrings, since they're already safe
    if (string instanceof Handlebars.SafeString) {
      return string.toString();
    } else if (string == null || string === false) {
      return "";
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    string = string.toString();

    if(!possible.test(string)) { return string; }
    return string.replace(badChars, escapeChar);
  },

  isEmpty: function(value) {
    if (!value && value !== 0) {
      return true;
    } else if(toString.call(value) === "[object Array]" && value.length === 0) {
      return true;
    } else {
      return false;
    }
  }
};
;
// lib/handlebars/compiler/compiler.js

/*jshint eqnull:true*/
var Compiler = Handlebars.Compiler = function() {};
var JavaScriptCompiler = Handlebars.JavaScriptCompiler = function() {};

// the foundHelper register will disambiguate helper lookup from finding a
// function in a context. This is necessary for mustache compatibility, which
// requires that context functions in blocks are evaluated by blockHelperMissing,
// and then proceed as if the resulting value was provided to blockHelperMissing.

Compiler.prototype = {
  compiler: Compiler,

  disassemble: function() {
    var opcodes = this.opcodes, opcode, out = [], params, param;

    for (var i=0, l=opcodes.length; i<l; i++) {
      opcode = opcodes[i];

      if (opcode.opcode === 'DECLARE') {
        out.push("DECLARE " + opcode.name + "=" + opcode.value);
      } else {
        params = [];
        for (var j=0; j<opcode.args.length; j++) {
          param = opcode.args[j];
          if (typeof param === "string") {
            param = "\"" + param.replace("\n", "\\n") + "\"";
          }
          params.push(param);
        }
        out.push(opcode.opcode + " " + params.join(" "));
      }
    }

    return out.join("\n");
  },
  equals: function(other) {
    var len = this.opcodes.length;
    if (other.opcodes.length !== len) {
      return false;
    }

    for (var i = 0; i < len; i++) {
      var opcode = this.opcodes[i],
          otherOpcode = other.opcodes[i];
      if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) {
        return false;
      }
      for (var j = 0; j < opcode.args.length; j++) {
        if (opcode.args[j] !== otherOpcode.args[j]) {
          return false;
        }
      }
    }

    len = this.children.length;
    if (other.children.length !== len) {
      return false;
    }
    for (i = 0; i < len; i++) {
      if (!this.children[i].equals(other.children[i])) {
        return false;
      }
    }

    return true;
  },

  guid: 0,

  compile: function(program, options) {
    this.children = [];
    this.depths = {list: []};
    this.options = options;

    // These changes will propagate to the other compiler components
    var knownHelpers = this.options.knownHelpers;
    this.options.knownHelpers = {
      'helperMissing': true,
      'blockHelperMissing': true,
      'each': true,
      'if': true,
      'unless': true,
      'with': true,
      'log': true
    };
    if (knownHelpers) {
      for (var name in knownHelpers) {
        this.options.knownHelpers[name] = knownHelpers[name];
      }
    }

    return this.program(program);
  },

  accept: function(node) {
    return this[node.type](node);
  },

  program: function(program) {
    var statements = program.statements, statement;
    this.opcodes = [];

    for(var i=0, l=statements.length; i<l; i++) {
      statement = statements[i];
      this[statement.type](statement);
    }
    this.isSimple = l === 1;

    this.depths.list = this.depths.list.sort(function(a, b) {
      return a - b;
    });

    return this;
  },

  compileProgram: function(program) {
    var result = new this.compiler().compile(program, this.options);
    var guid = this.guid++, depth;

    this.usePartial = this.usePartial || result.usePartial;

    this.children[guid] = result;

    for(var i=0, l=result.depths.list.length; i<l; i++) {
      depth = result.depths.list[i];

      if(depth < 2) { continue; }
      else { this.addDepth(depth - 1); }
    }

    return guid;
  },

  block: function(block) {
    var mustache = block.mustache,
        program = block.program,
        inverse = block.inverse;

    if (program) {
      program = this.compileProgram(program);
    }

    if (inverse) {
      inverse = this.compileProgram(inverse);
    }

    var type = this.classifyMustache(mustache);

    if (type === "helper") {
      this.helperMustache(mustache, program, inverse);
    } else if (type === "simple") {
      this.simpleMustache(mustache);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('blockValue');
    } else {
      this.ambiguousMustache(mustache, program, inverse);

      // now that the simple mustache is resolved, we need to
      // evaluate it by executing `blockHelperMissing`
      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);
      this.opcode('emptyHash');
      this.opcode('ambiguousBlockValue');
    }

    this.opcode('append');
  },

  hash: function(hash) {
    var pairs = hash.pairs, pair, val;

    this.opcode('pushHash');

    for(var i=0, l=pairs.length; i<l; i++) {
      pair = pairs[i];
      val  = pair[1];

      if (this.options.stringParams) {
        if(val.depth) {
          this.addDepth(val.depth);
        }
        this.opcode('getContext', val.depth || 0);
        this.opcode('pushStringParam', val.stringModeValue, val.type);
      } else {
        this.accept(val);
      }

      this.opcode('assignToHash', pair[0]);
    }
    this.opcode('popHash');
  },

  partial: function(partial) {
    var partialName = partial.partialName;
    this.usePartial = true;

    if(partial.context) {
      this.ID(partial.context);
    } else {
      this.opcode('push', 'depth0');
    }

    this.opcode('invokePartial', partialName.name);
    this.opcode('append');
  },

  content: function(content) {
    this.opcode('appendContent', content.string);
  },

  mustache: function(mustache) {
    var options = this.options;
    var type = this.classifyMustache(mustache);

    if (type === "simple") {
      this.simpleMustache(mustache);
    } else if (type === "helper") {
      this.helperMustache(mustache);
    } else {
      this.ambiguousMustache(mustache);
    }

    if(mustache.escaped && !options.noEscape) {
      this.opcode('appendEscaped');
    } else {
      this.opcode('append');
    }
  },

  ambiguousMustache: function(mustache, program, inverse) {
    var id = mustache.id,
        name = id.parts[0],
        isBlock = program != null || inverse != null;

    this.opcode('getContext', id.depth);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    this.opcode('invokeAmbiguous', name, isBlock);
  },

  simpleMustache: function(mustache) {
    var id = mustache.id;

    if (id.type === 'DATA') {
      this.DATA(id);
    } else if (id.parts.length) {
      this.ID(id);
    } else {
      // Simplified ID for `this`
      this.addDepth(id.depth);
      this.opcode('getContext', id.depth);
      this.opcode('pushContext');
    }

    this.opcode('resolvePossibleLambda');
  },

  helperMustache: function(mustache, program, inverse) {
    var params = this.setupFullMustacheParams(mustache, program, inverse),
        name = mustache.id.parts[0];

    if (this.options.knownHelpers[name]) {
      this.opcode('invokeKnownHelper', params.length, name);
    } else if (this.options.knownHelpersOnly) {
      throw new Error("You specified knownHelpersOnly, but used the unknown helper " + name);
    } else {
      this.opcode('invokeHelper', params.length, name);
    }
  },

  ID: function(id) {
    this.addDepth(id.depth);
    this.opcode('getContext', id.depth);

    var name = id.parts[0];
    if (!name) {
      this.opcode('pushContext');
    } else {
      this.opcode('lookupOnContext', id.parts[0]);
    }

    for(var i=1, l=id.parts.length; i<l; i++) {
      this.opcode('lookup', id.parts[i]);
    }
  },

  DATA: function(data) {
    this.options.data = true;
    if (data.id.isScoped || data.id.depth) {
      throw new Handlebars.Exception('Scoped data references are not supported: ' + data.original);
    }

    this.opcode('lookupData');
    var parts = data.id.parts;
    for(var i=0, l=parts.length; i<l; i++) {
      this.opcode('lookup', parts[i]);
    }
  },

  STRING: function(string) {
    this.opcode('pushString', string.string);
  },

  INTEGER: function(integer) {
    this.opcode('pushLiteral', integer.integer);
  },

  BOOLEAN: function(bool) {
    this.opcode('pushLiteral', bool.bool);
  },

  comment: function() {},

  // HELPERS
  opcode: function(name) {
    this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
  },

  declare: function(name, value) {
    this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
  },

  addDepth: function(depth) {
    if(isNaN(depth)) { throw new Error("EWOT"); }
    if(depth === 0) { return; }

    if(!this.depths[depth]) {
      this.depths[depth] = true;
      this.depths.list.push(depth);
    }
  },

  classifyMustache: function(mustache) {
    var isHelper   = mustache.isHelper;
    var isEligible = mustache.eligibleHelper;
    var options    = this.options;

    // if ambiguous, we can possibly resolve the ambiguity now
    if (isEligible && !isHelper) {
      var name = mustache.id.parts[0];

      if (options.knownHelpers[name]) {
        isHelper = true;
      } else if (options.knownHelpersOnly) {
        isEligible = false;
      }
    }

    if (isHelper) { return "helper"; }
    else if (isEligible) { return "ambiguous"; }
    else { return "simple"; }
  },

  pushParams: function(params) {
    var i = params.length, param;

    while(i--) {
      param = params[i];

      if(this.options.stringParams) {
        if(param.depth) {
          this.addDepth(param.depth);
        }

        this.opcode('getContext', param.depth || 0);
        this.opcode('pushStringParam', param.stringModeValue, param.type);
      } else {
        this[param.type](param);
      }
    }
  },

  setupMustacheParams: function(mustache) {
    var params = mustache.params;
    this.pushParams(params);

    if(mustache.hash) {
      this.hash(mustache.hash);
    } else {
      this.opcode('emptyHash');
    }

    return params;
  },

  // this will replace setupMustacheParams when we're done
  setupFullMustacheParams: function(mustache, program, inverse) {
    var params = mustache.params;
    this.pushParams(params);

    this.opcode('pushProgram', program);
    this.opcode('pushProgram', inverse);

    if(mustache.hash) {
      this.hash(mustache.hash);
    } else {
      this.opcode('emptyHash');
    }

    return params;
  }
};

var Literal = function(value) {
  this.value = value;
};

JavaScriptCompiler.prototype = {
  // PUBLIC API: You can override these methods in a subclass to provide
  // alternative compiled forms for name lookup and buffering semantics
  nameLookup: function(parent, name /* , type*/) {
    if (/^[0-9]+$/.test(name)) {
      return parent + "[" + name + "]";
    } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
      return parent + "." + name;
    }
    else {
      return parent + "['" + name + "']";
    }
  },

  appendToBuffer: function(string) {
    if (this.environment.isSimple) {
      return "return " + string + ";";
    } else {
      return {
        appendToBuffer: true,
        content: string,
        toString: function() { return "buffer += " + string + ";"; }
      };
    }
  },

  initializeBuffer: function() {
    return this.quotedString("");
  },

  namespace: "Handlebars",
  // END PUBLIC API

  compile: function(environment, options, context, asObject) {
    this.environment = environment;
    this.options = options || {};

    Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");

    this.name = this.environment.name;
    this.isChild = !!context;
    this.context = context || {
      programs: [],
      environments: [],
      aliases: { }
    };

    this.preamble();

    this.stackSlot = 0;
    this.stackVars = [];
    this.registers = { list: [] };
    this.compileStack = [];
    this.inlineStack = [];

    this.compileChildren(environment, options);

    var opcodes = environment.opcodes, opcode;

    this.i = 0;

    for(l=opcodes.length; this.i<l; this.i++) {
      opcode = opcodes[this.i];

      if(opcode.opcode === 'DECLARE') {
        this[opcode.name] = opcode.value;
      } else {
        this[opcode.opcode].apply(this, opcode.args);
      }
    }

    return this.createFunctionContext(asObject);
  },

  nextOpcode: function() {
    var opcodes = this.environment.opcodes;
    return opcodes[this.i + 1];
  },

  eat: function() {
    this.i = this.i + 1;
  },

  preamble: function() {
    var out = [];

    if (!this.isChild) {
      var namespace = this.namespace;

      var copies = "helpers = this.merge(helpers, " + namespace + ".helpers);";
      if (this.environment.usePartial) { copies = copies + " partials = this.merge(partials, " + namespace + ".partials);"; }
      if (this.options.data) { copies = copies + " data = data || {};"; }
      out.push(copies);
    } else {
      out.push('');
    }

    if (!this.environment.isSimple) {
      out.push(", buffer = " + this.initializeBuffer());
    } else {
      out.push("");
    }

    // track the last context pushed into place to allow skipping the
    // getContext opcode when it would be a noop
    this.lastContext = 0;
    this.source = out;
  },

  createFunctionContext: function(asObject) {
    var locals = this.stackVars.concat(this.registers.list);

    if(locals.length > 0) {
      this.source[1] = this.source[1] + ", " + locals.join(", ");
    }

    // Generate minimizer alias mappings
    if (!this.isChild) {
      for (var alias in this.context.aliases) {
        if (this.context.aliases.hasOwnProperty(alias)) {
          this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
        }
      }
    }

    if (this.source[1]) {
      this.source[1] = "var " + this.source[1].substring(2) + ";";
    }

    // Merge children
    if (!this.isChild) {
      this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
    }

    if (!this.environment.isSimple) {
      this.source.push("return buffer;");
    }

    var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];

    for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
      params.push("depth" + this.environment.depths.list[i]);
    }

    // Perform a second pass over the output to merge content when possible
    var source = this.mergeSource();

    if (!this.isChild) {
      var revision = Handlebars.COMPILER_REVISION,
          versions = Handlebars.REVISION_CHANGES[revision];
      source = "this.compilerInfo = ["+revision+",'"+versions+"'];\n"+source;
    }

    if (asObject) {
      params.push(source);

      return Function.apply(this, params);
    } else {
      var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + source + '}';
      Handlebars.log(Handlebars.logger.DEBUG, functionSource + "\n\n");
      return functionSource;
    }
  },
  mergeSource: function() {
    // WARN: We are not handling the case where buffer is still populated as the source should
    // not have buffer append operations as their final action.
    var source = '',
        buffer;
    for (var i = 0, len = this.source.length; i < len; i++) {
      var line = this.source[i];
      if (line.appendToBuffer) {
        if (buffer) {
          buffer = buffer + '\n    + ' + line.content;
        } else {
          buffer = line.content;
        }
      } else {
        if (buffer) {
          source += 'buffer += ' + buffer + ';\n  ';
          buffer = undefined;
        }
        source += line + '\n  ';
      }
    }
    return source;
  },

  // [blockValue]
  //
  // On stack, before: hash, inverse, program, value
  // On stack, after: return value of blockHelperMissing
  //
  // The purpose of this opcode is to take a block of the form
  // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
  // replace it on the stack with the result of properly
  // invoking blockHelperMissing.
  blockValue: function() {
    this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

    var params = ["depth0"];
    this.setupParams(0, params);

    this.replaceStack(function(current) {
      params.splice(1, 0, current);
      return "blockHelperMissing.call(" + params.join(", ") + ")";
    });
  },

  // [ambiguousBlockValue]
  //
  // On stack, before: hash, inverse, program, value
  // Compiler value, before: lastHelper=value of last found helper, if any
  // On stack, after, if no lastHelper: same as [blockValue]
  // On stack, after, if lastHelper: value
  ambiguousBlockValue: function() {
    this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

    var params = ["depth0"];
    this.setupParams(0, params);

    var current = this.topStack();
    params.splice(1, 0, current);

    // Use the options value generated from the invocation
    params[params.length-1] = 'options';

    this.source.push("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
  },

  // [appendContent]
  //
  // On stack, before: ...
  // On stack, after: ...
  //
  // Appends the string value of `content` to the current buffer
  appendContent: function(content) {
    this.source.push(this.appendToBuffer(this.quotedString(content)));
  },

  // [append]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Coerces `value` to a String and appends it to the current buffer.
  //
  // If `value` is truthy, or 0, it is coerced into a string and appended
  // Otherwise, the empty string is appended
  append: function() {
    // Force anything that is inlined onto the stack so we don't have duplication
    // when we examine local
    this.flushInline();
    var local = this.popStack();
    this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
    if (this.environment.isSimple) {
      this.source.push("else { " + this.appendToBuffer("''") + " }");
    }
  },

  // [appendEscaped]
  //
  // On stack, before: value, ...
  // On stack, after: ...
  //
  // Escape `value` and append it to the buffer
  appendEscaped: function() {
    this.context.aliases.escapeExpression = 'this.escapeExpression';

    this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
  },

  // [getContext]
  //
  // On stack, before: ...
  // On stack, after: ...
  // Compiler value, after: lastContext=depth
  //
  // Set the value of the `lastContext` compiler value to the depth
  getContext: function(depth) {
    if(this.lastContext !== depth) {
      this.lastContext = depth;
    }
  },

  // [lookupOnContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext[name], ...
  //
  // Looks up the value of `name` on the current context and pushes
  // it onto the stack.
  lookupOnContext: function(name) {
    this.push(this.nameLookup('depth' + this.lastContext, name, 'context'));
  },

  // [pushContext]
  //
  // On stack, before: ...
  // On stack, after: currentContext, ...
  //
  // Pushes the value of the current context onto the stack.
  pushContext: function() {
    this.pushStackLiteral('depth' + this.lastContext);
  },

  // [resolvePossibleLambda]
  //
  // On stack, before: value, ...
  // On stack, after: resolved value, ...
  //
  // If the `value` is a lambda, replace it on the stack by
  // the return value of the lambda
  resolvePossibleLambda: function() {
    this.context.aliases.functionType = '"function"';

    this.replaceStack(function(current) {
      return "typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current;
    });
  },

  // [lookup]
  //
  // On stack, before: value, ...
  // On stack, after: value[name], ...
  //
  // Replace the value on the stack with the result of looking
  // up `name` on `value`
  lookup: function(name) {
    this.replaceStack(function(current) {
      return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
    });
  },

  // [lookupData]
  //
  // On stack, before: ...
  // On stack, after: data[id], ...
  //
  // Push the result of looking up `id` on the current data
  lookupData: function(id) {
    this.push('data');
  },

  // [pushStringParam]
  //
  // On stack, before: ...
  // On stack, after: string, currentContext, ...
  //
  // This opcode is designed for use in string mode, which
  // provides the string value of a parameter along with its
  // depth rather than resolving it immediately.
  pushStringParam: function(string, type) {
    this.pushStackLiteral('depth' + this.lastContext);

    this.pushString(type);

    if (typeof string === 'string') {
      this.pushString(string);
    } else {
      this.pushStackLiteral(string);
    }
  },

  emptyHash: function() {
    this.pushStackLiteral('{}');

    if (this.options.stringParams) {
      this.register('hashTypes', '{}');
      this.register('hashContexts', '{}');
    }
  },
  pushHash: function() {
    this.hash = {values: [], types: [], contexts: []};
  },
  popHash: function() {
    var hash = this.hash;
    this.hash = undefined;

    if (this.options.stringParams) {
      this.register('hashContexts', '{' + hash.contexts.join(',') + '}');
      this.register('hashTypes', '{' + hash.types.join(',') + '}');
    }
    this.push('{\n    ' + hash.values.join(',\n    ') + '\n  }');
  },

  // [pushString]
  //
  // On stack, before: ...
  // On stack, after: quotedString(string), ...
  //
  // Push a quoted version of `string` onto the stack
  pushString: function(string) {
    this.pushStackLiteral(this.quotedString(string));
  },

  // [push]
  //
  // On stack, before: ...
  // On stack, after: expr, ...
  //
  // Push an expression onto the stack
  push: function(expr) {
    this.inlineStack.push(expr);
    return expr;
  },

  // [pushLiteral]
  //
  // On stack, before: ...
  // On stack, after: value, ...
  //
  // Pushes a value onto the stack. This operation prevents
  // the compiler from creating a temporary variable to hold
  // it.
  pushLiteral: function(value) {
    this.pushStackLiteral(value);
  },

  // [pushProgram]
  //
  // On stack, before: ...
  // On stack, after: program(guid), ...
  //
  // Push a program expression onto the stack. This takes
  // a compile-time guid and converts it into a runtime-accessible
  // expression.
  pushProgram: function(guid) {
    if (guid != null) {
      this.pushStackLiteral(this.programExpression(guid));
    } else {
      this.pushStackLiteral(null);
    }
  },

  // [invokeHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // Pops off the helper's parameters, invokes the helper,
  // and pushes the helper's return value onto the stack.
  //
  // If the helper is not found, `helperMissing` is called.
  invokeHelper: function(paramSize, name) {
    this.context.aliases.helperMissing = 'helpers.helperMissing';

    var helper = this.lastHelper = this.setupHelper(paramSize, name, true);
    var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');

    this.push(helper.name + ' || ' + nonHelper);
    this.replaceStack(function(name) {
      return name + ' ? ' + name + '.call(' +
          helper.callParams + ") " + ": helperMissing.call(" +
          helper.helperMissingParams + ")";
    });
  },

  // [invokeKnownHelper]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of helper invocation
  //
  // This operation is used when the helper is known to exist,
  // so a `helperMissing` fallback is not required.
  invokeKnownHelper: function(paramSize, name) {
    var helper = this.setupHelper(paramSize, name);
    this.push(helper.name + ".call(" + helper.callParams + ")");
  },

  // [invokeAmbiguous]
  //
  // On stack, before: hash, inverse, program, params..., ...
  // On stack, after: result of disambiguation
  //
  // This operation is used when an expression like `{{foo}}`
  // is provided, but we don't know at compile-time whether it
  // is a helper or a path.
  //
  // This operation emits more code than the other options,
  // and can be avoided by passing the `knownHelpers` and
  // `knownHelpersOnly` flags at compile-time.
  invokeAmbiguous: function(name, helperCall) {
    this.context.aliases.functionType = '"function"';

    this.pushStackLiteral('{}');    // Hash value
    var helper = this.setupHelper(0, name, helperCall);

    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

    var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
    var nextStack = this.nextStack();

    this.source.push('if (' + nextStack + ' = ' + helperName + ') { ' + nextStack + ' = ' + nextStack + '.call(' + helper.callParams + '); }');
    this.source.push('else { ' + nextStack + ' = ' + nonHelper + '; ' + nextStack + ' = typeof ' + nextStack + ' === functionType ? ' + nextStack + '.apply(depth0) : ' + nextStack + '; }');
  },

  // [invokePartial]
  //
  // On stack, before: context, ...
  // On stack after: result of partial invocation
  //
  // This operation pops off a context, invokes a partial with that context,
  // and pushes the result of the invocation back.
  invokePartial: function(name) {
    var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];

    if (this.options.data) {
      params.push("data");
    }

    this.context.aliases.self = "this";
    this.push("self.invokePartial(" + params.join(", ") + ")");
  },

  // [assignToHash]
  //
  // On stack, before: value, hash, ...
  // On stack, after: hash, ...
  //
  // Pops a value and hash off the stack, assigns `hash[key] = value`
  // and pushes the hash back onto the stack.
  assignToHash: function(key) {
    var value = this.popStack(),
        context,
        type;

    if (this.options.stringParams) {
      type = this.popStack();
      context = this.popStack();
    }

    var hash = this.hash;
    if (context) {
      hash.contexts.push("'" + key + "': " + context);
    }
    if (type) {
      hash.types.push("'" + key + "': " + type);
    }
    hash.values.push("'" + key + "': (" + value + ")");
  },

  // HELPERS

  compiler: JavaScriptCompiler,

  compileChildren: function(environment, options) {
    var children = environment.children, child, compiler;

    for(var i=0, l=children.length; i<l; i++) {
      child = children[i];
      compiler = new this.compiler();

      var index = this.matchExistingProgram(child);

      if (index == null) {
        this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
        index = this.context.programs.length;
        child.index = index;
        child.name = 'program' + index;
        this.context.programs[index] = compiler.compile(child, options, this.context);
        this.context.environments[index] = child;
      } else {
        child.index = index;
        child.name = 'program' + index;
      }
    }
  },
  matchExistingProgram: function(child) {
    for (var i = 0, len = this.context.environments.length; i < len; i++) {
      var environment = this.context.environments[i];
      if (environment && environment.equals(child)) {
        return i;
      }
    }
  },

  programExpression: function(guid) {
    this.context.aliases.self = "this";

    if(guid == null) {
      return "self.noop";
    }

    var child = this.environment.children[guid],
        depths = child.depths.list, depth;

    var programParams = [child.index, child.name, "data"];

    for(var i=0, l = depths.length; i<l; i++) {
      depth = depths[i];

      if(depth === 1) { programParams.push("depth0"); }
      else { programParams.push("depth" + (depth - 1)); }
    }

    return (depths.length === 0 ? "self.program(" : "self.programWithDepth(") + programParams.join(", ") + ")";
  },

  register: function(name, val) {
    this.useRegister(name);
    this.source.push(name + " = " + val + ";");
  },

  useRegister: function(name) {
    if(!this.registers[name]) {
      this.registers[name] = true;
      this.registers.list.push(name);
    }
  },

  pushStackLiteral: function(item) {
    return this.push(new Literal(item));
  },

  pushStack: function(item) {
    this.flushInline();

    var stack = this.incrStack();
    if (item) {
      this.source.push(stack + " = " + item + ";");
    }
    this.compileStack.push(stack);
    return stack;
  },

  replaceStack: function(callback) {
    var prefix = '',
        inline = this.isInline(),
        stack;

    // If we are currently inline then we want to merge the inline statement into the
    // replacement statement via ','
    if (inline) {
      var top = this.popStack(true);

      if (top instanceof Literal) {
        // Literals do not need to be inlined
        stack = top.value;
      } else {
        // Get or create the current stack name for use by the inline
        var name = this.stackSlot ? this.topStackName() : this.incrStack();

        prefix = '(' + this.push(name) + ' = ' + top + '),';
        stack = this.topStack();
      }
    } else {
      stack = this.topStack();
    }

    var item = callback.call(this, stack);

    if (inline) {
      if (this.inlineStack.length || this.compileStack.length) {
        this.popStack();
      }
      this.push('(' + prefix + item + ')');
    } else {
      // Prevent modification of the context depth variable. Through replaceStack
      if (!/^stack/.test(stack)) {
        stack = this.nextStack();
      }

      this.source.push(stack + " = (" + prefix + item + ");");
    }
    return stack;
  },

  nextStack: function() {
    return this.pushStack();
  },

  incrStack: function() {
    this.stackSlot++;
    if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
    return this.topStackName();
  },
  topStackName: function() {
    return "stack" + this.stackSlot;
  },
  flushInline: function() {
    var inlineStack = this.inlineStack;
    if (inlineStack.length) {
      this.inlineStack = [];
      for (var i = 0, len = inlineStack.length; i < len; i++) {
        var entry = inlineStack[i];
        if (entry instanceof Literal) {
          this.compileStack.push(entry);
        } else {
          this.pushStack(entry);
        }
      }
    }
  },
  isInline: function() {
    return this.inlineStack.length;
  },

  popStack: function(wrapped) {
    var inline = this.isInline(),
        item = (inline ? this.inlineStack : this.compileStack).pop();

    if (!wrapped && (item instanceof Literal)) {
      return item.value;
    } else {
      if (!inline) {
        this.stackSlot--;
      }
      return item;
    }
  },

  topStack: function(wrapped) {
    var stack = (this.isInline() ? this.inlineStack : this.compileStack),
        item = stack[stack.length - 1];

    if (!wrapped && (item instanceof Literal)) {
      return item.value;
    } else {
      return item;
    }
  },

  quotedString: function(str) {
    return '"' + str
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/\u2028/g, '\\u2028')   // Per Ecma-262 7.3 + 7.8.4
      .replace(/\u2029/g, '\\u2029') + '"';
  },

  setupHelper: function(paramSize, name, missingParams) {
    var params = [];
    this.setupParams(paramSize, params, missingParams);
    var foundHelper = this.nameLookup('helpers', name, 'helper');

    return {
      params: params,
      name: foundHelper,
      callParams: ["depth0"].concat(params).join(", "),
      helperMissingParams: missingParams && ["depth0", this.quotedString(name)].concat(params).join(", ")
    };
  },

  // the params and contexts arguments are passed in arrays
  // to fill in
  setupParams: function(paramSize, params, useRegister) {
    var options = [], contexts = [], types = [], param, inverse, program;

    options.push("hash:" + this.popStack());

    inverse = this.popStack();
    program = this.popStack();

    // Avoid setting fn and inverse if neither are set. This allows
    // helpers to do a check for `if (options.fn)`
    if (program || inverse) {
      if (!program) {
        this.context.aliases.self = "this";
        program = "self.noop";
      }

      if (!inverse) {
       this.context.aliases.self = "this";
        inverse = "self.noop";
      }

      options.push("inverse:" + inverse);
      options.push("fn:" + program);
    }

    for(var i=0; i<paramSize; i++) {
      param = this.popStack();
      params.push(param);

      if(this.options.stringParams) {
        types.push(this.popStack());
        contexts.push(this.popStack());
      }
    }

    if (this.options.stringParams) {
      options.push("contexts:[" + contexts.join(",") + "]");
      options.push("types:[" + types.join(",") + "]");
      options.push("hashContexts:hashContexts");
      options.push("hashTypes:hashTypes");
    }

    if(this.options.data) {
      options.push("data:data");
    }

    options = "{" + options.join(",") + "}";
    if (useRegister) {
      this.register('options', options);
      params.push('options');
    } else {
      params.push(options);
    }
    return params.join(", ");
  }
};

var reservedWords = (
  "break else new var" +
  " case finally return void" +
  " catch for switch while" +
  " continue function this with" +
  " default if throw" +
  " delete in try" +
  " do instanceof typeof" +
  " abstract enum int short" +
  " boolean export interface static" +
  " byte extends long super" +
  " char final native synchronized" +
  " class float package throws" +
  " const goto private transient" +
  " debugger implements protected volatile" +
  " double import public let yield"
).split(" ");

var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

for(var i=0, l=reservedWords.length; i<l; i++) {
  compilerWords[reservedWords[i]] = true;
}

JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
  if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name)) {
    return true;
  }
  return false;
};

Handlebars.precompile = function(input, options) {
  if (input == null || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  var ast = Handlebars.parse(input);
  var environment = new Compiler().compile(ast, options);
  return new JavaScriptCompiler().compile(environment, options);
};

Handlebars.compile = function(input, options) {
  if (input == null || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  var compiled;
  function compile() {
    var ast = Handlebars.parse(input);
    var environment = new Compiler().compile(ast, options);
    var templateSpec = new JavaScriptCompiler().compile(environment, options, undefined, true);
    return Handlebars.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  return function(context, options) {
    if (!compiled) {
      compiled = compile();
    }
    return compiled.call(this, context, options);
  };
};

;
// lib/handlebars/runtime.js

Handlebars.VM = {
  template: function(templateSpec) {
    // Just add water
    var container = {
      escapeExpression: Handlebars.Utils.escapeExpression,
      invokePartial: Handlebars.VM.invokePartial,
      programs: [],
      program: function(i, fn, data) {
        var programWrapper = this.programs[i];
        if(data) {
          programWrapper = Handlebars.VM.program(i, fn, data);
        } else if (!programWrapper) {
          programWrapper = this.programs[i] = Handlebars.VM.program(i, fn);
        }
        return programWrapper;
      },
      merge: function(param, common) {
        var ret = param || common;

        if (param && common) {
          ret = {};
          Handlebars.Utils.extend(ret, common);
          Handlebars.Utils.extend(ret, param);
        }
        return ret;
      },
      programWithDepth: Handlebars.VM.programWithDepth,
      noop: Handlebars.VM.noop,
      compilerInfo: null
    };

    return function(context, options) {
      options = options || {};
      var result = templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);

      var compilerInfo = container.compilerInfo || [],
          compilerRevision = compilerInfo[0] || 1,
          currentRevision = Handlebars.COMPILER_REVISION;

      if (compilerRevision !== currentRevision) {
        if (compilerRevision < currentRevision) {
          var runtimeVersions = Handlebars.REVISION_CHANGES[currentRevision],
              compilerVersions = Handlebars.REVISION_CHANGES[compilerRevision];
          throw "Template was precompiled with an older version of Handlebars than the current runtime. "+
                "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").";
        } else {
          // Use the embedded version info since the runtime doesn't know about this revision yet
          throw "Template was precompiled with a newer version of Handlebars than the current runtime. "+
                "Please update your runtime to a newer version ("+compilerInfo[1]+").";
        }
      }

      return result;
    };
  },

  programWithDepth: function(i, fn, data /*, $depth */) {
    var args = Array.prototype.slice.call(arguments, 3);

    var program = function(context, options) {
      options = options || {};

      return fn.apply(this, [context, options.data || data].concat(args));
    };
    program.program = i;
    program.depth = args.length;
    return program;
  },
  program: function(i, fn, data) {
    var program = function(context, options) {
      options = options || {};

      return fn(context, options.data || data);
    };
    program.program = i;
    program.depth = 0;
    return program;
  },
  noop: function() { return ""; },
  invokePartial: function(partial, name, context, helpers, partials, data) {
    var options = { helpers: helpers, partials: partials, data: data };

    if(partial === undefined) {
      throw new Handlebars.Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    } else if (!Handlebars.compile) {
      throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
    } else {
      partials[name] = Handlebars.compile(partial, {data: data !== undefined});
      return partials[name](context, options);
    }
  }
};

Handlebars.template = Handlebars.VM.template;
;
// lib/handlebars/browser-suffix.js
})(Handlebars);
;
/*!
 * jQuery JavaScript Library v1.7.1
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Mon Nov 21 21:11:03 2011 -0500
 */
(function( window, undefined ) {

// Use the correct document accordingly with window argument (sandbox)
var document = window.document,
	navigator = window.navigator,
	location = window.location;
var jQuery = (function() {

// Define a local copy of jQuery
var jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// A simple way to check for HTML strings or ID strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Check if a string has a non-whitespace character in it
	rnotwhite = /\S/,

	// Used for trimming whitespace
	trimLeft = /^\s+/,
	trimRight = /\s+$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>)?$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,

	// Useragent RegExp
	rwebkit = /(webkit)[ \/]([\w.]+)/,
	ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
	rmsie = /(msie) ([\w.]+)/,
	rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,

	// Matches dashed string for camelizing
	rdashAlpha = /-([a-z]|[0-9])/ig,
	rmsPrefix = /^-ms-/,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// Keep a UserAgent string for use with jQuery.browser
	userAgent = navigator.userAgent,

	// For matching the engine and version of the browser
	browserMatch,

	// The deferred used on DOM ready
	readyList,

	// The ready event handler
	DOMContentLoaded,

	// Save a reference to some core methods
	toString = Object.prototype.toString,
	hasOwn = Object.prototype.hasOwnProperty,
	push = Array.prototype.push,
	slice = Array.prototype.slice,
	trim = String.prototype.trim,
	indexOf = Array.prototype.indexOf,

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), or $(undefined)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// The body element only exists once, optimize finding it
		if ( selector === "body" && !context && document.body ) {
			this.context = document;
			this[0] = document.body;
			this.selector = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			// Are we dealing with HTML string or an ID?
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = quickExpr.exec( selector );
			}

			// Verify a match, and that no context was specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context ? context.ownerDocument || context : document );

					// If a single string is passed in and it's a single tag
					// just do a createElement and skip the rest
					ret = rsingleTag.exec( selector );

					if ( ret ) {
						if ( jQuery.isPlainObject( context ) ) {
							selector = [ document.createElement( ret[1] ) ];
							jQuery.fn.attr.call( selector, context, true );

						} else {
							selector = [ doc.createElement( ret[1] ) ];
						}

					} else {
						ret = jQuery.buildFragment( [ match[1] ], [ doc ] );
						selector = ( ret.cacheable ? jQuery.clone(ret.fragment) : ret.fragment ).childNodes;
					}

					return jQuery.merge( this, selector );

				// HANDLE: $("#id")
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.7.1",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return slice.call( this, 0 );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {
		// Build a new jQuery matched element set
		var ret = this.constructor();

		if ( jQuery.isArray( elems ) ) {
			push.apply( ret, elems );

		} else {
			jQuery.merge( ret, elems );
		}

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Attach the listeners
		jQuery.bindReady();

		// Add the callback
		readyList.add( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ),
			"slice", slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {
		// Either a released hold or an DOMready/load event and not yet ready
		if ( (wait === true && !--jQuery.readyWait) || (wait !== true && !jQuery.isReady) ) {
			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready, 1 );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.fireWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.trigger ) {
				jQuery( document ).trigger( "ready" ).off( "ready" );
			}
		}
	},

	bindReady: function() {
		if ( readyList ) {
			return;
		}

		readyList = jQuery.Callbacks( "once memory" );

		// Catch cases where $(document).ready() is called after the
		// browser event has already occurred.
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			return setTimeout( jQuery.ready, 1 );
		}

		// Mozilla, Opera and webkit nightlies currently support this event
		if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else if ( document.attachEvent ) {
			// ensure firing before onload,
			// maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var toplevel = false;

			try {
				toplevel = window.frameElement == null;
			} catch(e) {}

			if ( document.documentElement.doScroll && toplevel ) {
				doScrollCheck();
			}
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	// A crude way of determining if an object is a window
	isWindow: function( obj ) {
		return obj && typeof obj === "object" && "setInterval" in obj;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		for ( var name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	parseJSON: function( data ) {
		if ( typeof data !== "string" || !data ) {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();
	},

	// args is for internal usage only
	each: function( object, callback, args ) {
		var name, i = 0,
			length = object.length,
			isObj = length === undefined || jQuery.isFunction( object );

		if ( args ) {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.apply( object[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( object[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in object ) {
					if ( callback.call( object[ name ], name, object[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( object[ i ], i, object[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return object;
	},

	// Use native String.trim function wherever possible
	trim: trim ?
		function( text ) {
			return text == null ?
				"" :
				trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				text.toString().replace( trimLeft, "" ).replace( trimRight, "" );
		},

	// results is for internal usage only
	makeArray: function( array, results ) {
		var ret = results || [];

		if ( array != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			var type = jQuery.type( array );

			if ( array.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( array ) ) {
				push.call( ret, array );
			} else {
				jQuery.merge( ret, array );
			}
		}

		return ret;
	},

	inArray: function( elem, array, i ) {
		var len;

		if ( array ) {
			if ( indexOf ) {
				return indexOf.call( array, elem, i );
			}

			len = array.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in array && array[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var i = first.length,
			j = 0;

		if ( typeof second.length === "number" ) {
			for ( var l = second.length; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var ret = [], retVal;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( var i = 0, length = elems.length; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key, ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		if ( typeof context === "string" ) {
			var tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		var args = slice.call( arguments, 2 ),
			proxy = function() {
				return fn.apply( context, args.concat( slice.call( arguments ) ) );
			};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;

		return proxy;
	},

	// Mutifunctional method to get and set values to a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, key, value, exec, fn, pass ) {
		var length = elems.length;

		// Setting many attributes
		if ( typeof key === "object" ) {
			for ( var k in key ) {
				jQuery.access( elems, k, key[k], exec, fn, value );
			}
			return elems;
		}

		// Setting one attribute
		if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = !pass && exec && jQuery.isFunction(value);

			for ( var i = 0; i < length; i++ ) {
				fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
			}

			return elems;
		}

		// Getting an attribute
		return length ? fn( elems[0], key ) : undefined;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// Use of jQuery.browser is frowned upon.
	// More details: http://docs.jquery.com/Utilities/jQuery.browser
	uaMatch: function( ua ) {
		ua = ua.toLowerCase();

		var match = rwebkit.exec( ua ) ||
			ropera.exec( ua ) ||
			rmsie.exec( ua ) ||
			ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
			[];

		return { browser: match[1] || "", version: match[2] || "0" };
	},

	sub: function() {
		function jQuerySub( selector, context ) {
			return new jQuerySub.fn.init( selector, context );
		}
		jQuery.extend( true, jQuerySub, this );
		jQuerySub.superclass = this;
		jQuerySub.fn = jQuerySub.prototype = this();
		jQuerySub.fn.constructor = jQuerySub;
		jQuerySub.sub = this.sub;
		jQuerySub.fn.init = function init( selector, context ) {
			if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
				context = jQuerySub( context );
			}

			return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
		};
		jQuerySub.fn.init.prototype = jQuerySub.fn;
		var rootjQuerySub = jQuerySub(document);
		return jQuerySub;
	},

	browser: {}
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

browserMatch = jQuery.uaMatch( userAgent );
if ( browserMatch.browser ) {
	jQuery.browser[ browserMatch.browser ] = true;
	jQuery.browser.version = browserMatch.version;
}

// Deprecated, use jQuery.browser.webkit instead
if ( jQuery.browser.webkit ) {
	jQuery.browser.safari = true;
}

// IE doesn't match non-breaking spaces with \s
if ( rnotwhite.test( "\xA0" ) ) {
	trimLeft = /^[\s\xA0]+/;
	trimRight = /[\s\xA0]+$/;
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);

// Cleanup functions for the document ready method
if ( document.addEventListener ) {
	DOMContentLoaded = function() {
		document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
		jQuery.ready();
	};

} else if ( document.attachEvent ) {
	DOMContentLoaded = function() {
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( document.readyState === "complete" ) {
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	};
}

// The DOM ready check for Internet Explorer
function doScrollCheck() {
	if ( jQuery.isReady ) {
		return;
	}

	try {
		// If IE is used, use the trick by Diego Perini
		// http://javascript.nwbox.com/IEContentLoaded/
		document.documentElement.doScroll("left");
	} catch(e) {
		setTimeout( doScrollCheck, 1 );
		return;
	}

	// and execute any waiting functions
	jQuery.ready();
}

return jQuery;

})();


// String to Object flags format cache
var flagsCache = {};

// Convert String-formatted flags into Object-formatted ones and store in cache
function createFlags( flags ) {
	var object = flagsCache[ flags ] = {},
		i, length;
	flags = flags.split( /\s+/ );
	for ( i = 0, length = flags.length; i < length; i++ ) {
		object[ flags[i] ] = true;
	}
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	flags:	an optional list of space-separated flags that will change how
 *			the callback list behaves
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible flags:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( flags ) {

	// Convert flags from String-formatted to Object-formatted
	// (we check in cache first)
	flags = flags ? ( flagsCache[ flags ] || createFlags( flags ) ) : {};

	var // Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = [],
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Add one or several callbacks to the list
		add = function( args ) {
			var i,
				length,
				elem,
				type,
				actual;
			for ( i = 0, length = args.length; i < length; i++ ) {
				elem = args[ i ];
				type = jQuery.type( elem );
				if ( type === "array" ) {
					// Inspect recursively
					add( elem );
				} else if ( type === "function" ) {
					// Add if not in unique mode and callback is not in
					if ( !flags.unique || !self.has( elem ) ) {
						list.push( elem );
					}
				}
			}
		},
		// Fire callbacks
		fire = function( context, args ) {
			args = args || [];
			memory = !flags.memory || [ context, args ];
			firing = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( context, args ) === false && flags.stopOnFalse ) {
					memory = true; // Mark as halted
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( !flags.once ) {
					if ( stack && stack.length ) {
						memory = stack.shift();
						self.fireWith( memory[ 0 ], memory[ 1 ] );
					}
				} else if ( memory === true ) {
					self.disable();
				} else {
					list = [];
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					var length = list.length;
					add( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away, unless previous
					// firing was halted (stopOnFalse)
					} else if ( memory && memory !== true ) {
						firingStart = length;
						fire( memory[ 0 ], memory[ 1 ] );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					var args = arguments,
						argIndex = 0,
						argLength = args.length;
					for ( ; argIndex < argLength ; argIndex++ ) {
						for ( var i = 0; i < list.length; i++ ) {
							if ( args[ argIndex ] === list[ i ] ) {
								// Handle firingIndex and firingLength
								if ( firing ) {
									if ( i <= firingLength ) {
										firingLength--;
										if ( i <= firingIndex ) {
											firingIndex--;
										}
									}
								}
								// Remove the element
								list.splice( i--, 1 );
								// If we have some unicity property then
								// we only need to do this once
								if ( flags.unique ) {
									break;
								}
							}
						}
					}
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				if ( list ) {
					var i = 0,
						length = list.length;
					for ( ; i < length; i++ ) {
						if ( fn === list[ i ] ) {
							return true;
						}
					}
				}
				return false;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory || memory === true ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( stack ) {
					if ( firing ) {
						if ( !flags.once ) {
							stack.push( [ context, args ] );
						}
					} else if ( !( flags.once && memory ) ) {
						fire( context, args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!memory;
			}
		};

	return self;
};




var // Static reference to slice
	sliceDeferred = [].slice;

jQuery.extend({

	Deferred: function( func ) {
		var doneList = jQuery.Callbacks( "once memory" ),
			failList = jQuery.Callbacks( "once memory" ),
			progressList = jQuery.Callbacks( "memory" ),
			state = "pending",
			lists = {
				resolve: doneList,
				reject: failList,
				notify: progressList
			},
			promise = {
				done: doneList.add,
				fail: failList.add,
				progress: progressList.add,

				state: function() {
					return state;
				},

				// Deprecated
				isResolved: doneList.fired,
				isRejected: failList.fired,

				then: function( doneCallbacks, failCallbacks, progressCallbacks ) {
					deferred.done( doneCallbacks ).fail( failCallbacks ).progress( progressCallbacks );
					return this;
				},
				always: function() {
					deferred.done.apply( deferred, arguments ).fail.apply( deferred, arguments );
					return this;
				},
				pipe: function( fnDone, fnFail, fnProgress ) {
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( {
							done: [ fnDone, "resolve" ],
							fail: [ fnFail, "reject" ],
							progress: [ fnProgress, "notify" ]
						}, function( handler, data ) {
							var fn = data[ 0 ],
								action = data[ 1 ],
								returned;
							if ( jQuery.isFunction( fn ) ) {
								deferred[ handler ](function() {
									returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise().then( newDefer.resolve, newDefer.reject, newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								});
							} else {
								deferred[ handler ]( newDefer[ action ] );
							}
						});
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					if ( obj == null ) {
						obj = promise;
					} else {
						for ( var key in promise ) {
							obj[ key ] = promise[ key ];
						}
					}
					return obj;
				}
			},
			deferred = promise.promise({}),
			key;

		for ( key in lists ) {
			deferred[ key ] = lists[ key ].fire;
			deferred[ key + "With" ] = lists[ key ].fireWith;
		}

		// Handle state
		deferred.done( function() {
			state = "resolved";
		}, failList.disable, progressList.lock ).fail( function() {
			state = "rejected";
		}, doneList.disable, progressList.lock );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( firstParam ) {
		var args = sliceDeferred.call( arguments, 0 ),
			i = 0,
			length = args.length,
			pValues = new Array( length ),
			count = length,
			pCount = length,
			deferred = length <= 1 && firstParam && jQuery.isFunction( firstParam.promise ) ?
				firstParam :
				jQuery.Deferred(),
			promise = deferred.promise();
		function resolveFunc( i ) {
			return function( value ) {
				args[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				if ( !( --count ) ) {
					deferred.resolveWith( deferred, args );
				}
			};
		}
		function progressFunc( i ) {
			return function( value ) {
				pValues[ i ] = arguments.length > 1 ? sliceDeferred.call( arguments, 0 ) : value;
				deferred.notifyWith( promise, pValues );
			};
		}
		if ( length > 1 ) {
			for ( ; i < length; i++ ) {
				if ( args[ i ] && args[ i ].promise && jQuery.isFunction( args[ i ].promise ) ) {
					args[ i ].promise().then( resolveFunc(i), deferred.reject, progressFunc(i) );
				} else {
					--count;
				}
			}
			if ( !count ) {
				deferred.resolveWith( deferred, args );
			}
		} else if ( deferred !== firstParam ) {
			deferred.resolveWith( deferred, length ? [ firstParam ] : [] );
		}
		return promise;
	}
});




jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		marginDiv,
		fragment,
		tds,
		events,
		eventName,
		i,
		isSupported,
		div = document.createElement( "div" ),
		documentElement = document.documentElement;

	// Preliminary tests
	div.setAttribute("className", "t");
	div.innerHTML = "   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>";

	all = div.getElementsByTagName( "*" );
	a = div.getElementsByTagName( "a" )[ 0 ];

	// Can't get basic test support
	if ( !all || !all.length || !a ) {
		return {};
	}

	// First batch of supports tests
	select = document.createElement( "select" );
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName( "input" )[ 0 ];

	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.55/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form(#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent( "onclick" );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute("type", "radio");
	support.radioValue = input.value === "t";

	input.setAttribute("checked", "checked");
	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	div.innerHTML = "";

	// Check if div with explicit width and no margin-right incorrectly
	// gets computed margin-right based on width of container. For more
	// info see bug #3333
	// Fails in WebKit before Feb 2011 nightlies
	// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
	if ( window.getComputedStyle ) {
		marginDiv = document.createElement( "div" );
		marginDiv.style.width = "0";
		marginDiv.style.marginRight = "0";
		div.style.width = "2px";
		div.appendChild( marginDiv );
		support.reliableMarginRight =
			( parseInt( ( window.getComputedStyle( marginDiv, null ) || { marginRight: 0 } ).marginRight, 10 ) || 0 ) === 0;
	}

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for( i in {
			submit: 1,
			change: 1,
			focusin: 1
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	fragment.removeChild( div );

	// Null elements to avoid leaks in IE
	fragment = select = opt = marginDiv = div = input = null;

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, outer, inner, table, td, offsetSupport,
			conMarginTop, ptlm, vb, style, html,
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		conMarginTop = 1;
		ptlm = "position:absolute;top:0;left:0;width:1px;height:1px;margin:0;";
		vb = "visibility:hidden;border:0;";
		style = "style='" + ptlm + "border:5px solid #000;padding:0;'";
		html = "<div " + style + "><div></div></div>" +
			"<table " + style + " cellpadding='0' cellspacing='0'>" +
			"<tr><td></td></tr></table>";

		container = document.createElement("div");
		container.style.cssText = vb + "width:0;height:0;position:static;top:0;margin-top:" + conMarginTop + "px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName( "td" );
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Figure out if the W3C box model works as expected
		div.innerHTML = "";
		div.style.width = div.style.paddingLeft = "1px";
		jQuery.boxModel = support.boxModel = div.offsetWidth === 2;

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.style.display = "inline";
			div.style.zoom = 1;
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 2 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "";
			div.innerHTML = "<div style='width:4px;'></div>";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 2 );
		}

		div.style.cssText = ptlm + vb;
		div.innerHTML = html;

		outer = div.firstChild;
		inner = outer.firstChild;
		td = outer.nextSibling.firstChild.firstChild;

		offsetSupport = {
			doesNotAddBorder: ( inner.offsetTop !== 5 ),
			doesAddBorderForTableAndCells: ( td.offsetTop === 5 )
		};

		inner.style.position = "fixed";
		inner.style.top = "20px";

		// safari subtracts parent border width here which is 5px
		offsetSupport.fixedPosition = ( inner.offsetTop === 20 || inner.offsetTop === 15 );
		inner.style.position = inner.style.top = "";

		outer.style.overflow = "hidden";
		outer.style.position = "relative";

		offsetSupport.subtractsBorderForOverflowNotVisible = ( inner.offsetTop === -5 );
		offsetSupport.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== conMarginTop );

		body.removeChild( container );
		div  = container = null;

		jQuery.extend( support, offsetSupport );
	});

	return support;
})();




var rbrace = /^(?:\{.*\}|\[.*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	// Please use with caution
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var privateCache, thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey,
			isEvents = name === "events";

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!isEvents && !pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = ++jQuery.uuid;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		privateCache = thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Users should not attempt to inspect the internal events object using jQuery.data,
		// it is undocumented and subject to change. But does anyone listen? No.
		if ( isEvents && !thisCache[ name ] ) {
			return privateCache.events;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			// Reference to internal data cache key
			internalKey = jQuery.expando,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,

			// See jQuery.data for more information
			id = isNode ? elem[ internalKey ] : internalKey;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject(cache[ id ]) ) {
				return;
			}
		}

		// Browsers that fail expando deletion also refuse to delete expandos on
		// the window, but it will allow it on all other JS objects; other browsers
		// don't care
		// Ensure that `cache` is not a window object #10080
		if ( jQuery.support.deleteExpando || !cache.setInterval ) {
			delete cache[ id ];
		} else {
			cache[ id ] = null;
		}

		// We destroyed the cache and need to eliminate the expando on the node to avoid
		// false lookups in the cache for entries that no longer exist
		if ( isNode ) {
			// IE does not allow us to delete expando properties from nodes,
			// nor does it have a removeAttribute function on Document nodes;
			// we must handle all of these cases
			if ( jQuery.support.deleteExpando ) {
				delete elem[ internalKey ];
			} else if ( elem.removeAttribute ) {
				elem.removeAttribute( internalKey );
			} else {
				elem[ internalKey ] = null;
			}
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		if ( elem.nodeName ) {
			var match = jQuery.noData[ elem.nodeName.toLowerCase() ];

			if ( match ) {
				return !(match === true || elem.getAttribute("classid") !== match);
			}
		}

		return true;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, attr, name,
			data = null;

		if ( typeof key === "undefined" ) {
			if ( this.length ) {
				data = jQuery.data( this[0] );

				if ( this[0].nodeType === 1 && !jQuery._data( this[0], "parsedAttrs" ) ) {
					attr = this[0].attributes;
					for ( var i = 0, l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( this[0], name, data[ name ] );
						}
					}
					jQuery._data( this[0], "parsedAttrs", true );
				}
			}

			return data;

		} else if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split(".");
		parts[1] = parts[1] ? "." + parts[1] : "";

		if ( value === undefined ) {
			data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);

			// Try to fetch any internally stored data first
			if ( data === undefined && this.length ) {
				data = jQuery.data( this[0], key );
				data = dataAttr( this[0], key, data );
			}

			return data === undefined && parts[1] ?
				this.data( parts[0] ) :
				data;

		} else {
			return this.each(function() {
				var self = jQuery( this ),
					args = [ parts[0], value ];

				self.triggerHandler( "setData" + parts[1] + "!", args );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + parts[1] + "!", args );
			});
		}
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				jQuery.isNumeric( data ) ? parseFloat( data ) :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	for ( var name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}




function handleQueueMarkDefer( elem, type, src ) {
	var deferDataKey = type + "defer",
		queueDataKey = type + "queue",
		markDataKey = type + "mark",
		defer = jQuery._data( elem, deferDataKey );
	if ( defer &&
		( src === "queue" || !jQuery._data(elem, queueDataKey) ) &&
		( src === "mark" || !jQuery._data(elem, markDataKey) ) ) {
		// Give room for hard-coded callbacks to fire first
		// and eventually mark/queue something else on the element
		setTimeout( function() {
			if ( !jQuery._data( elem, queueDataKey ) &&
				!jQuery._data( elem, markDataKey ) ) {
				jQuery.removeData( elem, deferDataKey, true );
				defer.fire();
			}
		}, 0 );
	}
}

jQuery.extend({

	_mark: function( elem, type ) {
		if ( elem ) {
			type = ( type || "fx" ) + "mark";
			jQuery._data( elem, type, (jQuery._data( elem, type ) || 0) + 1 );
		}
	},

	_unmark: function( force, elem, type ) {
		if ( force !== true ) {
			type = elem;
			elem = force;
			force = false;
		}
		if ( elem ) {
			type = type || "fx";
			var key = type + "mark",
				count = force ? 0 : ( (jQuery._data( elem, key ) || 1) - 1 );
			if ( count ) {
				jQuery._data( elem, key, count );
			} else {
				jQuery.removeData( elem, key, true );
				handleQueueMarkDefer( elem, type, "mark" );
			}
		}
	},

	queue: function( elem, type, data ) {
		var q;
		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			q = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !q || jQuery.isArray(data) ) {
					q = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					q.push( data );
				}
			}
			return q || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			fn = queue.shift(),
			hooks = {};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
		}

		if ( fn ) {
			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			jQuery._data( elem, type + ".run", hooks );
			fn.call( elem, function() {
				jQuery.dequeue( elem, type );
			}, hooks );
		}

		if ( !queue.length ) {
			jQuery.removeData( elem, type + "queue " + type + ".run", true );
			handleQueueMarkDefer( elem, type, "queue" );
		}
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
		}

		if ( data === undefined ) {
			return jQuery.queue( this[0], type );
		}
		return this.each(function() {
			var queue = jQuery.queue( this, type, data );

			if ( type === "fx" && queue[0] !== "inprogress" ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, object ) {
		if ( typeof type !== "string" ) {
			object = type;
			type = undefined;
		}
		type = type || "fx";
		var defer = jQuery.Deferred(),
			elements = this,
			i = elements.length,
			count = 1,
			deferDataKey = type + "defer",
			queueDataKey = type + "queue",
			markDataKey = type + "mark",
			tmp;
		function resolve() {
			if ( !( --count ) ) {
				defer.resolveWith( elements, [ elements ] );
			}
		}
		while( i-- ) {
			if (( tmp = jQuery.data( elements[ i ], deferDataKey, undefined, true ) ||
					( jQuery.data( elements[ i ], queueDataKey, undefined, true ) ||
						jQuery.data( elements[ i ], markDataKey, undefined, true ) ) &&
					jQuery.data( elements[ i ], deferDataKey, jQuery.Callbacks( "once memory" ), true ) )) {
				count++;
				tmp.add( resolve );
			}
		}
		resolve();
		return defer.promise();
	}
});




var rclass = /[\n\t\r]/g,
	rspace = /\s+/,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea)?$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	nodeHook, boolHook, fixSpecified;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, name, value, true, jQuery.attr );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, name, value, true, jQuery.prop );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( !~setClass.indexOf( " " + classNames[ c ] + " " ) ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, i, l, elem, className, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}

		if ( (value && typeof value === "string") || value === undefined ) {
			classNames = ( value || "" ).split( rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 && elem.className ) {
					if ( value ) {
						className = (" " + elem.className + " ").replace( rclass, " " );
						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							className = className.replace(" " + classNames[ c ] + " ", " ");
						}
						elem.className = jQuery.trim( className );

					} else {
						elem.className = "";
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space seperated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.nodeName.toLowerCase() ] || jQuery.valHooks[ elem.type ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var self = jQuery(this), val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.nodeName.toLowerCase() ] || jQuery.valHooks[ this.type ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, i, max, option,
					index = elem.selectedIndex,
					values = [],
					options = elem.options,
					one = elem.type === "select-one";

				// Nothing was selected
				if ( index < 0 ) {
					return null;
				}

				// Loop through all the selected options
				i = one ? index : 0;
				max = one ? index + 1 : options.length;
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Don't return options that are disabled or in a disabled optgroup
					if ( option.selected && (jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null) &&
							(!option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" )) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				// Fixes Bug #2551 -- select.val() broken in IE after form.reset()
				if ( one && !values.length && options.length ) {
					return jQuery( options[ index ] ).val();
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attrFn: {
		val: true,
		css: true,
		html: true,
		text: true,
		data: true,
		width: true,
		height: true,
		offset: true
	},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && name in jQuery.attrFn ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, "" + value );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, l,
			i = 0;

		if ( value && elem.nodeType === 1 ) {
			attrNames = value.toLowerCase().split( rspace );
			l = attrNames.length;

			for ( ; i < l; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;

					// See #9699 for explanation of this approach (setting first, then removal)
					jQuery.attr( elem, name, "" );
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( rboolean.test( name ) && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Add the tabIndex propHook to attrHooks for back-compat (different case is intentional)
jQuery.attrHooks.tabindex = jQuery.propHooks.tabIndex;

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.nodeValue !== "" : ret.specified ) ?
				ret.nodeValue :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.nodeValue = value + "" );
		}
	};

	// Apply the nodeHook to tabindex
	jQuery.attrHooks.tabindex.set = nodeHook.set;

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = "" + value );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});




var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*)?(?:\.(.+))?$/,
	rhoverHack = /\bhover(\.\S+)?\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rquickIs = /^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,
	quickParse = function( selector ) {
		var quick = rquickIs.exec( selector );
		if ( quick ) {
			//   0  1    2   3
			// [ _, tag, id, class ]
			quick[1] = ( quick[1] || "" ).toLowerCase();
			quick[3] = quick[3] && new RegExp( "(?:^|\\s)" + quick[3] + "(?:\\s|$)" );
		}
		return quick;
	},
	quickIs = function( elem, m ) {
		var attrs = elem.attributes || {};
		return (
			(!m[1] || elem.nodeName.toLowerCase() === m[1]) &&
			(!m[2] || (attrs.id || {}).value === m[2]) &&
			(!m[3] || m[3].test( (attrs[ "class" ] || {}).value ))
		);
	},
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, quick, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				quick: quickParse( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var elemData = jQuery.hasData( elem ) && jQuery._data( elem ),
			t, tns, type, origType, namespaces, origCount,
			j, events, special, handle, eventType, handleObj;

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.)?") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			handle = elemData.handle;
			if ( handle ) {
				handle.elem = null;
			}

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, [ "events", "handle" ], true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var type = event.type || event,
			namespaces = [],
			cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType;

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.)?") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			old = null;
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old && old === elem.ownerDocument ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = [].slice.call( arguments, 0 ),
			run_all = !event.exclusive && !event.namespace,
			handlerQueue = [],
			i, j, cur, jqcur, ret, selMatch, matched, matches, handleObj, sel, related;

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Determine handlers that should run if there are delegated events
		// Avoid disabled elements in IE (#6911) and non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !event.target.disabled && !(event.button && event.type === "click") ) {

			// Pregenerate a single jQuery object for reuse with .is()
			jqcur = jQuery(this);
			jqcur.context = this.ownerDocument || this;

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {
				selMatch = {};
				matches = [];
				jqcur[0] = cur;
				for ( i = 0; i < delegateCount; i++ ) {
					handleObj = handlers[ i ];
					sel = handleObj.selector;

					if ( selMatch[ sel ] === undefined ) {
						selMatch[ sel ] = (
							handleObj.quick ? quickIs( cur, handleObj.quick ) : jqcur.is( sel )
						);
					}
					if ( selMatch[ sel ] ) {
						matches.push( handleObj );
					}
				}
				if ( matches.length ) {
					handlerQueue.push({ elem: cur, matches: matches });
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events; add metaKey if it's not there (#3368, IE6/7/8)
		if ( event.metaKey === undefined ) {
			event.metaKey = event.ctrlKey;
		}

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		ready: {
			// Make sure the ready event is setup
			setup: jQuery.bindReady
		},

		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		if ( elem.detachEvent ) {
			elem.detachEvent( "on" + type, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector,
				ret;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !form._submit_attached ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						// If form was submitted by the user, bubble the event up the tree
						if ( this.parentNode && !event.isTrigger ) {
							jQuery.event.simulate( "submit", this.parentNode, event, true );
						}
					});
					form._submit_attached = true;
				}
			});
			// return undefined since we don't need an event listener
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
							jQuery.event.simulate( "change", this, event, true );
						}
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !elem._change_attached ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					elem._change_attached = true;
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on.call( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			var handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace? handleObj.type + "." + handleObj.namespace : handleObj.type,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( var type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length == 1? this.off( selector, "**" ) : this.off( types, selector, fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( jQuery.attrFn ) {
		jQuery.attrFn[ name ] = true;
	}

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});



/*!
 * Sizzle CSS Selector Engine
 *  Copyright 2011, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
(function(){

var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	expando = "sizcache" + (Math.random() + '').replace('.', ''),
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true,
	rBackslash = /\\/g,
	rReturn = /\r\n/g,
	rNonWord = /\W/;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
[0, 0].sort(function() {
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function( selector, context, results, seed ) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}
	
	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var m, set, checkSet, extra, ret, cur, pop, i,
		prune = true,
		contextXML = Sizzle.isXML( context ),
		parts = [],
		soFar = selector;
	
	// Reset the position of the chunker regexp (start from head)
	do {
		chunker.exec( "" );
		m = chunker.exec( soFar );

		if ( m ) {
			soFar = m[3];
		
			parts.push( m[1] );
		
			if ( m[2] ) {
				extra = m[3];
				break;
			}
		}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {

		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context, seed );

		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ) {
					selector += parts.shift();
				}
				
				set = posProcess( selector, set, seed );
			}
		}

	} else {
		// Take a shortcut and set the context if the root selector is an ID
		// (but not if it'll be faster if the inner selector is an ID)
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {

			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ?
				Sizzle.filter( ret.expr, ret.set )[0] :
				ret.set[0];
		}

		if ( context ) {
			ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );

			set = ret.expr ?
				Sizzle.filter( ret.expr, ret.set ) :
				ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray( set );

			} else {
				prune = false;
			}

			while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}

		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );

		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}

		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}

	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function( results ) {
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[ i - 1 ] ) {
					results.splice( i--, 1 );
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function( expr, set ) {
	return Sizzle( expr, null, null, set );
};

Sizzle.matchesSelector = function( node, expr ) {
	return Sizzle( expr, null, null, [node] ).length > 0;
};

Sizzle.find = function( expr, context, isXML ) {
	var set, i, len, match, type, left;

	if ( !expr ) {
		return [];
	}

	for ( i = 0, len = Expr.order.length; i < len; i++ ) {
		type = Expr.order[i];
		
		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			left = match[1];
			match.splice( 1, 1 );

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace( rBackslash, "" );
				set = Expr.find[ type ]( match, context, isXML );

				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( "*" ) :
			[];
	}

	return { set: set, expr: expr };
};

Sizzle.filter = function( expr, set, inplace, not ) {
	var match, anyFound,
		type, found, item, filter, left,
		i, pass,
		old = expr,
		result = [],
		curLoop = set,
		isXMLFilter = set && set[0] && Sizzle.isXML( set[0] );

	while ( expr && set.length ) {
		for ( type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				filter = Expr.filter[ type ];
				left = match[1];

				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;

					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							pass = not ^ found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;

								} else {
									curLoop[i] = false;
								}

							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );

			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Utility function for retreiving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
var getText = Sizzle.getText = function( elem ) {
    var i, node,
		nodeType = elem.nodeType,
		ret = "";

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 ) {
			// Use textContent || innerText for elements
			if ( typeof elem.textContent === 'string' ) {
				return elem.textContent;
			} else if ( typeof elem.innerText === 'string' ) {
				// Replace IE's carriage returns
				return elem.innerText.replace( rReturn, '' );
			} else {
				// Traverse it's children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
	} else {

		// If no nodeType, this is expected to be an array
		for ( i = 0; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			if ( node.nodeType !== 8 ) {
				ret += getText( node );
			}
		}
	}
	return ret;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],

	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},

	leftMatch: {},

	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},

	attrHandle: {
		href: function( elem ) {
			return elem.getAttribute( "href" );
		},
		type: function( elem ) {
			return elem.getAttribute( "type" );
		}
	},

	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !rNonWord.test( part ),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},

		">": function( checkSet, part ) {
			var elem,
				isPartStr = typeof part === "string",
				i = 0,
				l = checkSet.length;

			if ( isPartStr && !rNonWord.test( part ) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}

			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];

					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},

		"": function(checkSet, part, isXML){
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "parentNode", part, doneName, checkSet, nodeCheck, isXML );
		},

		"~": function( checkSet, part, isXML ) {
			var nodeCheck,
				doneName = done++,
				checkFn = dirCheck;

			if ( typeof part === "string" && !rNonWord.test( part ) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn( "previousSibling", part, doneName, checkSet, nodeCheck, isXML );
		}
	},

	find: {
		ID: function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		},

		NAME: function( match, context ) {
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [],
					results = context.getElementsByName( match[1] );

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},

		TAG: function( match, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( match[1] );
			}
		}
	},
	preFilter: {
		CLASS: function( match, curLoop, inplace, result, not, isXML ) {
			match = " " + match[1].replace( rBackslash, "" ) + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n\r]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}

					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},

		ID: function( match ) {
			return match[1].replace( rBackslash, "" );
		},

		TAG: function( match, curLoop ) {
			return match[1].replace( rBackslash, "" ).toLowerCase();
		},

		CHILD: function( match ) {
			if ( match[1] === "nth" ) {
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				match[2] = match[2].replace(/^\+|\s*/g, '');

				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)(?:n([+\-]?\d*))?/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}
			else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},

		ATTR: function( match, curLoop, inplace, result, not, isXML ) {
			var name = match[1] = match[1].replace( rBackslash, "" );
			
			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			// Handle if an un-quoted value was used
			match[4] = ( match[4] || match[5] || "" ).replace( rBackslash, "" );

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},

		PSEUDO: function( match, curLoop, inplace, result, not ) {
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);

				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);

					if ( !inplace ) {
						result.push.apply( result, ret );
					}

					return false;
				}

			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}
			
			return match;
		},

		POS: function( match ) {
			match.unshift( true );

			return match;
		}
	},
	
	filters: {
		enabled: function( elem ) {
			return elem.disabled === false && elem.type !== "hidden";
		},

		disabled: function( elem ) {
			return elem.disabled === true;
		},

		checked: function( elem ) {
			return elem.checked === true;
		},
		
		selected: function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}
			
			return elem.selected === true;
		},

		parent: function( elem ) {
			return !!elem.firstChild;
		},

		empty: function( elem ) {
			return !elem.firstChild;
		},

		has: function( elem, i, match ) {
			return !!Sizzle( match[3], elem ).length;
		},

		header: function( elem ) {
			return (/h\d/i).test( elem.nodeName );
		},

		text: function( elem ) {
			var attr = elem.getAttribute( "type" ), type = elem.type;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc) 
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" && "text" === type && ( attr === type || attr === null );
		},

		radio: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "radio" === elem.type;
		},

		checkbox: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "checkbox" === elem.type;
		},

		file: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "file" === elem.type;
		},

		password: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "password" === elem.type;
		},

		submit: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "submit" === elem.type;
		},

		image: function( elem ) {
			return elem.nodeName.toLowerCase() === "input" && "image" === elem.type;
		},

		reset: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && "reset" === elem.type;
		},

		button: function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && "button" === elem.type || name === "button";
		},

		input: function( elem ) {
			return (/input|select|textarea|button/i).test( elem.nodeName );
		},

		focus: function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		}
	},
	setFilters: {
		first: function( elem, i ) {
			return i === 0;
		},

		last: function( elem, i, match, array ) {
			return i === array.length - 1;
		},

		even: function( elem, i ) {
			return i % 2 === 0;
		},

		odd: function( elem, i ) {
			return i % 2 === 1;
		},

		lt: function( elem, i, match ) {
			return i < match[3] - 0;
		},

		gt: function( elem, i, match ) {
			return i > match[3] - 0;
		},

		nth: function( elem, i, match ) {
			return match[3] - 0 === i;
		},

		eq: function( elem, i, match ) {
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function( elem, match, i, array ) {
			var name = match[1],
				filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );

			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;

			} else if ( name === "not" ) {
				var not = match[3];

				for ( var j = 0, l = not.length; j < l; j++ ) {
					if ( not[j] === elem ) {
						return false;
					}
				}

				return true;

			} else {
				Sizzle.error( name );
			}
		},

		CHILD: function( elem, match ) {
			var first, last,
				doneName, parent, cache,
				count, diff,
				type = match[1],
				node = elem;

			switch ( type ) {
				case "only":
				case "first":
					while ( (node = node.previousSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}

					if ( type === "first" ) { 
						return true; 
					}

					node = elem;

				case "last":
					while ( (node = node.nextSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}

					return true;

				case "nth":
					first = match[2];
					last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}
					
					doneName = match[0];
					parent = elem.parentNode;
	
					if ( parent && (parent[ expando ] !== doneName || !elem.nodeIndex) ) {
						count = 0;
						
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						} 

						parent[ expando ] = doneName;
					}
					
					diff = elem.nodeIndex - last;

					if ( first === 0 ) {
						return diff === 0;

					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},

		ID: function( elem, match ) {
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},

		TAG: function( elem, match ) {
			return (match === "*" && elem.nodeType === 1) || !!elem.nodeName && elem.nodeName.toLowerCase() === match;
		},
		
		CLASS: function( elem, match ) {
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},

		ATTR: function( elem, match ) {
			var name = match[1],
				result = Sizzle.attr ?
					Sizzle.attr( elem, name ) :
					Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				!type && Sizzle.attr ?
				result != null :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},

		POS: function( elem, match, i, array ) {
			var name = match[2],
				filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}

var makeArray = function( array, results ) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}
	
	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

// Provide a fallback method if it does not work
} catch( e ) {
	makeArray = function( array, results ) {
		var i = 0,
			ret = results || [];

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );

		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}

			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder, siblingCheck;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			return a.compareDocumentPosition ? -1 : 1;
		}

		return a.compareDocumentPosition(b) & 4 ? -1 : 1;
	};

} else {
	sortOrder = function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

	siblingCheck = function( a, b, ret ) {
		if ( a === b ) {
			return ret;
		}

		var cur = a.nextSibling;

		while ( cur ) {
			if ( cur === b ) {
				return -1;
			}

			cur = cur.nextSibling;
		}

		return 1;
	};
}

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime(),
		root = document.documentElement;

	form.innerHTML = "<a name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( document.getElementById( id ) ) {
		Expr.find.ID = function( match, context, isXML ) {
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);

				return m ?
					m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ?
						[m] :
						undefined :
					[];
			}
		};

		Expr.filter.ID = function( elem, match ) {
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");

			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );

	// release memory in IE
	root = form = null;
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function( match, context ) {
			var results = context.getElementsByTagName( match[1] );

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";

	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {

		Expr.attrHandle.href = function( elem ) {
			return elem.getAttribute( "href", 2 );
		};
	}

	// release memory in IE
	div = null;
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle,
			div = document.createElement("div"),
			id = "__sizzle__";

		div.innerHTML = "<p class='TEST'></p>";

		// Safari can't handle uppercase or unicode characters when
		// in quirks mode.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
			return;
		}
	
		Sizzle = function( query, context, extra, seed ) {
			context = context || document;

			// Only use querySelectorAll on non-XML documents
			// (ID selectors don't work in non-HTML documents)
			if ( !seed && !Sizzle.isXML(context) ) {
				// See if we find a selector to speed up
				var match = /^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec( query );
				
				if ( match && (context.nodeType === 1 || context.nodeType === 9) ) {
					// Speed-up: Sizzle("TAG")
					if ( match[1] ) {
						return makeArray( context.getElementsByTagName( query ), extra );
					
					// Speed-up: Sizzle(".CLASS")
					} else if ( match[2] && Expr.find.CLASS && context.getElementsByClassName ) {
						return makeArray( context.getElementsByClassName( match[2] ), extra );
					}
				}
				
				if ( context.nodeType === 9 ) {
					// Speed-up: Sizzle("body")
					// The body element only exists once, optimize finding it
					if ( query === "body" && context.body ) {
						return makeArray( [ context.body ], extra );
						
					// Speed-up: Sizzle("#ID")
					} else if ( match && match[3] ) {
						var elem = context.getElementById( match[3] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id === match[3] ) {
								return makeArray( [ elem ], extra );
							}
							
						} else {
							return makeArray( [], extra );
						}
					}
					
					try {
						return makeArray( context.querySelectorAll(query), extra );
					} catch(qsaError) {}

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				} else if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					var oldContext = context,
						old = context.getAttribute( "id" ),
						nid = old || id,
						hasParent = context.parentNode,
						relativeHierarchySelector = /^\s*[+~]/.test( query );

					if ( !old ) {
						context.setAttribute( "id", nid );
					} else {
						nid = nid.replace( /'/g, "\\$&" );
					}
					if ( relativeHierarchySelector && hasParent ) {
						context = context.parentNode;
					}

					try {
						if ( !relativeHierarchySelector || hasParent ) {
							return makeArray( context.querySelectorAll( "[id='" + nid + "'] " + query ), extra );
						}

					} catch(pseudoError) {
					} finally {
						if ( !old ) {
							oldContext.removeAttribute( "id" );
						}
					}
				}
			}
		
			return oldSizzle(query, context, extra, seed);
		};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		// release memory in IE
		div = null;
	})();
}

(function(){
	var html = document.documentElement,
		matches = html.matchesSelector || html.mozMatchesSelector || html.webkitMatchesSelector || html.msMatchesSelector;

	if ( matches ) {
		// Check to see if it's possible to do matchesSelector
		// on a disconnected node (IE 9 fails this)
		var disconnectedMatch = !matches.call( document.createElement( "div" ), "div" ),
			pseudoWorks = false;

		try {
			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( document.documentElement, "[test!='']:sizzle" );
	
		} catch( pseudoError ) {
			pseudoWorks = true;
		}

		Sizzle.matchesSelector = function( node, expr ) {
			// Make sure that attribute selectors are quoted
			expr = expr.replace(/\=\s*([^'"\]]*)\s*\]/g, "='$1']");

			if ( !Sizzle.isXML( node ) ) {
				try { 
					if ( pseudoWorks || !Expr.match.PSEUDO.test( expr ) && !/!=/.test( expr ) ) {
						var ret = matches.call( node, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || !disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9, so check for that
								node.document && node.document.nodeType !== 11 ) {
							return ret;
						}
					}
				} catch(e) {}
			}

			return Sizzle(expr, null, null, [node]).length > 0;
		};
	}
})();

(function(){
	var div = document.createElement("div");

	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	// Also, make sure that getElementsByClassName actually exists
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}
	
	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function( match, context, isXML ) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	// release memory in IE
	div = null;
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;

			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem[ expando ] = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];

		if ( elem ) {
			var match = false;
			
			elem = elem[dir];

			while ( elem ) {
				if ( elem[ expando ] === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem[ expando ] = doneName;
						elem.sizset = i;
					}

					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

if ( document.documentElement.contains ) {
	Sizzle.contains = function( a, b ) {
		return a !== b && (a.contains ? a.contains(b) : true);
	};

} else if ( document.documentElement.compareDocumentPosition ) {
	Sizzle.contains = function( a, b ) {
		return !!(a.compareDocumentPosition(b) & 16);
	};

} else {
	Sizzle.contains = function() {
		return false;
	};
}

Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833) 
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;

	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function( selector, context, seed ) {
	var match,
		tmpSet = [],
		later = "",
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet, seed );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE
// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
Sizzle.selectors.attrMap = {};
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.filters;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})();


var runtil = /Until$/,
	rparentsprev = /^(?:parents|prevUntil|prevAll)/,
	// Note: This RegExp should be improved, or likely pulled from Sizzle
	rmultiselector = /,/,
	isSimple = /^.[^:#\[\.,]*$/,
	slice = Array.prototype.slice,
	POS = jQuery.expr.match.POS,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var self = this,
			i, l;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		var ret = this.pushStack( "", "find", selector ),
			length, n, r;

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var targets = jQuery( target );
		return this.filter(function() {
			for ( var i = 0, l = targets.length; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && ( 
			typeof selector === "string" ?
				// If this is a positional selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				POS.test( selector ) ? 
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var ret = [], i, l, cur = this[0];
		
		// Array (deprecated as of jQuery 1.7)
		if ( jQuery.isArray( selectors ) ) {
			var level = 1;

			while ( cur && cur.ownerDocument && cur !== context ) {
				for ( i = 0; i < selectors.length; i++ ) {

					if ( jQuery( cur ).is( selectors[ i ] ) ) {
						ret.push({ selector: selectors[ i ], elem: cur, level: level });
					}
				}

				cur = cur.parentNode;
				level++;
			}

			return ret;
		}

		// String
		var pos = POS.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( i = 0, l = this.length; i < l; i++ ) {
			cur = this[i];

			while ( cur ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;

				} else {
					cur = cur.parentNode;
					if ( !cur || !cur.ownerDocument || cur === context || cur.nodeType === 11 ) {
						break;
					}
				}
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	andSelf: function() {
		return this.add( this.prevObject );
	}
});

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return jQuery.nth( elem, 2, "nextSibling" );
	},
	prev: function( elem ) {
		return jQuery.nth( elem, 2, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( elem.parentNode.firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.makeArray( elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	nth: function( cur, result, dir, elem ) {
		result = result || 1;
		var num = 0;

		for ( ; cur; cur = cur[dir] ) {
			if ( cur.nodeType === 1 && ++num === result ) {
				break;
			}
		}

		return cur;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}




function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:\d+|null)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")", "i"),
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)/,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE can't serialize <link> and <script> tags normally
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "div<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( text ) {
		if ( jQuery.isFunction(text) ) {
			return this.each(function(i) {
				var self = jQuery( this );

				self.text( text.call(this, i, self.text()) );
			});
		}

		if ( typeof text !== "object" && text !== undefined ) {
			return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );
		}

		return jQuery.text( this );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		} else if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			set.push.apply( set, this.toArray() );
			return this.pushStack( set, "before", arguments );
		}
	},

	after: function() {
		if ( this[0] && this[0].parentNode ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		} else if ( arguments.length ) {
			var set = this.pushStack( this, "after", arguments );
			set.push.apply( set, jQuery.clean(arguments) );
			return set;
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		if ( value === undefined ) {
			return this[0] && this[0].nodeType === 1 ?
				this[0].innerHTML.replace(rinlinejQuery, "") :
				null;

		// See if we can take a shortcut and just use innerHTML
		} else if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
			(jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value )) &&
			!wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {

			value = value.replace(rxhtmlTag, "<$1></$2>");

			try {
				for ( var i = 0, l = this.length; i < l; i++ ) {
					// Remove element nodes and prevent memory leaks
					if ( this[i].nodeType === 1 ) {
						jQuery.cleanData( this[i].getElementsByTagName("*") );
						this[i].innerHTML = value;
					}
				}

			// If using innerHTML throws an exception, use the fallback method
			} catch(e) {
				this.empty().append( value );
			}

		} else if ( jQuery.isFunction( value ) ) {
			this.each(function(i){
				var self = jQuery( this );

				self.html( value.call(this, i, self.html()) );
			});

		} else {
			this.empty().append( value );
		}

		return this;
	},

	replaceWith: function( value ) {
		if ( this[0] && this[0].parentNode ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		} else {
			return this.length ?
				this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
				this;
		}
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {
		var results, first, fragment, parent,
			value = args[0],
			scripts = [];

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback, true );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call(this, i, table ? self.html() : undefined);
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			parent = value && value.parentNode;

			// If we're in a fragment, just use that instead of building a new one
			if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {
				results = { fragment: parent };

			} else {
				results = jQuery.buildFragment( args, this, scripts );
			}

			fragment = results.fragment;

			if ( fragment.childNodes.length === 1 ) {
				first = fragment = fragment.firstChild;
			} else {
				first = fragment.firstChild;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				for ( var i = 0, l = this.length, lastIndex = l - 1; i < l; i++ ) {
					callback.call(
						table ?
							root(this[i], first) :
							this[i],
						// Make sure that we do not leak memory by inadvertently discarding
						// the original fragment (which might have attached data) instead of
						// using it; in addition, use the original fragment object for the last
						// item instead of first because it can end up being emptied incorrectly
						// in certain situations (Bug #8070).
						// Fragments from the fragment cache must always be cloned and never used
						// in place.
						results.cacheable || ( l > 1 && i < lastIndex ) ?
							jQuery.clone( fragment, true, true ) :
							fragment
					);
				}
			}

			if ( scripts.length ) {
				jQuery.each( scripts, evalScript );
			}
		}

		return this;
	}
});

function root( elem, cur ) {
	return jQuery.nodeName(elem, "table") ?
		(elem.getElementsByTagName("tbody")[0] ||
		elem.appendChild(elem.ownerDocument.createElement("tbody"))) :
		elem;
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type + ( events[ type ][ i ].namespace ? "." : "" ) + events[ type ][ i ].namespace, events[ type ][ i ], events[ type ][ i ].data );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 fail to clone children inside object elements that use
	// the proprietary classid attribute value (rather than the type
	// attribute) to identify the type of content to display
	if ( nodeName === "object" ) {
		dest.outerHTML = src.outerHTML;

	} else if ( nodeName === "input" && (src.type === "checkbox" || src.type === "radio") ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set
		if ( src.checked ) {
			dest.defaultChecked = dest.checked = src.checked;
		}

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );
}

jQuery.buildFragment = function( args, nodes, scripts ) {
	var fragment, cacheable, cacheresults, doc,
	first = args[ 0 ];

	// nodes may contain either an explicit document object,
	// a jQuery collection or context object.
	// If nodes[0] contains a valid object to assign to doc
	if ( nodes && nodes[0] ) {
		doc = nodes[0].ownerDocument || nodes[0];
	}

	// Ensure that an attr object doesn't incorrectly stand in as a document object
	// Chrome and Firefox seem to allow this to occur and will throw exception
	// Fixes #8950
	if ( !doc.createDocumentFragment ) {
		doc = document;
	}

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && doc === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		cacheable = true;

		cacheresults = jQuery.fragments[ first ];
		if ( cacheresults && cacheresults !== 1 ) {
			fragment = cacheresults;
		}
	}

	if ( !fragment ) {
		fragment = doc.createDocumentFragment();
		jQuery.clean( args, doc, fragment, scripts );
	}

	if ( cacheable ) {
		jQuery.fragments[ first ] = cacheresults ? fragment : 1;
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var ret = [],
			insert = jQuery( selector ),
			parent = this.length === 1 && this[0].parentNode;

		if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {
			insert[ original ]( this[0] );
			return this;

		} else {
			for ( var i = 0, l = insert.length; i < l; i++ ) {
				var elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( elem.type === "checkbox" || elem.type === "radio" ) {
		elem.defaultChecked = elem.checked;
	}
}
// Finds all inputs and passes them to fixDefaultChecked
function findInputs( elem ) {
	var nodeName = ( elem.nodeName || "" ).toLowerCase();
	if ( nodeName === "input" ) {
		fixDefaultChecked( elem );
	// Skip scripts, get other children
	} else if ( nodeName !== "script" && typeof elem.getElementsByTagName !== "undefined" ) {
		jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
	}
}

// Derived From: http://www.iecss.com/shimprove/javascript/shimprove.1-0-1.js
function shimCloneNode( elem ) {
	var div = document.createElement( "div" );
	safeFragment.appendChild( div );

	div.innerHTML = elem.outerHTML;
	return div.firstChild;
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			// IE<=8 does not properly clone detached, unknown element nodes
			clone = jQuery.support.html5Clone || !rnoshimcache.test( "<" + elem.nodeName ) ?
				elem.cloneNode( true ) :
				shimCloneNode( elem );

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var checkScriptType;

		context = context || document;

		// !context.createElement fails in IE with an error but returns typeof 'object'
		if ( typeof context.createElement === "undefined" ) {
			context = context.ownerDocument || context[0] && context[0].ownerDocument || document;
		}

		var ret = [], j;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Trim whitespace, otherwise indexOf won't work as expected
					var tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase(),
						wrap = wrapMap[ tag ] || wrapMap._default,
						depth = wrap[0],
						div = context.createElement("div");

					// Append wrapper element to unknown element safe doc fragment
					if ( context === document ) {
						// Use the fragment we've already created for this document
						safeFragment.appendChild( div );
					} else {
						// Use a fragment created with the owner document
						createSafeFragment( context ).appendChild( div );
					}

					// Go to html and back, then peel off extra wrappers
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						var hasBody = rtbody.test(elem),
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;
				}
			}

			// Resets defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			var len;
			if ( !jQuery.support.appendChecked ) {
				if ( elem[0] && typeof (len = elem.length) === "number" ) {
					for ( j = 0; j < len; j++ ) {
						findInputs( elem[j] );
					}
				} else {
					findInputs( elem );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				ret = jQuery.merge( ret, elem );
			}
		}

		if ( fragment ) {
			checkScriptType = function( elem ) {
				return !elem.type || rscriptType.test( elem.type );
			};
			for ( i = 0; ret[i]; i++ ) {
				if ( scripts && jQuery.nodeName( ret[i], "script" ) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript") ) {
					scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( ret[i] ) : ret[i] );

				} else {
					if ( ret[i].nodeType === 1 ) {
						var jsTags = jQuery.grep( ret[i].getElementsByTagName( "script" ), checkScriptType );

						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
					}
					fragment.appendChild( ret[i] );
				}
			}
		}

		return ret;
	},

	cleanData: function( elems ) {
		var data, id,
			cache = jQuery.cache,
			special = jQuery.event.special,
			deleteExpando = jQuery.support.deleteExpando;

		for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {
			if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {
				continue;
			}

			id = elem[ jQuery.expando ];

			if ( id ) {
				data = cache[ id ];

				if ( data && data.events ) {
					for ( var type in data.events ) {
						if ( special[ type ] ) {
							jQuery.event.remove( elem, type );

						// This is a shortcut to avoid jQuery.event.remove's overhead
						} else {
							jQuery.removeEvent( elem, type, data.handle );
						}
					}

					// Null the DOM reference to avoid IE6/7/8 leak (#7054)
					if ( data.handle ) {
						data.handle.elem = null;
					}
				}

				if ( deleteExpando ) {
					delete elem[ jQuery.expando ];

				} else if ( elem.removeAttribute ) {
					elem.removeAttribute( jQuery.expando );
				}

				delete cache[ id ];
			}
		}
	}
});

function evalScript( i, elem ) {
	if ( elem.src ) {
		jQuery.ajax({
			url: elem.src,
			async: false,
			dataType: "script"
		});
	} else {
		jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "/*$0*/" ) );
	}

	if ( elem.parentNode ) {
		elem.parentNode.removeChild( elem );
	}
}




var ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	// fixed for IE9, see #8346
	rupper = /([A-Z]|^ms)/g,
	rnumpx = /^-?\d+(?:px)?$/i,
	rnum = /^-?\d/,
	rrelNum = /^([\-+])=([\-+.\de]+)/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssWidth = [ "Left", "Right" ],
	cssHeight = [ "Top", "Bottom" ],
	curCSS,

	getComputedStyle,
	currentStyle;

jQuery.fn.css = function( name, value ) {
	// Setting 'undefined' is a no-op
	if ( arguments.length === 2 && value === undefined ) {
		return this;
	}

	return jQuery.access( this, name, value, true, function( elem, name, value ) {
		return value !== undefined ?
			jQuery.style( elem, name, value ) :
			jQuery.css( elem, name );
	});
};

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity", "opacity" );
					return ret === "" ? "1" : ret;

				} else {
					return elem.style.opacity;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, origName = jQuery.camelCase( name ),
			style = elem.style, hooks = jQuery.cssHooks[ origName ];

		name = jQuery.cssProps[ origName ] || origName;

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( +( ret[1] + 1) * +ret[2] ) + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra ) {
		var ret, hooks;

		// Make sure that we're working with the right name
		name = jQuery.camelCase( name );
		hooks = jQuery.cssHooks[ name ];
		name = jQuery.cssProps[ name ] || name;

		// cssFloat needs a special treatment
		if ( name === "cssFloat" ) {
			name = "float";
		}

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks && (ret = hooks.get( elem, true, extra )) !== undefined ) {
			return ret;

		// Otherwise, if a way to get the computed value exists, use that
		} else if ( curCSS ) {
			return curCSS( elem, name );
		}
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var old = {};

		// Remember the old values, and insert the new ones
		for ( var name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	}
});

// DEPRECATED, Use jQuery.css() instead
jQuery.curCSS = jQuery.css;

jQuery.each(["height", "width"], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			var val;

			if ( computed ) {
				if ( elem.offsetWidth !== 0 ) {
					return getWH( elem, name, extra );
				} else {
					jQuery.swap( elem, cssShow, function() {
						val = getWH( elem, name, extra );
					});
				}

				return val;
			}
		},

		set: function( elem, value ) {
			if ( rnumpx.test( value ) ) {
				// ignore negative width and height values #1599
				value = parseFloat( value );

				if ( value >= 0 ) {
					return value + "px";
				}

			} else {
				return value;
			}
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( parseFloat( RegExp.$1 ) / 100 ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery(function() {
	// This hook cannot be added until DOM ready because the support test
	// for it is not run until after DOM ready
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				var ret;
				jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						ret = curCSS( elem, "margin-right", "marginRight" );
					} else {
						ret = elem.style.marginRight;
					}
				});
				return ret;
			}
		};
	}
});

if ( document.defaultView && document.defaultView.getComputedStyle ) {
	getComputedStyle = function( elem, name ) {
		var ret, defaultView, computedStyle;

		name = name.replace( rupper, "-$1" ).toLowerCase();

		if ( (defaultView = elem.ownerDocument.defaultView) &&
				(computedStyle = defaultView.getComputedStyle( elem, null )) ) {
			ret = computedStyle.getPropertyValue( name );
			if ( ret === "" && !jQuery.contains( elem.ownerDocument.documentElement, elem ) ) {
				ret = jQuery.style( elem, name );
			}
		}

		return ret;
	};
}

if ( document.documentElement.currentStyle ) {
	currentStyle = function( elem, name ) {
		var left, rsLeft, uncomputed,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret === null && style && (uncomputed = style[ name ]) ) {
			ret = uncomputed;
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		if ( !rnumpx.test( ret ) && rnum.test( ret ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ( ret || 0 );
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

curCSS = getComputedStyle || currentStyle;

function getWH( elem, name, extra ) {

	// Start with offset property
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		which = name === "width" ? cssWidth : cssHeight,
		i = 0,
		len = which.length;

	if ( val > 0 ) {
		if ( extra !== "border" ) {
			for ( ; i < len; i++ ) {
				if ( !extra ) {
					val -= parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
				}
				if ( extra === "margin" ) {
					val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
				} else {
					val -= parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
				}
			}
		}

		return val + "px";
	}

	// Fall back to computed then uncomputed css if necessary
	val = curCSS( elem, name, name );
	if ( val < 0 || val == null ) {
		val = elem.style[ name ] || 0;
	}
	// Normalize "", auto, and prepare for extra
	val = parseFloat( val ) || 0;

	// Add padding, border, margin
	if ( extra ) {
		for ( ; i < len; i++ ) {
			val += parseFloat( jQuery.css( elem, "padding" + which[ i ] ) ) || 0;
			if ( extra !== "padding" ) {
				val += parseFloat( jQuery.css( elem, "border" + which[ i ] + "Width" ) ) || 0;
			}
			if ( extra === "margin" ) {
				val += parseFloat( jQuery.css( elem, extra + which[ i ] ) ) || 0;
			}
		}
	}

	return val + "px";
}

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		var width = elem.offsetWidth,
			height = elem.offsetHeight;

		return ( width === 0 && height === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rselectTextarea = /^(?:select|textarea)/i,
	rspacesAjax = /\s+/,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Document location
	ajaxLocation,

	// Document location segments
	ajaxLocParts,

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		if ( jQuery.isFunction( func ) ) {
			var dataTypes = dataTypeExpression.toLowerCase().split( rspacesAjax ),
				i = 0,
				length = dataTypes.length,
				dataType,
				list,
				placeBefore;

			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters ),
		selection;

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.extend({
	load: function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );

		// Don't do a request if no elements are being requested
		} else if ( !this.length ) {
			return this;
		}

		var off = url.indexOf( " " );
		if ( off >= 0 ) {
			var selector = url.slice( off, url.length );
			url = url.slice( 0, off );
		}

		// Default to a GET request
		var type = "GET";

		// If the second parameter was provided
		if ( params ) {
			// If it's a function
			if ( jQuery.isFunction( params ) ) {
				// We assume that it's the callback
				callback = params;
				params = undefined;

			// Otherwise, build a param string
			} else if ( typeof params === "object" ) {
				params = jQuery.param( params, jQuery.ajaxSettings.traditional );
				type = "POST";
			}
		}

		var self = this;

		// Request the remote document
		jQuery.ajax({
			url: url,
			type: type,
			dataType: "html",
			data: params,
			// Complete callback (responseText is used internally)
			complete: function( jqXHR, status, responseText ) {
				// Store the response as specified by the jqXHR object
				responseText = jqXHR.responseText;
				// If successful, inject the HTML into all the matched elements
				if ( jqXHR.isResolved() ) {
					// #4825: Get the actual response in case
					// a dataFilter is present in ajaxSettings
					jqXHR.done(function( r ) {
						responseText = r;
					});
					// See if a selector was specified
					self.html( selector ?
						// Create a dummy div to hold the results
						jQuery("<div>")
							// inject the contents of the document in, removing the scripts
							// to avoid any 'Permission Denied' errors in IE
							.append(responseText.replace(rscript, ""))

							// Locate the specified elements
							.find(selector) :

						// If not, just inject the full result
						responseText );
				}

				if ( callback ) {
					self.each( callback, [ responseText, status, jqXHR ] );
				}
			}
		});

		return this;
	},

	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},

	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// ifModified key
			ifModifiedKey,
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// The jqXHR state
			state = 0,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || "abort";
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			var isSuccess,
				success,
				error,
				statusText = nativeStatusText,
				response = responses ? ajaxHandleResponses( s, jqXHR, responses ) : undefined,
				lastModified,
				etag;

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					if ( ( lastModified = jqXHR.getResponseHeader( "Last-Modified" ) ) ) {
						jQuery.lastModified[ ifModifiedKey ] = lastModified;
					}
					if ( ( etag = jqXHR.getResponseHeader( "Etag" ) ) ) {
						jQuery.etag[ ifModifiedKey ] = etag;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					try {
						success = ajaxConvert( s, response );
						statusText = "success";
						isSuccess = true;
					} catch(e) {
						// We have a parsererror
						statusText = "parsererror";
						error = e;
					}
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = "" + ( nativeStatusText || statusText );

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.then( tmp, tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( rspacesAjax );

		// Determine if a cross-domain request is in order
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] != ajaxLocParts[ 1 ] || parts[ 2 ] != ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefiler, stop there
		if ( state === 2 ) {
			return false;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already
				jqXHR.abort();
				return false;

		}

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Serialize an array of form elements or a set of
	// key/values into a query string
	param: function( a, traditional ) {
		var s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : value;
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( var prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	}
});

function buildParams( prefix, obj, traditional, add ) {
	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" || jQuery.isArray(v) ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && obj != null && typeof obj === "object" ) {
		// Serialize object item.
		for ( var name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// This is still on the jQuery object... for now
// Want to move this to jQuery.ajax some day
jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields,
		ct,
		type,
		finalDataType,
		firstDataType;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	var dataTypes = s.dataTypes,
		converters = {},
		i,
		key,
		length = dataTypes.length,
		tmp,
		// Current and previous dataTypes
		current = dataTypes[ 0 ],
		prev,
		// Conversion expression
		conversion,
		// Conversion function
		conv,
		// Conversion functions (transitive conversion)
		conv1,
		conv2;

	// For each dataType in the chain
	for ( i = 1; i < length; i++ ) {

		// Create converters map
		// with lowercased keys
		if ( i === 1 ) {
			for ( key in s.converters ) {
				if ( typeof key === "string" ) {
					converters[ key.toLowerCase() ] = s.converters[ key ];
				}
			}
		}

		// Get the dataTypes
		prev = current;
		current = dataTypes[ i ];

		// If current is auto dataType, update it to prev
		if ( current === "*" ) {
			current = prev;
		// If no auto and dataTypes are actually different
		} else if ( prev !== "*" && prev !== current ) {

			// Get the converter
			conversion = prev + " " + current;
			conv = converters[ conversion ] || converters[ "* " + current ];

			// If there is no direct converter, search transitively
			if ( !conv ) {
				conv2 = undefined;
				for ( conv1 in converters ) {
					tmp = conv1.split( " " );
					if ( tmp[ 0 ] === prev || tmp[ 0 ] === "*" ) {
						conv2 = converters[ tmp[1] + " " + current ];
						if ( conv2 ) {
							conv1 = converters[ conv1 ];
							if ( conv1 === true ) {
								conv = conv2;
							} else if ( conv2 === true ) {
								conv = conv1;
							}
							break;
						}
					}
				}
			}
			// If we found no converter, dispatch an error
			if ( !( conv || conv2 ) ) {
				jQuery.error( "No conversion from " + conversion.replace(" "," to ") );
			}
			// If found converter is not an equivalence
			if ( conv !== true ) {
				// Convert with 1 or 2 converters accordingly
				response = conv ? conv( response ) : conv2( conv1(response) );
			}
		}
	}
	return response;
}




var jsc = jQuery.now(),
	jsre = /(\=)\?(&|$)|\?\?/i;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		return jQuery.expando + "_" + ( jsc++ );
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var inspectData = s.contentType === "application/x-www-form-urlencoded" &&
		( typeof s.data === "string" );

	if ( s.dataTypes[ 0 ] === "jsonp" ||
		s.jsonp !== false && ( jsre.test( s.url ) ||
				inspectData && jsre.test( s.data ) ) ) {

		var responseContainer,
			jsonpCallback = s.jsonpCallback =
				jQuery.isFunction( s.jsonpCallback ) ? s.jsonpCallback() : s.jsonpCallback,
			previous = window[ jsonpCallback ],
			url = s.url,
			data = s.data,
			replace = "$1" + jsonpCallback + "$2";

		if ( s.jsonp !== false ) {
			url = url.replace( jsre, replace );
			if ( s.url === url ) {
				if ( inspectData ) {
					data = data.replace( jsre, replace );
				}
				if ( s.data === data ) {
					// Add callback manually
					url += (/\?/.test( url ) ? "&" : "?") + s.jsonp + "=" + jsonpCallback;
				}
			}
		}

		s.url = url;
		s.data = data;

		// Install callback
		window[ jsonpCallback ] = function( response ) {
			responseContainer = [ response ];
		};

		// Clean-up function
		jqXHR.always(function() {
			// Set callback back to previous value
			window[ jsonpCallback ] = previous;
			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( previous ) ) {
				window[ jsonpCallback ]( responseContainer[ 0 ] );
			}
		});

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( jsonpCallback + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Delegate to script
		return "script";
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});




var // #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0,
	xhrCallbacks;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var xhr = s.xhr(),
						handle,
						i;

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occured
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}
									responses.text = xhr.responseText;

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					// if we're in sync mode or it's in cache
					// and has been retrieved directly (IE6 & IE7)
					// we need to manually fire the callback
					if ( !s.async || xhr.readyState === 4 ) {
						callback();
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}




var elemdisplay = {},
	iframe, iframeDoc,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = /^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,
	timerId,
	fxAttrs = [
		// height animations
		[ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],
		// width animations
		[ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],
		// opacity animations
		[ "opacity" ]
	],
	fxNow;

jQuery.fn.extend({
	show: function( speed, easing, callback ) {
		var elem, display;

		if ( speed || speed === 0 ) {
			return this.animate( genFx("show", 3), speed, easing, callback );

		} else {
			for ( var i = 0, j = this.length; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					// Reset the inline display of this element to learn if it is
					// being hidden by cascaded rules or not
					if ( !jQuery._data(elem, "olddisplay") && display === "none" ) {
						display = elem.style.display = "";
					}

					// Set elements which have been overridden with display: none
					// in a stylesheet to whatever the default browser style is
					// for such an element
					if ( display === "" && jQuery.css(elem, "display") === "none" ) {
						jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
					}
				}
			}

			// Set the display of most of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				elem = this[ i ];

				if ( elem.style ) {
					display = elem.style.display;

					if ( display === "" || display === "none" ) {
						elem.style.display = jQuery._data( elem, "olddisplay" ) || "";
					}
				}
			}

			return this;
		}
	},

	hide: function( speed, easing, callback ) {
		if ( speed || speed === 0 ) {
			return this.animate( genFx("hide", 3), speed, easing, callback);

		} else {
			var elem, display,
				i = 0,
				j = this.length;

			for ( ; i < j; i++ ) {
				elem = this[i];
				if ( elem.style ) {
					display = jQuery.css( elem, "display" );

					if ( display !== "none" && !jQuery._data( elem, "olddisplay" ) ) {
						jQuery._data( elem, "olddisplay", display );
					}
				}
			}

			// Set the display of the elements in a second loop
			// to avoid the constant reflow
			for ( i = 0; i < j; i++ ) {
				if ( this[i].style ) {
					this[i].style.display = "none";
				}
			}

			return this;
		}
	},

	// Save the old toggle function
	_toggle: jQuery.fn.toggle,

	toggle: function( fn, fn2, callback ) {
		var bool = typeof fn === "boolean";

		if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {
			this._toggle.apply( this, arguments );

		} else if ( fn == null || bool ) {
			this.each(function() {
				var state = bool ? fn : jQuery(this).is(":hidden");
				jQuery(this)[ state ? "show" : "hide" ]();
			});

		} else {
			this.animate(genFx("toggle", 3), fn, fn2, callback);
		}

		return this;
	},

	fadeTo: function( speed, to, easing, callback ) {
		return this.filter(":hidden").css("opacity", 0).show().end()
					.animate({opacity: to}, speed, easing, callback);
	},

	animate: function( prop, speed, easing, callback ) {
		var optall = jQuery.speed( speed, easing, callback );

		if ( jQuery.isEmptyObject( prop ) ) {
			return this.each( optall.complete, [ false ] );
		}

		// Do not change referenced properties as per-property easing will be lost
		prop = jQuery.extend( {}, prop );

		function doAnimation() {
			// XXX 'this' does not always have a nodeName when running the
			// test suite

			if ( optall.queue === false ) {
				jQuery._mark( this );
			}

			var opt = jQuery.extend( {}, optall ),
				isElement = this.nodeType === 1,
				hidden = isElement && jQuery(this).is(":hidden"),
				name, val, p, e,
				parts, start, end, unit,
				method;

			// will store per property easing and be used to determine when an animation is complete
			opt.animatedProperties = {};

			for ( p in prop ) {

				// property name normalization
				name = jQuery.camelCase( p );
				if ( p !== name ) {
					prop[ name ] = prop[ p ];
					delete prop[ p ];
				}

				val = prop[ name ];

				// easing resolution: per property > opt.specialEasing > opt.easing > 'swing' (default)
				if ( jQuery.isArray( val ) ) {
					opt.animatedProperties[ name ] = val[ 1 ];
					val = prop[ name ] = val[ 0 ];
				} else {
					opt.animatedProperties[ name ] = opt.specialEasing && opt.specialEasing[ name ] || opt.easing || 'swing';
				}

				if ( val === "hide" && hidden || val === "show" && !hidden ) {
					return opt.complete.call( this );
				}

				if ( isElement && ( name === "height" || name === "width" ) ) {
					// Make sure that nothing sneaks out
					// Record all 3 overflow attributes because IE does not
					// change the overflow attribute when overflowX and
					// overflowY are set to the same value
					opt.overflow = [ this.style.overflow, this.style.overflowX, this.style.overflowY ];

					// Set display property to inline-block for height/width
					// animations on inline elements that are having width/height animated
					if ( jQuery.css( this, "display" ) === "inline" &&
							jQuery.css( this, "float" ) === "none" ) {

						// inline-level elements accept inline-block;
						// block-level elements need to be inline with layout
						if ( !jQuery.support.inlineBlockNeedsLayout || defaultDisplay( this.nodeName ) === "inline" ) {
							this.style.display = "inline-block";

						} else {
							this.style.zoom = 1;
						}
					}
				}
			}

			if ( opt.overflow != null ) {
				this.style.overflow = "hidden";
			}

			for ( p in prop ) {
				e = new jQuery.fx( this, opt, p );
				val = prop[ p ];

				if ( rfxtypes.test( val ) ) {

					// Tracks whether to show or hide based on private
					// data attached to the element
					method = jQuery._data( this, "toggle" + p ) || ( val === "toggle" ? hidden ? "show" : "hide" : 0 );
					if ( method ) {
						jQuery._data( this, "toggle" + p, method === "show" ? "hide" : "show" );
						e[ method ]();
					} else {
						e[ val ]();
					}

				} else {
					parts = rfxnum.exec( val );
					start = e.cur();

					if ( parts ) {
						end = parseFloat( parts[2] );
						unit = parts[3] || ( jQuery.cssNumber[ p ] ? "" : "px" );

						// We need to compute starting value
						if ( unit !== "px" ) {
							jQuery.style( this, p, (end || 1) + unit);
							start = ( (end || 1) / e.cur() ) * start;
							jQuery.style( this, p, start + unit);
						}

						// If a +=/-= token was provided, we're doing a relative animation
						if ( parts[1] ) {
							end = ( (parts[ 1 ] === "-=" ? -1 : 1) * end ) + start;
						}

						e.custom( start, end, unit );

					} else {
						e.custom( start, val, "" );
					}
				}
			}

			// For JS strict compliance
			return true;
		}

		return optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},

	stop: function( type, clearQueue, gotoEnd ) {
		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var index,
				hadTimers = false,
				timers = jQuery.timers,
				data = jQuery._data( this );

			// clear marker counters if we know they won't be
			if ( !gotoEnd ) {
				jQuery._unmark( true, this );
			}

			function stopQueue( elem, data, index ) {
				var hooks = data[ index ];
				jQuery.removeData( elem, index, true );
				hooks.stop( gotoEnd );
			}

			if ( type == null ) {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && index.indexOf(".run") === index.length - 4 ) {
						stopQueue( this, data, index );
					}
				}
			} else if ( data[ index = type + ".run" ] && data[ index ].stop ){
				stopQueue( this, data, index );
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					if ( gotoEnd ) {

						// force the next step to be the last
						timers[ index ]( true );
					} else {
						timers[ index ].saveState();
					}
					hadTimers = true;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( !( gotoEnd && hadTimers ) ) {
				jQuery.dequeue( this, type );
			}
		});
	}

});

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout( clearFxNow, 0 );
	return ( fxNow = jQuery.now() );
}

function clearFxNow() {
	fxNow = undefined;
}

// Generate parameters to create a standard animation
function genFx( type, num ) {
	var obj = {};

	jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice( 0, num )), function() {
		obj[ this ] = type;
	});

	return obj;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx( "show", 1 ),
	slideUp: genFx( "hide", 1 ),
	slideToggle: genFx( "toggle", 1 ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.extend({
	speed: function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function( noUnmark ) {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			} else if ( noUnmark !== false ) {
				jQuery._unmark( this );
			}
		};

		return opt;
	},

	easing: {
		linear: function( p, n, firstNum, diff ) {
			return firstNum + diff * p;
		},
		swing: function( p, n, firstNum, diff ) {
			return ( ( -Math.cos( p*Math.PI ) / 2 ) + 0.5 ) * diff + firstNum;
		}
	},

	timers: [],

	fx: function( elem, options, prop ) {
		this.options = options;
		this.elem = elem;
		this.prop = prop;

		options.orig = options.orig || {};
	}

});

jQuery.fx.prototype = {
	// Simple function for setting a style value
	update: function() {
		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		( jQuery.fx.step[ this.prop ] || jQuery.fx.step._default )( this );
	},

	// Get the current size
	cur: function() {
		if ( this.elem[ this.prop ] != null && (!this.elem.style || this.elem.style[ this.prop ] == null) ) {
			return this.elem[ this.prop ];
		}

		var parsed,
			r = jQuery.css( this.elem, this.prop );
		// Empty strings, null, undefined and "auto" are converted to 0,
		// complex values such as "rotate(1rad)" are returned as is,
		// simple values such as "10px" are parsed to Float.
		return isNaN( parsed = parseFloat( r ) ) ? !r || r === "auto" ? 0 : r : parsed;
	},

	// Start an animation from one number to another
	custom: function( from, to, unit ) {
		var self = this,
			fx = jQuery.fx;

		this.startTime = fxNow || createFxNow();
		this.end = to;
		this.now = this.start = from;
		this.pos = this.state = 0;
		this.unit = unit || this.unit || ( jQuery.cssNumber[ this.prop ] ? "" : "px" );

		function t( gotoEnd ) {
			return self.step( gotoEnd );
		}

		t.queue = this.options.queue;
		t.elem = this.elem;
		t.saveState = function() {
			if ( self.options.hide && jQuery._data( self.elem, "fxshow" + self.prop ) === undefined ) {
				jQuery._data( self.elem, "fxshow" + self.prop, self.start );
			}
		};

		if ( t() && jQuery.timers.push(t) && !timerId ) {
			timerId = setInterval( fx.tick, fx.interval );
		}
	},

	// Simple 'show' function
	show: function() {
		var dataShow = jQuery._data( this.elem, "fxshow" + this.prop );

		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = dataShow || jQuery.style( this.elem, this.prop );
		this.options.show = true;

		// Begin the animation
		// Make sure that we start at a small width/height to avoid any flash of content
		if ( dataShow !== undefined ) {
			// This show is picking up where a previous hide or show left off
			this.custom( this.cur(), dataShow );
		} else {
			this.custom( this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur() );
		}

		// Start by showing the element
		jQuery( this.elem ).show();
	},

	// Simple 'hide' function
	hide: function() {
		// Remember where we started, so that we can go back to it later
		this.options.orig[ this.prop ] = jQuery._data( this.elem, "fxshow" + this.prop ) || jQuery.style( this.elem, this.prop );
		this.options.hide = true;

		// Begin the animation
		this.custom( this.cur(), 0 );
	},

	// Each step of an animation
	step: function( gotoEnd ) {
		var p, n, complete,
			t = fxNow || createFxNow(),
			done = true,
			elem = this.elem,
			options = this.options;

		if ( gotoEnd || t >= options.duration + this.startTime ) {
			this.now = this.end;
			this.pos = this.state = 1;
			this.update();

			options.animatedProperties[ this.prop ] = true;

			for ( p in options.animatedProperties ) {
				if ( options.animatedProperties[ p ] !== true ) {
					done = false;
				}
			}

			if ( done ) {
				// Reset the overflow
				if ( options.overflow != null && !jQuery.support.shrinkWrapBlocks ) {

					jQuery.each( [ "", "X", "Y" ], function( index, value ) {
						elem.style[ "overflow" + value ] = options.overflow[ index ];
					});
				}

				// Hide the element if the "hide" operation was done
				if ( options.hide ) {
					jQuery( elem ).hide();
				}

				// Reset the properties, if the item has been hidden or shown
				if ( options.hide || options.show ) {
					for ( p in options.animatedProperties ) {
						jQuery.style( elem, p, options.orig[ p ] );
						jQuery.removeData( elem, "fxshow" + p, true );
						// Toggle data is no longer needed
						jQuery.removeData( elem, "toggle" + p, true );
					}
				}

				// Execute the complete function
				// in the event that the complete function throws an exception
				// we must ensure it won't be called twice. #5684

				complete = options.complete;
				if ( complete ) {

					options.complete = false;
					complete.call( elem );
				}
			}

			return false;

		} else {
			// classical easing cannot be used with an Infinity duration
			if ( options.duration == Infinity ) {
				this.now = t;
			} else {
				n = t - this.startTime;
				this.state = n / options.duration;

				// Perform the easing function, defaults to swing
				this.pos = jQuery.easing[ options.animatedProperties[this.prop] ]( this.state, n, 0, 1, options.duration );
				this.now = this.start + ( (this.end - this.start) * this.pos );
			}
			// Perform the next step of the animation
			this.update();
		}

		return true;
	}
};

jQuery.extend( jQuery.fx, {
	tick: function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
	},

	interval: 13,

	stop: function() {
		clearInterval( timerId );
		timerId = null;
	},

	speeds: {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	},

	step: {
		opacity: function( fx ) {
			jQuery.style( fx.elem, "opacity", fx.now );
		},

		_default: function( fx ) {
			if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {
				fx.elem.style[ fx.prop ] = fx.now + fx.unit;
			} else {
				fx.elem[ fx.prop ] = fx.now;
			}
		}
	}
});

// Adds width/height step functions
// Do not set anything below 0
jQuery.each([ "width", "height" ], function( i, prop ) {
	jQuery.fx.step[ prop ] = function( fx ) {
		jQuery.style( fx.elem, prop, Math.max(0, fx.now) + fx.unit );
	};
});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}

// Try to restore the default display value of an element
function defaultDisplay( nodeName ) {

	if ( !elemdisplay[ nodeName ] ) {

		var body = document.body,
			elem = jQuery( "<" + nodeName + ">" ).appendTo( body ),
			display = elem.css( "display" );
		elem.remove();

		// If the simple way fails,
		// get element's real default display by attaching it to a temp iframe
		if ( display === "none" || display === "" ) {
			// No iframe to use yet, so create it
			if ( !iframe ) {
				iframe = document.createElement( "iframe" );
				iframe.frameBorder = iframe.width = iframe.height = 0;
			}

			body.appendChild( iframe );

			// Create a cacheable copy of the iframe document on first call.
			// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
			// document to it; WebKit & Firefox won't allow reusing the iframe document.
			if ( !iframeDoc || !iframe.createElement ) {
				iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
				iframeDoc.write( ( document.compatMode === "CSS1Compat" ? "<!doctype html>" : "" ) + "<html><body>" );
				iframeDoc.close();
			}

			elem = iframeDoc.createElement( nodeName );

			iframeDoc.body.appendChild( elem );

			display = jQuery.css( elem, "display" );
			body.removeChild( iframe );
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return elemdisplay[ nodeName ];
}




var rtable = /^t(?:able|d|h)$/i,
	rroot = /^(?:body|html)$/i;

if ( "getBoundingClientRect" in document.documentElement ) {
	jQuery.fn.offset = function( options ) {
		var elem = this[0], box;

		if ( options ) {
			return this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
		}

		if ( !elem || !elem.ownerDocument ) {
			return null;
		}

		if ( elem === elem.ownerDocument.body ) {
			return jQuery.offset.bodyOffset( elem );
		}

		try {
			box = elem.getBoundingClientRect();
		} catch(e) {}

		var doc = elem.ownerDocument,
			docElem = doc.documentElement;

		// Make sure we're not dealing with a disconnected DOM node
		if ( !box || !jQuery.contains( docElem, elem ) ) {
			return box ? { top: box.top, left: box.left } : { top: 0, left: 0 };
		}

		var body = doc.body,
			win = getWindow(doc),
			clientTop  = docElem.clientTop  || body.clientTop  || 0,
			clientLeft = docElem.clientLeft || body.clientLeft || 0,
			scrollTop  = win.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop,
			scrollLeft = win.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft,
			top  = box.top  + scrollTop  - clientTop,
			left = box.left + scrollLeft - clientLeft;

		return { top: top, left: left };
	};

} else {
	jQuery.fn.offset = function( options ) {
		var elem = this[0];

		if ( options ) {
			return this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
		}

		if ( !elem || !elem.ownerDocument ) {
			return null;
		}

		if ( elem === elem.ownerDocument.body ) {
			return jQuery.offset.bodyOffset( elem );
		}

		var computedStyle,
			offsetParent = elem.offsetParent,
			prevOffsetParent = elem,
			doc = elem.ownerDocument,
			docElem = doc.documentElement,
			body = doc.body,
			defaultView = doc.defaultView,
			prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,
			top = elem.offsetTop,
			left = elem.offsetLeft;

		while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {
			if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
				break;
			}

			computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;
			top  -= elem.scrollTop;
			left -= elem.scrollLeft;

			if ( elem === offsetParent ) {
				top  += elem.offsetTop;
				left += elem.offsetLeft;

				if ( jQuery.support.doesNotAddBorder && !(jQuery.support.doesAddBorderForTableAndCells && rtable.test(elem.nodeName)) ) {
					top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
					left += parseFloat( computedStyle.borderLeftWidth ) || 0;
				}

				prevOffsetParent = offsetParent;
				offsetParent = elem.offsetParent;
			}

			if ( jQuery.support.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {
				top  += parseFloat( computedStyle.borderTopWidth  ) || 0;
				left += parseFloat( computedStyle.borderLeftWidth ) || 0;
			}

			prevComputedStyle = computedStyle;
		}

		if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {
			top  += body.offsetTop;
			left += body.offsetLeft;
		}

		if ( jQuery.support.fixedPosition && prevComputedStyle.position === "fixed" ) {
			top  += Math.max( docElem.scrollTop, body.scrollTop );
			left += Math.max( docElem.scrollLeft, body.scrollLeft );
		}

		return { top: top, left: left };
	};
}

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return null;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( ["Left", "Top"], function( i, name ) {
	var method = "scroll" + name;

	jQuery.fn[ method ] = function( val ) {
		var elem, win;

		if ( val === undefined ) {
			elem = this[ 0 ];

			if ( !elem ) {
				return null;
			}

			win = getWindow( elem );

			// Return the scroll offset
			return win ? ("pageXOffset" in win) ? win[ i ? "pageYOffset" : "pageXOffset" ] :
				jQuery.support.boxModel && win.document.documentElement[ method ] ||
					win.document.body[ method ] :
				elem[ method ];
		}

		// Set the scroll offset
		return this.each(function() {
			win = getWindow( this );

			if ( win ) {
				win.scrollTo(
					!i ? val : jQuery( win ).scrollLeft(),
					 i ? val : jQuery( win ).scrollTop()
				);

			} else {
				this[ method ] = val;
			}
		});
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}




// Create width, height, innerHeight, innerWidth, outerHeight and outerWidth methods
jQuery.each([ "Height", "Width" ], function( i, name ) {

	var type = name.toLowerCase();

	// innerHeight and innerWidth
	jQuery.fn[ "inner" + name ] = function() {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, "padding" ) ) :
			this[ type ]() :
			null;
	};

	// outerHeight and outerWidth
	jQuery.fn[ "outer" + name ] = function( margin ) {
		var elem = this[0];
		return elem ?
			elem.style ?
			parseFloat( jQuery.css( elem, type, margin ? "margin" : "border" ) ) :
			this[ type ]() :
			null;
	};

	jQuery.fn[ type ] = function( size ) {
		// Get window width or height
		var elem = this[0];
		if ( !elem ) {
			return size == null ? null : this;
		}

		if ( jQuery.isFunction( size ) ) {
			return this.each(function( i ) {
				var self = jQuery( this );
				self[ type ]( size.call( this, i, self[ type ]() ) );
			});
		}

		if ( jQuery.isWindow( elem ) ) {
			// Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode
			// 3rd condition allows Nokia support, as it supports the docElem prop but not CSS1Compat
			var docElemProp = elem.document.documentElement[ "client" + name ],
				body = elem.document.body;
			return elem.document.compatMode === "CSS1Compat" && docElemProp ||
				body && body[ "client" + name ] || docElemProp;

		// Get document width or height
		} else if ( elem.nodeType === 9 ) {
			// Either scroll[Width/Height] or offset[Width/Height], whichever is greater
			return Math.max(
				elem.documentElement["client" + name],
				elem.body["scroll" + name], elem.documentElement["scroll" + name],
				elem.body["offset" + name], elem.documentElement["offset" + name]
			);

		// Get or set width or height on the element
		} else if ( size === undefined ) {
			var orig = jQuery.css( elem, type ),
				ret = parseFloat( orig );

			return jQuery.isNumeric( ret ) ? ret : orig;

		// Set the width or height on the element (default to pixels if value is unitless)
		} else {
			return this.css( type, typeof size === "string" ? size : size + "px" );
		}
	};

});




// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}



})( window );

/*!
 * jQuery UI 1.8.23
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI
 */
(function( $, undefined ) {

// prevent duplicate loading
// this is only a problem because we proxy existing functions
// and we don't want to double proxy them
$.ui = $.ui || {};
if ( $.ui.version ) {
	return;
}

$.extend( $.ui, {
	version: "1.8.23",

	keyCode: {
		ALT: 18,
		BACKSPACE: 8,
		CAPS_LOCK: 20,
		COMMA: 188,
		COMMAND: 91,
		COMMAND_LEFT: 91, // COMMAND
		COMMAND_RIGHT: 93,
		CONTROL: 17,
		DELETE: 46,
		DOWN: 40,
		END: 35,
		ENTER: 13,
		ESCAPE: 27,
		HOME: 36,
		INSERT: 45,
		LEFT: 37,
		MENU: 93, // COMMAND_RIGHT
		NUMPAD_ADD: 107,
		NUMPAD_DECIMAL: 110,
		NUMPAD_DIVIDE: 111,
		NUMPAD_ENTER: 108,
		NUMPAD_MULTIPLY: 106,
		NUMPAD_SUBTRACT: 109,
		PAGE_DOWN: 34,
		PAGE_UP: 33,
		PERIOD: 190,
		RIGHT: 39,
		SHIFT: 16,
		SPACE: 32,
		TAB: 9,
		UP: 38,
		WINDOWS: 91 // COMMAND
	}
});

// plugins
$.fn.extend({
	propAttr: $.fn.prop || $.fn.attr,

	_focus: $.fn.focus,
	focus: function( delay, fn ) {
		return typeof delay === "number" ?
			this.each(function() {
				var elem = this;
				setTimeout(function() {
					$( elem ).focus();
					if ( fn ) {
						fn.call( elem );
					}
				}, delay );
			}) :
			this._focus.apply( this, arguments );
	},

	scrollParent: function() {
		var scrollParent;
		if (($.browser.msie && (/(static|relative)/).test(this.css('position'))) || (/absolute/).test(this.css('position'))) {
			scrollParent = this.parents().filter(function() {
				return (/(relative|absolute|fixed)/).test($.curCSS(this,'position',1)) && (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
			}).eq(0);
		} else {
			scrollParent = this.parents().filter(function() {
				return (/(auto|scroll)/).test($.curCSS(this,'overflow',1)+$.curCSS(this,'overflow-y',1)+$.curCSS(this,'overflow-x',1));
			}).eq(0);
		}

		return (/fixed/).test(this.css('position')) || !scrollParent.length ? $(document) : scrollParent;
	},

	zIndex: function( zIndex ) {
		if ( zIndex !== undefined ) {
			return this.css( "zIndex", zIndex );
		}

		if ( this.length ) {
			var elem = $( this[ 0 ] ), position, value;
			while ( elem.length && elem[ 0 ] !== document ) {
				// Ignore z-index if position is set to a value where z-index is ignored by the browser
				// This makes behavior of this function consistent across browsers
				// WebKit always returns auto if the element is positioned
				position = elem.css( "position" );
				if ( position === "absolute" || position === "relative" || position === "fixed" ) {
					// IE returns 0 when zIndex is not specified
					// other browsers return a string
					// we ignore the case of nested elements with an explicit value of 0
					// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
					value = parseInt( elem.css( "zIndex" ), 10 );
					if ( !isNaN( value ) && value !== 0 ) {
						return value;
					}
				}
				elem = elem.parent();
			}
		}

		return 0;
	},

	disableSelection: function() {
		return this.bind( ( $.support.selectstart ? "selectstart" : "mousedown" ) +
			".ui-disableSelection", function( event ) {
				event.preventDefault();
			});
	},

	enableSelection: function() {
		return this.unbind( ".ui-disableSelection" );
	}
});

// support: jQuery <1.8
if ( !$( "<a>" ).outerWidth( 1 ).jquery ) {
	$.each( [ "Width", "Height" ], function( i, name ) {
		var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ],
			type = name.toLowerCase(),
			orig = {
				innerWidth: $.fn.innerWidth,
				innerHeight: $.fn.innerHeight,
				outerWidth: $.fn.outerWidth,
				outerHeight: $.fn.outerHeight
			};

		function reduce( elem, size, border, margin ) {
			$.each( side, function() {
				size -= parseFloat( $.curCSS( elem, "padding" + this, true) ) || 0;
				if ( border ) {
					size -= parseFloat( $.curCSS( elem, "border" + this + "Width", true) ) || 0;
				}
				if ( margin ) {
					size -= parseFloat( $.curCSS( elem, "margin" + this, true) ) || 0;
				}
			});
			return size;
		}

		$.fn[ "inner" + name ] = function( size ) {
			if ( size === undefined ) {
				return orig[ "inner" + name ].call( this );
			}

			return this.each(function() {
				$( this ).css( type, reduce( this, size ) + "px" );
			});
		};

		$.fn[ "outer" + name] = function( size, margin ) {
			if ( typeof size !== "number" ) {
				return orig[ "outer" + name ].call( this, size );
			}

			return this.each(function() {
				$( this).css( type, reduce( this, size, true, margin ) + "px" );
			});
		};
	});
}

// selectors
function focusable( element, isTabIndexNotNaN ) {
	var nodeName = element.nodeName.toLowerCase();
	if ( "area" === nodeName ) {
		var map = element.parentNode,
			mapName = map.name,
			img;
		if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
			return false;
		}
		img = $( "img[usemap=#" + mapName + "]" )[0];
		return !!img && visible( img );
	}
	return ( /input|select|textarea|button|object/.test( nodeName )
		? !element.disabled
		: "a" == nodeName
			? element.href || isTabIndexNotNaN
			: isTabIndexNotNaN)
		// the element and all of its ancestors must be visible
		&& visible( element );
}

function visible( element ) {
	return !$( element ).parents().andSelf().filter(function() {
		return $.curCSS( this, "visibility" ) === "hidden" ||
			$.expr.filters.hidden( this );
	}).length;
}

$.extend( $.expr[ ":" ], {
	data: $.expr.createPseudo ?
		$.expr.createPseudo(function( dataName ) {
			return function( elem ) {
				return !!$.data( elem, dataName );
			};
		}) :
		// support: jQuery <1.8
		function( elem, i, match ) {
			return !!$.data( elem, match[ 3 ] );
		},

	focusable: function( element ) {
		return focusable( element, !isNaN( $.attr( element, "tabindex" ) ) );
	},

	tabbable: function( element ) {
		var tabIndex = $.attr( element, "tabindex" ),
			isTabIndexNaN = isNaN( tabIndex );
		return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
	}
});

// support
$(function() {
	var body = document.body,
		div = body.appendChild( div = document.createElement( "div" ) );

	// access offsetHeight before setting the style to prevent a layout bug
	// in IE 9 which causes the elemnt to continue to take up space even
	// after it is removed from the DOM (#8026)
	div.offsetHeight;

	$.extend( div.style, {
		minHeight: "100px",
		height: "auto",
		padding: 0,
		borderWidth: 0
	});

	$.support.minHeight = div.offsetHeight === 100;
	$.support.selectstart = "onselectstart" in div;

	// set display to none to avoid a layout bug in IE
	// http://dev.jquery.com/ticket/4014
	body.removeChild( div ).style.display = "none";
});

// jQuery <1.4.3 uses curCSS, in 1.4.3 - 1.7.2 curCSS = css, 1.8+ only has css
if ( !$.curCSS ) {
	$.curCSS = $.css;
}





// deprecated
$.extend( $.ui, {
	// $.ui.plugin is deprecated.  Use the proxy pattern instead.
	plugin: {
		add: function( module, option, set ) {
			var proto = $.ui[ module ].prototype;
			for ( var i in set ) {
				proto.plugins[ i ] = proto.plugins[ i ] || [];
				proto.plugins[ i ].push( [ option, set[ i ] ] );
			}
		},
		call: function( instance, name, args ) {
			var set = instance.plugins[ name ];
			if ( !set || !instance.element[ 0 ].parentNode ) {
				return;
			}
	
			for ( var i = 0; i < set.length; i++ ) {
				if ( instance.options[ set[ i ][ 0 ] ] ) {
					set[ i ][ 1 ].apply( instance.element, args );
				}
			}
		}
	},
	
	// will be deprecated when we switch to jQuery 1.4 - use jQuery.contains()
	contains: function( a, b ) {
		return document.compareDocumentPosition ?
			a.compareDocumentPosition( b ) & 16 :
			a !== b && a.contains( b );
	},
	
	// only used by resizable
	hasScroll: function( el, a ) {
	
		//If overflow is hidden, the element might have extra content, but the user wants to hide it
		if ( $( el ).css( "overflow" ) === "hidden") {
			return false;
		}
	
		var scroll = ( a && a === "left" ) ? "scrollLeft" : "scrollTop",
			has = false;
	
		if ( el[ scroll ] > 0 ) {
			return true;
		}
	
		// TODO: determine which cases actually cause this to happen
		// if the element doesn't have the scroll set, see if it's possible to
		// set the scroll
		el[ scroll ] = 1;
		has = ( el[ scroll ] > 0 );
		el[ scroll ] = 0;
		return has;
	},
	
	// these are odd functions, fix the API or move into individual plugins
	isOverAxis: function( x, reference, size ) {
		//Determines when x coordinate is over "b" element axis
		return ( x > reference ) && ( x < ( reference + size ) );
	},
	isOver: function( y, x, top, left, height, width ) {
		//Determines when x, y coordinates is over "b" element
		return $.ui.isOverAxis( y, top, height ) && $.ui.isOverAxis( x, left, width );
	}
});

})( jQuery );

/*!
 * jQuery UI Datepicker 1.8.23
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Datepicker
 *
 * Depends:
 *	jquery.ui.core.js
 */
(function( $, undefined ) {

$.extend($.ui, { datepicker: { version: "1.8.23" } });

var PROP_NAME = 'datepicker';
var dpuuid = new Date().getTime();
var instActive;

/* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */

function Datepicker() {
	this.debug = false; // Change this to true to start debugging
	this._curInst = null; // The current instance in use
	this._keyEvent = false; // If the last event was a key event
	this._disabledInputs = []; // List of date picker inputs that have been disabled
	this._datepickerShowing = false; // True if the popup picker is showing , false if not
	this._inDialog = false; // True if showing within a "dialog", false if not
	this._mainDivId = 'ui-datepicker-div'; // The ID of the main datepicker division
	this._inlineClass = 'ui-datepicker-inline'; // The name of the inline marker class
	this._appendClass = 'ui-datepicker-append'; // The name of the append marker class
	this._triggerClass = 'ui-datepicker-trigger'; // The name of the trigger marker class
	this._dialogClass = 'ui-datepicker-dialog'; // The name of the dialog marker class
	this._disableClass = 'ui-datepicker-disabled'; // The name of the disabled covering marker class
	this._unselectableClass = 'ui-datepicker-unselectable'; // The name of the unselectable cell marker class
	this._currentClass = 'ui-datepicker-current-day'; // The name of the current day marker class
	this._dayOverClass = 'ui-datepicker-days-cell-over'; // The name of the day hover marker class
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[''] = { // Default regional settings
		closeText: 'Done', // Display text for close link
		prevText: 'Prev', // Display text for previous month link
		nextText: 'Next', // Display text for next month link
		currentText: 'Today', // Display text for current month link
		monthNames: ['January','February','March','April','May','June',
			'July','August','September','October','November','December'], // Names of months for drop-down and formatting
		monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], // For formatting
		dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'], // For formatting
		dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], // For formatting
		dayNamesMin: ['Su','Mo','Tu','We','Th','Fr','Sa'], // Column headings for days starting at Sunday
		weekHeader: 'Wk', // Column header for week of the year
		dateFormat: 'mm/dd/yy', // See format options on parseDate
		firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
		isRTL: false, // True if right-to-left language, false if left-to-right
		showMonthAfterYear: false, // True if the year select precedes month, false for month then year
		yearSuffix: '' // Additional text to append to the year in the month headers
	};
	this._defaults = { // Global defaults for all the date picker instances
		showOn: 'focus', // 'focus' for popup on focus,
			// 'button' for trigger button, or 'both' for either
		showAnim: 'fadeIn', // Name of jQuery animation for popup
		showOptions: {}, // Options for enhanced animations
		defaultDate: null, // Used when field is blank: actual date,
			// +/-number for offset from today, null for today
		appendText: '', // Display text following the input box, e.g. showing the format
		buttonText: '...', // Text for trigger button
		buttonImage: '', // URL for trigger button image
		buttonImageOnly: false, // True if the image appears alone, false if it appears on a button
		hideIfNoPrevNext: false, // True to hide next/previous month links
			// if not applicable, false to just disable them
		navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links
		gotoCurrent: false, // True if today link goes back to current selection instead
		changeMonth: false, // True if month can be selected directly, false if only prev/next
		changeYear: false, // True if year can be selected directly, false if only prev/next
		yearRange: 'c-10:c+10', // Range of years to display in drop-down,
			// either relative to today's year (-nn:+nn), relative to currently displayed year
			// (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
		showOtherMonths: false, // True to show dates in other months, false to leave blank
		selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable
		showWeek: false, // True to show week of the year, false to not show it
		calculateWeek: this.iso8601Week, // How to calculate the week of the year,
			// takes a Date and returns the number of the week for it
		shortYearCutoff: '+10', // Short year values < this are in the current century,
			// > this are in the previous century,
			// string value starting with '+' for current year + value
		minDate: null, // The earliest selectable date, or null for no limit
		maxDate: null, // The latest selectable date, or null for no limit
		duration: 'fast', // Duration of display/closure
		beforeShowDay: null, // Function that takes a date and returns an array with
			// [0] = true if selectable, false if not, [1] = custom CSS class name(s) or '',
			// [2] = cell title (optional), e.g. $.datepicker.noWeekends
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the date picker
		onSelect: null, // Define a callback function when a date is selected
		onChangeMonthYear: null, // Define a callback function when the month or year is changed
		onClose: null, // Define a callback function when the datepicker is closed
		numberOfMonths: 1, // Number of months to show at a time
		showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)
		stepMonths: 1, // Number of months to step back/forward
		stepBigMonths: 12, // Number of months to step back/forward for the big links
		altField: '', // Selector for an alternate field to store selected dates into
		altFormat: '', // The date format to use for the alternate field
		constrainInput: true, // The input is constrained by the current date format
		showButtonPanel: false, // True to show button panel, false to not show it
		autoSize: false, // True to size the input for the date format, false to leave as is
		disabled: false // The initial disabled state
	};
	$.extend(this._defaults, this.regional['']);
	this.dpDiv = bindHover($('<div id="' + this._mainDivId + '" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
}

$.extend(Datepicker.prototype, {
	/* Class name added to elements to indicate already configured with a date picker. */
	markerClassName: 'hasDatepicker',
	
	//Keep track of the maximum number of rows displayed (see #7043)
	maxRows: 4,

	/* Debug logging (if enabled). */
	log: function () {
		if (this.debug)
			console.log.apply('', arguments);
	},
	
	// TODO rename to "widget" when switching to widget factory
	_widgetDatepicker: function() {
		return this.dpDiv;
	},

	/* Override the default settings for all instances of the date picker.
	   @param  settings  object - the new settings to use as defaults (anonymous object)
	   @return the manager object */
	setDefaults: function(settings) {
		extendRemove(this._defaults, settings || {});
		return this;
	},

	/* Attach the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span
	   @param  settings  object - the new settings to use for this date picker instance (anonymous) */
	_attachDatepicker: function(target, settings) {
		// check for settings on the control itself - in namespace 'date:'
		var inlineSettings = null;
		for (var attrName in this._defaults) {
			var attrValue = target.getAttribute('date:' + attrName);
			if (attrValue) {
				inlineSettings = inlineSettings || {};
				try {
					inlineSettings[attrName] = eval(attrValue);
				} catch (err) {
					inlineSettings[attrName] = attrValue;
				}
			}
		}
		var nodeName = target.nodeName.toLowerCase();
		var inline = (nodeName == 'div' || nodeName == 'span');
		if (!target.id) {
			this.uuid += 1;
			target.id = 'dp' + this.uuid;
		}
		var inst = this._newInst($(target), inline);
		inst.settings = $.extend({}, settings || {}, inlineSettings || {});
		if (nodeName == 'input') {
			this._connectDatepicker(target, inst);
		} else if (inline) {
			this._inlineDatepicker(target, inst);
		}
	},

	/* Create a new instance object. */
	_newInst: function(target, inline) {
		var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1'); // escape jQuery meta chars
		return {id: id, input: target, // associated target
			selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection
			drawMonth: 0, drawYear: 0, // month being drawn
			inline: inline, // is datepicker inline or not
			dpDiv: (!inline ? this.dpDiv : // presentation div
			bindHover($('<div class="' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')))};
	},

	/* Attach the date picker to an input field. */
	_connectDatepicker: function(target, inst) {
		var input = $(target);
		inst.append = $([]);
		inst.trigger = $([]);
		if (input.hasClass(this.markerClassName))
			return;
		this._attachments(input, inst);
		input.addClass(this.markerClassName).keydown(this._doKeyDown).
			keypress(this._doKeyPress).keyup(this._doKeyUp).
			bind("setData.datepicker", function(event, key, value) {
				inst.settings[key] = value;
			}).bind("getData.datepicker", function(event, key) {
				return this._get(inst, key);
			});
		this._autoSize(inst);
		$.data(target, PROP_NAME, inst);
		//If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
	},

	/* Make attachments based on settings. */
	_attachments: function(input, inst) {
		var appendText = this._get(inst, 'appendText');
		var isRTL = this._get(inst, 'isRTL');
		if (inst.append)
			inst.append.remove();
		if (appendText) {
			inst.append = $('<span class="' + this._appendClass + '">' + appendText + '</span>');
			input[isRTL ? 'before' : 'after'](inst.append);
		}
		input.unbind('focus', this._showDatepicker);
		if (inst.trigger)
			inst.trigger.remove();
		var showOn = this._get(inst, 'showOn');
		if (showOn == 'focus' || showOn == 'both') // pop-up date picker when in the marked field
			input.focus(this._showDatepicker);
		if (showOn == 'button' || showOn == 'both') { // pop-up date picker when button clicked
			var buttonText = this._get(inst, 'buttonText');
			var buttonImage = this._get(inst, 'buttonImage');
			inst.trigger = $(this._get(inst, 'buttonImageOnly') ?
				$('<img/>').addClass(this._triggerClass).
					attr({ src: buttonImage, alt: buttonText, title: buttonText }) :
				$('<button type="button"></button>').addClass(this._triggerClass).
					html(buttonImage == '' ? buttonText : $('<img/>').attr(
					{ src:buttonImage, alt:buttonText, title:buttonText })));
			input[isRTL ? 'before' : 'after'](inst.trigger);
			inst.trigger.click(function() {
				if ($.datepicker._datepickerShowing && $.datepicker._lastInput == input[0])
					$.datepicker._hideDatepicker();
				else if ($.datepicker._datepickerShowing && $.datepicker._lastInput != input[0]) {
					$.datepicker._hideDatepicker(); 
					$.datepicker._showDatepicker(input[0]);
				} else
					$.datepicker._showDatepicker(input[0]);
				return false;
			});
		}
	},

	/* Apply the maximum length for the date format. */
	_autoSize: function(inst) {
		if (this._get(inst, 'autoSize') && !inst.inline) {
			var date = new Date(2009, 12 - 1, 20); // Ensure double digits
			var dateFormat = this._get(inst, 'dateFormat');
			if (dateFormat.match(/[DM]/)) {
				var findMax = function(names) {
					var max = 0;
					var maxI = 0;
					for (var i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?
					'monthNames' : 'monthNamesShort'))));
				date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?
					'dayNames' : 'dayNamesShort'))) + 20 - date.getDay());
			}
			inst.input.attr('size', this._formatDate(inst, date).length);
		}
	},

	/* Attach an inline date picker to a div. */
	_inlineDatepicker: function(target, inst) {
		var divSpan = $(target);
		if (divSpan.hasClass(this.markerClassName))
			return;
		divSpan.addClass(this.markerClassName).append(inst.dpDiv).
			bind("setData.datepicker", function(event, key, value){
				inst.settings[key] = value;
			}).bind("getData.datepicker", function(event, key){
				return this._get(inst, key);
			});
		$.data(target, PROP_NAME, inst);
		this._setDate(inst, this._getDefaultDate(inst), true);
		this._updateDatepicker(inst);
		this._updateAlternate(inst);
		//If disabled option is true, disable the datepicker before showing it (see ticket #5665)
		if( inst.settings.disabled ) {
			this._disableDatepicker( target );
		}
		// Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
		// http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
		inst.dpDiv.css( "display", "block" );
	},

	/* Pop-up the date picker in a "dialog" box.
	   @param  input     element - ignored
	   @param  date      string or Date - the initial date to display
	   @param  onSelect  function - the function to call when a date is selected
	   @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	   @param  pos       int[2] - coordinates for the dialog's position within the screen or
	                     event - with x/y coordinates or
	                     leave empty for default (screen centre)
	   @return the manager object */
	_dialogDatepicker: function(input, date, onSelect, settings, pos) {
		var inst = this._dialogInst; // internal instance
		if (!inst) {
			this.uuid += 1;
			var id = 'dp' + this.uuid;
			this._dialogInput = $('<input type="text" id="' + id +
				'" style="position: absolute; top: -100px; width: 0px;"/>');
			this._dialogInput.keydown(this._doKeyDown);
			$('body').append(this._dialogInput);
			inst = this._dialogInst = this._newInst(this._dialogInput, false);
			inst.settings = {};
			$.data(this._dialogInput[0], PROP_NAME, inst);
		}
		extendRemove(inst.settings, settings || {});
		date = (date && date.constructor == Date ? this._formatDate(inst, date) : date);
		this._dialogInput.val(date);

		this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);
		if (!this._pos) {
			var browserWidth = document.documentElement.clientWidth;
			var browserHeight = document.documentElement.clientHeight;
			var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
			var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
			this._pos = // should use actual width/height below
				[(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];
		}

		// move input on screen for focus, but hidden behind dialog
		this._dialogInput.css('left', (this._pos[0] + 20) + 'px').css('top', this._pos[1] + 'px');
		inst.settings.onSelect = onSelect;
		this._inDialog = true;
		this.dpDiv.addClass(this._dialogClass);
		this._showDatepicker(this._dialogInput[0]);
		if ($.blockUI)
			$.blockUI(this.dpDiv);
		$.data(this._dialogInput[0], PROP_NAME, inst);
		return this;
	},

	/* Detach a datepicker from its control.
	   @param  target    element - the target input field or division or span */
	_destroyDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		$.removeData(target, PROP_NAME);
		if (nodeName == 'input') {
			inst.append.remove();
			inst.trigger.remove();
			$target.removeClass(this.markerClassName).
				unbind('focus', this._showDatepicker).
				unbind('keydown', this._doKeyDown).
				unbind('keypress', this._doKeyPress).
				unbind('keyup', this._doKeyUp);
		} else if (nodeName == 'div' || nodeName == 'span')
			$target.removeClass(this.markerClassName).empty();
	},

	/* Enable the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span */
	_enableDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		if (nodeName == 'input') {
			target.disabled = false;
			inst.trigger.filter('button').
				each(function() { this.disabled = false; }).end().
				filter('img').css({opacity: '1.0', cursor: ''});
		}
		else if (nodeName == 'div' || nodeName == 'span') {
			var inline = $target.children('.' + this._inlineClass);
			inline.children().removeClass('ui-state-disabled');
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				removeAttr("disabled");
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value == target ? null : value); }); // delete entry
	},

	/* Disable the date picker to a jQuery selection.
	   @param  target    element - the target input field or division or span */
	_disableDatepicker: function(target) {
		var $target = $(target);
		var inst = $.data(target, PROP_NAME);
		if (!$target.hasClass(this.markerClassName)) {
			return;
		}
		var nodeName = target.nodeName.toLowerCase();
		if (nodeName == 'input') {
			target.disabled = true;
			inst.trigger.filter('button').
				each(function() { this.disabled = true; }).end().
				filter('img').css({opacity: '0.5', cursor: 'default'});
		}
		else if (nodeName == 'div' || nodeName == 'span') {
			var inline = $target.children('.' + this._inlineClass);
			inline.children().addClass('ui-state-disabled');
			inline.find("select.ui-datepicker-month, select.ui-datepicker-year").
				attr("disabled", "disabled");
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value == target ? null : value); }); // delete entry
		this._disabledInputs[this._disabledInputs.length] = target;
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	   @param  target    element - the target input field or division or span
	   @return boolean - true if disabled, false if enabled */
	_isDisabledDatepicker: function(target) {
		if (!target) {
			return false;
		}
		for (var i = 0; i < this._disabledInputs.length; i++) {
			if (this._disabledInputs[i] == target)
				return true;
		}
		return false;
	},

	/* Retrieve the instance data for the target control.
	   @param  target  element - the target input field or division or span
	   @return  object - the associated instance data
	   @throws  error if a jQuery problem getting data */
	_getInst: function(target) {
		try {
			return $.data(target, PROP_NAME);
		}
		catch (err) {
			throw 'Missing instance data for this datepicker';
		}
	},

	/* Update or retrieve the settings for a date picker attached to an input field or division.
	   @param  target  element - the target input field or division or span
	   @param  name    object - the new settings to update or
	                   string - the name of the setting to change or retrieve,
	                   when retrieving also 'all' for all instance settings or
	                   'defaults' for all global defaults
	   @param  value   any - the new value for the setting
	                   (omit if above is an object or to retrieve a value) */
	_optionDatepicker: function(target, name, value) {
		var inst = this._getInst(target);
		if (arguments.length == 2 && typeof name == 'string') {
			return (name == 'defaults' ? $.extend({}, $.datepicker._defaults) :
				(inst ? (name == 'all' ? $.extend({}, inst.settings) :
				this._get(inst, name)) : null));
		}
		var settings = name || {};
		if (typeof name == 'string') {
			settings = {};
			settings[name] = value;
		}
		if (inst) {
			if (this._curInst == inst) {
				this._hideDatepicker();
			}
			var date = this._getDateDatepicker(target, true);
			var minDate = this._getMinMaxDate(inst, 'min');
			var maxDate = this._getMinMaxDate(inst, 'max');
			extendRemove(inst.settings, settings);
			// reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
			if (minDate !== null && settings['dateFormat'] !== undefined && settings['minDate'] === undefined)
				inst.settings.minDate = this._formatDate(inst, minDate);
			if (maxDate !== null && settings['dateFormat'] !== undefined && settings['maxDate'] === undefined)
				inst.settings.maxDate = this._formatDate(inst, maxDate);
			this._attachments($(target), inst);
			this._autoSize(inst);
			this._setDate(inst, date);
			this._updateAlternate(inst);
			this._updateDatepicker(inst);
		}
	},

	// change method deprecated
	_changeDatepicker: function(target, name, value) {
		this._optionDatepicker(target, name, value);
	},

	/* Redraw the date picker attached to an input field or division.
	   @param  target  element - the target input field or division or span */
	_refreshDatepicker: function(target) {
		var inst = this._getInst(target);
		if (inst) {
			this._updateDatepicker(inst);
		}
	},

	/* Set the dates for a jQuery selection.
	   @param  target   element - the target input field or division or span
	   @param  date     Date - the new date */
	_setDateDatepicker: function(target, date) {
		var inst = this._getInst(target);
		if (inst) {
			this._setDate(inst, date);
			this._updateDatepicker(inst);
			this._updateAlternate(inst);
		}
	},

	/* Get the date(s) for the first entry in a jQuery selection.
	   @param  target     element - the target input field or division or span
	   @param  noDefault  boolean - true if no default date is to be used
	   @return Date - the current date */
	_getDateDatepicker: function(target, noDefault) {
		var inst = this._getInst(target);
		if (inst && !inst.inline)
			this._setDateFromField(inst, noDefault);
		return (inst ? this._getDate(inst) : null);
	},

	/* Handle keystrokes. */
	_doKeyDown: function(event) {
		var inst = $.datepicker._getInst(event.target);
		var handled = true;
		var isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
		inst._keyEvent = true;
		if ($.datepicker._datepickerShowing)
			switch (event.keyCode) {
				case 9: $.datepicker._hideDatepicker();
						handled = false;
						break; // hide on tab out
				case 13: var sel = $('td.' + $.datepicker._dayOverClass + ':not(.' + 
									$.datepicker._currentClass + ')', inst.dpDiv);
						if (sel[0])
							$.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
							var onSelect = $.datepicker._get(inst, 'onSelect');
							if (onSelect) {
								var dateStr = $.datepicker._formatDate(inst);

								// trigger custom callback
								onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);
							}
						else
							$.datepicker._hideDatepicker();
						return false; // don't submit the form
						break; // select the value on enter
				case 27: $.datepicker._hideDatepicker();
						break; // hide on escape
				case 33: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							-$.datepicker._get(inst, 'stepBigMonths') :
							-$.datepicker._get(inst, 'stepMonths')), 'M');
						break; // previous month/year on page up/+ ctrl
				case 34: $.datepicker._adjustDate(event.target, (event.ctrlKey ?
							+$.datepicker._get(inst, 'stepBigMonths') :
							+$.datepicker._get(inst, 'stepMonths')), 'M');
						break; // next month/year on page down/+ ctrl
				case 35: if (event.ctrlKey || event.metaKey) $.datepicker._clearDate(event.target);
						handled = event.ctrlKey || event.metaKey;
						break; // clear on ctrl or command +end
				case 36: if (event.ctrlKey || event.metaKey) $.datepicker._gotoToday(event.target);
						handled = event.ctrlKey || event.metaKey;
						break; // current on ctrl or command +home
				case 37: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), 'D');
						handled = event.ctrlKey || event.metaKey;
						// -1 day on ctrl or command +left
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
									-$.datepicker._get(inst, 'stepBigMonths') :
									-$.datepicker._get(inst, 'stepMonths')), 'M');
						// next month/year on alt +left on Mac
						break;
				case 38: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, -7, 'D');
						handled = event.ctrlKey || event.metaKey;
						break; // -1 week on ctrl or command +up
				case 39: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), 'D');
						handled = event.ctrlKey || event.metaKey;
						// +1 day on ctrl or command +right
						if (event.originalEvent.altKey) $.datepicker._adjustDate(event.target, (event.ctrlKey ?
									+$.datepicker._get(inst, 'stepBigMonths') :
									+$.datepicker._get(inst, 'stepMonths')), 'M');
						// next month/year on alt +right
						break;
				case 40: if (event.ctrlKey || event.metaKey) $.datepicker._adjustDate(event.target, +7, 'D');
						handled = event.ctrlKey || event.metaKey;
						break; // +1 week on ctrl or command +down
				default: handled = false;
			}
		else if (event.keyCode == 36 && event.ctrlKey) // display the date picker on ctrl+home
			$.datepicker._showDatepicker(this);
		else {
			handled = false;
		}
		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
	},

	/* Filter entered characters - based on date format. */
	_doKeyPress: function(event) {
		var inst = $.datepicker._getInst(event.target);
		if ($.datepicker._get(inst, 'constrainInput')) {
			var chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
			var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
			return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
		}
	},

	/* Synchronise manual entry and field/alternate field. */
	_doKeyUp: function(event) {
		var inst = $.datepicker._getInst(event.target);
		if (inst.input.val() != inst.lastVal) {
			try {
				var date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
					(inst.input ? inst.input.val() : null),
					$.datepicker._getFormatConfig(inst));
				if (date) { // only if valid
					$.datepicker._setDateFromField(inst);
					$.datepicker._updateAlternate(inst);
					$.datepicker._updateDatepicker(inst);
				}
			}
			catch (err) {
				$.datepicker.log(err);
			}
		}
		return true;
	},

	/* Pop-up the date picker for a given input field.
       If false returned from beforeShow event handler do not show. 
	   @param  input  element - the input field attached to the date picker or
	                  event - if triggered by focus */
	_showDatepicker: function(input) {
		input = input.target || input;
		if (input.nodeName.toLowerCase() != 'input') // find from button/image trigger
			input = $('input', input.parentNode)[0];
		if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput == input) // already here
			return;
		var inst = $.datepicker._getInst(input);
		if ($.datepicker._curInst && $.datepicker._curInst != inst) {
			$.datepicker._curInst.dpDiv.stop(true, true);
			if ( inst && $.datepicker._datepickerShowing ) {
				$.datepicker._hideDatepicker( $.datepicker._curInst.input[0] );
			}
		}
		var beforeShow = $.datepicker._get(inst, 'beforeShow');
		var beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};
		if(beforeShowSettings === false){
            //false
			return;
		}
		extendRemove(inst.settings, beforeShowSettings);
		inst.lastVal = null;
		$.datepicker._lastInput = input;
		$.datepicker._setDateFromField(inst);
		if ($.datepicker._inDialog) // hide cursor
			input.value = '';
		if (!$.datepicker._pos) { // position below input
			$.datepicker._pos = $.datepicker._findPos(input);
			$.datepicker._pos[1] += input.offsetHeight; // add the height
		}
		var isFixed = false;
		$(input).parents().each(function() {
			isFixed |= $(this).css('position') == 'fixed';
			return !isFixed;
		});
		if (isFixed && $.browser.opera) { // correction for Opera when fixed and scrolled
			$.datepicker._pos[0] -= document.documentElement.scrollLeft;
			$.datepicker._pos[1] -= document.documentElement.scrollTop;
		}
		var offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};
		$.datepicker._pos = null;
		//to avoid flashes on Firefox
		inst.dpDiv.empty();
		// determine sizing offscreen
		inst.dpDiv.css({position: 'absolute', display: 'block', top: '-1000px'});
		$.datepicker._updateDatepicker(inst);
		// fix width for dynamic number of date pickers
		// and adjust position before showing
		offset = $.datepicker._checkOffset(inst, offset, isFixed);
		inst.dpDiv.css({position: ($.datepicker._inDialog && $.blockUI ?
			'static' : (isFixed ? 'fixed' : 'absolute')), display: 'none',
			left: offset.left + 'px', top: offset.top + 'px'});
		if (!inst.inline) {
			var showAnim = $.datepicker._get(inst, 'showAnim');
			var duration = $.datepicker._get(inst, 'duration');
			var postProcess = function() {
				var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
				if( !! cover.length ){
					var borders = $.datepicker._getBorders(inst.dpDiv);
					cover.css({left: -borders[0], top: -borders[1],
						width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()});
				}
			};
			inst.dpDiv.zIndex($(input).zIndex()+1);
			$.datepicker._datepickerShowing = true;
			if ($.effects && $.effects[showAnim])
				inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
			else
				inst.dpDiv[showAnim || 'show']((showAnim ? duration : null), postProcess);
			if (!showAnim || !duration)
				postProcess();
			if (inst.input.is(':visible') && !inst.input.is(':disabled'))
				inst.input.focus();
			$.datepicker._curInst = inst;
		}
	},

	/* Generate the date picker content. */
	_updateDatepicker: function(inst) {
		var self = this;
		self.maxRows = 4; //Reset the max number of rows being displayed (see #7043)
		var borders = $.datepicker._getBorders(inst.dpDiv);
		instActive = inst; // for delegate hover events
		inst.dpDiv.empty().append(this._generateHTML(inst));
		this._attachHandlers(inst);
		var cover = inst.dpDiv.find('iframe.ui-datepicker-cover'); // IE6- only
		if( !!cover.length ){ //avoid call to outerXXXX() when not in IE6
			cover.css({left: -borders[0], top: -borders[1], width: inst.dpDiv.outerWidth(), height: inst.dpDiv.outerHeight()})
		}
		inst.dpDiv.find('.' + this._dayOverClass + ' a').mouseover();
		var numMonths = this._getNumberOfMonths(inst);
		var cols = numMonths[1];
		var width = 17;
		inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
		if (cols > 1)
			inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', (width * cols) + 'em');
		inst.dpDiv[(numMonths[0] != 1 || numMonths[1] != 1 ? 'add' : 'remove') +
			'Class']('ui-datepicker-multi');
		inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') +
			'Class']('ui-datepicker-rtl');
		if (inst == $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input &&
				// #6694 - don't focus the input if it's already focused
				// this breaks the change event in IE
				inst.input.is(':visible') && !inst.input.is(':disabled') && inst.input[0] != document.activeElement)
			inst.input.focus();
		// deffered render of the years select (to avoid flashes on Firefox) 
		if( inst.yearshtml ){
			var origyearshtml = inst.yearshtml;
			setTimeout(function(){
				//assure that inst.yearshtml didn't change.
				if( origyearshtml === inst.yearshtml && inst.yearshtml ){
					inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
				}
				origyearshtml = inst.yearshtml = null;
			}, 0);
		}
	},

	/* Retrieve the size of left and top borders for an element.
	   @param  elem  (jQuery object) the element of interest
	   @return  (number[2]) the left and top borders */
	_getBorders: function(elem) {
		var convert = function(value) {
			return {thin: 1, medium: 2, thick: 3}[value] || value;
		};
		return [parseFloat(convert(elem.css('border-left-width'))),
			parseFloat(convert(elem.css('border-top-width')))];
	},

	/* Check positioning to remain on screen. */
	_checkOffset: function(inst, offset, isFixed) {
		var dpWidth = inst.dpDiv.outerWidth();
		var dpHeight = inst.dpDiv.outerHeight();
		var inputWidth = inst.input ? inst.input.outerWidth() : 0;
		var inputHeight = inst.input ? inst.input.outerHeight() : 0;
		var viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft());
		var viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());

		offset.left -= (this._get(inst, 'isRTL') ? (dpWidth - inputWidth) : 0);
		offset.left -= (isFixed && offset.left == inst.input.offset().left) ? $(document).scrollLeft() : 0;
		offset.top -= (isFixed && offset.top == (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;

		// now check if datepicker is showing outside window viewport - move to a better place if so.
		offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?
			Math.abs(offset.left + dpWidth - viewWidth) : 0);
		offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?
			Math.abs(dpHeight + inputHeight) : 0);

		return offset;
	},

	/* Find an object's position on the screen. */
	_findPos: function(obj) {
		var inst = this._getInst(obj);
		var isRTL = this._get(inst, 'isRTL');
        while (obj && (obj.type == 'hidden' || obj.nodeType != 1 || $.expr.filters.hidden(obj))) {
            obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
        }
        var position = $(obj).offset();
	    return [position.left, position.top];
	},

	/* Hide the date picker from view.
	   @param  input  element - the input field attached to the date picker */
	_hideDatepicker: function(input) {
		var inst = this._curInst;
		if (!inst || (input && inst != $.data(input, PROP_NAME)))
			return;
		if (this._datepickerShowing) {
			var showAnim = this._get(inst, 'showAnim');
			var duration = this._get(inst, 'duration');
			var postProcess = function() {
				$.datepicker._tidyDialog(inst);
			};
			if ($.effects && $.effects[showAnim])
				inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
			else
				inst.dpDiv[(showAnim == 'slideDown' ? 'slideUp' :
					(showAnim == 'fadeIn' ? 'fadeOut' : 'hide'))]((showAnim ? duration : null), postProcess);
			if (!showAnim)
				postProcess();
			this._datepickerShowing = false;
			var onClose = this._get(inst, 'onClose');
			if (onClose)
				onClose.apply((inst.input ? inst.input[0] : null),
					[(inst.input ? inst.input.val() : ''), inst]);
			this._lastInput = null;
			if (this._inDialog) {
				this._dialogInput.css({ position: 'absolute', left: '0', top: '-100px' });
				if ($.blockUI) {
					$.unblockUI();
					$('body').append(this.dpDiv);
				}
			}
			this._inDialog = false;
		}
	},

	/* Tidy up after a dialog display. */
	_tidyDialog: function(inst) {
		inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
	},

	/* Close date picker if clicked elsewhere. */
	_checkExternalClick: function(event) {
		if (!$.datepicker._curInst)
			return;

		var $target = $(event.target),
			inst = $.datepicker._getInst($target[0]);

		if ( ( ( $target[0].id != $.datepicker._mainDivId &&
				$target.parents('#' + $.datepicker._mainDivId).length == 0 &&
				!$target.hasClass($.datepicker.markerClassName) &&
				!$target.closest("." + $.datepicker._triggerClass).length &&
				$.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) ) ) ||
			( $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst != inst ) )
			$.datepicker._hideDatepicker();
	},

	/* Adjust one of the date sub-fields. */
	_adjustDate: function(id, offset, period) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (this._isDisabledDatepicker(target[0])) {
			return;
		}
		this._adjustInstDate(inst, offset +
			(period == 'M' ? this._get(inst, 'showCurrentAtPos') : 0), // undo positioning
			period);
		this._updateDatepicker(inst);
	},

	/* Action for current link. */
	_gotoToday: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
			inst.selectedDay = inst.currentDay;
			inst.drawMonth = inst.selectedMonth = inst.currentMonth;
			inst.drawYear = inst.selectedYear = inst.currentYear;
		}
		else {
			var date = new Date();
			inst.selectedDay = date.getDate();
			inst.drawMonth = inst.selectedMonth = date.getMonth();
			inst.drawYear = inst.selectedYear = date.getFullYear();
		}
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a new month/year. */
	_selectMonthYear: function(id, select, period) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		inst['selected' + (period == 'M' ? 'Month' : 'Year')] =
		inst['draw' + (period == 'M' ? 'Month' : 'Year')] =
			parseInt(select.options[select.selectedIndex].value,10);
		this._notifyChange(inst);
		this._adjustDate(target);
	},

	/* Action for selecting a day. */
	_selectDay: function(id, month, year, td) {
		var target = $(id);
		if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
			return;
		}
		var inst = this._getInst(target[0]);
		inst.selectedDay = inst.currentDay = $('a', td).html();
		inst.selectedMonth = inst.currentMonth = month;
		inst.selectedYear = inst.currentYear = year;
		this._selectDate(id, this._formatDate(inst,
			inst.currentDay, inst.currentMonth, inst.currentYear));
	},

	/* Erase the input field and hide the date picker. */
	_clearDate: function(id) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		this._selectDate(target, '');
	},

	/* Update the input field with the selected date. */
	_selectDate: function(id, dateStr) {
		var target = $(id);
		var inst = this._getInst(target[0]);
		dateStr = (dateStr != null ? dateStr : this._formatDate(inst));
		if (inst.input)
			inst.input.val(dateStr);
		this._updateAlternate(inst);
		var onSelect = this._get(inst, 'onSelect');
		if (onSelect)
			onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback
		else if (inst.input)
			inst.input.trigger('change'); // fire the change event
		if (inst.inline)
			this._updateDatepicker(inst);
		else {
			this._hideDatepicker();
			this._lastInput = inst.input[0];
			if (typeof(inst.input[0]) != 'object')
				inst.input.focus(); // restore focus
			this._lastInput = null;
		}
	},

	/* Update any alternate field to synchronise with the main field. */
	_updateAlternate: function(inst) {
		var altField = this._get(inst, 'altField');
		if (altField) { // update alternate field too
			var altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
			var date = this._getDate(inst);
			var dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
			$(altField).each(function() { $(this).val(dateStr); });
		}
	},

	/* Set as beforeShowDay function to prevent selection of weekends.
	   @param  date  Date - the date to customise
	   @return [boolean, string] - is this date selectable?, what is its CSS class? */
	noWeekends: function(date) {
		var day = date.getDay();
		return [(day > 0 && day < 6), ''];
	},

	/* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	   @param  date  Date - the date to get the week for
	   @return  number - the number of the week within the year that contains this date */
	iso8601Week: function(date) {
		var checkDate = new Date(date.getTime());
		// Find Thursday of this week starting on Monday
		checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
		var time = checkDate.getTime();
		checkDate.setMonth(0); // Compare with Jan 1
		checkDate.setDate(1);
		return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	},

	/* Parse a string value into a date object.
	   See formatDate below for the possible formats.

	   @param  format    string - the expected format of the date
	   @param  value     string - the date in the above format
	   @param  settings  Object - attributes include:
	                     shortYearCutoff  number - the cutoff year for determining the century (optional)
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
	                     dayNames         string[7] - names of the days from Sunday (optional)
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)
	                     monthNames       string[12] - names of the months (optional)
	   @return  Date - the extracted date value or null if value is blank */
	parseDate: function (format, value, settings) {
		if (format == null || value == null)
			throw 'Invalid arguments';
		value = (typeof value == 'object' ? value.toString() : value + '');
		if (value == '')
			return null;
		var shortYearCutoff = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff;
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
				new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
		var year = -1;
		var month = -1;
		var day = -1;
		var doy = -1;
		var literal = false;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		// Extract a number from the string value
		var getNumber = function(match) {
			var isDoubled = lookAhead(match);
			var size = (match == '@' ? 14 : (match == '!' ? 20 :
				(match == 'y' && isDoubled ? 4 : (match == 'o' ? 3 : 2))));
			var digits = new RegExp('^\\d{1,' + size + '}');
			var num = value.substring(iValue).match(digits);
			if (!num)
				throw 'Missing number at position ' + iValue;
			iValue += num[0].length;
			return parseInt(num[0], 10);
		};
		// Extract a name from the string value and convert to an index
		var getName = function(match, shortNames, longNames) {
			var names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
				return [ [k, v] ];
			}).sort(function (a, b) {
				return -(a[1].length - b[1].length);
			});
			var index = -1;
			$.each(names, function (i, pair) {
				var name = pair[1];
				if (value.substr(iValue, name.length).toLowerCase() == name.toLowerCase()) {
					index = pair[0];
					iValue += name.length;
					return false;
				}
			});
			if (index != -1)
				return index + 1;
			else
				throw 'Unknown name at position ' + iValue;
		};
		// Confirm that a literal character matches the string value
		var checkLiteral = function() {
			if (value.charAt(iValue) != format.charAt(iFormat))
				throw 'Unexpected literal at position ' + iValue;
			iValue++;
		};
		var iValue = 0;
		for (var iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal)
				if (format.charAt(iFormat) == "'" && !lookAhead("'"))
					literal = false;
				else
					checkLiteral();
			else
				switch (format.charAt(iFormat)) {
					case 'd':
						day = getNumber('d');
						break;
					case 'D':
						getName('D', dayNamesShort, dayNames);
						break;
					case 'o':
						doy = getNumber('o');
						break;
					case 'm':
						month = getNumber('m');
						break;
					case 'M':
						month = getName('M', monthNamesShort, monthNames);
						break;
					case 'y':
						year = getNumber('y');
						break;
					case '@':
						var date = new Date(getNumber('@'));
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case '!':
						var date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
						year = date.getFullYear();
						month = date.getMonth() + 1;
						day = date.getDate();
						break;
					case "'":
						if (lookAhead("'"))
							checkLiteral();
						else
							literal = true;
						break;
					default:
						checkLiteral();
				}
		}
		if (iValue < value.length){
			throw "Extra/unparsed characters found in date: " + value.substring(iValue);
		}
		if (year == -1)
			year = new Date().getFullYear();
		else if (year < 100)
			year += new Date().getFullYear() - new Date().getFullYear() % 100 +
				(year <= shortYearCutoff ? 0 : -100);
		if (doy > -1) {
			month = 1;
			day = doy;
			do {
				var dim = this._getDaysInMonth(year, month - 1);
				if (day <= dim)
					break;
				month++;
				day -= dim;
			} while (true);
		}
		var date = this._daylightSavingAdjust(new Date(year, month - 1, day));
		if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day)
			throw 'Invalid date'; // E.g. 31/02/00
		return date;
	},

	/* Standard date formats. */
	ATOM: 'yy-mm-dd', // RFC 3339 (ISO 8601)
	COOKIE: 'D, dd M yy',
	ISO_8601: 'yy-mm-dd',
	RFC_822: 'D, d M y',
	RFC_850: 'DD, dd-M-y',
	RFC_1036: 'D, d M y',
	RFC_1123: 'D, d M yy',
	RFC_2822: 'D, d M yy',
	RSS: 'D, d M y', // RFC 822
	TICKS: '!',
	TIMESTAMP: '@',
	W3C: 'yy-mm-dd', // ISO 8601

	_ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +
		Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),

	/* Format a date object into a string value.
	   The format can be combinations of the following:
	   d  - day of month (no leading zero)
	   dd - day of month (two digit)
	   o  - day of year (no leading zeros)
	   oo - day of year (three digit)
	   D  - day name short
	   DD - day name long
	   m  - month of year (no leading zero)
	   mm - month of year (two digit)
	   M  - month name short
	   MM - month name long
	   y  - year (two digit)
	   yy - year (four digit)
	   @ - Unix timestamp (ms since 01/01/1970)
	   ! - Windows ticks (100ns since 01/01/0001)
	   '...' - literal text
	   '' - single quote

	   @param  format    string - the desired format of the date
	   @param  date      Date - the date value to format
	   @param  settings  Object - attributes include:
	                     dayNamesShort    string[7] - abbreviated names of the days from Sunday (optional)
	                     dayNames         string[7] - names of the days from Sunday (optional)
	                     monthNamesShort  string[12] - abbreviated names of the months (optional)
	                     monthNames       string[12] - names of the months (optional)
	   @return  string - the date in the above format */
	formatDate: function (format, date, settings) {
		if (!date)
			return '';
		var dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort;
		var dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames;
		var monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort;
		var monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		// Format a number, with leading zero if necessary
		var formatNumber = function(match, value, len) {
			var num = '' + value;
			if (lookAhead(match))
				while (num.length < len)
					num = '0' + num;
			return num;
		};
		// Format a name, short or long as requested
		var formatName = function(match, value, shortNames, longNames) {
			return (lookAhead(match) ? longNames[value] : shortNames[value]);
		};
		var output = '';
		var literal = false;
		if (date)
			for (var iFormat = 0; iFormat < format.length; iFormat++) {
				if (literal)
					if (format.charAt(iFormat) == "'" && !lookAhead("'"))
						literal = false;
					else
						output += format.charAt(iFormat);
				else
					switch (format.charAt(iFormat)) {
						case 'd':
							output += formatNumber('d', date.getDate(), 2);
							break;
						case 'D':
							output += formatName('D', date.getDay(), dayNamesShort, dayNames);
							break;
						case 'o':
							output += formatNumber('o',
								Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
							break;
						case 'm':
							output += formatNumber('m', date.getMonth() + 1, 2);
							break;
						case 'M':
							output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
							break;
						case 'y':
							output += (lookAhead('y') ? date.getFullYear() :
								(date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100);
							break;
						case '@':
							output += date.getTime();
							break;
						case '!':
							output += date.getTime() * 10000 + this._ticksTo1970;
							break;
						case "'":
							if (lookAhead("'"))
								output += "'";
							else
								literal = true;
							break;
						default:
							output += format.charAt(iFormat);
					}
			}
		return output;
	},

	/* Extract all possible characters from the date format. */
	_possibleChars: function (format) {
		var chars = '';
		var literal = false;
		// Check whether a format character is doubled
		var lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) == match);
			if (matches)
				iFormat++;
			return matches;
		};
		for (var iFormat = 0; iFormat < format.length; iFormat++)
			if (literal)
				if (format.charAt(iFormat) == "'" && !lookAhead("'"))
					literal = false;
				else
					chars += format.charAt(iFormat);
			else
				switch (format.charAt(iFormat)) {
					case 'd': case 'm': case 'y': case '@':
						chars += '0123456789';
						break;
					case 'D': case 'M':
						return null; // Accept anything
					case "'":
						if (lookAhead("'"))
							chars += "'";
						else
							literal = true;
						break;
					default:
						chars += format.charAt(iFormat);
				}
		return chars;
	},

	/* Get a setting value, defaulting if necessary. */
	_get: function(inst, name) {
		return inst.settings[name] !== undefined ?
			inst.settings[name] : this._defaults[name];
	},

	/* Parse existing date and initialise date picker. */
	_setDateFromField: function(inst, noDefault) {
		if (inst.input.val() == inst.lastVal) {
			return;
		}
		var dateFormat = this._get(inst, 'dateFormat');
		var dates = inst.lastVal = inst.input ? inst.input.val() : null;
		var date, defaultDate;
		date = defaultDate = this._getDefaultDate(inst);
		var settings = this._getFormatConfig(inst);
		try {
			date = this.parseDate(dateFormat, dates, settings) || defaultDate;
		} catch (event) {
			this.log(event);
			dates = (noDefault ? '' : dates);
		}
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		inst.currentDay = (dates ? date.getDate() : 0);
		inst.currentMonth = (dates ? date.getMonth() : 0);
		inst.currentYear = (dates ? date.getFullYear() : 0);
		this._adjustInstDate(inst);
	},

	/* Retrieve the default date shown on opening. */
	_getDefaultDate: function(inst) {
		return this._restrictMinMax(inst,
			this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
	},

	/* A date may be specified as an exact value or a relative one. */
	_determineDate: function(inst, date, defaultDate) {
		var offsetNumeric = function(offset) {
			var date = new Date();
			date.setDate(date.getDate() + offset);
			return date;
		};
		var offsetString = function(offset) {
			try {
				return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'),
					offset, $.datepicker._getFormatConfig(inst));
			}
			catch (e) {
				// Ignore
			}
			var date = (offset.toLowerCase().match(/^c/) ?
				$.datepicker._getDate(inst) : null) || new Date();
			var year = date.getFullYear();
			var month = date.getMonth();
			var day = date.getDate();
			var pattern = /([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
			var matches = pattern.exec(offset);
			while (matches) {
				switch (matches[2] || 'd') {
					case 'd' : case 'D' :
						day += parseInt(matches[1],10); break;
					case 'w' : case 'W' :
						day += parseInt(matches[1],10) * 7; break;
					case 'm' : case 'M' :
						month += parseInt(matches[1],10);
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
						break;
					case 'y': case 'Y' :
						year += parseInt(matches[1],10);
						day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
						break;
				}
				matches = pattern.exec(offset);
			}
			return new Date(year, month, day);
		};
		var newDate = (date == null || date === '' ? defaultDate : (typeof date == 'string' ? offsetString(date) :
			(typeof date == 'number' ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
		newDate = (newDate && newDate.toString() == 'Invalid Date' ? defaultDate : newDate);
		if (newDate) {
			newDate.setHours(0);
			newDate.setMinutes(0);
			newDate.setSeconds(0);
			newDate.setMilliseconds(0);
		}
		return this._daylightSavingAdjust(newDate);
	},

	/* Handle switch to/from daylight saving.
	   Hours may be non-zero on daylight saving cut-over:
	   > 12 when midnight changeover, but then cannot generate
	   midnight datetime, so jump to 1AM, otherwise reset.
	   @param  date  (Date) the date to check
	   @return  (Date) the corrected date */
	_daylightSavingAdjust: function(date) {
		if (!date) return null;
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	},

	/* Set the date(s) directly. */
	_setDate: function(inst, date, noChange) {
		var clear = !date;
		var origMonth = inst.selectedMonth;
		var origYear = inst.selectedYear;
		var newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
		inst.selectedDay = inst.currentDay = newDate.getDate();
		inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
		inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
		if ((origMonth != inst.selectedMonth || origYear != inst.selectedYear) && !noChange)
			this._notifyChange(inst);
		this._adjustInstDate(inst);
		if (inst.input) {
			inst.input.val(clear ? '' : this._formatDate(inst));
		}
	},

	/* Retrieve the date(s) directly. */
	_getDate: function(inst) {
		var startDate = (!inst.currentYear || (inst.input && inst.input.val() == '') ? null :
			this._daylightSavingAdjust(new Date(
			inst.currentYear, inst.currentMonth, inst.currentDay)));
			return startDate;
	},

	/* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
	_attachHandlers: function(inst) {
		var stepMonths = this._get(inst, 'stepMonths');
		var id = '#' + inst.id.replace( /\\\\/g, "\\" );
		inst.dpDiv.find('[data-handler]').map(function () {
			var handler = {
				prev: function () {
					window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, -stepMonths, 'M');
				},
				next: function () {
					window['DP_jQuery_' + dpuuid].datepicker._adjustDate(id, +stepMonths, 'M');
				},
				hide: function () {
					window['DP_jQuery_' + dpuuid].datepicker._hideDatepicker();
				},
				today: function () {
					window['DP_jQuery_' + dpuuid].datepicker._gotoToday(id);
				},
				selectDay: function () {
					window['DP_jQuery_' + dpuuid].datepicker._selectDay(id, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this);
					return false;
				},
				selectMonth: function () {
					window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'M');
					return false;
				},
				selectYear: function () {
					window['DP_jQuery_' + dpuuid].datepicker._selectMonthYear(id, this, 'Y');
					return false;
				}
			};
			$(this).bind(this.getAttribute('data-event'), handler[this.getAttribute('data-handler')]);
		});
	},
	
	/* Generate the HTML for the current state of the date picker. */
	_generateHTML: function(inst) {
		var today = new Date();
		today = this._daylightSavingAdjust(
			new Date(today.getFullYear(), today.getMonth(), today.getDate())); // clear time
		var isRTL = this._get(inst, 'isRTL');
		var showButtonPanel = this._get(inst, 'showButtonPanel');
		var hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext');
		var navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat');
		var numMonths = this._getNumberOfMonths(inst);
		var showCurrentAtPos = this._get(inst, 'showCurrentAtPos');
		var stepMonths = this._get(inst, 'stepMonths');
		var isMultiMonth = (numMonths[0] != 1 || numMonths[1] != 1);
		var currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :
			new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		var drawMonth = inst.drawMonth - showCurrentAtPos;
		var drawYear = inst.drawYear;
		if (drawMonth < 0) {
			drawMonth += 12;
			drawYear--;
		}
		if (maxDate) {
			var maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),
				maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));
			maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);
			while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
				drawMonth--;
				if (drawMonth < 0) {
					drawMonth = 11;
					drawYear--;
				}
			}
		}
		inst.drawMonth = drawMonth;
		inst.drawYear = drawYear;
		var prevText = this._get(inst, 'prevText');
		prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),
			this._getFormatConfig(inst)));
		var prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?
			'<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click"' +
			' title="' + prevText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>' :
			(hideIfNoPrevNext ? '' : '<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+ prevText +'"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'e' : 'w') + '">' + prevText + '</span></a>'));
		var nextText = this._get(inst, 'nextText');
		nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,
			this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),
			this._getFormatConfig(inst)));
		var next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?
			'<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click"' +
			' title="' + nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>' :
			(hideIfNoPrevNext ? '' : '<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+ nextText + '"><span class="ui-icon ui-icon-circle-triangle-' + ( isRTL ? 'w' : 'e') + '">' + nextText + '</span></a>'));
		var currentText = this._get(inst, 'currentText');
		var gotoDate = (this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today);
		currentText = (!navigationAsDateFormat ? currentText :
			this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));
		var controls = (!inst.inline ? '<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">' +
			this._get(inst, 'closeText') + '</button>' : '');
		var buttonPanel = (showButtonPanel) ? '<div class="ui-datepicker-buttonpane ui-widget-content">' + (isRTL ? controls : '') +
			(this._isInRange(inst, gotoDate) ? '<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click"' +
			'>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';
		var firstDay = parseInt(this._get(inst, 'firstDay'),10);
		firstDay = (isNaN(firstDay) ? 0 : firstDay);
		var showWeek = this._get(inst, 'showWeek');
		var dayNames = this._get(inst, 'dayNames');
		var dayNamesShort = this._get(inst, 'dayNamesShort');
		var dayNamesMin = this._get(inst, 'dayNamesMin');
		var monthNames = this._get(inst, 'monthNames');
		var monthNamesShort = this._get(inst, 'monthNamesShort');
		var beforeShowDay = this._get(inst, 'beforeShowDay');
		var showOtherMonths = this._get(inst, 'showOtherMonths');
		var selectOtherMonths = this._get(inst, 'selectOtherMonths');
		var calculateWeek = this._get(inst, 'calculateWeek') || this.iso8601Week;
		var defaultDate = this._getDefaultDate(inst);
		var html = '';
		for (var row = 0; row < numMonths[0]; row++) {
			var group = '';
			this.maxRows = 4;
			for (var col = 0; col < numMonths[1]; col++) {
				var selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
				var cornerClass = ' ui-corner-all';
				var calender = '';
				if (isMultiMonth) {
					calender += '<div class="ui-datepicker-group';
					if (numMonths[1] > 1)
						switch (col) {
							case 0: calender += ' ui-datepicker-group-first';
								cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left'); break;
							case numMonths[1]-1: calender += ' ui-datepicker-group-last';
								cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right'); break;
							default: calender += ' ui-datepicker-group-middle'; cornerClass = ''; break;
						}
					calender += '">';
				}
				calender += '<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '">' +
					(/all|left/.test(cornerClass) && row == 0 ? (isRTL ? next : prev) : '') +
					(/all|right/.test(cornerClass) && row == 0 ? (isRTL ? prev : next) : '') +
					this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,
					row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
					'</div><table class="ui-datepicker-calendar"><thead>' +
					'<tr>';
				var thead = (showWeek ? '<th class="ui-datepicker-week-col">' + this._get(inst, 'weekHeader') + '</th>' : '');
				for (var dow = 0; dow < 7; dow++) { // days of the week
					var day = (dow + firstDay) % 7;
					thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ? ' class="ui-datepicker-week-end"' : '') + '>' +
						'<span title="' + dayNames[day] + '">' + dayNamesMin[day] + '</span></th>';
				}
				calender += thead + '</tr></thead><tbody>';
				var daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
				if (drawYear == inst.selectedYear && drawMonth == inst.selectedMonth)
					inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
				var leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
				var curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate
				var numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)
				this.maxRows = numRows;
				var printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
				for (var dRow = 0; dRow < numRows; dRow++) { // create date picker rows
					calender += '<tr>';
					var tbody = (!showWeek ? '' : '<td class="ui-datepicker-week-col">' +
						this._get(inst, 'calculateWeek')(printDate) + '</td>');
					for (var dow = 0; dow < 7; dow++) { // create date picker days
						var daySettings = (beforeShowDay ?
							beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, '']);
						var otherMonth = (printDate.getMonth() != drawMonth);
						var unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||
							(minDate && printDate < minDate) || (maxDate && printDate > maxDate);
						tbody += '<td class="' +
							((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends
							(otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months
							((printDate.getTime() == selectedDate.getTime() && drawMonth == inst.selectedMonth && inst._keyEvent) || // user pressed key
							(defaultDate.getTime() == printDate.getTime() && defaultDate.getTime() == selectedDate.getTime()) ?
							// or defaultDate is current printedDate and defaultDate is selectedDate
							' ' + this._dayOverClass : '') + // highlight selected day
							(unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled': '') +  // highlight unselectable days
							(otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates
							(printDate.getTime() == currentDate.getTime() ? ' ' + this._currentClass : '') + // highlight selected day
							(printDate.getTime() == today.getTime() ? ' ui-datepicker-today' : '')) + '"' + // highlight today (if different)
							((!otherMonth || showOtherMonths) && daySettings[2] ? ' title="' + daySettings[2] + '"' : '') + // cell title
							(unselectable ? '' : ' data-handler="selectDay" data-event="click" data-month="' + printDate.getMonth() + '" data-year="' + printDate.getFullYear() + '"') + '>' + // actions
							(otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months
							(unselectable ? '<span class="ui-state-default">' + printDate.getDate() + '</span>' : '<a class="ui-state-default' +
							(printDate.getTime() == today.getTime() ? ' ui-state-highlight' : '') +
							(printDate.getTime() == currentDate.getTime() ? ' ui-state-active' : '') + // highlight selected day
							(otherMonth ? ' ui-priority-secondary' : '') + // distinguish dates from other months
							'" href="#">' + printDate.getDate() + '</a>')) + '</td>'; // display selectable date
						printDate.setDate(printDate.getDate() + 1);
						printDate = this._daylightSavingAdjust(printDate);
					}
					calender += tbody + '</tr>';
				}
				drawMonth++;
				if (drawMonth > 11) {
					drawMonth = 0;
					drawYear++;
				}
				calender += '</tbody></table>' + (isMultiMonth ? '</div>' + 
							((numMonths[0] > 0 && col == numMonths[1]-1) ? '<div class="ui-datepicker-row-break"></div>' : '') : '');
				group += calender;
			}
			html += group;
		}
		html += buttonPanel + ($.browser.msie && parseInt($.browser.version,10) < 7 && !inst.inline ?
			'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>' : '');
		inst._keyEvent = false;
		return html;
	},

	/* Generate the month and year header. */
	_generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate,
			secondary, monthNames, monthNamesShort) {
		var changeMonth = this._get(inst, 'changeMonth');
		var changeYear = this._get(inst, 'changeYear');
		var showMonthAfterYear = this._get(inst, 'showMonthAfterYear');
		var html = '<div class="ui-datepicker-title">';
		var monthHtml = '';
		// month selection
		if (secondary || !changeMonth)
			monthHtml += '<span class="ui-datepicker-month">' + monthNames[drawMonth] + '</span>';
		else {
			var inMinYear = (minDate && minDate.getFullYear() == drawYear);
			var inMaxYear = (maxDate && maxDate.getFullYear() == drawYear);
			monthHtml += '<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';
			for (var month = 0; month < 12; month++) {
				if ((!inMinYear || month >= minDate.getMonth()) &&
						(!inMaxYear || month <= maxDate.getMonth()))
					monthHtml += '<option value="' + month + '"' +
						(month == drawMonth ? ' selected="selected"' : '') +
						'>' + monthNamesShort[month] + '</option>';
			}
			monthHtml += '</select>';
		}
		if (!showMonthAfterYear)
			html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
		// year selection
		if ( !inst.yearshtml ) {
			inst.yearshtml = '';
			if (secondary || !changeYear)
				html += '<span class="ui-datepicker-year">' + drawYear + '</span>';
			else {
				// determine range of years to display
				var years = this._get(inst, 'yearRange').split(':');
				var thisYear = new Date().getFullYear();
				var determineYear = function(value) {
					var year = (value.match(/c[+-].*/) ? drawYear + parseInt(value.substring(1), 10) :
						(value.match(/[+-].*/) ? thisYear + parseInt(value, 10) :
						parseInt(value, 10)));
					return (isNaN(year) ? thisYear : year);
				};
				var year = determineYear(years[0]);
				var endYear = Math.max(year, determineYear(years[1] || ''));
				year = (minDate ? Math.max(year, minDate.getFullYear()) : year);
				endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);
				inst.yearshtml += '<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">';
				for (; year <= endYear; year++) {
					inst.yearshtml += '<option value="' + year + '"' +
						(year == drawYear ? ' selected="selected"' : '') +
						'>' + year + '</option>';
				}
				inst.yearshtml += '</select>';
				
				html += inst.yearshtml;
				inst.yearshtml = null;
			}
		}
		html += this._get(inst, 'yearSuffix');
		if (showMonthAfterYear)
			html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
		html += '</div>'; // Close datepicker_header
		return html;
	},

	/* Adjust one of the date sub-fields. */
	_adjustInstDate: function(inst, offset, period) {
		var year = inst.drawYear + (period == 'Y' ? offset : 0);
		var month = inst.drawMonth + (period == 'M' ? offset : 0);
		var day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) +
			(period == 'D' ? offset : 0);
		var date = this._restrictMinMax(inst,
			this._daylightSavingAdjust(new Date(year, month, day)));
		inst.selectedDay = date.getDate();
		inst.drawMonth = inst.selectedMonth = date.getMonth();
		inst.drawYear = inst.selectedYear = date.getFullYear();
		if (period == 'M' || period == 'Y')
			this._notifyChange(inst);
	},

	/* Ensure a date is within any min/max bounds. */
	_restrictMinMax: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		var newDate = (minDate && date < minDate ? minDate : date);
		newDate = (maxDate && newDate > maxDate ? maxDate : newDate);
		return newDate;
	},

	/* Notify change of month/year. */
	_notifyChange: function(inst) {
		var onChange = this._get(inst, 'onChangeMonthYear');
		if (onChange)
			onChange.apply((inst.input ? inst.input[0] : null),
				[inst.selectedYear, inst.selectedMonth + 1, inst]);
	},

	/* Determine the number of months to show. */
	_getNumberOfMonths: function(inst) {
		var numMonths = this._get(inst, 'numberOfMonths');
		return (numMonths == null ? [1, 1] : (typeof numMonths == 'number' ? [1, numMonths] : numMonths));
	},

	/* Determine the current maximum date - ensure no time components are set. */
	_getMinMaxDate: function(inst, minMax) {
		return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
	},

	/* Find the number of days in a given month. */
	_getDaysInMonth: function(year, month) {
		return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
	},

	/* Find the day of the week of the first of a month. */
	_getFirstDayOfMonth: function(year, month) {
		return new Date(year, month, 1).getDay();
	},

	/* Determines if we should allow a "next/prev" month display change. */
	_canAdjustMonth: function(inst, offset, curYear, curMonth) {
		var numMonths = this._getNumberOfMonths(inst);
		var date = this._daylightSavingAdjust(new Date(curYear,
			curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
		if (offset < 0)
			date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
		return this._isInRange(inst, date);
	},

	/* Is the given date in the accepted range? */
	_isInRange: function(inst, date) {
		var minDate = this._getMinMaxDate(inst, 'min');
		var maxDate = this._getMinMaxDate(inst, 'max');
		return ((!minDate || date.getTime() >= minDate.getTime()) &&
			(!maxDate || date.getTime() <= maxDate.getTime()));
	},

	/* Provide the configuration settings for formatting/parsing. */
	_getFormatConfig: function(inst) {
		var shortYearCutoff = this._get(inst, 'shortYearCutoff');
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
			new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));
		return {shortYearCutoff: shortYearCutoff,
			dayNamesShort: this._get(inst, 'dayNamesShort'), dayNames: this._get(inst, 'dayNames'),
			monthNamesShort: this._get(inst, 'monthNamesShort'), monthNames: this._get(inst, 'monthNames')};
	},

	/* Format the given date for display. */
	_formatDate: function(inst, day, month, year) {
		if (!day) {
			inst.currentDay = inst.selectedDay;
			inst.currentMonth = inst.selectedMonth;
			inst.currentYear = inst.selectedYear;
		}
		var date = (day ? (typeof day == 'object' ? day :
			this._daylightSavingAdjust(new Date(year, month, day))) :
			this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));
		return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
	}
});

/*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */ 
function bindHover(dpDiv) {
	var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
	return dpDiv.bind('mouseout', function(event) {
			var elem = $( event.target ).closest( selector );
			if ( !elem.length ) {
				return;
			}
			elem.removeClass( "ui-state-hover ui-datepicker-prev-hover ui-datepicker-next-hover" );
		})
		.bind('mouseover', function(event) {
			var elem = $( event.target ).closest( selector );
			if ($.datepicker._isDisabledDatepicker( instActive.inline ? dpDiv.parent()[0] : instActive.input[0]) ||
					!elem.length ) {
				return;
			}
			elem.parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
			elem.addClass('ui-state-hover');
			if (elem.hasClass('ui-datepicker-prev')) elem.addClass('ui-datepicker-prev-hover');
			if (elem.hasClass('ui-datepicker-next')) elem.addClass('ui-datepicker-next-hover');
		});
}

/* jQuery extend now ignores nulls! */
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props)
		if (props[name] == null || props[name] == undefined)
			target[name] = props[name];
	return target;
};

/* Determine whether an object is an array. */
function isArray(a) {
	return (a && (($.browser.safari && typeof a == 'object' && a.length) ||
		(a.constructor && a.constructor.toString().match(/\Array\(\)/))));
};

/* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
                    Object - settings for attaching new datepicker functionality
   @return  jQuery object */
$.fn.datepicker = function(options){
	
	/* Verify an empty collection wasn't passed - Fixes #6976 */
	if ( !this.length ) {
		return this;
	}
	
	/* Initialise the date picker. */
	if (!$.datepicker.initialized) {
		$(document).mousedown($.datepicker._checkExternalClick).
			find('body').append($.datepicker.dpDiv);
		$.datepicker.initialized = true;
	}

	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (typeof options == 'string' && (options == 'isDisabled' || options == 'getDate' || options == 'widget'))
		return $.datepicker['_' + options + 'Datepicker'].
			apply($.datepicker, [this[0]].concat(otherArgs));
	if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string')
		return $.datepicker['_' + options + 'Datepicker'].
			apply($.datepicker, [this[0]].concat(otherArgs));
	return this.each(function() {
		typeof options == 'string' ?
			$.datepicker['_' + options + 'Datepicker'].
				apply($.datepicker, [this].concat(otherArgs)) :
			$.datepicker._attachDatepicker(this, options);
	});
};

$.datepicker = new Datepicker(); // singleton instance
$.datepicker.initialized = false;
$.datepicker.uuid = new Date().getTime();
$.datepicker.version = "1.8.23";

// Workaround for #4055
// Add another global to avoid noConflict issues with inline event handlers
window['DP_jQuery_' + dpuuid] = $;

})(jQuery);

/*!
 * jQuery UI Position 1.8.23
 *
 * Copyright 2012, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Position
 */
(function( $, undefined ) {

$.ui = $.ui || {};

var horizontalPositions = /left|center|right/,
	verticalPositions = /top|center|bottom/,
	center = "center",
	support = {},
	_position = $.fn.position,
	_offset = $.fn.offset;

$.fn.position = function( options ) {
	if ( !options || !options.of ) {
		return _position.apply( this, arguments );
	}

	// make a copy, we don't want to modify arguments
	options = $.extend( {}, options );

	var target = $( options.of ),
		targetElem = target[0],
		collision = ( options.collision || "flip" ).split( " " ),
		offset = options.offset ? options.offset.split( " " ) : [ 0, 0 ],
		targetWidth,
		targetHeight,
		basePosition;

	if ( targetElem.nodeType === 9 ) {
		targetWidth = target.width();
		targetHeight = target.height();
		basePosition = { top: 0, left: 0 };
	// TODO: use $.isWindow() in 1.9
	} else if ( targetElem.setTimeout ) {
		targetWidth = target.width();
		targetHeight = target.height();
		basePosition = { top: target.scrollTop(), left: target.scrollLeft() };
	} else if ( targetElem.preventDefault ) {
		// force left top to allow flipping
		options.at = "left top";
		targetWidth = targetHeight = 0;
		basePosition = { top: options.of.pageY, left: options.of.pageX };
	} else {
		targetWidth = target.outerWidth();
		targetHeight = target.outerHeight();
		basePosition = target.offset();
	}

	// force my and at to have valid horizontal and veritcal positions
	// if a value is missing or invalid, it will be converted to center 
	$.each( [ "my", "at" ], function() {
		var pos = ( options[this] || "" ).split( " " );
		if ( pos.length === 1) {
			pos = horizontalPositions.test( pos[0] ) ?
				pos.concat( [center] ) :
				verticalPositions.test( pos[0] ) ?
					[ center ].concat( pos ) :
					[ center, center ];
		}
		pos[ 0 ] = horizontalPositions.test( pos[0] ) ? pos[ 0 ] : center;
		pos[ 1 ] = verticalPositions.test( pos[1] ) ? pos[ 1 ] : center;
		options[ this ] = pos;
	});

	// normalize collision option
	if ( collision.length === 1 ) {
		collision[ 1 ] = collision[ 0 ];
	}

	// normalize offset option
	offset[ 0 ] = parseInt( offset[0], 10 ) || 0;
	if ( offset.length === 1 ) {
		offset[ 1 ] = offset[ 0 ];
	}
	offset[ 1 ] = parseInt( offset[1], 10 ) || 0;

	if ( options.at[0] === "right" ) {
		basePosition.left += targetWidth;
	} else if ( options.at[0] === center ) {
		basePosition.left += targetWidth / 2;
	}

	if ( options.at[1] === "bottom" ) {
		basePosition.top += targetHeight;
	} else if ( options.at[1] === center ) {
		basePosition.top += targetHeight / 2;
	}

	basePosition.left += offset[ 0 ];
	basePosition.top += offset[ 1 ];

	return this.each(function() {
		var elem = $( this ),
			elemWidth = elem.outerWidth(),
			elemHeight = elem.outerHeight(),
			marginLeft = parseInt( $.curCSS( this, "marginLeft", true ) ) || 0,
			marginTop = parseInt( $.curCSS( this, "marginTop", true ) ) || 0,
			collisionWidth = elemWidth + marginLeft +
				( parseInt( $.curCSS( this, "marginRight", true ) ) || 0 ),
			collisionHeight = elemHeight + marginTop +
				( parseInt( $.curCSS( this, "marginBottom", true ) ) || 0 ),
			position = $.extend( {}, basePosition ),
			collisionPosition;

		if ( options.my[0] === "right" ) {
			position.left -= elemWidth;
		} else if ( options.my[0] === center ) {
			position.left -= elemWidth / 2;
		}

		if ( options.my[1] === "bottom" ) {
			position.top -= elemHeight;
		} else if ( options.my[1] === center ) {
			position.top -= elemHeight / 2;
		}

		// prevent fractions if jQuery version doesn't support them (see #5280)
		if ( !support.fractions ) {
			position.left = Math.round( position.left );
			position.top = Math.round( position.top );
		}

		collisionPosition = {
			left: position.left - marginLeft,
			top: position.top - marginTop
		};

		$.each( [ "left", "top" ], function( i, dir ) {
			if ( $.ui.position[ collision[i] ] ) {
				$.ui.position[ collision[i] ][ dir ]( position, {
					targetWidth: targetWidth,
					targetHeight: targetHeight,
					elemWidth: elemWidth,
					elemHeight: elemHeight,
					collisionPosition: collisionPosition,
					collisionWidth: collisionWidth,
					collisionHeight: collisionHeight,
					offset: offset,
					my: options.my,
					at: options.at
				});
			}
		});

		if ( $.fn.bgiframe ) {
			elem.bgiframe();
		}
		elem.offset( $.extend( position, { using: options.using } ) );
	});
};

$.ui.position = {
	fit: {
		left: function( position, data ) {
			var win = $( window ),
				over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft();
			position.left = over > 0 ? position.left - over : Math.max( position.left - data.collisionPosition.left, position.left );
		},
		top: function( position, data ) {
			var win = $( window ),
				over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop();
			position.top = over > 0 ? position.top - over : Math.max( position.top - data.collisionPosition.top, position.top );
		}
	},

	flip: {
		left: function( position, data ) {
			if ( data.at[0] === center ) {
				return;
			}
			var win = $( window ),
				over = data.collisionPosition.left + data.collisionWidth - win.width() - win.scrollLeft(),
				myOffset = data.my[ 0 ] === "left" ?
					-data.elemWidth :
					data.my[ 0 ] === "right" ?
						data.elemWidth :
						0,
				atOffset = data.at[ 0 ] === "left" ?
					data.targetWidth :
					-data.targetWidth,
				offset = -2 * data.offset[ 0 ];
			position.left += data.collisionPosition.left < 0 ?
				myOffset + atOffset + offset :
				over > 0 ?
					myOffset + atOffset + offset :
					0;
		},
		top: function( position, data ) {
			if ( data.at[1] === center ) {
				return;
			}
			var win = $( window ),
				over = data.collisionPosition.top + data.collisionHeight - win.height() - win.scrollTop(),
				myOffset = data.my[ 1 ] === "top" ?
					-data.elemHeight :
					data.my[ 1 ] === "bottom" ?
						data.elemHeight :
						0,
				atOffset = data.at[ 1 ] === "top" ?
					data.targetHeight :
					-data.targetHeight,
				offset = -2 * data.offset[ 1 ];
			position.top += data.collisionPosition.top < 0 ?
				myOffset + atOffset + offset :
				over > 0 ?
					myOffset + atOffset + offset :
					0;
		}
	}
};

// offset setter from jQuery 1.4
if ( !$.offset.setOffset ) {
	$.offset.setOffset = function( elem, options ) {
		// set position first, in-case top/left are set even on static elem
		if ( /static/.test( $.curCSS( elem, "position" ) ) ) {
			elem.style.position = "relative";
		}
		var curElem   = $( elem ),
			curOffset = curElem.offset(),
			curTop    = parseInt( $.curCSS( elem, "top",  true ), 10 ) || 0,
			curLeft   = parseInt( $.curCSS( elem, "left", true ), 10)  || 0,
			props     = {
				top:  (options.top  - curOffset.top)  + curTop,
				left: (options.left - curOffset.left) + curLeft
			};
		
		if ( 'using' in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	};

	$.fn.offset = function( options ) {
		var elem = this[ 0 ];
		if ( !elem || !elem.ownerDocument ) { return null; }
		if ( options ) {
			if ( $.isFunction( options ) ) {
				return this.each(function( i ) {
					$( this ).offset( options.call( this, i, $( this ).offset() ) );
				});
			}
			return this.each(function() {
				$.offset.setOffset( this, options );
			});
		}
		return _offset.call( this );
	};
}

// jQuery <1.4.3 uses curCSS, in 1.4.3 - 1.7.2 curCSS = css, 1.8+ only has css
if ( !$.curCSS ) {
	$.curCSS = $.css;
}

// fraction support test (older versions of jQuery don't support fractions)
(function () {
	var body = document.getElementsByTagName( "body" )[ 0 ], 
		div = document.createElement( "div" ),
		testElement, testElementParent, testElementStyle, offset, offsetTotal;

	//Create a "fake body" for testing based on method used in jQuery.support
	testElement = document.createElement( body ? "div" : "body" );
	testElementStyle = {
		visibility: "hidden",
		width: 0,
		height: 0,
		border: 0,
		margin: 0,
		background: "none"
	};
	if ( body ) {
		$.extend( testElementStyle, {
			position: "absolute",
			left: "-1000px",
			top: "-1000px"
		});
	}
	for ( var i in testElementStyle ) {
		testElement.style[ i ] = testElementStyle[ i ];
	}
	testElement.appendChild( div );
	testElementParent = body || document.documentElement;
	testElementParent.insertBefore( testElement, testElementParent.firstChild );

	div.style.cssText = "position: absolute; left: 10.7432222px; top: 10.432325px; height: 30px; width: 201px;";

	offset = $( div ).offset( function( _, offset ) {
		return offset;
	}).offset();

	testElement.innerHTML = "";
	testElementParent.removeChild( testElement );

	offsetTotal = offset.top + offset.left + ( body ? 2000 : 0 );
	support.fractions = offsetTotal > 21 && offsetTotal < 22;
})();

}( jQuery ));

/*! http://mths.be/punycode v1.2.3 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports;
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		while (length--) {
			array[length] = fn(array[length]);
		}
		return array;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings.
	 * @private
	 * @param {String} domain The domain name.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		return map(string.split(regexSeparators), fn).join('.');
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <http://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols to a Punycode string of ASCII-only
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name to Unicode. Only the
	 * Punycoded parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it on a string that has already been converted to
	 * Unicode.
	 * @memberOf punycode
	 * @param {String} domain The Punycode domain name to convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(domain) {
		return mapDomain(domain, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name to Punycode. Only the
	 * non-ASCII parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it with a domain that's already in ASCII.
	 * @memberOf punycode
	 * @param {String} domain The domain name to convert, as a Unicode string.
	 * @returns {String} The Punycode representation of the given domain name.
	 */
	function toASCII(domain) {
		return mapDomain(domain, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.2.3',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <http://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return punycode;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));
/**
* vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
*  
* Version - 0.99.00.beta 
* Copyright (c) 2012 Vadim Kiryukhin
* vkiryukhin @ gmail.com
* http://www.eslinstructor.net/vkbeautify/
* 
* Dual licensed under the MIT and GPL licenses:
*   http://www.opensource.org/licenses/mit-license.php
*   http://www.gnu.org/licenses/gpl.html
*
*   Pretty print
*
*        vkbeautify.xml(text [,indent_pattern]);
*        vkbeautify.json(text [,indent_pattern]);
*        vkbeautify.css(text [,indent_pattern]);
*        vkbeautify.sql(text [,indent_pattern]);
*
*        @text - String; text to beatufy;
*        @indent_pattern - Integer | String;
*                Integer:  number of white spaces;
*                String:   character string to visualize indentation ( can also be a set of white spaces )
*   Minify
*
*        vkbeautify.xmlmin(text [,preserve_comments]);
*        vkbeautify.jsonmin(text);
*        vkbeautify.cssmin(text [,preserve_comments]);
*        vkbeautify.sqlmin(text);
*
*        @text - String; text to minify;
*        @preserve_comments - Bool; [optional];
*                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
*
*   Examples:
*        vkbeautify.xml(text); // pretty print XML
*        vkbeautify.json(text, 4 ); // pretty print JSON
*        vkbeautify.css(text, '. . . .'); // pretty print CSS
*        vkbeautify.sql(text, '----'); // pretty print SQL
*
*        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
*        vkbeautify.jsonmin(text);// minify JSON
*        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
*        vkbeautify.sqlmin(text);// minify SQL
*
*/

(function() {

function createShiftArr(step) {

	var space = '    ';
	
	if ( isNaN(parseInt(step)) ) {  // argument is string
		space = step;
	} else { // argument is integer
		switch(step) {
			case 1: space = ' '; break;
			case 2: space = '  '; break;
			case 3: space = '   '; break;
			case 4: space = '    '; break;
			case 5: space = '     '; break;
			case 6: space = '      '; break;
			case 7: space = '       '; break;
			case 8: space = '        '; break;
			case 9: space = '         '; break;
			case 10: space = '          '; break;
			case 11: space = '           '; break;
			case 12: space = '            '; break;
		}
	}

	var shift = ['\n']; // array of shifts
	for(ix=0;ix<100;ix++){
		shift.push(shift[ix]+space); 
	}
	return shift;
}

function vkbeautify(){
	this.step = '    '; // 4 spaces
	this.shift = createShiftArr(this.step);
};

vkbeautify.prototype.xml = function(text,step) {

	var ar = text.replace(/>\s{0,}</g,"><")
				 .replace(/</g,"~::~<")
				 .replace(/\s*xmlns\:/g,"~::~xmlns:")
				 .replace(/\s*xmlns\=/g,"~::~xmlns=")
				 .split('~::~'),
		len = ar.length,
		inComment = false,
		deep = 0,
		str = '',
		ix = 0,
		shift = step ? createShiftArr(step) : this.shift;

		for(ix=0;ix<len;ix++) {
			// start comment or <![CDATA[...]]> or <!DOCTYPE //
			if(ar[ix].search(/<!/) > -1) { 
				str += shift[deep]+ar[ix];
				inComment = true; 
				// end comment  or <![CDATA[...]]> //
				if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1 || ar[ix].search(/!DOCTYPE/) > -1 ) { 
					inComment = false; 
				}
			} else 
			// end comment  or <![CDATA[...]]> //
			if(ar[ix].search(/-->/) > -1 || ar[ix].search(/\]>/) > -1) { 
				str += ar[ix];
				inComment = false; 
			} else 
			// <elm></elm> //
			if( /^<\w/.exec(ar[ix-1]) && /^<\/\w/.exec(ar[ix]) &&
				/^<[\w:\-\.\,]+/.exec(ar[ix-1]) == /^<\/[\w:\-\.\,]+/.exec(ar[ix])[0].replace('/','')) { 
				str += ar[ix];
				if(!inComment) deep--;
			} else
			 // <elm> //
			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) == -1 && ar[ix].search(/\/>/) == -1 ) {
				str = !inComment ? str += shift[deep++]+ar[ix] : str += ar[ix];
			} else 
			 // <elm>...</elm> //
			if(ar[ix].search(/<\w/) > -1 && ar[ix].search(/<\//) > -1) {
				str = !inComment ? str += shift[deep]+ar[ix] : str += ar[ix];
			} else 
			// </elm> //
			if(ar[ix].search(/<\//) > -1) { 
				str = !inComment ? str += shift[--deep]+ar[ix] : str += ar[ix];
			} else 
			// <elm/> //
			if(ar[ix].search(/\/>/) > -1 ) { 
				str = !inComment ? str += shift[deep]+ar[ix] : str += ar[ix];
			} else 
			// <? xml ... ?> //
			if(ar[ix].search(/<\?/) > -1) { 
				str += shift[deep]+ar[ix];
			} else 
			// xmlns //
			if( ar[ix].search(/xmlns\:/) > -1  || ar[ix].search(/xmlns\=/) > -1) { 
				str += shift[deep]+ar[ix];
			} 
			
			else {
				str += ar[ix];
			}
		}
		
	return  (str[0] == '\n') ? str.slice(1) : str;
}

vkbeautify.prototype.json = function(text,step) {

	var step = step ? step : this.step;
	
	if (typeof JSON === 'undefined' ) return text; 
	
	if ( typeof text === "string" ) return JSON.stringify(JSON.parse(text), null, step);
	if ( typeof text === "object" ) return JSON.stringify(text, null, step);
		
	return text; // text is not string nor object
}

vkbeautify.prototype.css = function(text, step) {

	var ar = text.replace(/\s{1,}/g,' ')
				.replace(/\{/g,"{~::~")
				.replace(/\}/g,"~::~}~::~")
				.replace(/\;/g,";~::~")
				.replace(/\/\*/g,"~::~/*")
				.replace(/\*\//g,"*/~::~")
				.replace(/~::~\s{0,}~::~/g,"~::~")
				.split('~::~'),
		len = ar.length,
		deep = 0,
		str = '',
		ix = 0,
		shift = step ? createShiftArr(step) : this.shift;
		
		for(ix=0;ix<len;ix++) {

			if( /\{/.exec(ar[ix]))  { 
				str += shift[deep++]+ar[ix];
			} else 
			if( /\}/.exec(ar[ix]))  { 
				str += shift[--deep]+ar[ix];
			} else
			if( /\*\\/.exec(ar[ix]))  { 
				str += shift[deep]+ar[ix];
			}
			else {
				str += shift[deep]+ar[ix];
			}
		}
		return str.replace(/^\n{1,}/,'');
}

//----------------------------------------------------------------------------

function isSubquery(str, parenthesisLevel) {
	return  parenthesisLevel - (str.replace(/\(/g,'').length - str.replace(/\)/g,'').length )
}

function split_sql(str, tab) {

	return str.replace(/\s{1,}/g," ")

				.replace(/ AND /ig,"~::~"+tab+tab+"AND ")
				.replace(/ BETWEEN /ig,"~::~"+tab+"BETWEEN ")
				.replace(/ CASE /ig,"~::~"+tab+"CASE ")
				.replace(/ ELSE /ig,"~::~"+tab+"ELSE ")
				.replace(/ END /ig,"~::~"+tab+"END ")
				.replace(/ FROM /ig,"~::~FROM ")
				.replace(/ GROUP\s{1,}BY/ig,"~::~GROUP BY ")
				.replace(/ HAVING /ig,"~::~HAVING ")
				//.replace(/ SET /ig," SET~::~")
				.replace(/ IN /ig," IN ")
				
				.replace(/ JOIN /ig,"~::~JOIN ")
				.replace(/ CROSS~::~{1,}JOIN /ig,"~::~CROSS JOIN ")
				.replace(/ INNER~::~{1,}JOIN /ig,"~::~INNER JOIN ")
				.replace(/ LEFT~::~{1,}JOIN /ig,"~::~LEFT JOIN ")
				.replace(/ RIGHT~::~{1,}JOIN /ig,"~::~RIGHT JOIN ")
				
				.replace(/ ON /ig,"~::~"+tab+"ON ")
				.replace(/ OR /ig,"~::~"+tab+tab+"OR ")
				.replace(/ ORDER\s{1,}BY/ig,"~::~ORDER BY ")
				.replace(/ OVER /ig,"~::~"+tab+"OVER ")

				.replace(/\(\s{0,}SELECT /ig,"~::~(SELECT ")
				.replace(/\)\s{0,}SELECT /ig,")~::~SELECT ")
				
				.replace(/ THEN /ig," THEN~::~"+tab+"")
				.replace(/ UNION /ig,"~::~UNION~::~")
				.replace(/ USING /ig,"~::~USING ")
				.replace(/ WHEN /ig,"~::~"+tab+"WHEN ")
				.replace(/ WHERE /ig,"~::~WHERE ")
				.replace(/ WITH /ig,"~::~WITH ")
				
				//.replace(/\,\s{0,}\(/ig,",~::~( ")
				//.replace(/\,/ig,",~::~"+tab+tab+"")

				.replace(/ ALL /ig," ALL ")
				.replace(/ AS /ig," AS ")
				.replace(/ ASC /ig," ASC ")	
				.replace(/ DESC /ig," DESC ")	
				.replace(/ DISTINCT /ig," DISTINCT ")
				.replace(/ EXISTS /ig," EXISTS ")
				.replace(/ NOT /ig," NOT ")
				.replace(/ NULL /ig," NULL ")
				.replace(/ LIKE /ig," LIKE ")
				.replace(/\s{0,}SELECT /ig,"SELECT ")
				.replace(/\s{0,}UPDATE /ig,"UPDATE ")
				.replace(/ SET /ig," SET ")
							
				.replace(/~::~{1,}/g,"~::~")
				.split('~::~');
}

vkbeautify.prototype.sql = function(text,step) {

	var ar_by_quote = text.replace(/\s{1,}/g," ")
							.replace(/\'/ig,"~::~\'")
							.split('~::~'),
		len = ar_by_quote.length,
		ar = [],
		deep = 0,
		tab = this.step,//+this.step,
		inComment = true,
		inQuote = false,
		parenthesisLevel = 0,
		str = '',
		ix = 0,
		shift = step ? createShiftArr(step) : this.shift;;

		for(ix=0;ix<len;ix++) {
			if(ix%2) {
				ar = ar.concat(ar_by_quote[ix]);
			} else {
				ar = ar.concat(split_sql(ar_by_quote[ix], tab) );
			}
		}
		
		len = ar.length;
		for(ix=0;ix<len;ix++) {
			
			parenthesisLevel = isSubquery(ar[ix], parenthesisLevel);
			
			if( /\s{0,}\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
				ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"")
			} 
			
			if( /\s{0,}\s{0,}SET\s{0,}/.exec(ar[ix]))  { 
				ar[ix] = ar[ix].replace(/\,/g,",\n"+tab+tab+"")
			} 
			
			if( /\s{0,}\(\s{0,}SELECT\s{0,}/.exec(ar[ix]))  { 
				deep++;
				str += shift[deep]+ar[ix];
			} else 
			if( /\'/.exec(ar[ix]) )  { 
				if(parenthesisLevel<1 && deep) {
					deep--;
				}
				str += ar[ix];
			}
			else  { 
				str += shift[deep]+ar[ix];
				if(parenthesisLevel<1 && deep) {
					deep--;
				}
			} 
			var junk = 0;
		}

		str = str.replace(/^\n{1,}/,'').replace(/\n{1,}/g,"\n");
		return str;
}


vkbeautify.prototype.xmlmin = function(text, preserveComments) {

	var str = preserveComments ? text
							   : text.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"")
									 .replace(/[ \r\n\t]{1,}xmlns/g, ' xmlns');
	return  str.replace(/>\s{0,}</g,"><"); 
}

vkbeautify.prototype.jsonmin = function(text) {

	if (typeof JSON === 'undefined' ) return text; 
	
	return JSON.stringify(JSON.parse(text), null, 0); 
				
}

vkbeautify.prototype.cssmin = function(text, preserveComments) {
	
	var str = preserveComments ? text
							   : text.replace(/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\//g,"") ;

	return str.replace(/\s{1,}/g,' ')
			  .replace(/\{\s{1,}/g,"{")
			  .replace(/\}\s{1,}/g,"}")
			  .replace(/\;\s{1,}/g,";")
			  .replace(/\/\*\s{1,}/g,"/*")
			  .replace(/\*\/\s{1,}/g,"*/");
}

vkbeautify.prototype.sqlmin = function(text) {
	return text.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")");
}

window.vkbeautify = new vkbeautify();

})();


/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*global URI *///declare unusual global vars for JSLint/SAPUI5 validation

/**
 * @class Provides base functionality of the SAP jQuery plugin as extension of the jQuery framework.<br/>
 * See also <a href="http://api.jquery.com/jQuery/">jQuery</a> for details.<br/>
 * Although these functions appear as static ones, they are meant to be used on jQuery instances.<br/>
 * If not stated differently, the functions follow the fluent interface paradigm and return the jQuery instance for chaining of statements.
 *
 * Example for usage of an instance method:
 * <pre>
 *   var oRect = jQuery("#myDiv").rect();
 *   alert("Top Position: " + oRect.top);
 * </pre>
 *
 * @name jQuery
 * @static
 * @public
 */

(function() {
	
	if (!window.jQuery ) {
		throw new Error("SAPUI5 requires jQuery as a prerequisite (>= version 1.7)");
	}

	// ensure not to initialize twice
	if (jQuery.sap) {
		return;
	}

	/**
	 * Window that the sap plugin has been initialized for.
	 * @private
	 */
	var _window = window;

	// early logging support
	var _earlyLogs = [];
	function _earlyLog(sLevel, sMessage) {
		_earlyLogs.push({
			level: sLevel,
			message: sMessage
		});
	}

	var _sBootstrapUrl = undefined;
	
	// -------------------------- VERSION -------------------------------------

	var rVersion = /^[0-9]+(?:\.([0-9]+)(?:\.([0-9]+))?)?(.*)$/; 

	/**
	 * Returns a Version instance created from the given parameters.
	 * 
	 * This function can either be called as a constructor (using <code>new</code>) or as a normal function.
	 * It always returns an immutable Version instance.
	 *   
	 * The parts of the version number (major, minor, patch, suffix) can be provided in several ways:
	 * <ul>
	 * <li>Version("1.2.3-SNAPSHOT") - as a dot-separated string. Any non-numerical char or a dot followed by a non-numerical char starts the suffix portion. 
	 * Any missing major, minor or patch versions will be set to 0.</li>
	 * <li>Version(1,2,3,"-SNAPSHOT") - as individual parameters. Major, minor and patch must be integer numbers or empty, suffix must be a string not starting with digits.</li>
	 * <li>Version([1,2,3,"-SNAPSHOT"]) - as an array with the individual parts. The same type restrictions apply as before.</li>
	 * <li>Version(otherVersion) - as a Version instance (cast operation). Returns the given instance instead of creating a new one.</li> 
	 * </ul>
	 * 
	 * To keep the code size small, this implementation mainly validates the single string variant. 
	 * All other variants are only validated to some degree. It is the responsibility of the caller to 
	 * provide proper parts.
	 *
	 * @param {int|string|any[]|jQuery.sap.Version} vMajor the major part of the version (int) or any of the single parameter variants explained above. 
	 * @param {int} iMinor the minor part of the version number 
	 * @param {int} iPatch the patch part of the version number
	 * @param {string} sSuffix the suffix part of the version number
	 * @return {jQuery.sap.Version} the version object as determined from the parameters
	 * 
	 * @class Represents a version consisting of major, minor, patch version and suffix, e.g. '1.2.7-SNAPSHOT'.
	 *
	 * @author SAP AG
	 * @version 1.18.9
	 * @constructor
	 * @public
	 * @since 1.15.0
	 * @name jQuery.sap.Version
	 */
	function Version(vMajor, iMinor, iPatch, sSuffix) {
		if ( vMajor instanceof Version ) {
			// note: even a constructor may return a value different from 'this' 
			return vMajor;
		}
		if ( !(this instanceof Version) ) {
			// act as a cast operator when called as function (not as a constructor)
			return new Version(vMajor, iMinor, iPatch, sSuffix);
		}
		
		var m = (typeof vMajor === "string" ? rVersion.exec(vMajor) : (jQuery.isArray(vMajor) ? vMajor : arguments)) || [];
		function norm(v) {
			v = parseInt(v,10);
			return isNaN(v) ? 0 : v;
		}
		vMajor = norm(m[0]);
		iMinor = norm(m[1]);
		iPatch = norm(m[2]);
		sSuffix = String(m[3] || "");
		
		/**
		 * Returns a string representation of this version.
		 *
		 * @return {string} a string representation of this version.
		 * @name jQuery.sap.Version#toString
		 * @public
		 * @since 1.15.0
		 */
		this.toString = function() {
			return vMajor + "." + iMinor + "." + iPatch + sSuffix; 
		};
		
		/**
		 * Returns the major version part of this version.
		 *
		 * @return {int} the major version part of this version
		 * @name jQuery.sap.Version#getMajor
		 * @public
		 * @since 1.15.0
		 */
		this.getMajor = function() { return vMajor; };
		
		/**
		 * Returns the minor version part of this version.
		 *
		 * @return {int} the minor version part of this version
		 * @name jQuery.sap.Version#getMinor
		 * @public
		 * @since 1.15.0
		 */
		this.getMinor = function() { return iMinor; };
		
		/**
		 * Returns the patch (or micro) version part of this version.
		 *
		 * @return {int} the patch version part of this version
		 * @name jQuery.sap.Version#getPatch
		 * @public
		 * @since 1.15.0
		 */
		this.getPatch = function() { return iPatch; };
		
		/**
		 * Returns the version suffix of this version.
		 *
		 * @return {string} the version suffix of this version
		 * @name jQuery.sap.Version#getSuffix
		 * @public
		 * @since 1.15.0
		 */
		this.getSuffix = function() { return sSuffix; };

		/**
		 * Compares this version with a given one.
		 *
		 * The version with which this version should be compared can be given as
		 * <code>jQuery.sap.Version</code> instance, as a string (e.g. <code>v.compareto("1.4.5")</code>)
		 * or major, minor, patch and suffix cab be given as separate parameters (e.g. <code>v.compareTo(1, 4, 5)</code>)
		 * or in an array (e.g. <code>v.compareTo([1, 4, 5])</code>).
		 * 
		 * @return {int} 0, if the given version is equal to this version, a negative value if the given version is greater and a positive value otherwise
		 * @name jQuery.sap.Version#compareTo
		 * @public
		 * @since 1.15.0
		 */
		this.compareTo = function() {
			var vOther = Version.apply(window, arguments);
			return vMajor - vOther.getMajor() ||
					iMinor - vOther.getMinor() ||
					iPatch - vOther.getPatch() || 
					((sSuffix < vOther.getSuffix()) ? -1 : (sSuffix === vOther.getSuffix()) ? 0 : 1);
		};
		
	}

	/**
	 * Checks whether this version is in the range of the given versions (start included, end excluded).
	 *
	 * The boundaries against which this version should be checked can be given as
	 * <code>jQuery.sap.Version</code> instances (e.g. <code>v.inRange(v1, v2)</code>), as strings (e.g. <code>v.inRange("1.4", "2.7")</code>)
	 * or as arrays (e.g. <code>v.inRange([1,4], [2,7])</code>).
	 * 
	 * @return {boolean} <code>true</code> if this version is greater or equal to <code>vMin</code> and smaller than <code>vMax</code>, <code>false</code> otherwise.
	 * @name jQuery.sap.Version#inRange
	 * @public
	 * @since 1.15.0
	 */
	Version.prototype.inRange = function(vMin, vMax) {
		return this.compareTo(vMin) >= 0 && this.compareTo(vMax) < 0; 
	};
	
	// -----------------------------------------------------------------------
	
	var oJQVersion = Version(jQuery.fn.jquery);
	if ( !oJQVersion.inRange("1.7.0", "2.0.0") ) {
		_earlyLog("error", "SAPUI5 requires a jQuery version of 1.7 or higher, but lower than 2.0; current version is " + jQuery.fn.jquery);
	}
	
	// TODO move to a separate module? Only adds 385 bytes (compressed), but...
	if ( !jQuery.browser ) {
		// re-introduce the jQuery.browser support if missing (jQuery-1.9ff) 
		jQuery.browser = (function( ua ) {
			
			var rwebkit = /(webkit)[ \/]([\w.]+)/,
				ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
				rmsie = /(msie) ([\w.]+)/,
				rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
				ua = ua.toLowerCase(),
				match = rwebkit.exec( ua ) ||
					ropera.exec( ua ) ||
					rmsie.exec( ua ) ||
					ua.indexOf("compatible") < 0 && rmozilla.exec( ua ) ||
					[],
				browser = {};
			
			if ( match[1] ) {
				browser[ match[1] ] = true;
				browser.version = match[2] || "0";
				if ( browser.webkit ) {
					browser.safari = true;
				}
			}
			
			return browser;
			
		}(window.navigator.userAgent));
	}
	
	// Fixes the CORS issue (introduced by jQuery 1.7) when loading resources
	// (e.g. SAPUI5 script) from other domains for IE browsers.
	// The CORS check in jQuery filters out such browsers who do not have the
	// property "withCredentials" which is the IE and Opera and prevents those
	// browsers to request data from other domains with jQuery.ajax. The CORS
	// requests are simply forbidden nevertheless if it works. In our case we
	// simply load our script resources from another domain when using the CDN
	// variant of SAPUI5. The following fix is also recommended by jQuery:
	if (!!sap.ui.Device.browser.internet_explorer) {
		jQuery.support.cors = true;
	}


	/**
	 * Find the script URL where the SAPUI5 is loaded from and return an object which
	 * contains the identified script-tag and resource root
	 */
	var _oBootstrap = (function() {
		var oTag, sUrl, sResourceRoot,
			reConfigurator = /^(.*\/)?download\/configurator[\/\?]/,
			reBootScripts = /^(.*\/)?(sap-ui-(core|custom|boot|merged)(-.*)?)\.js([?#]|$)/,
			reResources = /^(.*\/)?resources\//;

		// check all script tags that have a src attribute
		jQuery("script[src]").each(function() {
			var src = this.getAttribute("src"),
				m;
			if ( m = src.match(reConfigurator) ) {
				// guess 1: script tag src contains "/download/configurator[/?]" (for dynamically created bootstrap files)
				oTag = this;
				sUrl = src;
				sResourceRoot = (m[1] || "") + "resources/";
				return false;
			} else if ( m = src.match(reBootScripts) ) {
				// guess 2: src contains one of the well known boot script names
				oTag = this;
				sUrl = src;
				sResourceRoot = m[1] || "";
				return false;
			} else if ( this.id == 'sap-ui-bootstrap' && (m=src.match(reResources)) ) {
				// guess 2: script tag has well known id and src contains "resources/"
				oTag = this;
				sUrl = src;
				sResourceRoot = m[0];
				return false;
			}
		});
		return {
			tag: oTag,
			url: sUrl,
			resourceRoot: sResourceRoot
		};
	})();

	/**
	 * Determine whether sap-bootstrap-debug is set, run debugger statement and allow
	 * to restart the core from a new URL
	 */
	(function() {
		if (/sap-bootstrap-debug=(true|x|X)/.test(location.search)) {
			window["sap-ui-bRestart"] = false;
			window["sap-ui-sRestartUrl"] = "http://localhost:8080/sapui5/resources/sap-ui-core.js";

			// function to replace the bootstrap tag with a newly created script tag to enable
			// restarting the core from a different server
			var restartCore = function() {
				var oScript = _oBootstrap.tag,
					sScript = "<script src=\"" + window["sap-ui-sRestartUrl"] + "\"";
				jQuery.each(oScript.attributes, function(i, oAttr) {
					if (oAttr.nodeName.indexOf("data-sap-ui-") == 0) {
						sScript += " " + oAttr.nodeName + "=\"" + oAttr.nodeValue + "\"";
					}
				});
				sScript += "></script>";
				oScript.parentNode.removeChild(oScript);
				
				// clean up cachebuster stuff
				jQuery("#sap-ui-bootstrap-cachebusted").remove();
				window["sap-ui-config"] && window["sap-ui-config"].resourceRoots && (window["sap-ui-config"].resourceRoots[""] = undefined);
				
				document.write(sScript);
				var oRestart = new Error("Aborting UI5 bootstrap and restarting from: " + window["sap-ui-sRestartUrl"]);
				oRestart.name = "Restart";
				
				// clean up
				delete window["sap-ui-bRestart"];
				delete window["sap-ui-sRestartUrl"];
				
				throw oRestart;
			};

			// debugger stops here. To restart UI5 from somewhere else (default: localhost), set:
			//    window["sap-ui-bRestart"] = true
			// If you want to restart from a different server than localhost, you can adapt the URL, e.g.: 
			//    window["sap-ui-sRestartUrl"] = "http://someserver:8080/sapui5/resources/sap-ui-core.js"
			debugger;
			if (window["sap-ui-bRestart"]) {
				restartCore();
			}
		}
	})();

	/**
	 * Determine whether to use debug sources depending on URL parameter and local storage
	 * and load debug library if necessary
	 */
	(function() {
		//Check URI param
		var bDebugSources = /sap-ui-debug=(true|x|X)/.test(location.search),
			bIsOptimized = window["sap-ui-optimized"];

		//Check local storage
		try { //Necessary for FF when Cookies are deactivated
			bDebugSources = bDebugSources || (window.localStorage.getItem("sap-ui-debug") == "X");
		} catch(e) {}

		window["sap-ui-debug"] = bDebugSources;

		// if bootstap URL already contains -dbg URL, just set sap-ui-loaddbg
		if (/-dbg\.js([?#]|$)/.test(_oBootstrap.url)) {
			window["sap-ui-loaddbg"] = true;
			window["sap-ui-debug"] = true;
		}

		// if current sources are optimized and debug sources are wanted, restart with debug URL
		if (bIsOptimized && bDebugSources) {
			var sDebugUrl = _oBootstrap.url.replace(/\/(?:sap-ui-cachebuster\/)?([^\/]+)\.js/, "/$1-dbg.js");
			window["sap-ui-optimized"] = false;
			window["sap-ui-loaddbg"] = true;
			document.write("<script type=\"text/javascript\" src=\"" + sDebugUrl + "\"></script>");
			var oRestart = new Error("Aborting UI5 bootstrap and restarting from: " + sDebugUrl);
			oRestart.name = "Restart";
			throw oRestart;
		}
	})();

	/*
	 * Merged, raw (un-interpreted) configuration data from the following sources
	 * (last one wins)
	 * <ol>
	 * <li>global configuration object <code>window["sap-ui-config"]</code> (could be either a string/url or a configuration object)</li>
	 * <li><code>data-sap-ui-config</code> attribute of the bootstrap script tag</li>
	 * <li>other <code>data-sap-ui-<i>xyz</i></code> attributes of the bootstrap tag</li>
	 * </ol>
	 */
	var oCfgData = _window["sap-ui-config"] = (function() {

		function normalize(o) {
			jQuery.each(o, function(i, v) {
				var il=i.toLowerCase();
				if ( !o.hasOwnProperty(il) ) {
					o[il] = v;
					delete o[i];
				}
			});
			return o;
		}

		var oScriptTag = _oBootstrap.tag,
		    oCfg = _window["sap-ui-config"],
		    sCfgFile = "sap-ui-config.json";
		
		// load the configuration from an external JSON file 
		if (typeof oCfg === "string") {
			_earlyLog("warning", "Loading external bootstrap configuration from \"" + oCfg + "\". This is a design time feature and not for productive usage!");
			if (oCfg !== sCfgFile) {
				_earlyLog("warning", "The external bootstrap configuration file should be named \"" + sCfgFile + "\"!");
			}
			jQuery.ajax({
				url : oCfg,
				dataType : 'json',
				async : false,
				success : function(oData, sTextStatus, jqXHR) {
					oCfg = oData;
				},
				error : function(jqXHR, sTextStatus, oError) {
					_earlyLog("error", "Loading externalized bootstrap configuration from \"" + oCfg + "\" failed! Reason: " + oError + "!");
					oCfg = undefined;
				}
			});
		}
		
		oCfg = normalize(oCfg || {});
		oCfg.resourceroots = oCfg.resourceroots || {};
		oCfg.themeroots = oCfg.themeroots || {};
		oCfg.resourceroots[''] = oCfg.resourceroots[''] || _oBootstrap.resourceRoot;

		oCfg['xx-loadallmode'] = /(^|\/)(sap-?ui5|[^\/]+-all).js([?#]|$)/.test(_oBootstrap.url);

		// if a script tag has been identified, collect its configuration info
		if ( oScriptTag ) {
			// evaluate the config attribute first - if present
			var sConfig = oScriptTag.getAttribute("data-sap-ui-config");
			if ( sConfig ) {
				try {
				  jQuery.extend(oCfg, normalize((new Function("return {" + sConfig + "};"))())); // TODO jQuery.parseJSON would be better but imposes unwanted restrictions on valid syntax
				} catch(e) {
				  // no log yet, how to report this error?
				  _earlyLog("error", "failed to parse data-sap-ui-config attribute: " + (e.message || e));
				}
			}

			// merge with any existing "data-sap-ui-" attributes
			jQuery.each(oScriptTag.attributes, function(i, attr) {
				var m = attr.name.match(/^data-sap-ui-(.*)$/);
				if ( m ) {
					// the following (deactivated) conversion would implement multi-word names like "resource-roots"
					m = m[1].toLowerCase(); // .replace(/\-([a-z])/g, function(s,w) { return w.toUpperCase(); })
					if ( m === 'resourceroots' ) {
						// merge map entries instead of overwriting map
						jQuery.extend(oCfg[m], jQuery.parseJSON(attr.value));
					} else if ( m === 'theme-roots' ) {
						// merge map entries, but rename to camelCase
						jQuery.extend(oCfg.themeroots, jQuery.parseJSON(attr.value));
					} else if ( m !== 'config' ) {
						oCfg[m] = attr.value;
					}
				}
			});
		}

		return oCfg;
	}());

	// check whether noConflict must be used...
	if ( oCfgData.noconflict === true || oCfgData.noconflict === "true"  || oCfgData.noconflict === "x" ) {
		jQuery.noConflict();
	}

	/**
	 * Root Namespace for the jQuery plug-in provided by SAP AG.
	 *
	 * @version 1.18.9
	 * @namespace
	 * @public
	 * @static
	 */
	jQuery.sap = {};
	
	// -------------------------- VERSION -------------------------------------
	
	jQuery.sap.Version = Version;

	// -------------------------- DEBUG LOCAL STORAGE -------------------------------------

	jQuery.sap.debug = function(bEnable) {
		if(!window.localStorage){
			return null;
		}

		function reloadHint(bUsesDbgSrc){
			alert("Usage of debug sources is " + (bUsesDbgSrc ? "on" : "off") + " now.\nFor the change to take effect, you need to reload the page.");
		};

		if (bEnable === true) {
			window.localStorage.setItem("sap-ui-debug", "X");
			reloadHint(true);
		} else if (bEnable === false) {
			window.localStorage.removeItem("sap-ui-debug");
			reloadHint(false);
		}

		return window.localStorage.getItem("sap-ui-debug") == "X";
	};

	// -------------------------- STATISTICS LOCAL STORAGE -------------------------------------

	jQuery.sap.statistics = function(bEnable) {
		if(!window.localStorage){
			return null;
		}

		function reloadHint(bUsesDbgSrc){
			alert("Usage of Gateway statistics " + (bUsesDbgSrc ? "on" : "off") + " now.\nFor the change to take effect, you need to reload the page.");
		};

		if (bEnable === true) {
			window.localStorage.setItem("sap-ui-statistics", "X");
			reloadHint(true);
		} else if (bEnable === false) {
			window.localStorage.removeItem("sap-ui-statistics");
			reloadHint(false);
		}

		return window.localStorage.getItem("sap-ui-statistics") == "X";
	};

	// -------------------------- Logging -------------------------------------

	(function() {

		var FATAL=0, ERROR=1, WARNING=2, INFO=3, DEBUG=4, TRACE=5,

		/**
		 * Unique prefix for this instance of the core in a multi-frame environment.
		 */
			sWindowName = (window.top == window) ? "" : "[" + window.location.pathname.split('/').slice(-1)[0] + "] ",
		// Note: comparison must use type coercion (==, not ===), otherwise test fails in IE

		/**
		 * The array that holds the log entries that have been recorded so far
		 */
			aLog = [],

		/**
		 * Maximum log level to be recorded (per component).
		 */
			mMaxLevel = { '' : ERROR },

		/**
		 * Registered listener to be informed about new log entries.
		 */
			oListener = null;

		function pad0(i,w) { return ("000" + String(i)).slice(-w); }

		function level(sComponent) {
			return (!sComponent || isNaN(mMaxLevel[sComponent])) ? mMaxLevel[''] : mMaxLevel[sComponent];
		}
		
		function listener(){
			if(!oListener){
				oListener = {
					listeners: [],
					onLogEntry: function(oLogEntry){
						for(var i=0; i<oListener.listeners.length; i++){
							if(oListener.listeners[i].onLogEntry){
								oListener.listeners[i].onLogEntry(oLogEntry);
							}
						}
					},
					attach: function(oLogger, oLstnr){
						if(oLstnr){
							oListener.listeners.push(oLstnr);
							if(oLstnr.onAttachToLog){
								oLstnr.onAttachToLog(oLogger);
							}
						}
					},
					detach: function(oLogger, oLstnr){
						for(var i=0; i<oListener.listeners.length; i++){
							if(oListener.listeners[i] === oLstnr){
								if(oLstnr.onDetachFromLog){
									oLstnr.onDetachFromLog(oLogger);
								}
								oListener.listeners.splice(i,1);
								return;
							}
						}
					}
				};
			}
			return oListener;
		}

		/**
		 * Creates a new log entry depending on its level and component.
		 *
		 * If the given level is higher than the max level for the given component
		 * (or higher than the global level, if no component is given),
		 * then no entry is created.
		 */
		function log(iLevel, sMessage, sDetails, sComponent) {
			if (iLevel <= level(sComponent) ) {
				var oNow = new Date(),
					oLogEntry = {
						time     : pad0(oNow.getHours(),2)+":"+pad0(oNow.getMinutes(),2)+":"+pad0(oNow.getSeconds(),2),
						date     : pad0(oNow.getFullYear(),4) + "-" + pad0(oNow.getMonth()+1,2) + "-" + pad0(oNow.getDate(),2),
						timestamp: oNow.getTime(),
						level    : iLevel,
						message  : String(sMessage || ""),
						details  : String(sDetails || ""),
						component: String(sComponent || "")
					};
				aLog.push( oLogEntry );
				if (oListener) {
					oListener.onLogEntry(oLogEntry);
				}

				/*
				 * Console Log, also tries to log to the window.console, if available.
				 *
				 * Unfortunately, the support for window.console is quite different between the UI5 browsers. The most important differences are:
				 * - in IE (checked until IE9), the console object does not exist in a window, until the developer tools are opened for that window.
				 *   After opening the dev tools, the console remains available even when the tools are closed again. Only using a new window (or tab)
				 *   restores the old state without console.
				 *   When the console is available, it provides most standard methods, but not debug and trace
				 * - in FF3.6 the console is not available, until FireBug is opened. It disappears again, when fire bug is closed.
				 *   But when the settings for a web site are stored (convenience), the console remains open
				 *   When the console is available, it supports all relevant methods
				 * - in FF9.0, the console is always available, but method assert is only available when firebug is open
				 * - in Webkit browsers, the console object is always available and has all required methods
				 *   - Exception: in the iOS Simulator, console.info() does not exist
				 */
				if (window.console) { // in IE and FF, console might not exist; in FF it might even disappear
					var logText = oLogEntry.date + " " + oLogEntry.time + " " + sWindowName + oLogEntry.message + " - " + oLogEntry.details + " " + oLogEntry.component;
					switch(iLevel) {
					case FATAL:
					case ERROR: console.error(logText); break;
					case WARNING: console.warn(logText); break;
					case INFO: console.info ? console.info(logText) : console.log(logText); break;    // info not available in iOS simulator
					case DEBUG: console.debug ? console.debug(logText) : console.log(logText); break; // debug not available in IE, fallback to log
					case TRACE: console.trace ? console.trace(logText) : console.log(logText); break; // trace not available in IE, fallback to log (no trace)
					}
				}
				return oLogEntry;
			}
		}

		/**
		 * @class A Logger class
		 * @param sDefaultComponent
		 * @name jQuery.sap.log.Logger
		 * @since 1.1.2
		 * @public
		 */
		function Logger(sDefaultComponent) {

			/**
			 * Creates a new fatal-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance for method chaining
			 * @name jQuery.sap.log.Logger#fatal
			 * @function
			 * @public
			 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
			 */
			this.fatal = function (sMessage, sDetails, sComponent) {
				log(FATAL, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};

			/**
			 * Creates a new error-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance
			 * @name jQuery.sap.log.Logger#error
			 * @function
			 * @public
			 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
			 */
			this.error = function error(sMessage, sDetails, sComponent) {
				log(ERROR, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};

			/**
			 * Creates a new warning-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance
			 * @name jQuery.sap.log.Logger#warning
			 * @function
			 * @public
			 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
			 */
			this.warning = function warning(sMessage, sDetails, sComponent) {
				log(WARNING, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};
			/**
			 * Creates a new info-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance
			 * @name jQuery.sap.log.Logger#info
			 * @function
			 * @public
			 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
			 */
			this.info = function info(sMessage, sDetails, sComponent) {
				log(INFO, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};
			/**
			 * Creates a new debug-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log instance
			 * @name jQuery.sap.log.Logger#debug
			 * @function
			 * @public
			 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
			 */
			this.debug = function debug(sMessage, sDetails, sComponent) {
				log(DEBUG, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};
			/**
			 * Creates a new trace-level entry in the log with the given message, details and calling component.
			 *
			 * @param {string} sMessage Message text to display
			 * @param {string} [sDetails=""] Details about the message, might be omitted
			 * @param {string} [sComponent=""] Name of the component that produced the log entry
			 * @return {jQuery.sap.log.Logger} The log-instance
			 * @name jQuery.sap.log.Logger#trace
			 * @function
			 * @public
			 * @SecSink {0 1 2|SECRET} Could expose secret data in logs
			 */
			this.trace = function trace(sMessage, sDetails, sComponent) {
				log(TRACE, sMessage, sDetails, sComponent || sDefaultComponent);
				return this;
			};

			/**
			 * Defines the maximum jQuery.sap.log.Level of log entries that will be recorded.
			 * Log entries with a higher (less important) log level will be omitted from the log.
			 * When a component name is given, the log level will be configured for that component
			 * only, otherwise the log level for the default component of this logger is set.
			 * For the global logger, the global default level is set.
			 *
			 * <b>Note</b>: Setting a global default log level has no impact on already defined
			 * component log levels. They always override the global default log level.
			 *
			 * @param {jQuery.sap.log.Level} iLogLevel
			 * @param {string} [sComponent] The log component to set the log level for.
			 * @return {jQuery.sap.log} The global logger to allow method chaining
			 * @name jQuery.sap.log.Logger#setLevel
			 * @function
			 * @public
			 */
			this.setLevel = function setLevel(iLogLevel, sComponent) {
				sComponent = sComponent || sDefaultComponent || '';
				mMaxLevel[sComponent] = iLogLevel;
				var mBackMapping = [];
				jQuery.each(jQuery.sap.log.LogLevel, function(idx, v){
					mBackMapping[v] = idx;
				});
				log(INFO, "Changing log level " + (sComponent ? "for '" + sComponent + "' " : "") + "to " + mBackMapping[iLogLevel], "", "jQuery.sap.log");
				return this;
			};

			/**
			 * Returns the log level currently effective for the given component.
			 * If no component is given or when no level has been configured for a
			 * given component, the log level for the default component of this logger is returned.
			 *
			 * @param {string} [sComponent] Name of the component to retrieve the log level for
			 * @return {int} The log level for the given component or the default log level
			 * @name jQuery.sap.log.Logger#getLevel
			 * @function
			 * @public
			 * @since 1.1.2
			 */
			this.getLevel = function getLevel(sComponent) {
				return level(sComponent || sDefaultComponent);
			};

			/**
			 * Checks whether logging is enabled for the given log level, 
			 * depending on the currently effective log level for the given component.
			 *
			 * If no component is given, the default component of this logger will be taken into account.
			 *
			 * @param {int} [iLevel=Level.DEBUG] the log level in question
			 * @param {string} [sComponent] Name of the component to check the log level for
			 * @return {boolean} Whether logging is enabled or not
			 * @name jQuery.sap.log.Logger#isLoggable
			 * @function
			 * @public
			 * @since 1.13.2
			 */
			this.isLoggable = function (iLevel, sComponent) {
				return (iLevel == null ? DEBUG : iLevel) <= level(sComponent || sDefaultComponent);
			};
		}

		/**
		 * A Logging API for JavaScript.
		 *
		 * Provides methods to manage a client-side log and to create entries in it. Each of the logging methods
		 * {@link jQuery.sap.log.#debug}, {@link jQuery.sap.log.#info}, {@link jQuery.sap.log.#warning},
		 * {@link jQuery.sap.log.#error} and {@link jQuery.sap.log.#fatal} creates and records a log entry,
		 * containing a timestamp, a log level, a message with details and a component info.
		 * The log level will be one of {@link jQuery.sap.log.Level} and equals the name of the concrete logging method.
		 *
		 * By using the {@link jQuery.sap.log#setLevel} method, consumers can determine the least important
		 * log level which should be recorded. Less important entries will be filtered out. (Note that higher numeric
		 * values represent less important levels). The initially set level depends on the mode that UI5 is running in.
		 * When the optimized sources are executed, the default level will be {@link jQuery.sap.log.Level.ERROR}.
		 * For normal (debug sources), the default level is {@link jQuery.sap.log.Level.DEBUG}.
		 *
		 * All logging methods allow to specify a <b>component</b>. These components are simple strings and
		 * don't have a special meaning to the UI5 framework. However they can be used to semantically group
		 * log entries that belong to the same software component (or feature). There are two APIs that help
		 * to manage logging for such a component. With <code>{@link jQuery.sap.log.getLogger}(sComponent)</code>,
		 * one can retrieve a logger that automatically adds the given <code>sComponent</code> as component
		 * parameter to each log entry, if no other component is specified. Typically, JavaScript code will
		 * retrieve such a logger once during startup and reuse it for the rest of its lifecycle.
		 * Second, the {@link jQuery.sap.log.Logger#setLevel}(iLevel, sComponent) method allows to set the log level
		 * for a specific component only. This allows a more fine granular control about the created logging entries.
		 * {@link jQuery.sap.log.Logger.getLevel} allows to retrieve the currently effective log level for a given
		 * component.
		 *
		 * {@link jQuery.sap.log#getLog} returns an array of the currently collected log entries.
		 *
		 * Furthermore, a listener can be registered to the log. It will be notified whenever a new entry
		 * is added to the log. The listener can be used for displaying log entries in a separate page area,
		 * or for sending it to some external target (server).
		 *
		 * @author SAP AG
		 * @since 0.9.0
		 * @namespace
		 * @public
		 * @borrows jQuery.sap.log.Logger#fatal as this.fatal
		 * @borrows jQuery.sap.log.Logger#error as this.error
		 * @borrows jQuery.sap.log.Logger#warning as this.warning
		 * @borrows jQuery.sap.log.Logger#info as this.info
		 * @borrows jQuery.sap.log.Logger#debug as this.debug
		 * @borrows jQuery.sap.log.Logger#trace as this.trace
		 * @borrows jQuery.sap.log.Logger#getLevel as this.getLevel
		 * @borrows jQuery.sap.log.Logger#setLevel as this.setLevel
		 * @borrows jQuery.sap.log.Logger#isLoggable as this.isLoggable
		 */
		jQuery.sap.log = jQuery.extend(new Logger(), /** @lends jQuery.sap.log */ {

			/**
			 * Enumeration of the configurable log levels that a Logger should persist to the log.
			 *
			 * Only if the current LogLevel is higher than the level {@link jQuery.sap.log.Level} of the currently added log entry,
			 * then this very entry is permanently added to the log. Otherwise it is ignored.
			 * @see jQuery.sap.log.Logger#setLevel
			 * @namespace
			 * @public
			 */
			Level : {

				/**
				 * Do not log anything
				 * @public
				 */
				NONE : FATAL-1,

				/**
				 * Fatal level. Use this for logging unrecoverable situations
				 * @public
				 */
				FATAL : FATAL,

				/**
				 * Error level. Use this for logging of erroneous but still recoverable situations
				 * @public
				 */
				ERROR : ERROR,

				/**
				 * Warning level. Use this for logging unwanted but foreseen situations
				 * @public
				 */
				WARNING : WARNING,

				/**
				 * Info level. Use this for logging information of purely informative nature
				 * @public
				 */
				INFO : INFO,

				/**
				 * Debug level. Use this for logging information necessary for debugging
				 * @public
				 */
				DEBUG : DEBUG,

				/**
				 * Trace level. Use this for tracing the program flow.
				 * @public
				 */
				TRACE : TRACE, /* TODO Think about changing to 10 and thus to pull out of logging... -> Make tracing explicit */

				/**
				 * Trace level to log everything.
				 */
				ALL : (TRACE + 1) /* TODO if TRACE is changed to make sure this is 6 again. There would then be some special TRACE handling. */
			},

			/**
			 * Returns a {@link jQuery.sap.log.Logger} for the given component.
			 *
			 * The method might or might not return the same logger object across multiple calls.
			 * While loggers are assumed to be light weight objects, consumers should try to
			 * avoid redundant calls and instead keep references to already retrieved loggers.
			 *
			 * The optional second parameter <code>iDefaultLogLevel</code> allows to specify 
			 * a default log level for the component. It is only applied when no log level has been 
			 * defined so far for that component (ignoring inherited log levels). If this method is 
			 * called multiple times for the same component but with different log levels, 
			 * only the first call one might be taken into account.
			 * 
			 * @param {string} sComponent Component to create the logger for
			 * @param {int} [iDefaultLogLevel] a default log level to be used for the component, 
			 *   if no log level has been defined for it so far.
			 * @return {jQuery.sap.log.Logger} A logger for the component.
			 * @public
			 * @static
			 * @since 1.1.2
			 */
			getLogger : function(sComponent, iDefaultLogLevel) {
				if ( !isNaN(iDefaultLogLevel) && mMaxLevel[sComponent] == null ) {
					mMaxLevel[sComponent] = iDefaultLogLevel;
				}
				return new Logger(sComponent);
			},

			/**
			 * Returns the logged entries recorded so far as an array.
			 *
			 * Log entries are plain JavaScript objects with the following properties
			 * <ul>
			 * <li>timestamp {number} point in time when the entry was created
			 * <li>level {int} LogLevel level of the entry
			 * <li>message {string} message text of the entry
			 * </ul>
			 *
			 * @return {object[]} an array containing the recorded log entries
			 * @public
			 * @static
			 * @since 1.1.2
			 */
			getLogEntries : function () {
				return aLog.slice();
			},
			
			/**
			 * Allows to add a new LogListener that will be notified for new log entries.
			 * The given object must provide method <code>onLogEntry</code> and can also be informed
			 * about <code>onDetachFromLog</code> and <code>onAttachToLog</code>
			 * @param {object} oListener The new listener object that should be informed
			 * @return {jQuery.sap.log} The global logger
			 * @public
			 * @static
			 */
			addLogListener : function(oListener) {
				listener().attach(this, oListener);
				return this;
			},
			
			/**
			 * Allows to remove a registered LogListener.
			 * @param {object} oListener The new listener object that should be removed
			 * @return {jQuery.sap.log} The global logger
			 * @public
			 * @static
			 */
			removeLogListener : function(oListener) {
				listener().detach(this, oListener);
				return this;
			}
			
		});

		/**
		 * Deprecated duplicate of {@link jQuery.sap.log.Level}.
		 * @deprecated Since 1.1.2. To streamline the Logging API a bit, the separation between Level and LogLevel has been given up.
		 * Use the (enriched) enumeration {@link jQuery.sap.log.Level} instead.
		 * @namespace Enumeration of levels that can be used in a call to {@link jQuery.sap.log.Logger#setLevel}(iLevel, sComponent).
		 * @public
		 */
		jQuery.sap.log.LogLevel = jQuery.sap.log.Level;

		/**
		 * Retrieves the currently recorded log entries.
		 * @deprecated Since 1.1.2. To avoid confusion with getLogger, this method has been renamed to {@link jQuery.sap.log.getLogEntries}.
		 * @function
		 * @public
		 * @static
		 */
		jQuery.sap.log.getLog = jQuery.sap.log.getLogEntries;

		/**
		 * A simple assertion mechanism that logs a message when a given condition is not met.
		 *
		 * <b>Note:</b> Calls to this method might be removed when the JavaScript code
		 *              is optimized during build. Therefore, callers should not rely on any side effects
		 *              of this method.
		 *
		 * @public
		 * @static
		 * @SecSink {1|SECRET} Could expose secret data in logs
		 */
		jQuery.sap.assert = function(bResult, sMessage) {
			if( !bResult ) {
				if ( window.console && console.assert ) {
					console.assert(bResult, sWindowName + sMessage);
				} else {
					// console is not always available (IE, FF) and IE doesn't support console.assert
					jQuery.sap.log.debug("[Assertions] " + sMessage);
				}
			}
		};

		// against all our rules: use side effect of assert to differentiate between optimized and productive code
		jQuery.sap.assert( !!(mMaxLevel[''] = DEBUG), "will be removed in optimized version");
		// evaluate configuration
		oCfgData.loglevel = oCfgData.loglevel || (function() { var m=/(?:\?|&)sap-ui-log(?:L|-l)evel=([^&]*)/.exec(window.location.search); return m && m[1];}());
		if ( oCfgData.loglevel ) {
			jQuery.sap.log.setLevel(jQuery.sap.log.Level[oCfgData.loglevel.toUpperCase()] || parseInt(oCfgData.loglevel,10));
		}

		jQuery.sap.log.info("SAP Logger started.");
		// log early logs
		jQuery.each(_earlyLogs, function(i,e) { jQuery.sap.log[e.level](e.message); }); _earlyLogs = null;


	}());

	// ---------------------------------------------------------------------------------------------------

	/**
	 * Returns a new constructor function that creates objects with
	 * the given prototype.
	 *
	 * @return {function} the newly created constructor function
	 * @public
	 * @static
	 */
	jQuery.sap.factory = function factory(oPrototype) {
		function Factory() {}
		Factory.prototype = oPrototype;
		return Factory;
	};

	/**
	 * Returns a new object which has the given oPrototype as its prototype.
	 *
	 * If several objects with the same prototype are to be created,
	 * {@link jQuery.sap.factory} should be used instead.
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.newObject = function newObject(oPrototype) {
		return new (jQuery.sap.factory(oPrototype))();
	};

	/**
	 * Returns a new function that returns the given <code>oValue</code> (using its closure).
	 *
	 * Avoids the need for a dedicated member for the value.
	 *
	 * As closures don't come for free, this function should only be used when polluting
	 * the enclosing object is an absolute "must-not" (as it is the case in public base classes).
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.getter = function getter(oValue) {
		return function() {
			return oValue;
		};
	};

	/**
	 * Returns a JavaScript object which is identified by a sequence of names.
	 *
	 * A call to <code>getObject("a.b.C")</code> has essentially the same effect
	 * as accessing <code>window.a.b.C</code> but with the difference that missing
	 * intermediate objects (a or b in the example above) don't lead to an exception.
	 *
	 * When the addressed object exists, it is simply returned. If it doesn't exists,
	 * the behavior depends on the value of the second, optional parameter
	 * <code>iNoCreates</code> (assuming 'n' to be the number of names in the name sequence):
	 * <ul>
	 * <li>NaN: if iNoCreates is not a number and the addressed object doesn't exist,
	 *          then <code>getObject()</code> returns <code>undefined</code>.
	 * <li>0 &lt; iNoCreates &lt; n: any non-existing intermediate object is created, except
	 *          the <i>last</i> <code>iNoCreates</code> ones.
	 * </ul>
	 *
	 * Example:
	 * <pre>
	 *   getObject()            -- returns the context object (either param or window)
	 *   getObject("a.b.C")     -- will only try to get a.b.C and return undefined if not found.
	 *   getObject("a.b.C", 0)  -- will create a, b, and C in that order if they don't exists
	 *   getObject("a.b.c", 1)  -- will create a and b, but not C.
	 * </pre>
	 *
	 * When a <code>oContext</code> is given, the search starts in that object.
	 * Otherwise it starts in the <code>window</code> object that this plugin
	 * has been created in.
	 *
	 * Note: Although this method internally uses <code>object["key"]</code> to address object
	 *       properties, it does not support all possible characters in a name.
	 *       Especially the dot ('.') is not supported in the individual name segments,
	 *       as it is always interpreted as a name separator.
	 *
	 * @param {string} sName  a dot separated sequence of names that identify the required object
	 * @param {int}    [iNoCreates=NaN] number of objects (from the right) that should not be created
	 * @param {object} [oContext=window] the context to execute the search in
	 *
	 * @public
	 * @static
	 */
	jQuery.sap.getObject = function getObject(sName, iNoCreates, oContext) {
		var oObject = oContext || _window,
			aNames = (sName || "").split("."),
			l = aNames.length,
			iEndCreate = isNaN(iNoCreates) ? 0 : l - iNoCreates,
			i;

		for (i=0; oObject && i<l; i++) {
			if (!oObject[aNames[i]] && i<iEndCreate ) {
				oObject[aNames[i]] = {};
			}
			oObject = oObject[aNames[i]];
		}
		return oObject;

	};

	/**
	 * Sets an object property to a given value, where the property is
	 * identified by a sequence of names (path).
	 *
	 * When a <code>oContext</code> is given, the path starts in that object.
	 * Otherwise it starts in the <code>window</code> object that this plugin
	 * has been created for.
	 *
	 * Note: Although this method internally uses <code>object["key"]</code> to address object
	 *       properties, it does not support all possible characters in a name.
	 *       Especially the dot ('.') is not supported in the individual name segments,
	 *       as it is always interpreted as a name separator.
	 *
	 * @param {string} sName  a dot separated sequence of names that identify the property
	 * @param {any}    vValue value to be set, can have any type
	 * @param {object} [oContext=window] the context to execute the search in
	 * @public
	 * @static
	 */
	jQuery.sap.setObject = function (sName, vValue, oContext) {
		var oObject = oContext || _window,
			aNames = (sName || "").split("."),
			l = aNames.length, i;

		if ( l>0 ) {
			for (i=0; oObject && i<l-1; i++) {
				if (!oObject[aNames[i]] ) {
					oObject[aNames[i]] = {};
				}
				oObject = oObject[aNames[i]];
			}
			oObject[aNames[l-1]] = vValue;
		}
	};

	// ---------------------- sync point -------------------------------------------------------------
	
	/*
	 * Internal class that can help to synchronize a set of asynchronous tasks.
	 * Each task must be registered in the sync point by calling startTask with 
	 * an (purely informative) title. The returned value must be used in a later 
	 * call to finishTask. 
	 * When finishTask has been called for all tasks that have been started, 
	 * the fnCallback will be fired. 
	 * When a timeout is given and reached, the callback is called at that 
	 * time, no matter whether all tasks have been finished or not. 
	 */
	function SyncPoint(sName, fnCallback, iTimeout) {
		var aTasks = [],
			iOpenTasks = 0,
			iFailures = 0,
			sTimer;

		this.startTask = function(sTitle) {
			var iId = aTasks.length;
			aTasks[iId] = { name : sTitle, finished : false };
			iOpenTasks++;
			return iId;
		};
		
		this.finishTask = function(iId, bSuccess) {
			if ( !aTasks[iId] || aTasks[iId].finished ) {
				throw new Error("trying to finish non existing or already finished task");
			}
			aTasks[iId].finished = true;
			iOpenTasks--;
			if ( bSuccess === false ) {
				iFailures++;
			}
			if ( iOpenTasks === 0 ) {
				jQuery.sap.log.info("Sync point '" + sName + "' finished (tasks:" + aTasks.length + ", open:" + iOpenTasks + ", failures:" + iFailures + ")");
				if ( sTimer ) {
					clearTimeout(sTimer);
					sTimer = null;
				};
				finish();
			}
		};

		function finish() {
			fnCallback && fnCallback(iOpenTasks, iFailures);
			fnCallback = null;
		}
		
		if ( !isNaN(iTimeout) ) {
			sTimer = setTimeout(function() {
				jQuery.sap.log.info("Sync point '" + sName + "' timed out (tasks:" + aTasks.length + ", open:" + iOpenTasks + ", failures:" + iFailures + ")");
				finish();
			}, iTimeout);
		};
		
		jQuery.sap.log.info("Sync point '" + sName + "' created" + (iTimeout ? "(timeout after " + iTimeout + " ms)" : ""));
		
	}
	
	/**
	 * Internal function to create a sync point.
	 * @private
	 */
	jQuery.sap.syncPoint = function(sName, fnCallback, iTimeout) {
		return new SyncPoint(sName, fnCallback, iTimeout);
	};
	
	// ---------------------- require/declare --------------------------------------------------------

	var getModuleSystemInfo = (function() {

		/**
		 * Local logger, by default only logging errors. Can be configured to DEBUG via config parameter.
		 * @private
		 */
		var log = jQuery.sap.log.getLogger("sap.ui.ModuleSystem",
				(oCfgData["xx-debugModuleLoading"] || /sap-ui-xx-debug(M|-m)odule(L|-l)oading=(true|x|X)/.test(location.search)) ? jQuery.sap.log.Level.DEBUG : jQuery.sap.log.Level.INFO
			),

		/**
		 * A map of URL prefixes keyed by the corresponding module name prefix.
		 * @see jQuery.sap.registerModulePath
		 *
		 * Note that the empty prefix ('') will always match and thus serves as a fallback.
		 * @private
		 */
			mUrlPrefixes = { '' : 'resources/' },

		/**
		 * Module neither has been required nor preloaded not declared, but someone asked for it.
		 */
			INITIAL = 0, 
		
		/**
		 * Module has been preloaded, but not required or declared
		 */
			PRELOADED = -1, 
			
		/**
		 * Module has been declared.
		 */
			LOADING = 1, 
		
		/** 
		 * Module has been loaded, but not yet executed.
		 */
			LOADED = 2, 
		
		/**
		 * Module is currently being executed 
		 */
			EXECUTING = 3, 
		 
		/**
		 * Module has been loaded and executed without errors.
		 */
			READY = 4, 
		
		/**
		 * Module either could not be loaded or execution threw an error 
		 */
			FAILED = 5,
		
		/**
		 * Set of modules that have been loaded (required) so far.
		 * 
		 * Each module is an object that can have the following members
		 * <ul>
		 * <li>{int} state one of the module states defined in this function
		 * <li>{string} url URL where the module has been loaded from
		 * <li>{any} data temp. raw content of the module (between loaded and ready)
		 * <li>{string} error an error description for state <code>FAILED</code>
		 * <li>{any} content the content of the module as exported via define()
		 * </ul>
		 * @private
		 */
			mModules = {
				// predefine already loaded modules to avoid redundant loading
				// "sap/ui/thirdparty/jquery/jquery-1.7.1.js" : { state : READY, url : _sBootstrapUrl, content : jQuery },
				"sap/ui/thirdparty/URI.js" : { state : READY, url : _sBootstrapUrl, content : URI },
				"sap/ui/Device.js" : { state : READY, url : _sBootstrapUrl, content : sap.ui.Device },
				"jquery.sap.global.js" : { state : READY, url : _sBootstrapUrl, content : jQuery }
			},

			mPreloadModules = {},

		/**
		 * Information about third party modules that react on AMD loaders and need a workaround 
		 * to be able to work with jQuery.sap.require no matter whether an AMD loader is present or not.
		 * 
		 * Note: this is a map for future extension
		 * Note: should be maintained together with raw-module info in .library files
		 * @private 
		 */
			mAMDShim = {
				'sap/ui/thirdparty/crossroads.js': true,
				'sap/ui/thirdparty/datajs.js': true,
				'sap/ui/thirdparty/hasher.js': true,
				'sap/ui/thirdparty/IPv6.js': true,
				'sap/ui/thirdparty/jquery/jquery-1.10.1.js': true,
				'sap/ui/thirdparty/jquery/jquery.1.7.1.js': true,
				'sap/ui/thirdparty/jquery/jquery.1.8.1.js': true,
				'sap/ui/thirdparty/jquery-mobile-custom.js': true,
				'sap/ui/thirdparty/less.js.js': true,
				'sap/ui/thirdparty/punycode.js': true,
				'sap/ui/thirdparty/require.js.js': true,
				'sap/ui/thirdparty/SecondLevelDomains.js': true,
				'sap/ui/thirdparty/signals.js': true,
				'sap/ui/thirdparty/URI.js' : true
		  },
		  
		/**
		 * Stack of modules that are currently executed.
		 * 
		 * Allows to identify the containing module in case of multi module files (e.g. sap-ui-core)
		 * @private
		 */
			_execStack = [ ],
	
		/**
		 * A prefix that will be added to module loading log statements and which reflects the nesting of module executions.
		 * @private
		 */
			sLogPrefix = "",

		// max size a script should have when executing it with execScript (IE). Otherwise fallback to eval
			MAX_EXEC_SCRIPT_LENGTH = 512*1024,
		
			sDocumentLocation = document.location.href.replace(/\?.*|#.*/g, ""),

			FRAGMENT = "fragment",
			VIEW = "view",
			mKnownSubtypes = {
				js :  [VIEW, FRAGMENT, "controller"],
				xml:  [VIEW, FRAGMENT],
				json: [VIEW, FRAGMENT],
				html: [VIEW, FRAGMENT]
			},
		
			rJSSubtypes = new RegExp("(\\.(?:" + mKnownSubtypes.js.join("|") + "))?\\.js$"),
			rTypes, 
			rSubTypes;
		
		(function() {
			var s = "",
				sSub = "";
			
			jQuery.each(mKnownSubtypes, function(sType, aSubtypes) {
				s = (s ? s + "|" : "") + sType;
				sSub = (sSub ? sSub + "|" : "") + "(?:(?:" + aSubtypes.join("\\.|") + "\\.)?" + sType + ")";
			});
			s = "\\.(" + s + ")$";
			sSub = "\\.(?:" + sSub + "|[^./]+)$";
			log.debug("constructed regexp for file types :" + s);
			log.debug("constructed regexp for file sub-types :" + sSub);
			rTypes = new RegExp(s);
			rSubTypes = new RegExp(sSub);
		}());

		/**
		 * Name conversion function that converts a name in UI5 module name syntax to a name in requireJS module name syntax. 
		 * @private
		 */
		function ui5ToRJS(sName) {
			if ( /^sap\.ui\.thirdparty\.jquery\.jquery-/.test(sName) ) {
				return "sap/ui/thirdparty/jquery/jquery-" + sName.slice("sap.ui.thirdparty.jquery.jquery-".length);
			} else if ( /^jquery\.sap\./.test(sName) ) {
				return sName;
			}
			return sName.replace(/\./g, "/");
		}
		
		/**
		 * Name conversion function that converts a name in unified resource name syntax to a name in UI5 module name syntax.
		 * If the name cannot be converted (e.g. doesn't end with '.js'), then <code>undefined</code> is returned.
		 * 
		 * @private
		 */
		function urnToUI5(sName) {
			var sResult;
			
			// UI5 module name syntax is only defined for JS resources
			if ( !/\.js$/.test(sName) ) {
				return;
			}
			
			sName = sName.slice(0, -3);
			if ( /^sap\/ui\/thirdparty\/jquery\/jquery-/.test(sName) ) {
				return "sap.ui.thirdparty.jquery.jquery-" + sName.slice("sap/ui/thirdparty/jquery/jquery-".length);
			} else if ( /^jquery\.sap\./.test(sName) ) {
				return sName; // do nothing
			}
			return sName.replace(/\//g, ".");
		}
	
		// find longest matching prefix for resource name
		function getResourcePath(sResourceName, sSuffix) {
	
			// split name into segments
			var aSegments = sResourceName.split(/\//),
				l, sNamePrefix, sResult, m;
	
			if ( arguments.length === 1  &&  aSegments.length > 0 ) {
				m = rSubTypes.exec(aSegments[aSegments.length-1]);
				if ( m ) {
					sSuffix = m[0];
					aSegments[aSegments.length-1] = aSegments[aSegments.length-1].slice(0, m.index);
				} else {
					sSuffix = "";
				}
			}
			
			// search for a defined name prefix, starting with the full name and successively removing one segment
			for(l=aSegments.length; l>=0; l--) {
				sNamePrefix = aSegments.slice(0, l).join('/');
				if ( mUrlPrefixes[sNamePrefix] ) {
					sResult = mUrlPrefixes[sNamePrefix];
					if ( l < aSegments.length ) {
						sResult += aSegments.slice(l).join('/');
					}
					if ( sResult.slice(-1) === '/' ) {
						sResult = sResult.slice(0, -1);
					}
					return sResult + (sSuffix || '');
				}
			}

			jQuery.sap.assert(false, "should never happen");
		}

		function declareModule(sModuleName) {
			var oModule;
			
			// sModuleName must be a unified resource name of type .js
			jQuery.sap.assert(/\.js$/.test(sModuleName), "must be a Javascript module");
			
			oModule = mModules[sModuleName] || (mModules[sModuleName] = { state : INITIAL });
			
			if ( oModule.state > INITIAL ) {
				return oModule;
			}
	
			if ( log.isLoggable() ) {
				log.debug(sLogPrefix + "declare module '" + sModuleName + "'");
			}
	
			// avoid cycles
			oModule.state = READY;
	
			// the first call to declareModule is assumed to identify the bootstrap module
			// Note: this is only a guess and fails e.g. when multiple modules are loaded via a script tag
			// to make it safe, we could convert 'declare' calls to e.g. 'subdeclare' calls at build time.
			if ( _execStack.length === 0 ) {
				_execStack.push(sModuleName);
				oModule.url = oModule.url || _sBootstrapUrl;
			}
			
			return oModule;
		}
	
		function requireModule(sModuleName) {
			var m = rJSSubtypes.exec(sModuleName),
				sBaseName, sType, oModule, aExtensions, i;
			
			// only for robustness, should not be possible by design (all callers append '.js')
			if ( !m ) {
				log.error("can only require Javascript module, not " + sModuleName);
				oModule.state = FAILED;
				return;
			}
			
			// in case of having a type specified ignore the type for the module path creation and add it as file extension
			sBaseName = sModuleName.slice(0, m.index);
			sType = m[0];			// must be a normalized resource name of type .js sType can be empty or one of view|controller|fragment
	
			oModule = mModules[sModuleName] || (mModules[sModuleName] = { state : INITIAL });
			
			if ( log.isLoggable() ) {
				log.debug(sLogPrefix + "require '" + sModuleName + "' of type '" + sType + "'");
			}
	
			// check if module has been loaded already
			if ( oModule.state !== INITIAL ) {
				if ( oModule.state === PRELOADED ) {
					oModule.state = LOADED;
					if ( mAMDShim[sModuleName] && typeof window.define === "function" && window.define.amd ) {
						var amd = window.define.amd;
						try {
							delete window.define.amd;
							execModule(sModuleName);
						} finally {
							window.define.amd = amd;
						}
					} else {
						execModule(sModuleName);
					}
					
				}
	
				if ( oModule.state === READY ) {
					if ( log.isLoggable() ) {
						log.debug(sLogPrefix + "module '" + sModuleName + "' has already been loaded (skipped).");
					}
					return this;
				} else if ( oModule.state === FAILED ) {
					throw new Error("found in negative cache: '" + sModuleName+  "' from " + oModule.url + ": " + oModule.error);
				} else {
					// currently loading
					return this;
				}
			}
	
			// set marker for loading modules (to break cycles)
			oModule.state = LOADING;
	
			// if debug is enabled, try to load debug module first
			aExtensions = window["sap-ui-loaddbg"] ? ["-dbg", ""] : [""];
			for(i=0; i<aExtensions.length && oModule.state !== LOADED; i++) {
				// create module URL for the current extension 
				oModule.url = getResourcePath(sBaseName, aExtensions[i] + sType);
				if ( log.isLoggable() ) {
					log.debug(sLogPrefix + "loading " + (aExtensions[i] ? aExtensions[i] + " version of " : "") + "'" + sModuleName + "' from '" + oModule.url + "'");
				}
				jQuery.ajax({
					url : oModule.url,
					dataType : 'text',
					async : false,
					success : function(response, textStatus, xhr) {
						oModule.state = LOADED;
						oModule.data = response;
					},
					error : function(xhr, textStatus, error) {
						oModule.state = FAILED;
						oModule.error = xhr ? xhr.status + " - " + xhr.statusText : textStatus;
					}
				});
			}
	
			// execute module __after__ loading it, this reduces the required stack space!
			if ( oModule.state === LOADED ) {
				if ( mAMDShim[sModuleName] && typeof window.define === "function" && window.define.amd ) {
					var amd = window.define.amd;
					try {
						delete window.define.amd;
						execModule(sModuleName);
					} finally {
						window.define.amd = amd;
					}
				} else {
					execModule(sModuleName);
				}
			}
	
			if ( oModule.state !== READY ) {
				throw new Error("failed to load '" + sModuleName+  "' from " + oModule.url + ": " + oModule.error);
			}
	
		}
	
		// sModuleName must be a normalized resource name of type .js
		function execModule(sModuleName) {
			
			var oModule = mModules[sModuleName],
				sOldPrefix, oUri, sAbsoluteUrl;
			
			if ( oModule && oModule.state === LOADED && typeof oModule.data !== "undefined" ) {
				try {
	
					if ( log.isLoggable() ) {
						log.debug(sLogPrefix + "executing '" + sModuleName + "'");
						sOldPrefix = sLogPrefix;
						sLogPrefix = sLogPrefix + ": ";
					}
	
					// execute the script in the window context
					oModule.state = EXECUTING;
					_execStack.push(sModuleName);
					if ( typeof oModule.data === "function" ) {
						oModule.data.apply(window);
					} else if (_window.execScript && (!oModule.data || oModule.data.length < MAX_EXEC_SCRIPT_LENGTH) ) { 
						try {
							oModule.data && _window.execScript(oModule.data); // execScript fails if data is empty
						} catch (e) {
							_execStack.pop();
							// eval again with different approach - should fail with a more informative exception
							jQuery.sap.globalEval(oModule.data);
							throw e; // rethrow err in case globalEval succeeded unexpectedly
						}
					} else {
						// make URL absolute so Chrome displays the file tree correctly
						oUri = URI(oModule.url);
						sAbsoluteUrl = oUri.absoluteTo(sDocumentLocation);
						_window.eval(oModule.data + "\r\n//@ sourceURL=" + sAbsoluteUrl); // Firebug, Chrome and Safari debugging help, appending the string seems to cost ZERO performance
					}
					_execStack.pop();
					oModule.state = READY;
					oModule.data = undefined;
					// best guess for legacy modules that don't use jQuery.sap.define
					// TODO implement fallback for raw modules
					oModule.content = oModule.content || jQuery.sap.getObject(sModuleName); 
	
					if ( log.isLoggable() ) {
						sLogPrefix = sOldPrefix;
						log.debug(sLogPrefix + "finished executing '" + sModuleName + "'");
					}
	
				} catch (err) {
					oModule.state = FAILED;
					oModule.error = ((err.toString && err.toString()) || err.message) + (err.line ? "(line " + err.line + ")" : "" );
					oModule.data = undefined;
					if ( window["sap-ui-debug"] && (oCfgData["xx-showloaderrors"] || /sap-ui-xx-show(L|-l)oad(E|-e)rrors=(true|x|X)/.test(location.search)) ) {
						log.error("error while evaluating " + sModuleName + ", embedding again via script tag to enforce a stack trace (see below)");
						jQuery.sap.includeScript(oModule.url);
						return;
					}
				}
			}
		}
	
		function requireAll(aDependencies, fnCallback) {
			
			var aModules=[], 
				i, sDepModName, sType, m;
			
			for(i=0; i<aDependencies.length; i++) {
				sDepModName = aDependencies[i];
				log.debug(sLogPrefix + "require '" + sDepModName + "'");
				requireModule(sDepModName + ".js");
				aModules[i] = mModules[sDepModName + ".js"].content; 
				log.debug(sLogPrefix + "require '" + sDepModName + "': done.");
			}
	
			fnCallback.apply(this, aModules);
		}
	
		/**
		 * Constructs an URL to load the module with the given name and file type (suffix).
		 *
		 * Searches the longest prefix of the given module name for which a registration
		 * exists (see {@link jQuery.sap.registerModulePath}) and replaces that prefix
		 * by the registered URL prefix.
		 *
		 * The remainder of the module name is appended to the URL, replacing any dot with a slash.
		 *
		 * Finally, the given suffix (typically a file name extension) is added (unconverted).
		 *
		 * The returned name (without the suffix) doesn't end with a slash.
		 *
		 * @public
		 * @static
		 */
		jQuery.sap.getModulePath = function(sModuleName, sSuffix) {
			return getResourcePath(ui5ToRJS(sModuleName), sSuffix);
		};
		
		jQuery.sap.getResourcePath = getResourcePath;
	
		/**
		 * Registers an URL prefix for a module name prefix.
		 *
		 * Before a module is loaded, the longest registered prefix of its module name
		 * is searched for and the associated URL prefix is used as a prefix for the request URL.
		 * The remainder of the module name is attached to the request URL by replacing
		 * dots ('.') with slashes ('/').
		 *
		 * The registration and search operates on full name segments only. So when a prefix
		 *
		 *    'sap.com'  ->  'http://www.sap.com/ui5/resources/'
		 *
		 * is registered, then it will match the name
		 *
		 *    'sap.com.Button'
		 *
		 * but not
		 *
		 *    'sap.commons.Button'
		 *
		 * Note that the empty prefix ('') will always match and thus serves as a fallback for
		 * any search.
		 *
		 * @public
		 * @static
		 * @SecSink {1|PATH} Parameter is used for future HTTP requests
		 */
		jQuery.sap.registerModulePath = function registerModulePath(sModuleName, sUrlPrefix) {
			jQuery.sap.assert(!/\//.test(sModuleName), "module path must not contain a slash.");
			sModuleName = sModuleName.replace(/\./g, "/");
			// URL must not be empty
			sUrlPrefix = sUrlPrefix || '.';
			jQuery.sap.registerResourcePath(sModuleName, sUrlPrefix);
		};
		
		/**
		 * Registers an URL prefix for a resource name prefix.
		 *
		 * Before a resource is loaded, the longest registered prefix of its module name
		 * is searched for and the associated URL prefix is used as a prefix for the request URL.
		 * The remainder of the resource name is attached to the request URL 1:1.
		 *
		 * The registration and search operates on full name segments only. So when a prefix
		 *
		 *    'sap/com'  ->  'http://www.sap.com/ui5/resources/'
		 *
		 * is registered, then it will match the name
		 *
		 *    'sap/com/Button'
		 *
		 * but not
		 *
		 *    'sap/commons/Button'
		 *
		 * Note that the empty prefix ('') will always match and thus serves as a fallback for
		 * any search.
		 *
		 * @public
		 * @static
		 * @SecSink {1|PATH} Parameter is used for future HTTP requests
		 */
		jQuery.sap.registerResourcePath = function(sResourceNamePrefix, sUrlPrefix) {
	
			sResourceNamePrefix = String(sResourceNamePrefix || "");
			
			if ( sUrlPrefix == null ) {
				delete mUrlPrefixes[sResourceNamePrefix]; 
			} else {
				sUrlPrefix = String(sUrlPrefix);
				// ensure that the prefix ends with a '/'
				if ( sUrlPrefix.slice(-1) != '/' ) {
					sUrlPrefix += '/';
				}
				mUrlPrefixes[sResourceNamePrefix] = sUrlPrefix;
			}
			
			log.info("registerResourcePath ('" + sResourceNamePrefix + "', '" + sUrlPrefix + "')");
	
		}
	
		/**
		 * Check whether a given module has been loaded / declared already.
		 * 
		 * Returns true as soon as a module has been required the first time, even when 
		 * loading/executing it has not finished yet. So the main assertion of a  
		 * return value of <code>true</code> is that the necessary actions have been taken
		 * to make the module available in the near future. It does not mean, that 
		 * the content of the module is already available!
		 * 
		 * This fuzzy behavior is necessary to avoid multiple requests for the same module. 
		 * As a consequence of the assertion above, a <i>preloaded</i> module does not
		 * count as <i>declared</i>. For preloaded modules, an explicit call to 
		 * <code>jQuery.sap.require</code> is necessary to make them available.
		 * 
		 * If a caller wants to know whether a module needs to be loaded from the server, 
		 * it can set <code>bIncludePreloaded</code> to true. Then, preloaded modules will 
		 * be reported as 'declared' as well by this method. 
		 * 
		 * @param {string} sModuleName name of the module to be checked
		 * @param {boolean} [bIncludePreloaded=false] whether preloaded modules should be reported as declared.
		 * @return {boolean} whether the module has been declared already
		 * @public
		 * @static
		 */
		jQuery.sap.isDeclared = function isDeclared(sModuleName, bIncludePreloaded) {
			sModuleName = ui5ToRJS(sModuleName) + ".js";
			return mModules[sModuleName] && (bIncludePreloaded || mModules[sModuleName].state !== PRELOADED);
		};
		
		/**
		 * Returns the names of all declared modules.
		 * @return {string[]} the names of all declared modules
		 * @see jQuery.sap.isDeclared
		 * @public
		 * @static
		 */
		jQuery.sap.getAllDeclaredModules = function() {
			var aModules = [];
			jQuery.each(mModules, function(sURN, oModule) {
				// filter out preloaded modules
				if ( oModule && oModule.state !== PRELOADED ) {
					var sModuleName = urnToUI5(sURN);
					if ( sModuleName ) {
						aModules.push(sModuleName);
					}
				}
			});
			return aModules;
		};
	
		// take resource roots from configuration
		if ( oCfgData.resourceroots ) {
			jQuery.each(oCfgData.resourceroots, jQuery.sap.registerModulePath);
		}
	
		// dump the URL prefixes
		log.info("URL prefixes set to:");
		for(var n in mUrlPrefixes) {
			log.info("  " + (n ? "'" + n + "'" : "(default)") + " : " + mUrlPrefixes[n]);
		}
	
		/**
		 * Declares a module as existing.
		 *
		 * By default, this function assumes that the module will create a JavaScript object
		 * with the same name as the module. As a convenience it ensures that the parent
		 * namespace for that object exists (by calling jQuery.sap.getObject).
		 * If such an object creation is not desired, <code>bCreateNamespace</code> must be set to false.
		 *
		 * @param {string || object} sModuleName name of the module to be declared
		 *                           or in case of an object {modName: "...", type: "..."}
		 *                           where modName is the name of the module and the type
		 *                           could be a specific dot separated extension e.g.
		 *                           <code>{modName: "sap.ui.core.Dev", type: "view"}</code>
		 *                           loads <code>sap/ui/core/Dev.view.js</code> and
		 *                           registers as <code>sap.ui.core.Dev.view</code>
		 * @param {boolean} [bCreateNamespace=true] whether to create the parent namespace
		 *
		 * @public
		 * @static
		 */
		jQuery.sap.declare = function(sModuleName, bCreateNamespace) {
			
			var sNamespaceObj = sModuleName;
	
			// check for an object as parameter for sModuleName
			// in case of this the object contains the module name and the type
			// which could be {modName: "sap.ui.core.Dev", type: "view"}
			if (typeof(sModuleName) === "object") {
				sNamespaceObj = sModuleName.modName;
				sModuleName = ui5ToRJS(sModuleName.modName) + (sModuleName.type ? "." + sModuleName.type : "") + ".js";
			} else {
				sModuleName = ui5ToRJS(sModuleName) + ".js";
			}
			
			declareModule(sModuleName);
			
			// ensure parent namespace even if module was declared already
			// (as declare might have been called by require)
			if (bCreateNamespace !== false) {
				// ensure parent namespace
				jQuery.sap.getObject(sNamespaceObj, 1);
			}
	
			return this; 
		}
		
		/**
		 * Ensures that the given module is loaded and executed before execution of the
		 * current script continues.
		 *
		 * By issuing a call to this method, the caller declares a dependency to the listed modules.
		 *
		 * Any required and not yet loaded script will be loaded and execute synchronously.
		 * Already loaded modules will be skipped.
		 *
		 * @param {string... || object} sModuleName one or more names of modules to be loaded
		 *                              or in case of an object {modName: "...", type: "..."}
		 *                              where modName is the name of the module and the type
		 *                              could be a specific dot separated extension e.g.
		 *                              <code>{modName: "sap.ui.core.Dev", type: "view"}</code>
		 *                              loads <code>sap/ui/core/Dev.view.js</code> and
		 *                              registers as <code>sap.ui.core.Dev.view</code>
		 *
		 * @public
		 * @static
		 * @function
		 * @SecSink {0|PATH} Parameter is used for future HTTP requests
		 */
		jQuery.sap.require = function(vModuleName, fnCallback) {
			
			if ( jQuery.isArray(vModuleName) && typeof fnCallback === "function" ) {
				// requireJS variant with multiple dependencies and a callback function 
				requireAll(vModuleName, fnCallback); 
			} else if ( arguments.length > 1 ) {
				// legacy mode with multiple arguments, each representing a dependency 
				for(var i=0; i<arguments.length; i++) {
					jQuery.sap.require(arguments[i]);
				}
				return this;
			}

			// check for an object as parameter for sModuleName
			// in case of this the object contains the module name and the type
			// which could be {modName: "sap.ui.core.Dev", type: "view"}
			if (typeof(vModuleName) === "object") {
				jQuery.sap.assert(!vModuleName.type || jQuery.inArray(vModuleName.type, mKnownSubtypes.js) >= 0, "type must be empty or one of " + mKnownSubtypes.js.join(", "));
				vModuleName = ui5ToRJS(vModuleName.modName) + (vModuleName.type ? "." + vModuleName.type : "") + ".js";
			} else {
				vModuleName = ui5ToRJS(vModuleName) + ".js";
			}

			requireModule(vModuleName);

			return this; // TODO
		}

		/**
		 * UI5 internal method that loads the given module, specified in requireJS notation (URL like, without extension).
		 * 
		 * Applications MUST NOT USE THIS METHOD as it will be removed in one of the future versions.
		 * It is only intended for sap.ui.component.
		 * 
		 * @param {string} sModuleName Module name in requireJS syntax
		 * @private
		 */
		jQuery.sap._requirePath = function(sModuleName) {
			requireModule(sModuleName + ".js");
		}

		/**
		 * Provides an AMD like way to define UI5 modules. 
		 * 
		 * MUST NOT BE USED BY CONTROLS OR APPLICATIONS YET, ONLY UI5 CORE TEAM INTERNALLY. 
		 *
		 * TODO document naming conventions: requireJs names, but no dots in them (other than jquery.sap. jquery-1....)
		 * @param {string} [sId] id of the module. When omitted, the loader should determine the id from the request
		 * @param {string[]} [aDependencies] ordered list of dependencies of the module. 
		 * @param {function|object} vFactory
		 * @param {boolean} [bExport]
		 * @private
		 */
		jQuery.sap.define = function(sId, aDependencies, vFactory, bExport) {
			var aModules = [],
				sModuleName,
				sDepModName,
				i;

			// optional id
			if ( typeof sId === "string" ) {
				sModuleName = sId + ".js";
			} else {
				// shift parameters
				bExport = vFactory;
				vFactory = aDependencies;
				aDependencies = sId;
				sModuleName = _execStack[_execStack.length-1]; 
			}
			sId = urnToUI5(sModuleName);

			// optional array of dependencies
			if ( !jQuery.isArray(aDependencies) ) {
				// shift parameters
				bExport = vFactory;
				vFactory = aDependencies;
				aDependencies = [];
			}

			if ( log.isLoggable() ) {
				log.debug("define(" + sModuleName + ", " + "['" + aDependencies.join("','") + "']" + ")");
			}

			var oModule = declareModule(sModuleName);

			// note: dependencies will be converted from RJS to URN inside requireAll
			requireAll(aDependencies, function() {

				// factory
				if ( log.isLoggable() ) {
					log.debug("define(" + sModuleName + "): calling factory " + typeof vFactory);
				}

				if ( typeof vFactory === "function" ) {
					oModule.content = vFactory.apply(window, arguments);
				} else {
					oModule.content = vFactory;
				}

				// HACK: global export
				if ( bExport ) {
					if ( oModule.content == null ) {
						log.error("module '" + sModuleName + "' returned no content, but should be exported");
					} else {
						if ( log.isLoggable() ) {
							log.debug("exporting content of '" + sModuleName + "': as global object");
						}
						jQuery.sap.setObject(sId, oModule.content);
					}
				}

			});

		};

		jQuery.sap.preloadModules = function(sPreloadModule, bAsync, oSyncPoint) {

			var sURL, iTask;

			jQuery.sap.assert(!bAsync ||oSyncPoint, "if mode is async, a syncpoint object must be given");

			if ( mPreloadModules[sPreloadModule] )
				return;
	
			mPreloadModules[sPreloadModule] = true;
	
			sURL = jQuery.sap.getModulePath(sPreloadModule, ".json");
			
			log.debug("preload file " + sPreloadModule);
			iTask = oSyncPoint && oSyncPoint.startTask("load " + sPreloadModule);
			jQuery.ajax({
				dataType : "json",
				async : bAsync,
				url : sURL,
				success : function(data) {
					if ( data ) {
						data.url = sURL;
					}
					jQuery.sap.registerPreloadedModules(data, bAsync, oSyncPoint);
					oSyncPoint && oSyncPoint.finishTask(iTask);
				},
				error : function(xhr, textStatus, error) {
					log.error("failed to preload '" + sPreloadModule + "': " + (error || textStatus));
					oSyncPoint && oSyncPoint.finishTask(iTask, false);
				}
			});

		};

		jQuery.sap.registerPreloadedModules = function(oData, bAsync, oSyncPoint) {

			var bOldSyntax = Version(oData.version || "1.0").compareTo("2.0") < 0;
			
			if ( log.isLoggable() ) {
				log.debug(sLogPrefix + "adding preloaded modules from '" + oData.url + "'");
			}

			if ( oData.name ) {
				mPreloadModules[oData.name] = true;
			}

			jQuery.each(oData.modules, function(sName,sContent) {
				sName = bOldSyntax ? ui5ToRJS(sName) + ".js" : sName;
				if ( !mModules[sName] ) {
					mModules[sName] = { state : PRELOADED, url : oData.url + "/" + sName, data : sContent, group: oData.name };
				}
				// when a library file is preloaded, also mark its preload file as loaded
				// for normal library preload, this is redundant, but for non-default merged entities
				// like sap/fiori/core.js it avoids redundant loading of library preload files
				if ( sName.match(/\/library\.js$/) ) {
					mPreloadModules[urnToUI5(sName) + "-preload"] = true;
				}
			});
			
			if ( oData.dependencies ) {
				jQuery.each(oData.dependencies, function(idx,sModuleName) {
					jQuery.sap.preloadModules(sModuleName, bAsync, oSyncPoint);
				});
			}
		};

		/**
		 * Removes a set of resources from the resource cache.
		 * 
		 * @param {string} sName unified resource name of a resource or the name of a preload group to be removed
		 * @param {boolean} [bPreloadGroup=true] whether the name specifies a preload group, defaults to true
		 * @param {boolean} [bUnloadAll] Whether all matching resources should be unloaded, even if they have been executed already. 
		 * @param {boolean} [bDeleteExports] Whether exportss (global variables) should be destroyed as well. Will be done for UI5 module names only. 
		 * @experimental Since 1.16.3 API might change completely, apps must not develop against it.
		 * @private
		 */
		jQuery.sap.unloadResources = function(sName, bPreloadGroup, bUnloadAll, bDeleteExports) {
			var aModules=[];
			
			if ( bPreloadGroup == null ) {
				bPreloadGroup = true;
			}

			if ( bPreloadGroup ) {
				// collect modules that belong to the given group
				jQuery.each(mModules, function(sURN, oModule) {
					if ( oModule && oModule.group === sName ) {
						aModules.push(sURN);
					}
				});
				// also remove a preload entry
				delete mPreloadModules[sName];
				
			} else {
				// single module
				if ( mModules[sName] ) {
					aModules.push(sName);
				}
			}

			jQuery.each(aModules, function(i, sURN) {
				var oModule = mModules[sURN];
				if ( oModule && bDeleteExports && sURN.match(/\.js$/) ) {
					jQuery.sap.setObject(urnToUI5(sURN), undefined); // TODO really delete property
				}
				if ( oModule && (bUnloadAll || oModule.state === PRELOADED) ) {
				  delete mModules[sURN];
				}
			});
			
		};

		/**
		 * Converts a UI5 module name to a unified resource name.
		 *
		 * @experimental Since 1.16.0, not for public usage yet.
		 * @private
		 */
		jQuery.sap.getResourceName = function(sModuleName, sSuffix) {
			return ui5ToRJS(sModuleName) + (sSuffix || ".js");
		};
		
		/**
		 * Retrieves the resource with the given name, either from the preload cache or from 
		 * the server. The expected data type of the resource can either be specified in the 
		 * options (<code>dataType</code>) or it will be derived from the suffix of the <code>sResourceName</code>.
		 * The only supported data types so far are xml, html, json and text. If the resource name extension
		 * doesn't match any of these extensions, the data type must be specified in the options.  
		 * 
		 * If the resource is found in the preload cache, it will be converted from text format
		 * to the requested <code>dataType</code> using a converter from <code>jQuery.ajaxSettings.converters</code>.
		 *  
		 * If it is not found, the resource name will be converted to a resource URL (using {@link #getResourcePath}) 
		 * and the resulting URL will be requested from the server with a synchronous jQuery.ajax call.
		 * 
		 * If the resource was found in the local preload cache and any necessary conversion succeeded
		 * or when the resource was retrieved from the backend successfully, the content of the resource will
		 * be returned. In any other case, an exception will be thrown. 
		 * 
		 * Future implementations of this API might add more options, esp. asynchronous calls might 
		 * be possible. Generic implementations that accept an <code>mOptions</code> object and propagate it
		 * to this function should limit the options to the currently defined set of options or they might fail 
		 * for unknown options (e.g. async calls won't return the resource immediately). 
		 * 
		 * For asynchronous calls the return type of this method will change. 
		 * 
		 * @param {string} sResourceName resourceName in unified resource name syntax
		 * @param {object} [options] options 
		 * @param {object} [options.type] one of "xml", "html", "json" or "text". If not specified it will be derived from the resource name (extension)
		 * @return {string|Document|object} content of the resource. A string for text or html, an object for JSON, an Document for XML
		 * @throws Error if loading the resource failed
		 * @private
		 * @experimental API is not yet fully mature and may change in future.
		 * @since 1.15.1 
		 */
		jQuery.sap.loadResource = function(sResourceName, mOptions) {

			var oModule = mModules[sResourceName],
				oData = oModule && oModule.data,
				sType,
				vConverter, 
				sUrl,
				oError;

			mOptions = mOptions || {};
			sType = mOptions.dataType; 
			if ( sType == null ) {
				sType = (sType = rTypes.exec(sResourceName)) && sType[1];
			}

			jQuery.sap.assert(/^(xml|html|json|text)$/.test(sType), "type must be one of xml, html, json or text");

			if ( oData != null ) {

				vConverter = jQuery.ajaxSettings.converters["text " + sType];
				if ( typeof vConverter === "function" ) {
					oData = vConverter(oData);
				}

			} else {

				jQuery.ajax({
					url : sUrl = getResourcePath(sResourceName),
					async : false,
					dataType : sType,
					success : function(data, textStatus, xhr) {
						oData = data;
					},
					error : function(xhr, textStatus, error) {
						oError = new Error("resource " + sResourceName + " could not be loaded from " + sUrl + ". Check for 'file not found' or parse errors.");
						oError.status = textStatus;
						oError.error = error;
						oError.statusCode = xhr.status;
					}
				})

			}

			if ( !oData && oData !== "" ) {
				throw oError || new Error("no data returned for " + sResourceName);
			}

			return oData;
		};

		return function() {
			return { modules : mModules, prefixes : mUrlPrefixes };
		};

	}());

	// --------------------- script and stylesheet handling --------------------------------------------------

	// appends a link object to the head
	function appendHead(oElement) {
		var head = window.document.getElementsByTagName("head")[0];
		if (head) {
			head.appendChild(oElement);
		}
	}

	/**
	 * Includes the script (via &lt;script&gt;-tag) into the head for the
	 * specified <code>sUrl</code> and optional <code>sId</code>.
	 * <br>
	 * <i>In case of IE8 only the load callback will work ignoring in case of success and error.</i>
	 *
	 * @param {string}
	 *            sUrl the URL of the script to load
	 * @param {string}
	 *            [sId] id that should be used for the script include tag
	 * @param {function}
	 *            [fnLoadCallback] callback function to get notified once the script has been loaded
	 * @param {function}
	 *            [fnErrorCallback] callback function to get notified once the script loading failed (not supported by IE8)
	 *
	 * @public
	 * @static
	 * @SecSink {0|PATH} Parameter is used for future HTTP requests
	 */
	jQuery.sap.includeScript = function includeScript(sUrl, sId, fnLoadCallback, fnErrorCallback){
		var oScript = window.document.createElement("script");
		oScript.src = sUrl;
		oScript.type = "text/javascript";
		if (sId) {
			oScript.id = sId;
		}
		if (!!sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 9) {
			// in case if IE8 the error callback is not supported!
			// we can only check the loading via the readystatechange event
			if (fnLoadCallback) {
				oScript.onreadystatechange = function() {
					if (oScript.readyState === "loaded" || oScript.readyState === "complete") {
						fnLoadCallback();
						oScript.onreadystatechange = null;
					}
				};
			}
		} else {
			if (fnLoadCallback) {
				jQuery(oScript).load(fnLoadCallback);
			}
			if (fnErrorCallback) {
				jQuery(oScript).error(fnErrorCallback);
			}
		}
		// jQuery("head").append(oScript) doesn't work because they filter for the script
		// and execute them directly instead adding the SCRIPT tag to the head
		var oOld;
		if ((sId && (oOld = jQuery.sap.domById(sId)) && oOld.tagName === "SCRIPT")) {
			jQuery(oOld).remove(); // replacing scripts will not trigger the load event
		}
		appendHead(oScript);
	};

	/**
	 * Includes the specified stylesheet via a &lt;link&gt;-tag in the head of the current document. If there is call to
	 * <code>includeStylesheet</code> providing the sId of an already included stylesheet, the existing element will be
	 * replaced.
	 * 
	 * @param {string}
	 *          sUrl the URL of the script to load
	 * @param {string}
	 *          [sId] id that should be used for the script include tag
	 * @param {function}
	 *          [fnLoadCallback] callback function to get notified once the link has been loaded
	 * @param {function}
	 *          [fnErrorCallback] callback function to get notified once the link loading failed
	 * 
	 * @public
	 * @static
	 * @SecSink {0|PATH} Parameter is used for future HTTP requests
	 */
	jQuery.sap.includeStyleSheet = function includeStyleSheet(sUrl, sId, fnLoadCallback, fnErrorCallback) {

		// create the new link element
		var oLink = document.createElement("link");
		oLink.type = "text/css";
		oLink.rel = "stylesheet";
		oLink.href = sUrl;
		if (sId) {
			oLink.id = sId;
		}
		
		jQuery(oLink).load(function() {
			jQuery(oLink).attr("sap-ui-ready", "true");
			if (fnLoadCallback) {
				fnLoadCallback();
			}
		});
		
		jQuery(oLink).error(function() {
			jQuery(oLink).attr("sap-ui-ready", "false");
			if (fnErrorCallback) {
				fnErrorCallback();
			}
		});

		// check for existence of the link
		var oOld, bReplace;
		if ((sId && (oOld = jQuery.sap.domById(sId)) && (bReplace = oOld.tagName === "LINK" && oOld.rel ==="stylesheet")) || window.document.body) {
			if (bReplace) {
				jQuery(oOld).replaceWith(oLink);
			} else {
				appendHead(oLink);
			}
		} else {
			appendHead(oLink);
		}

	};

	// TODO should be in core, but then the 'callback' could not be implemented
	if ( !(oCfgData.productive === true || oCfgData.productive === "true"  || oCfgData.productive === "x") ) {
		jQuery(function() {
			jQuery(document.body).keydown(function(e) {
				if ( e.keyCode == 80 && e.shiftKey && e.altKey && e.ctrlKey ) {
					try {
						jQuery.sap.require("sap.ui.debug.TechnicalInfo");
					} catch (e) {
						// alert("Sorry, failed to activate 'P'-mode!");
						return;
					}
					sap.ui.debug.TechnicalInfo.open(function() {
						var oInfo = getModuleSystemInfo();
						return { modules : oInfo.modules, prefixes : oInfo.urlPrefixes, config: oCfgData };
					});
				}
			});
		});
		
		jQuery(function() {
			jQuery(document.body).keydown(function(e) {
				if ( e.keyCode == 83 /*S*/ && e.shiftKey && e.altKey && e.ctrlKey ) { //TODO: Is this ok?
					try {
						jQuery.sap.require("sap.ui.core.support.Support");
						var oSupport = sap.ui.core.support.Support.getStub();
						if(oSupport.getType() != sap.ui.core.support.Support.StubType.APPLICATION){
							return;
						}
						oSupport.openSupportTool();
					} catch(e) {
					}
				}
			});
		});
	}

	// *********** Include E2E-Trace Scripts *************
	if (/sap-ui-xx-e2e-trace=(true|x|X)/.test(location.search)) {
		jQuery.sap.require("sap.ui.core.support.trace.E2eTraceLib" + "" /* Make dynamic dependency */);
	}

	// *********** feature detection, enriching jQuery.support *************
	// this might go into its own file once there is more stuff added

	/**
	 * Holds information about the browser's capabilities and quirks.
	 * This object is provided and documented by jQuery. 
	 * But it is extended by SAPUI5 with detection for features not covered by jQuery. This documentation ONLY covers the detection properties added by UI5.
	 * For the standard detection properties, please refer to the jQuery documentation.
	 * 
	 * These properties added by UI5 are only available temporarily until jQuery adds feature detection on their own.
	 * 
	 * @name jQuery.support
	 * @namespace
	 * @since 1.12
	 * @public
	 */
	
	if (!jQuery.support) {
		jQuery.support = {};
	}
	
	jQuery.extend(jQuery.support, {touch: "ontouchend" in document}); // this is also defined by jquery-mobile-custom.js, but this information is needed earlier

	var aPrefixes = ["Webkit", "ms", "Moz"];
	var oStyle = document.documentElement.style;
	
	var preserveOrTestCssPropWithPrefixes = function(detectionName, propName) {
		if (jQuery.support[detectionName] === undefined) {
			
			if (oStyle[propName] !== undefined) { // without vendor prefix
				jQuery.support[detectionName] = true;
				// If one of the flex layout properties is supported without the prefix, set the flexBoxPrefixed to false
				if(propName === "boxFlex" || propName === "flexOrder" || propName === "flexGrow") {
					jQuery.support.flexBoxPrefixed = false;
				}
				return;
				
			} else { // try vendor prefixes
				propName = propName.charAt(0).toUpperCase() + propName.slice(1);
				for (var i in aPrefixes) {
					if (oStyle[aPrefixes[i]+propName] !== undefined) {
						jQuery.support[detectionName] = true;
						return;
					}
				}
			}
			jQuery.support[detectionName] = false;
		}
	};

	/**
	 * Whether the current browser supports (2D) CSS transforms
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.cssTransforms
	 */
	preserveOrTestCssPropWithPrefixes("cssTransforms", "transform");

	/**
	 * Whether the current browser supports 3D CSS transforms
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.cssTransforms3d
	 */
	preserveOrTestCssPropWithPrefixes("cssTransforms3d", "perspective");

	/**
	 * Whether the current browser supports CSS transitions
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.cssTransitions
	 */
	preserveOrTestCssPropWithPrefixes("cssTransitions", "transition");

	/**
	 * Whether the current browser supports (named) CSS animations
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.cssAnimations
	 */
	preserveOrTestCssPropWithPrefixes("cssAnimations", "animationName");

	/**
	 * Whether the current browser supports CSS gradients. Note that ANY support for CSS gradients leads to "true" here, no matter what the syntax is.
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.cssGradients
	 */
	if (jQuery.support.cssGradients === undefined) {
		var oElem = document.createElement('div'),
		oStyle = oElem.style;
		try {
			oStyle.backgroundImage = "linear-gradient(left top, red, white)";
			oStyle.backgroundImage = "-moz-linear-gradient(left top, red, white)";
			oStyle.backgroundImage = "-webkit-linear-gradient(left top, red, white)";
			oStyle.backgroundImage = "-ms-linear-gradient(left top, red, white)";
			oStyle.backgroundImage = "-webkit-gradient(linear, left top, right bottom, from(red), to(white))";
		} catch (e) {/* no support...*/}
		jQuery.support.cssGradients = (oStyle.backgroundImage && oStyle.backgroundImage.indexOf("gradient") > -1);
		
		oElem = null; // free for garbage collection
	}

	/**
	 * Whether the current browser supports only prefixed flexible layout properties
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.flexBoxPrefixed
	 */
	jQuery.support.flexBoxPrefixed = true;	// Default to prefixed properties

	/**
	 * Whether the current browser supports the OLD CSS3 Flexible Box Layout directly or via vendor prefixes
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.flexBoxLayout
	 */
	preserveOrTestCssPropWithPrefixes("flexBoxLayout", "boxFlex");

	/**
	 * Whether the current browser supports the IE10 CSS3 Flexible Box Layout directly or via vendor prefixes
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.ie10FlexBoxLayout
	 * @since 1.12.0
	 */
	// Just using one of the IE10 properties that's not in the new FlexBox spec
	if (oStyle.msFlexOrder !== undefined) {
		jQuery.support.ie10FlexBoxLayout = true;
	}
	
	/**
	 * Whether the current browser supports the NEW CSS3 Flexible Box Layout directly or via vendor prefixes
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.newFlexBoxLayout
	 */
	preserveOrTestCssPropWithPrefixes("newFlexBoxLayout", "flexGrow");	// Use a new property that IE10 doesn't support
	
	/**
	 * Whether the current browser supports any kind of Flexible Box Layout directly or via vendor prefixes
	 * @type {boolean}
	 * @public
	 * @name jQuery.support.hasFlexBoxSupport
	 */
	if(jQuery.support.flexBoxLayout || jQuery.support.newFlexBoxLayout || jQuery.support.ie10FlexBoxLayout) {
		jQuery.support.hasFlexBoxSupport = true;
	} else {
		jQuery.support.hasFlexBoxSupport = false;
	}

	// *********** fixes for (pending) jQuery bugs **********
	if (!jQuery.support.opacity) {
		(function() {
			// jQuery cssHook for setOpacity[IE8] doesn't properly cleanup the CSS filter property
			var oldSet = jQuery.cssHooks.opacity.set;
			jQuery.cssHooks.opacity.set = function( elem, value ) {
				oldSet.apply(this, arguments);
				if ( !jQuery.trim(elem.style.filter) ) {
					elem.style.removeAttribute("filter");
				}
			};
		}());
	}

	// *** Performance measure ***
	function PerfMeasurement(){

		function Measurement( sId, sInfo, iStart, iEnd ){
			this.id = sId;
			this.info = sInfo;
			this.start = iStart;
			this.end = iEnd;
			this.pause = 0;
			this.resume = 0;
			this.duration = 0; // used time
			this.time = 0; // time from start to end
		}

		var bActive = false;
		var fnAjax = jQuery.ajax;

		/**
		 * Gets the current state of the perfomance measurement functionality
		 *
		 * @return {boolean} current state of the perfomance measurement functionality
		 * @name jQuery.sap.measure#getActive
		 * @function
		 * @public
		 */
		this.getActive = function(){
			return bActive;
		};

		/**
		 * Activates or deactivates the performance measure functionality
		 *
		 * @param {boolean} bOn state of the perfomance measurement functionality to set
		 * @return {boolean} current state of the perfomance measurement functionality
		 * @name jQuery.sap.measure#setActive
		 * @function
		 * @public
		 */
		this.setActive = function( bOn ){

			if (bActive == bOn) {
				return bActive;
			}

			bActive = bOn;

			if (bActive){
				// redefine AJAX call
				jQuery.ajax = function( url, options ){
					jQuery.sap.measure.start(url.url, "Request for "+ url.url);
					fnAjax.apply(this,arguments);
					jQuery.sap.measure.end(url.url);
				};
			}else if(fnAjax){
				jQuery.ajax = fnAjax;
			}

			return bActive;

		};

		this.setActive(/sap-ui-measure=(true|x|X)/.test(location.search));

		this.mMeasurements = {};

		/**
		 * Starts a performance measure
		 *
		 * @param {string} sId ID of the measurement
		 * @param {string} sInfo Info for the measurement
		 * @return {object} current measurement containing id, info and start-timestamp (false if error)
		 * @name jQuery.sap.measure#start
		 * @function
		 * @public
		 */
		this.start = function( sId, sInfo ){
			if (!bActive) {
				return;
			}

			var iTime = new Date().getTime();
			var oMeasurement = new Measurement( sId, sInfo, iTime, 0);
//			jQuery.sap.log.info("Performance measurement start: "+ sId + " on "+ iTime);

			if (oMeasurement) {
				this.mMeasurements[sId] = oMeasurement;
				return({id: oMeasurement.id, info: oMeasurement.info, start: oMeasurement.start });
			}else{
				return false;
			}
		};

		/**
		 * Pauses a performance measure
		 *
		 * @param {string} sId ID of the measurement
		 * @return {object} current measurement containing id, info and start-timestamp, pause-timestamp (false if error)
		 * @name jQuery.sap.measure#pause
		 * @function
		 * @public
		 */
		this.pause = function( sId ){
			if (!bActive) {
				return;
			}

			var iTime = new Date().getTime();
			var oMeasurement = this.mMeasurements[sId];
			if(oMeasurement && oMeasurement.end > 0){
				// already ended -> no pause possible
				return false;
			}

			if (oMeasurement && oMeasurement.pause == 0) {
				// not already paused
				oMeasurement.pause = iTime;
				if (oMeasurement.pause >= oMeasurement.resume && oMeasurement.resume > 0) {
					oMeasurement.duration = oMeasurement.duration + oMeasurement.pause - oMeasurement.resume;
					oMeasurement.resume = 0;
				}else if (oMeasurement.pause >= oMeasurement.start) {
					oMeasurement.duration = oMeasurement.pause - oMeasurement.start;
				}
			}
//			jQuery.sap.log.info("Performance measurement pause: "+ sId + " on "+ iTime + " duration: "+ oMeasurement.duration);

			if (oMeasurement) {
				return({id: oMeasurement.id, info: oMeasurement.info, start: oMeasurement.start, pause: oMeasurement.pause });
			}else{
				return false;
			}
		};

		/**
		 * Resumes a performance measure
		 *
		 * @param {string} sId ID of the measurement
		 * @return {object} current measurement containing id, info and start-timestamp, resume-timestamp (false if error)
		 * @name jQuery.sap.measure#resume
		 * @function
		 * @public
		 */
		this.resume = function( sId ){
			if (!bActive) {
				return;
			}

			var iTime = new Date().getTime();
			var oMeasurement = this.mMeasurements[sId];
//			jQuery.sap.log.info("Performance measurement resume: "+ sId + " on "+ iTime + " duration: "+ oMeasurement.duration);

			if (oMeasurement && oMeasurement.pause > 0) {
				// already paused
				oMeasurement.pause = 0;
				oMeasurement.resume = iTime;
			}

			if (oMeasurement) {
				return({id: oMeasurement.id, info: oMeasurement.info, start: oMeasurement.start, resume: oMeasurement.resume });
			}else{
				return false;
			}
		};

		/**
		 * Ends a performance measure
		 *
		 * @param {string} sId ID of the measurement
		 * @return {object} current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
		 * @name jQuery.sap.measure#end
		 * @function
		 * @public
		 */
		this.end = function( sId ){
			if (!bActive) {
				return;
			}

			var iTime = new Date().getTime();
			var oMeasurement = this.mMeasurements[sId];
//			jQuery.sap.log.info("Performance measurement end: "+ sId + " on "+ iTime);

			if (oMeasurement && !oMeasurement.end) {
				oMeasurement.end = iTime;
				if (oMeasurement.end >= oMeasurement.resume && oMeasurement.resume > 0) {
					oMeasurement.duration = oMeasurement.duration + oMeasurement.end - oMeasurement.resume;
					oMeasurement.resume = 0;
				}else if (oMeasurement.pause > 0) {
					// duration already calculated
					oMeasurement.pause = 0;
				}else if (oMeasurement.end >= oMeasurement.start) {
					oMeasurement.duration = oMeasurement.end - oMeasurement.start;
				}
				if (oMeasurement.end >= oMeasurement.start) {
					oMeasurement.time = oMeasurement.end - oMeasurement.start;
				}
			}

			if (oMeasurement) {
				return({id: oMeasurement.id,
					    info: oMeasurement.info,
					    start: oMeasurement.start,
					    end: oMeasurement.end,
					    time: oMeasurement.time,
					    duration: oMeasurement.duration});
			}else{
				return false;
			}
		};

		/**
		 * Gets a performance measure
		 *
		 * @param {string} sId ID of the measurement
		 * @return {object} current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
		 * @name jQuery.sap.measure#getMeasurement
		 * @function
		 * @public
		 */
		this.getMeasurement = function( sId ){
			if (!bActive) {
				return;
			}

			var oMeasurement = this.mMeasurements[sId];

			if (oMeasurement) {
				return({id: oMeasurement.id,
						info: oMeasurement.info,
						start: oMeasurement.start,
						end: oMeasurement.end,
						time: oMeasurement.time,
						duration: oMeasurement.duration});
			}else{
				return false;
			}
		};

		/**
		 * Clears all performance measurements
		 *
		 * @return
		 * @name jQuery.sap.measure#clear
		 * @function
		 * @public
		 */
		this.clear = function( ){
			if (!bActive) {
				return;
			}

			this.mMeasurements = {};
			return;
		};

		/**
		 * Removes a performance measure
		 *
		 * @param {string} sId ID of the measurement
		 * @return
		 * @name jQuery.sap.measure#remove
		 * @function
		 * @public
		 */
		this.remove = function( sId ){
			if (!bActive) {
				return;
			}

			delete this.mMeasurements[sId];
			return;
		};

		/**
		 * Gets all performance measurements
		 *
		 * @return {object} [] current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
		 * @name jQuery.sap.measure#getAllMeasurements
		 * @function
		 * @public
		 */
		this.getAllMeasurements = function( ){
			if (!bActive) {
				return;
			}

			var aMeasurements = new Array();

			jQuery.each(this.mMeasurements, function(sId, oMeasurement){
				aMeasurements.push({id: oMeasurement.id,
					                info: oMeasurement.info,
					                start: oMeasurement.start,
					                end: oMeasurement.end,
					                duration: oMeasurement.duration,
					                time: oMeasurement.time});
			});
			return aMeasurements;
		};

		/**
		 * Adds a performance measurement with all data 
		 * This is usefull to add external measurements (e.g. from a backend) to the common measurement UI
		 *
		 * @param {string} sId ID of the measurement
		 * @param {string} sInfo Info for the measurement
		 * @param {int} iStart start timestamp
		 * @param {int} iEnd end timestamp
		 * @param {int} iTime time in milliseconds
		 * @param {int} iDuration effective time in milliseconds
		 * @return {object} [] current measurement containing id, info and start-timestamp, end-timestamp, time, duration (false if error)
		 * @name jQuery.sap.measure#add
		 * @function
		 * @public
		 */
		this.add = function( sId, sInfo, iStart, iEnd, iTime, iDuration ){
			if (!bActive) {
				return;
			}

			var oMeasurement = new Measurement( sId, sInfo, iStart, iEnd);
			oMeasurement.time = iTime;
			oMeasurement.duration = iDuration;

			if (oMeasurement) {
				this.mMeasurements[sId] = oMeasurement;
				return({id: oMeasurement.id,
					    info: oMeasurement.info,
					    start: oMeasurement.start,
					    end: oMeasurement.end,
					    time: oMeasurement.time,
					    duration: oMeasurement.duration});
			}else{
				return false;
			}
		};
	}

	/**
	 * Namespace for the jQuery performance measurement plug-in provided by SAP AG.
	 *
	 * @namespace
	 * @name jQuery.sap.measure
	 * @public
	 * @static
	 */
	jQuery.sap.measure = new PerfMeasurement();

}());

/**
 * Executes an 'eval' for its arguments in the global context (without closure variables).
 *
 * This is a synchronous replacement for <code>jQuery.globalEval</code> which in some
 * browsers (e.g. FireFox) behaves asynchronously.
 *
 * @type void
 * @public
 * @static
 * @SecSink {0|XSS} Parameter is evaluated
 */
jQuery.sap.globalEval = function() {
	eval(arguments[0]);
};

/*
* jQuery Mobile v1.3.1
* http://jquerymobile.com
*
* Copyright 2010, 2013 jQuery Foundation, Inc. and other contributors
* Released under the MIT license.
* http://jquery.org/license
*
*/

(function ( root, doc, factory ) {
	if ( typeof define === "function" && define.amd ) {
		// AMD. Register as an anonymous module.
		define( [ "jquery" ], function ( $ ) {
			factory( $, root, doc );
			return $.mobile;
		});
	} else {
		// Browser globals
		factory( root.jQuery, root, doc );
	}
}( this, document, function ( jQuery, window, document, undefined ) {
// Script: jQuery hashchange event
// 
// *Version: 1.3, Last updated: 7/21/2010*
// 
// Project Home - http://benalman.com/projects/jquery-hashchange-plugin/
// GitHub       - http://github.com/cowboy/jquery-hashchange/
// Source       - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.js
// (Minified)   - http://github.com/cowboy/jquery-hashchange/raw/master/jquery.ba-hashchange.min.js (0.8kb gzipped)
// 
// About: License
// 
// Copyright (c) 2010 "Cowboy" Ben Alman,
// Dual licensed under the MIT and GPL licenses.
// http://benalman.com/about/license/
// 
// About: Examples
// 
// These working examples, complete with fully commented code, illustrate a few
// ways in which this plugin can be used.
// 
// hashchange event - http://benalman.com/code/projects/jquery-hashchange/examples/hashchange/
// document.domain - http://benalman.com/code/projects/jquery-hashchange/examples/document_domain/
// 
// About: Support and Testing
// 
// Information about what version or versions of jQuery this plugin has been
// tested with, what browsers it has been tested in, and where the unit tests
// reside (so you can test it yourself).
// 
// jQuery Versions - 1.2.6, 1.3.2, 1.4.1, 1.4.2
// Browsers Tested - Internet Explorer 6-8, Firefox 2-4, Chrome 5-6, Safari 3.2-5,
//                   Opera 9.6-10.60, iPhone 3.1, Android 1.6-2.2, BlackBerry 4.6-5.
// Unit Tests      - http://benalman.com/code/projects/jquery-hashchange/unit/
// 
// About: Known issues
// 
// While this jQuery hashchange event implementation is quite stable and
// robust, there are a few unfortunate browser bugs surrounding expected
// hashchange event-based behaviors, independent of any JavaScript
// window.onhashchange abstraction. See the following examples for more
// information:
// 
// Chrome: Back Button - http://benalman.com/code/projects/jquery-hashchange/examples/bug-chrome-back-button/
// Firefox: Remote XMLHttpRequest - http://benalman.com/code/projects/jquery-hashchange/examples/bug-firefox-remote-xhr/
// WebKit: Back Button in an Iframe - http://benalman.com/code/projects/jquery-hashchange/examples/bug-webkit-hash-iframe/
// Safari: Back Button from a different domain - http://benalman.com/code/projects/jquery-hashchange/examples/bug-safari-back-from-diff-domain/
// 
// Also note that should a browser natively support the window.onhashchange 
// event, but not report that it does, the fallback polling loop will be used.
// 
// About: Release History
// 
// 1.3   - (7/21/2010) Reorganized IE6/7 Iframe code to make it more
//         "removable" for mobile-only development. Added IE6/7 document.title
//         support. Attempted to make Iframe as hidden as possible by using
//         techniques from http://www.paciellogroup.com/blog/?p=604. Added 
//         support for the "shortcut" format $(window).hashchange( fn ) and
//         $(window).hashchange() like jQuery provides for built-in events.
//         Renamed jQuery.hashchangeDelay to <jQuery.fn.hashchange.delay> and
//         lowered its default value to 50. Added <jQuery.fn.hashchange.domain>
//         and <jQuery.fn.hashchange.src> properties plus document-domain.html
//         file to address access denied issues when setting document.domain in
//         IE6/7.
// 1.2   - (2/11/2010) Fixed a bug where coming back to a page using this plugin
//         from a page on another domain would cause an error in Safari 4. Also,
//         IE6/7 Iframe is now inserted after the body (this actually works),
//         which prevents the page from scrolling when the event is first bound.
//         Event can also now be bound before DOM ready, but it won't be usable
//         before then in IE6/7.
// 1.1   - (1/21/2010) Incorporated document.documentMode test to fix IE8 bug
//         where browser version is incorrectly reported as 8.0, despite
//         inclusion of the X-UA-Compatible IE=EmulateIE7 meta tag.
// 1.0   - (1/9/2010) Initial Release. Broke out the jQuery BBQ event.special
//         window.onhashchange functionality into a separate plugin for users
//         who want just the basic event & back button support, without all the
//         extra awesomeness that BBQ provides. This plugin will be included as
//         part of jQuery BBQ, but also be available separately.

(function( $, window, undefined ) {
  // Reused string.
  var str_hashchange = 'hashchange',
    
    // Method / object references.
    doc = document,
    fake_onhashchange,
    special = $.event.special,
    
    // Does the browser support window.onhashchange? Note that IE8 running in
    // IE7 compatibility mode reports true for 'onhashchange' in window, even
    // though the event isn't supported, so also test document.documentMode.
    doc_mode = doc.documentMode,
    supports_onhashchange = 'on' + str_hashchange in window && ( doc_mode === undefined || doc_mode > 7 );
  
  // Get location.hash (or what you'd expect location.hash to be) sans any
  // leading #. Thanks for making this necessary, Firefox!
  function get_fragment( url ) {
    url = url || location.href;
    return '#' + url.replace( /^[^#]*#?(.*)$/, '$1' );
  };
  
  // Method: jQuery.fn.hashchange
  // 
  // Bind a handler to the window.onhashchange event or trigger all bound
  // window.onhashchange event handlers. This behavior is consistent with
  // jQuery's built-in event handlers.
  // 
  // Usage:
  // 
  // > jQuery(window).hashchange( [ handler ] );
  // 
  // Arguments:
  // 
  //  handler - (Function) Optional handler to be bound to the hashchange
  //    event. This is a "shortcut" for the more verbose form:
  //    jQuery(window).bind( 'hashchange', handler ). If handler is omitted,
  //    all bound window.onhashchange event handlers will be triggered. This
  //    is a shortcut for the more verbose
  //    jQuery(window).trigger( 'hashchange' ). These forms are described in
  //    the <hashchange event> section.
  // 
  // Returns:
  // 
  //  (jQuery) The initial jQuery collection of elements.
  
  // Allow the "shortcut" format $(elem).hashchange( fn ) for binding and
  // $(elem).hashchange() for triggering, like jQuery does for built-in events.
  $.fn[ str_hashchange ] = function( fn ) {
    return fn ? this.bind( str_hashchange, fn ) : this.trigger( str_hashchange );
  };
  
  // Property: jQuery.fn.hashchange.delay
  // 
  // The numeric interval (in milliseconds) at which the <hashchange event>
  // polling loop executes. Defaults to 50.
  
  // Property: jQuery.fn.hashchange.domain
  // 
  // If you're setting document.domain in your JavaScript, and you want hash
  // history to work in IE6/7, not only must this property be set, but you must
  // also set document.domain BEFORE jQuery is loaded into the page. This
  // property is only applicable if you are supporting IE6/7 (or IE8 operating
  // in "IE7 compatibility" mode).
  // 
  // In addition, the <jQuery.fn.hashchange.src> property must be set to the
  // path of the included "document-domain.html" file, which can be renamed or
  // modified if necessary (note that the document.domain specified must be the
  // same in both your main JavaScript as well as in this file).
  // 
  // Usage:
  // 
  // jQuery.fn.hashchange.domain = document.domain;
  
  // Property: jQuery.fn.hashchange.src
  // 
  // If, for some reason, you need to specify an Iframe src file (for example,
  // when setting document.domain as in <jQuery.fn.hashchange.domain>), you can
  // do so using this property. Note that when using this property, history
  // won't be recorded in IE6/7 until the Iframe src file loads. This property
  // is only applicable if you are supporting IE6/7 (or IE8 operating in "IE7
  // compatibility" mode).
  // 
  // Usage:
  // 
  // jQuery.fn.hashchange.src = 'path/to/file.html';
  
  $.fn[ str_hashchange ].delay = 50;
  /*
  $.fn[ str_hashchange ].domain = null;
  $.fn[ str_hashchange ].src = null;
  */
  
  // Event: hashchange event
  // 
  // Fired when location.hash changes. In browsers that support it, the native
  // HTML5 window.onhashchange event is used, otherwise a polling loop is
  // initialized, running every <jQuery.fn.hashchange.delay> milliseconds to
  // see if the hash has changed. In IE6/7 (and IE8 operating in "IE7
  // compatibility" mode), a hidden Iframe is created to allow the back button
  // and hash-based history to work.
  // 
  // Usage as described in <jQuery.fn.hashchange>:
  // 
  // > // Bind an event handler.
  // > jQuery(window).hashchange( function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // > 
  // > // Manually trigger the event handler.
  // > jQuery(window).hashchange();
  // 
  // A more verbose usage that allows for event namespacing:
  // 
  // > // Bind an event handler.
  // > jQuery(window).bind( 'hashchange', function(e) {
  // >   var hash = location.hash;
  // >   ...
  // > });
  // > 
  // > // Manually trigger the event handler.
  // > jQuery(window).trigger( 'hashchange' );
  // 
  // Additional Notes:
  // 
  // * The polling loop and Iframe are not created until at least one handler
  //   is actually bound to the 'hashchange' event.
  // * If you need the bound handler(s) to execute immediately, in cases where
  //   a location.hash exists on page load, via bookmark or page refresh for
  //   example, use jQuery(window).hashchange() or the more verbose 
  //   jQuery(window).trigger( 'hashchange' ).
  // * The event can be bound before DOM ready, but since it won't be usable
  //   before then in IE6/7 (due to the necessary Iframe), recommended usage is
  //   to bind it inside a DOM ready handler.
  
  // Override existing $.event.special.hashchange methods (allowing this plugin
  // to be defined after jQuery BBQ in BBQ's source code).
  special[ str_hashchange ] = $.extend( special[ str_hashchange ], {
    
    // Called only when the first 'hashchange' event is bound to window.
    setup: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }
      
      // Otherwise, we need to create our own. And we don't want to call this
      // until the user binds to the event, just in case they never do, since it
      // will create a polling loop and possibly even a hidden Iframe.
      $( fake_onhashchange.start );
    },
    
    // Called only when the last 'hashchange' event is unbound from window.
    teardown: function() {
      // If window.onhashchange is supported natively, there's nothing to do..
      if ( supports_onhashchange ) { return false; }
      
      // Otherwise, we need to stop ours (if possible).
      $( fake_onhashchange.stop );
    }
    
  });
  
  // fake_onhashchange does all the work of triggering the window.onhashchange
  // event for browsers that don't natively support it, including creating a
  // polling loop to watch for hash changes and in IE 6/7 creating a hidden
  // Iframe to enable back and forward.
  fake_onhashchange = (function() {
    var self = {},
      timeout_id,
      
      // Remember the initial hash so it doesn't get triggered immediately.
      last_hash = get_fragment(),
      
      fn_retval = function( val ) { return val; },
      history_set = fn_retval,
      history_get = fn_retval;
    
    // Start the polling loop.
    self.start = function() {
      timeout_id || poll();
    };
    
    // Stop the polling loop.
    self.stop = function() {
      timeout_id && clearTimeout( timeout_id );
      timeout_id = undefined;
    };
    
    // This polling loop checks every $.fn.hashchange.delay milliseconds to see
    // if location.hash has changed, and triggers the 'hashchange' event on
    // window when necessary.
    function poll() {
      var hash = get_fragment(),
        history_hash = history_get( last_hash );
      
      if ( hash !== last_hash ) {
        history_set( last_hash = hash, history_hash );
        
        $(window).trigger( str_hashchange );
        
      } else if ( history_hash !== last_hash ) {
        location.href = location.href.replace( /#.*/, '' ) + history_hash;
      }
      
      timeout_id = setTimeout( poll, $.fn[ str_hashchange ].delay );
    };
    
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvv REMOVE IF NOT SUPPORTING IE6/7/8 vvvvvvvvvvvvvvvvvvv
    // vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    window.attachEvent && !window.addEventListener && !supports_onhashchange && (function() {
      // Not only do IE6/7 need the "magical" Iframe treatment, but so does IE8
      // when running in "IE7 compatibility" mode.
      
      var iframe,
        iframe_src;
      
      // When the event is bound and polling starts in IE 6/7, create a hidden
      // Iframe for history handling.
      self.start = function() {
        if ( !iframe ) {
          iframe_src = $.fn[ str_hashchange ].src;
          iframe_src = iframe_src && iframe_src + get_fragment();
          
          // Create hidden Iframe. Attempt to make Iframe as hidden as possible
          // by using techniques from http://www.paciellogroup.com/blog/?p=604.
          iframe = $('<iframe tabindex="-1" title="empty"/>').hide()
            
            // When Iframe has completely loaded, initialize the history and
            // start polling.
            .one( 'load', function() {
              iframe_src || history_set( get_fragment() );
              poll();
            })
            
            // Load Iframe src if specified, otherwise nothing.
            .attr( 'src', iframe_src || 'javascript:0' )
            
            // Append Iframe after the end of the body to prevent unnecessary
            // initial page scrolling (yes, this works).
            .insertAfter( 'body' )[0].contentWindow;
          
          // Whenever `document.title` changes, update the Iframe's title to
          // prettify the back/next history menu entries. Since IE sometimes
          // errors with "Unspecified error" the very first time this is set
          // (yes, very useful) wrap this with a try/catch block.
          doc.onpropertychange = function() {
            try {
              if ( event.propertyName === 'title' ) {
                iframe.document.title = doc.title;
              }
            } catch(e) {}
          };
          
        }
      };
      
      // Override the "stop" method since an IE6/7 Iframe was created. Even
      // if there are no longer any bound event handlers, the polling loop
      // is still necessary for back/next to work at all!
      self.stop = fn_retval;
      
      // Get history by looking at the hidden Iframe's location.hash.
      history_get = function() {
        return get_fragment( iframe.location.href );
      };
      
      // Set a new history item by opening and then closing the Iframe
      // document, *then* setting its location.hash. If document.domain has
      // been set, update that as well.
      history_set = function( hash, history_hash ) {
        var iframe_doc = iframe.document,
          domain = $.fn[ str_hashchange ].domain;
        
        if ( hash !== history_hash ) {
          // Update Iframe with any initial `document.title` that might be set.
          iframe_doc.title = doc.title;
          
          // Opening the Iframe's document after it has been closed is what
          // actually adds a history entry.
          iframe_doc.open();
          
          // Set document.domain for the Iframe document as well, if necessary.
          domain && iframe_doc.write( '<script>document.domain="' + domain + '"</script>' );
          
          iframe_doc.close();
          
          // Update the Iframe's hash, for great justice.
          iframe.location.hash = hash;
        }
      };
      
    })();
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^ REMOVE IF NOT SUPPORTING IE6/7/8 ^^^^^^^^^^^^^^^^^^^
    // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    
    return self;
  })();
  
})(jQuery,this);

(function( $ ) {
	$.mobile = {};
//SAP MODIFICATION
// To enable using the native orientation change event instead of faking the event by jQuery mobile
jQuery.mobile.orientationChangeEnabled = true;
}( jQuery ));
(function( $, window, undefined ) {
	var nsNormalizeDict = {};

	// jQuery.mobile configurable options
	$.mobile = $.extend($.mobile, {

		// Version of the jQuery Mobile Framework
		version: "1.3.1",

		// Namespace used framework-wide for data-attrs. Default is no namespace
		ns: "",

		// Define the url parameter used for referencing widget-generated sub-pages.
		// Translates to to example.html&ui-page=subpageIdentifier
		// hash segment before &ui-page= is used to make Ajax request
		subPageUrlKey: "ui-page",

		// Class assigned to page currently in view, and during transitions
		activePageClass: "ui-page-active",

		// Class used for "active" button state, from CSS framework
		activeBtnClass: "ui-btn-active",

		// Class used for "focus" form element state, from CSS framework
		focusClass: "ui-focus",

		// Automatically handle clicks and form submissions through Ajax, when same-domain
		ajaxEnabled: true,

		// Automatically load and show pages based on location.hash
		hashListeningEnabled: true,

		// disable to prevent jquery from bothering with links
		linkBindingEnabled: true,

		// Set default page transition - 'none' for no transitions
		defaultPageTransition: "fade",

		// Set maximum window width for transitions to apply - 'false' for no limit
		maxTransitionWidth: false,

		// Minimum scroll distance that will be remembered when returning to a page
		minScrollBack: 250,

		// DEPRECATED: the following property is no longer in use, but defined until 2.0 to prevent conflicts
		touchOverflowEnabled: false,

		// Set default dialog transition - 'none' for no transitions
		defaultDialogTransition: "pop",

		// Error response message - appears when an Ajax page request fails
		pageLoadErrorMessage: "Error Loading Page",

		// For error messages, which theme does the box uses?
		pageLoadErrorMessageTheme: "e",

		// replace calls to window.history.back with phonegaps navigation helper
		// where it is provided on the window object
		phonegapNavigationEnabled: false,

		//automatically initialize the DOM when it's ready
		autoInitializePage: true,

		pushStateEnabled: true,

		// allows users to opt in to ignoring content by marking a parent element as
		// data-ignored
		ignoreContentEnabled: false,

		// turn of binding to the native orientationchange due to android orientation behavior
		orientationChangeEnabled: true,

		buttonMarkup: {
			hoverDelay: 200
		},

		// define the window and the document objects
		window: $( window ),
		document: $( document ),

		// TODO might be useful upstream in jquery itself ?
		keyCode: {
			ALT: 18,
			BACKSPACE: 8,
			CAPS_LOCK: 20,
			COMMA: 188,
			COMMAND: 91,
			COMMAND_LEFT: 91, // COMMAND
			COMMAND_RIGHT: 93,
			CONTROL: 17,
			DELETE: 46,
			DOWN: 40,
			END: 35,
			ENTER: 13,
			ESCAPE: 27,
			HOME: 36,
			INSERT: 45,
			LEFT: 37,
			MENU: 93, // COMMAND_RIGHT
			NUMPAD_ADD: 107,
			NUMPAD_DECIMAL: 110,
			NUMPAD_DIVIDE: 111,
			NUMPAD_ENTER: 108,
			NUMPAD_MULTIPLY: 106,
			NUMPAD_SUBTRACT: 109,
			PAGE_DOWN: 34,
			PAGE_UP: 33,
			PERIOD: 190,
			RIGHT: 39,
			SHIFT: 16,
			SPACE: 32,
			TAB: 9,
			UP: 38,
			WINDOWS: 91 // COMMAND
		},

		// Place to store various widget extensions
		behaviors: {},

		// Scroll page vertically: scroll to 0 to hide iOS address bar, or pass a Y value
		silentScroll: function( ypos ) {
			if ( $.type( ypos ) !== "number" ) {
				ypos = $.mobile.defaultHomeScroll;
			}

			// prevent scrollstart and scrollstop events
			$.event.special.scrollstart.enabled = false;

			setTimeout( function() {
				window.scrollTo( 0, ypos );
				$.mobile.document.trigger( "silentscroll", { x: 0, y: ypos });
			}, 20 );

			setTimeout( function() {
				$.event.special.scrollstart.enabled = true;
			}, 150 );
		},

		// Expose our cache for testing purposes.
		nsNormalizeDict: nsNormalizeDict,

		// Take a data attribute property, prepend the namespace
		// and then camel case the attribute string. Add the result
		// to our nsNormalizeDict so we don't have to do this again.
		nsNormalize: function( prop ) {
			if ( !prop ) {
				return;
			}

			return nsNormalizeDict[ prop ] || ( nsNormalizeDict[ prop ] = $.camelCase( $.mobile.ns + prop ) );
		},

		// Find the closest parent with a theme class on it. Note that
		// we are not using $.fn.closest() on purpose here because this
		// method gets called quite a bit and we need it to be as fast
		// as possible.
		getInheritedTheme: function( el, defaultTheme ) {
			var e = el[ 0 ],
				ltr = "",
				re = /ui-(bar|body|overlay)-([a-z])\b/,
				c, m;

			while ( e ) {
				c = e.className || "";
				if ( c && ( m = re.exec( c ) ) && ( ltr = m[ 2 ] ) ) {
					// We found a parent with a theme class
					// on it so bail from this loop.
					break;
				}

				e = e.parentNode;
			}

			// Return the theme letter we found, if none, return the
			// specified default.

			return ltr || defaultTheme || "a";
		},

		// TODO the following $ and $.fn extensions can/probably should be moved into jquery.mobile.core.helpers
		//
		// Find the closest javascript page element to gather settings data jsperf test
		// http://jsperf.com/single-complex-selector-vs-many-complex-selectors/edit
		// possibly naive, but it shows that the parsing overhead for *just* the page selector vs
		// the page and dialog selector is negligable. This could probably be speed up by
		// doing a similar parent node traversal to the one found in the inherited theme code above
		closestPageData: function( $target ) {
			return $target
				.closest( ':jqmData(role="page"), :jqmData(role="dialog")' )
				.data( "mobile-page" );
		},

		enhanceable: function( $set ) {
			return this.haveParents( $set, "enhance" );
		},

		hijackable: function( $set ) {
			return this.haveParents( $set, "ajax" );
		},

		haveParents: function( $set, attr ) {
			if ( !$.mobile.ignoreContentEnabled ) {
				return $set;
			}

			var count = $set.length,
				$newSet = $(),
				e, $element, excluded;

			for ( var i = 0; i < count; i++ ) {
				$element = $set.eq( i );
				excluded = false;
				e = $set[ i ];

				while ( e ) {
					var c = e.getAttribute ? e.getAttribute( "data-" + $.mobile.ns + attr ) : "";

					if ( c === "false" ) {
						excluded = true;
						break;
					}

					e = e.parentNode;
				}

				if ( !excluded ) {
					$newSet = $newSet.add( $element );
				}
			}

			return $newSet;
		},

		getScreenHeight: function() {
			// Native innerHeight returns more accurate value for this across platforms,
			// jQuery version is here as a normalized fallback for platforms like Symbian
			return window.innerHeight || $.mobile.window.height();
		}
	}, $.mobile );

	// Mobile version of data and removeData and hasData methods
	// ensures all data is set and retrieved using jQuery Mobile's data namespace
	$.fn.jqmData = function( prop, value ) {
		var result;
		if ( typeof prop !== "undefined" ) {
			if ( prop ) {
				prop = $.mobile.nsNormalize( prop );
			}

			// undefined is permitted as an explicit input for the second param
			// in this case it returns the value and does not set it to undefined
			if( arguments.length < 2 || value === undefined ){
				result = this.data( prop );
			} else {
				result = this.data( prop, value );
			}
		}
		return result;
	};

	$.jqmData = function( elem, prop, value ) {
		var result;
		if ( typeof prop !== "undefined" ) {
			result = $.data( elem, prop ? $.mobile.nsNormalize( prop ) : prop, value );
		}
		return result;
	};

	$.fn.jqmRemoveData = function( prop ) {
		return this.removeData( $.mobile.nsNormalize( prop ) );
	};

	$.jqmRemoveData = function( elem, prop ) {
		return $.removeData( elem, $.mobile.nsNormalize( prop ) );
	};

	$.fn.removeWithDependents = function() {
		$.removeWithDependents( this );
	};

	$.removeWithDependents = function( elem ) {
		var $elem = $( elem );

		( $elem.jqmData( 'dependents' ) || $() ).remove();
		$elem.remove();
	};

	$.fn.addDependents = function( newDependents ) {
		$.addDependents( $( this ), newDependents );
	};

	$.addDependents = function( elem, newDependents ) {
		var dependents = $( elem ).jqmData( 'dependents' ) || $();

		$( elem ).jqmData( 'dependents', $.merge( dependents, newDependents ) );
	};

	// note that this helper doesn't attempt to handle the callback
	// or setting of an html element's text, its only purpose is
	// to return the html encoded version of the text in all cases. (thus the name)
	$.fn.getEncodedText = function() {
		return $( "<div/>" ).text( $( this ).text() ).html();
	};

	// fluent helper function for the mobile namespaced equivalent
	$.fn.jqmEnhanceable = function() {
		return $.mobile.enhanceable( this );
	};

	$.fn.jqmHijackable = function() {
		return $.mobile.hijackable( this );
	};

	// Monkey-patching Sizzle to filter the :jqmData selector
	var oldFind = $.find,
		jqmDataRE = /:jqmData\(([^)]*)\)/g;

	$.find = function( selector, context, ret, extra ) {
		selector = selector.replace( jqmDataRE, "[data-" + ( $.mobile.ns || "" ) + "$1]" );

		return oldFind.call( this, selector, context, ret, extra );
	};

	$.extend( $.find, oldFind );

	$.find.matches = function( expr, set ) {
		return $.find( expr, null, null, set );
	};

	$.find.matchesSelector = function( node, expr ) {
		return $.find( expr, null, null, [ node ] ).length > 0;
	};
})( jQuery, this );


(function( $, undefined ) {

	/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas. Dual MIT/BSD license */
	window.matchMedia = window.matchMedia || (function( doc, undefined ) {

		

		var bool,
			docElem = doc.documentElement,
			refNode = docElem.firstElementChild || docElem.firstChild,
			// fakeBody required for <FF4 when executed in <head>
			fakeBody = doc.createElement( "body" ),
			div = doc.createElement( "div" );

		div.id = "mq-test-1";
		div.style.cssText = "position:absolute;top:-100em";
		fakeBody.style.background = "none";
		fakeBody.appendChild(div);

		return function(q){

			div.innerHTML = "&shy;<style media=\"" + q + "\"> #mq-test-1 { width: 42px; }</style>";

			docElem.insertBefore( fakeBody, refNode );
			bool = div.offsetWidth === 42;
			docElem.removeChild( fakeBody );

			return {
				matches: bool,
				media: q
			};

		};

	}( document ));

	// $.mobile.media uses matchMedia to return a boolean.
	$.mobile.media = function( q ) {
		return window.matchMedia( q ).matches;
	};

})(jQuery);

	(function( $, undefined ) {
		var support = {
			touch: "ontouchend" in document
		};

		$.mobile.support = $.mobile.support || {};
		$.extend( $.support, support );
		$.extend( $.mobile.support, support );
	}( jQuery ));

	(function( $, undefined ) {
		$.extend( $.support, {
			orientation: "orientation" in window && "onorientationchange" in window
		});
	}( jQuery ));

(function( $, undefined ) {

// thx Modernizr
function propExists( prop ) {
	var uc_prop = prop.charAt( 0 ).toUpperCase() + prop.substr( 1 ),
		props = ( prop + " " + vendors.join( uc_prop + " " ) + uc_prop ).split( " " );

	for ( var v in props ) {
		if ( fbCSS[ props[ v ] ] !== undefined ) {
			return true;
		}
	}
}

var fakeBody = $( "<body>" ).prependTo( "html" ),
	fbCSS = fakeBody[ 0 ].style,
	vendors = [ "Webkit", "Moz", "O" ],
	webos = "palmGetResource" in window, //only used to rule out scrollTop
	opera = window.opera,
	operamini = window.operamini && ({}).toString.call( window.operamini ) === "[object OperaMini]",
	bb = window.blackberry && !propExists( "-webkit-transform" ); //only used to rule out box shadow, as it's filled opaque on BB 5 and lower


function validStyle( prop, value, check_vend ) {
	var div = document.createElement( 'div' ),
		uc = function( txt ) {
			return txt.charAt( 0 ).toUpperCase() + txt.substr( 1 );
		},
		vend_pref = function( vend ) {
			if( vend === "" ) {
				return "";
			} else {
				return  "-" + vend.charAt( 0 ).toLowerCase() + vend.substr( 1 ) + "-";
			}
		},
		check_style = function( vend ) {
			var vend_prop = vend_pref( vend ) + prop + ": " + value + ";",
				uc_vend = uc( vend ),
				propStyle = uc_vend + ( uc_vend === "" ? prop : uc( prop ) );

			div.setAttribute( "style", vend_prop );

			if ( !!div.style[ propStyle ] ) {
				ret = true;
			}
		},
		check_vends = check_vend ? check_vend : vendors,
		ret;

	for( var i = 0; i < check_vends.length; i++ ) {
		check_style( check_vends[i] );
	}
	return !!ret;
}

function transform3dTest() {
	var mqProp = "transform-3d",
		// Because the `translate3d` test below throws false positives in Android:
		ret = $.mobile.media( "(-" + vendors.join( "-" + mqProp + "),(-" ) + "-" + mqProp + "),(" + mqProp + ")" );

	if( ret ) {
		return !!ret;
	}

	var el = document.createElement( "div" ),
		transforms = {
			// We’re omitting Opera for the time being; MS uses unprefixed.
			'MozTransform':'-moz-transform',
			'transform':'transform'
		};

	fakeBody.append( el );

	for ( var t in transforms ) {
		if( el.style[ t ] !== undefined ){
			el.style[ t ] = 'translate3d( 100px, 1px, 1px )';
			ret = window.getComputedStyle( el ).getPropertyValue( transforms[ t ] );
		}
	}
	return ( !!ret && ret !== "none" );
}

// Test for dynamic-updating base tag support ( allows us to avoid href,src attr rewriting )
function baseTagTest() {
	var fauxBase = location.protocol + "//" + location.host + location.pathname + "ui-dir/",
		base = $( "head base" ),
		fauxEle = null,
		href = "",
		link, rebase;

	if ( !base.length ) {
		base = fauxEle = $( "<base>", { "href": fauxBase }).appendTo( "head" );
	} else {
		href = base.attr( "href" );
	}

	link = $( "<a href='testurl' />" ).prependTo( fakeBody );
	rebase = link[ 0 ].href;
	base[ 0 ].href = href || location.pathname;

	if ( fauxEle ) {
		fauxEle.remove();
	}
	return rebase.indexOf( fauxBase ) === 0;
}

// Thanks Modernizr
function cssPointerEventsTest() {
	var element = document.createElement( 'x' ),
		documentElement = document.documentElement,
		getComputedStyle = window.getComputedStyle,
		supports;

	if ( !( 'pointerEvents' in element.style ) ) {
		return false;
	}

	element.style.pointerEvents = 'auto';
	element.style.pointerEvents = 'x';
	documentElement.appendChild( element );
	supports = getComputedStyle &&
	getComputedStyle( element, '' ).pointerEvents === 'auto';
	documentElement.removeChild( element );
	return !!supports;
}

function boundingRect() {
	var div = document.createElement( "div" );
	return typeof div.getBoundingClientRect !== "undefined";
}

// non-UA-based IE version check by James Padolsey, modified by jdalton - from http://gist.github.com/527683
// allows for inclusion of IE 6+, including Windows Mobile 7
$.extend( $.mobile, { browser: {} } );
$.mobile.browser.oldIE = (function() {
	var v = 3,
		div = document.createElement( "div" ),
		a = div.all || [];

	do {
		div.innerHTML = "<!--[if gt IE " + ( ++v ) + "]><br><![endif]-->";
	} while( a[0] );

	return v > 4 ? v : !v;
})();

function fixedPosition() {
	var w = window,
		ua = navigator.userAgent,
		platform = navigator.platform,
		// Rendering engine is Webkit, and capture major version
		wkmatch = ua.match( /AppleWebKit\/([0-9]+)/ ),
		wkversion = !!wkmatch && wkmatch[ 1 ],
		ffmatch = ua.match( /Fennec\/([0-9]+)/ ),
		ffversion = !!ffmatch && ffmatch[ 1 ],
		operammobilematch = ua.match( /Opera Mobi\/([0-9]+)/ ),
		omversion = !!operammobilematch && operammobilematch[ 1 ];

	if(
		// iOS 4.3 and older : Platform is iPhone/Pad/Touch and Webkit version is less than 534 (ios5)
		( ( platform.indexOf( "iPhone" ) > -1 || platform.indexOf( "iPad" ) > -1  || platform.indexOf( "iPod" ) > -1 ) && wkversion && wkversion < 534 ) ||
		// Opera Mini
		( w.operamini && ({}).toString.call( w.operamini ) === "[object OperaMini]" ) ||
		( operammobilematch && omversion < 7458 )	||
		//Android lte 2.1: Platform is Android and Webkit version is less than 533 (Android 2.2)
		( ua.indexOf( "Android" ) > -1 && wkversion && wkversion < 533 ) ||
		// Firefox Mobile before 6.0 -
		( ffversion && ffversion < 6 ) ||
		// WebOS less than 3
		( "palmGetResource" in window && wkversion && wkversion < 534 )	||
		// MeeGo
		( ua.indexOf( "MeeGo" ) > -1 && ua.indexOf( "NokiaBrowser/8.5.0" ) > -1 ) ) {
		return false;
	}

	return true;
}

$.extend( $.support, {
	cssTransitions: "WebKitTransitionEvent" in window ||
		validStyle( 'transition', 'height 100ms linear', [ "Webkit", "Moz", "" ] ) &&
		!$.mobile.browser.oldIE && !opera,

	// Note, Chrome for iOS has an extremely quirky implementation of popstate.
	// We've chosen to take the shortest path to a bug fix here for issue #5426
	// See the following link for information about the regex chosen
	// https://developers.google.com/chrome/mobile/docs/user-agent#chrome_for_ios_user-agent
	pushState: "pushState" in history &&
		"replaceState" in history &&
		// When running inside a FF iframe, calling replaceState causes an error
		!( window.navigator.userAgent.indexOf( "Firefox" ) >= 0 && window.top !== window ) &&
		( window.navigator.userAgent.search(/CriOS/) === -1 ),

	mediaquery: $.mobile.media( "only all" ),
	cssPseudoElement: !!propExists( "content" ),
	touchOverflow: !!propExists( "overflowScrolling" ),
	cssTransform3d: transform3dTest(),
	boxShadow: !!propExists( "boxShadow" ) && !bb,
	fixedPosition: fixedPosition(),
	scrollTop: ("pageXOffset" in window ||
		"scrollTop" in document.documentElement ||
		"scrollTop" in fakeBody[ 0 ]) && !webos && !operamini,

	dynamicBaseTag: baseTagTest(),
	cssPointerEvents: cssPointerEventsTest(),
	boundingRect: boundingRect()
});

fakeBody.remove();


// $.mobile.ajaxBlacklist is used to override ajaxEnabled on platforms that have known conflicts with hash history updates (BB5, Symbian)
// or that generally work better browsing in regular http for full page refreshes (Opera Mini)
// Note: This detection below is used as a last resort.
// We recommend only using these detection methods when all other more reliable/forward-looking approaches are not possible
var nokiaLTE7_3 = (function() {

	var ua = window.navigator.userAgent;

	//The following is an attempt to match Nokia browsers that are running Symbian/s60, with webkit, version 7.3 or older
	return ua.indexOf( "Nokia" ) > -1 &&
			( ua.indexOf( "Symbian/3" ) > -1 || ua.indexOf( "Series60/5" ) > -1 ) &&
			ua.indexOf( "AppleWebKit" ) > -1 &&
			ua.match( /(BrowserNG|NokiaBrowser)\/7\.[0-3]/ );
})();

// Support conditions that must be met in order to proceed
// default enhanced qualifications are media query support OR IE 7+

$.mobile.gradeA = function() {
	return ( $.support.mediaquery || $.mobile.browser.oldIE && $.mobile.browser.oldIE >= 7 ) && ( $.support.boundingRect || $.fn.jquery.match(/1\.[0-7+]\.[0-9+]?/) !== null );
};

$.mobile.ajaxBlacklist =
			// BlackBerry browsers, pre-webkit
			window.blackberry && !window.WebKitPoint ||
			// Opera Mini
			operamini ||
			// Symbian webkits pre 7.3
			nokiaLTE7_3;

// Lastly, this workaround is the only way we've found so far to get pre 7.3 Symbian webkit devices
// to render the stylesheets when they're referenced before this script, as we'd recommend doing.
// This simply reappends the CSS in place, which for some reason makes it apply
if ( nokiaLTE7_3 ) {
	$(function() {
		$( "head link[rel='stylesheet']" ).attr( "rel", "alternate stylesheet" ).attr( "rel", "stylesheet" );
	});
}

// For ruling out shadows via css
if ( !$.support.boxShadow ) {
	$( "html" ).addClass( "ui-mobile-nosupport-boxshadow" );
}

})( jQuery );


(function( $, undefined ) {
	var $win = $.mobile.window, self, history;

	$.event.special.navigate = self = {
		bound: false,

		pushStateEnabled: true,

		originalEventName: undefined,

		// If pushstate support is present and push state support is defined to
		// be true on the mobile namespace.
		isPushStateEnabled: function() {
			return $.support.pushState &&
				$.mobile.pushStateEnabled === true &&
				this.isHashChangeEnabled();
		},

		// !! assumes mobile namespace is present
		isHashChangeEnabled: function() {
			return $.mobile.hashListeningEnabled === true;
		},

		// TODO a lot of duplication between popstate and hashchange
		popstate: function( event ) {
			var newEvent = new $.Event( "navigate" ),
				beforeNavigate = new $.Event( "beforenavigate" ),
				state = event.originalEvent.state || {},
				href = location.href;

			$win.trigger( beforeNavigate );

			if( beforeNavigate.isDefaultPrevented() ){
				return;
			}

			if( event.historyState ){
				$.extend(state, event.historyState);
			}

			// Make sure the original event is tracked for the end
			// user to inspect incase they want to do something special
			newEvent.originalEvent = event;

			// NOTE we let the current stack unwind because any assignment to
			//      location.hash will stop the world and run this event handler. By
			//      doing this we create a similar behavior to hashchange on hash
			//      assignment
			setTimeout(function() {
				$win.trigger( newEvent, {
					state: state
				});
			}, 0);
		},

		hashchange: function( event, data ) {
			var newEvent = new $.Event( "navigate" ),
				beforeNavigate = new $.Event( "beforenavigate" );

			$win.trigger( beforeNavigate );

			if( beforeNavigate.isDefaultPrevented() ){
				return;
			}

			// Make sure the original event is tracked for the end
			// user to inspect incase they want to do something special
			newEvent.originalEvent = event;

			// Trigger the hashchange with state provided by the user
			// that altered the hash
			$win.trigger( newEvent, {
				// Users that want to fully normalize the two events
				// will need to do history management down the stack and
				// add the state to the event before this binding is fired
				// TODO consider allowing for the explicit addition of callbacks
				//      to be fired before this value is set to avoid event timing issues
				state: event.hashchangeState || {}
			});
		},

		// TODO We really only want to set this up once
		//      but I'm not clear if there's a beter way to achieve
		//      this with the jQuery special event structure
		setup: function( data, namespaces ) {
			if( self.bound ) {
				return;
			}

			self.bound = true;

			if( self.isPushStateEnabled() ) {
				self.originalEventName = "popstate";
				$win.bind( "popstate.navigate", self.popstate );
			} else if ( self.isHashChangeEnabled() ){
				self.originalEventName = "hashchange";
				$win.bind( "hashchange.navigate", self.hashchange );
			}
		}
	};
})( jQuery );



	// throttled resize event
	(function( $ ) {
		$.event.special.throttledresize = {
			setup: function() {
				$( this ).bind( "resize", handler );
			},
			teardown: function() {
				$( this ).unbind( "resize", handler );
			}
		};

		var throttle = 250,
			handler = function() {
				curr = ( new Date() ).getTime();
				diff = curr - lastCall;

				if ( diff >= throttle ) {

					lastCall = curr;
					$( this ).trigger( "throttledresize" );

				} else {

					if ( heldCall ) {
						clearTimeout( heldCall );
					}

					// Promise a held call will still execute
					heldCall = setTimeout( handler, throttle - diff );
				}
			},
			lastCall = 0,
			heldCall,
			curr,
			diff;
	})( jQuery );

(function( $, window ) {
	var win = $( window ),
		event_name = "orientationchange",
		special_event,
		get_orientation,
		last_orientation,
		initial_orientation_is_landscape,
		initial_orientation_is_default,
		portrait_map = { "0": true, "180": true };

	// It seems that some device/browser vendors use window.orientation values 0 and 180 to
	// denote the "default" orientation. For iOS devices, and most other smart-phones tested,
	// the default orientation is always "portrait", but in some Android and RIM based tablets,
	// the default orientation is "landscape". The following code attempts to use the window
	// dimensions to figure out what the current orientation is, and then makes adjustments
	// to the to the portrait_map if necessary, so that we can properly decode the
	// window.orientation value whenever get_orientation() is called.
	//
	// Note that we used to use a media query to figure out what the orientation the browser
	// thinks it is in:
	//
	//     initial_orientation_is_landscape = $.mobile.media("all and (orientation: landscape)");
	//
	// but there was an iPhone/iPod Touch bug beginning with iOS 4.2, up through iOS 5.1,
	// where the browser *ALWAYS* applied the landscape media query. This bug does not
	// happen on iPad.

	if ( $.support.orientation ) {

		// Check the window width and height to figure out what the current orientation
		// of the device is at this moment. Note that we've initialized the portrait map
		// values to 0 and 180, *AND* we purposely check for landscape so that if we guess
		// wrong, , we default to the assumption that portrait is the default orientation.
		// We use a threshold check below because on some platforms like iOS, the iPhone
		// form-factor can report a larger width than height if the user turns on the
		// developer console. The actual threshold value is somewhat arbitrary, we just
		// need to make sure it is large enough to exclude the developer console case.

		var ww = window.innerWidth || win.width(),
			wh = window.innerHeight || win.height(),
			landscape_threshold = 50;

		initial_orientation_is_landscape = ww > wh && ( ww - wh ) > landscape_threshold;


		// Now check to see if the current window.orientation is 0 or 180.
		initial_orientation_is_default = portrait_map[ window.orientation ];

		// If the initial orientation is landscape, but window.orientation reports 0 or 180, *OR*
		// if the initial orientation is portrait, but window.orientation reports 90 or -90, we
		// need to flip our portrait_map values because landscape is the default orientation for
		// this device/browser.
		if ( ( initial_orientation_is_landscape && initial_orientation_is_default ) || ( !initial_orientation_is_landscape && !initial_orientation_is_default ) ) {
			portrait_map = { "-90": true, "90": true };
		}
	}

	$.event.special.orientationchange = $.extend( {}, $.event.special.orientationchange, {
		setup: function() {
			// If the event is supported natively, return false so that jQuery
			// will bind to the event using DOM methods.
			if ( $.support.orientation && !$.event.special.orientationchange.disabled ) {
				return false;
			}

			// Get the current orientation to avoid initial double-triggering.
			last_orientation = get_orientation();

			// Because the orientationchange event doesn't exist, simulate the
			// event by testing window dimensions on resize.
			win.bind( "throttledresize", handler );
		},
		teardown: function() {
			// If the event is not supported natively, return false so that
			// jQuery will unbind the event using DOM methods.
			if ( $.support.orientation && !$.event.special.orientationchange.disabled ) {
				return false;
			}

			// Because the orientationchange event doesn't exist, unbind the
			// resize event handler.
			win.unbind( "throttledresize", handler );
		},
		add: function( handleObj ) {
			// Save a reference to the bound event handler.
			var old_handler = handleObj.handler;


			handleObj.handler = function( event ) {
				// Modify event object, adding the .orientation property.
				event.orientation = get_orientation();

				// Call the originally-bound event handler and return its result.
				return old_handler.apply( this, arguments );
			};
		}
	});

	// If the event is not supported natively, this handler will be bound to
	// the window resize event to simulate the orientationchange event.
	function handler() {
		// Get the current orientation.
		var orientation = get_orientation();

		if ( orientation !== last_orientation ) {
			// The orientation has changed, so trigger the orientationchange event.
			last_orientation = orientation;
			win.trigger( event_name );
		}
	}

	// Get the current page orientation. This method is exposed publicly, should it
	// be needed, as jQuery.event.special.orientationchange.orientation()
	$.event.special.orientationchange.orientation = get_orientation = function() {
		var isPortrait = true, elem = document.documentElement;

		// prefer window orientation to the calculation based on screensize as
		// the actual screen resize takes place before or after the orientation change event
		// has been fired depending on implementation (eg android 2.3 is before, iphone after).
		// More testing is required to determine if a more reliable method of determining the new screensize
		// is possible when orientationchange is fired. (eg, use media queries + element + opacity)
		if ( $.support.orientation ) {
			// if the window orientation registers as 0 or 180 degrees report
			// portrait, otherwise landscape
			isPortrait = portrait_map[ window.orientation ];
		} else {
			isPortrait = elem && elem.clientWidth / elem.clientHeight < 1.1;
		}

		return isPortrait ? "portrait" : "landscape";
	};

	$.fn[ event_name ] = function( fn ) {
		return fn ? this.bind( event_name, fn ) : this.trigger( event_name );
	};

	// jQuery < 1.8
	if ( $.attrFn ) {
		$.attrFn[ event_name ] = true;
	}

}( jQuery, this ));


// This plugin is an experiment for abstracting away the touch and mouse
// events so that developers don't have to worry about which method of input
// the device their document is loaded on supports.
//
// The idea here is to allow the developer to register listeners for the
// basic mouse events, such as mousedown, mousemove, mouseup, and click,
// and the plugin will take care of registering the correct listeners
// behind the scenes to invoke the listener at the fastest possible time
// for that device, while still retaining the order of event firing in
// the traditional mouse environment, should multiple handlers be registered
// on the same element for different events.
//
// The current version exposes the following virtual events to jQuery bind methods:
// "vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel"

(function( $, window, document, undefined ) {

var dataPropertyName = "virtualMouseBindings",
	touchTargetPropertyName = "virtualTouchID",
	virtualEventNames = "vmouseover vmousedown vmousemove vmouseup vclick vmouseout vmousecancel".split( " " ),
	touchEventProps = "clientX clientY pageX pageY screenX screenY".split( " " ),
	mouseHookProps = $.event.mouseHooks ? $.event.mouseHooks.props : [],
	mouseEventProps = $.event.props.concat( mouseHookProps ),
	activeDocHandlers = {},
	resetTimerID = 0,
	startX = 0,
	startY = 0,
	didScroll = false,
	clickBlockList = [],
	blockMouseTriggers = false,
	blockTouchTriggers = false,
	eventCaptureSupported = "addEventListener" in document,
	$document = $( document ),
	nextTouchID = 1,
	lastTouchID = 0, threshold;

$.vmouse = {
	moveDistanceThreshold: 10,
	clickDistanceThreshold: 10,
	resetTimerDuration: 1500
};

function getNativeEvent( event ) {

	while ( event && typeof event.originalEvent !== "undefined" ) {
		event = event.originalEvent;
	}
	return event;
}

function createVirtualEvent( event, eventType ) {

	var t = event.type,
		oe, props, ne, prop, ct, touch, i, j, len;

	event = $.Event( event );
	event.type = eventType;

	oe = event.originalEvent;
	props = $.event.props;

	// addresses separation of $.event.props in to $.event.mouseHook.props and Issue 3280
	// https://github.com/jquery/jquery-mobile/issues/3280
	if ( t.search( /^(mouse|click)/ ) > -1 ) {
		props = mouseEventProps;
	}

	// copy original event properties over to the new event
	// this would happen if we could call $.event.fix instead of $.Event
	// but we don't have a way to force an event to be fixed multiple times
	if ( oe ) {
		for ( i = props.length, prop; i; ) {
			prop = props[ --i ];
			event[ prop ] = oe[ prop ];
		}
	}

	// make sure that if the mouse and click virtual events are generated
	// without a .which one is defined
	if ( t.search(/mouse(down|up)|click/) > -1 && !event.which ) {
		event.which = 1;
	}

	if ( t.search(/^touch/) !== -1 ) {
		ne = getNativeEvent( oe );
		t = ne.touches;
		ct = ne.changedTouches;
		touch = ( t && t.length ) ? t[0] : ( ( ct && ct.length ) ? ct[ 0 ] : undefined );

		if ( touch ) {
			for ( j = 0, len = touchEventProps.length; j < len; j++) {
				prop = touchEventProps[ j ];
				event[ prop ] = touch[ prop ];
			}
		}
	}

	return event;
}

function getVirtualBindingFlags( element ) {

	var flags = {},
		b, k;

	while ( element ) {

		b = $.data( element, dataPropertyName );

		for (  k in b ) {
			if ( b[ k ] ) {
				flags[ k ] = flags.hasVirtualBinding = true;
			}
		}
		element = element.parentNode;
	}
	return flags;
}

function getClosestElementWithVirtualBinding( element, eventType ) {
	var b;
	while ( element ) {

		b = $.data( element, dataPropertyName );

		if ( b && ( !eventType || b[ eventType ] ) ) {
			return element;
		}
		element = element.parentNode;
	}
	return null;
}

function enableTouchBindings() {
	blockTouchTriggers = false;
}

function disableTouchBindings() {
	blockTouchTriggers = true;
}

function enableMouseBindings() {
	lastTouchID = 0;
	clickBlockList.length = 0;
	blockMouseTriggers = false;

	// When mouse bindings are enabled, our
	// touch bindings are disabled.
	disableTouchBindings();
}

function disableMouseBindings() {
	// When mouse bindings are disabled, our
	// touch bindings are enabled.
	enableTouchBindings();
}

function startResetTimer() {
	clearResetTimer();
	resetTimerID = setTimeout( function() {
		resetTimerID = 0;
		enableMouseBindings();
	}, $.vmouse.resetTimerDuration );
}

function clearResetTimer() {
	if ( resetTimerID ) {
		clearTimeout( resetTimerID );
		resetTimerID = 0;
	}
}

function triggerVirtualEvent( eventType, event, flags ) {
	var ve;

	if ( ( flags && flags[ eventType ] ) ||
				( !flags && getClosestElementWithVirtualBinding( event.target, eventType ) ) ) {

		ve = createVirtualEvent( event, eventType );

		$( event.target).trigger( ve );
	}

	return ve;
}

function mouseEventCallback( event ) {
	var touchID = $.data( event.target, touchTargetPropertyName );

	if ( !blockMouseTriggers && ( !lastTouchID || lastTouchID !== touchID ) ){
		var ve = triggerVirtualEvent( "v" + event.type, event );
		if ( ve ) {
			if ( ve.isDefaultPrevented() ) {
				event.preventDefault();
			}
			if ( ve.isPropagationStopped() ) {
				event.stopPropagation();
			}
			if ( ve.isImmediatePropagationStopped() ) {
				event.stopImmediatePropagation();
			}
		}
	}
}

function handleTouchStart( event ) {

	var touches = getNativeEvent( event ).touches,
		target, flags;

	if ( touches && touches.length === 1 ) {

		target = event.target;
		flags = getVirtualBindingFlags( target );

		if ( flags.hasVirtualBinding ) {

			lastTouchID = nextTouchID++;
			$.data( target, touchTargetPropertyName, lastTouchID );

			clearResetTimer();

			disableMouseBindings();
			didScroll = false;

			var t = getNativeEvent( event ).touches[ 0 ];
			startX = t.pageX;
			startY = t.pageY;

			triggerVirtualEvent( "vmouseover", event, flags );
			triggerVirtualEvent( "vmousedown", event, flags );
		}
	}
}

function handleScroll( event ) {
	if ( blockTouchTriggers ) {
		return;
	}

	if ( !didScroll ) {
		triggerVirtualEvent( "vmousecancel", event, getVirtualBindingFlags( event.target ) );
	}

	didScroll = true;
	startResetTimer();
}

function handleTouchMove( event ) {
	if ( blockTouchTriggers ) {
		return;
	}

	var t = getNativeEvent( event ).touches[ 0 ],
		didCancel = didScroll,
		moveThreshold = $.vmouse.moveDistanceThreshold,
		flags = getVirtualBindingFlags( event.target );

		didScroll = didScroll ||
			( Math.abs( t.pageX - startX ) > moveThreshold ||
				Math.abs( t.pageY - startY ) > moveThreshold );


	if ( didScroll && !didCancel ) {
		triggerVirtualEvent( "vmousecancel", event, flags );
	}

	triggerVirtualEvent( "vmousemove", event, flags );
	startResetTimer();
}

function handleTouchEnd( event ) {
	if ( blockTouchTriggers ) {
		return;
	}

	disableTouchBindings();

	var flags = getVirtualBindingFlags( event.target ),
		t;
	triggerVirtualEvent( "vmouseup", event, flags );

	if ( !didScroll ) {
		var ve = triggerVirtualEvent( "vclick", event, flags );

		// SAP MODIFICATION
		// The following code is executed when runs on a touch event supported device
		// because calling preventDefault on vclick (touchend) event breaks other things such as:
		// 1. On screen keyboard can't be opened on touch enabled device.
		// 2. Focused input can't get blurred by tapping outside the input.
		// Therefore the ve.isDefaultPrevented() is replaced with $.support.touch
		if ( ve && $.support.touch) {
			// The target of the mouse events that follow the touchend
			// event don't necessarily match the target used during the
			// touch. This means we need to rely on coordinates for blocking
			// any click that is generated.
			t = getNativeEvent( event ).changedTouches[ 0 ];
			clickBlockList.push({
				touchID: lastTouchID,
				x: t.clientX,
				y: t.clientY,
				// SAP MODIFICATION
				// the touchend event target is needed by suppressing mousedown, mouseup, click event
				target: event.target
			});

			// Prevent any mouse events that follow from triggering
			// virtual event notifications.
			blockMouseTriggers = true;
		}
	}
	triggerVirtualEvent( "vmouseout", event, flags);
	didScroll = false;

	startResetTimer();
}

function hasVirtualBindings( ele ) {
	var bindings = $.data( ele, dataPropertyName ),
		k;

	if ( bindings ) {
		for ( k in bindings ) {
			if ( bindings[ k ] ) {
				return true;
			}
		}
	}
	return false;
}

function dummyMouseHandler() {}

function getSpecialEventObject( eventType ) {
	var realType = eventType.substr( 1 );

	return {
		setup: function( data, namespace ) {
			// If this is the first virtual mouse binding for this element,
			// add a bindings object to its data.

			if ( !hasVirtualBindings( this ) ) {
				$.data( this, dataPropertyName, {} );
			}

			// If setup is called, we know it is the first binding for this
			// eventType, so initialize the count for the eventType to zero.
			var bindings = $.data( this, dataPropertyName );
			bindings[ eventType ] = true;

			// If this is the first virtual mouse event for this type,
			// register a global handler on the document.

			activeDocHandlers[ eventType ] = ( activeDocHandlers[ eventType ] || 0 ) + 1;

			if ( activeDocHandlers[ eventType ] === 1 ) {
				$document.bind( realType, mouseEventCallback );
			}

			// Some browsers, like Opera Mini, won't dispatch mouse/click events
			// for elements unless they actually have handlers registered on them.
			// To get around this, we register dummy handlers on the elements.

			$( this ).bind( realType, dummyMouseHandler );

			// For now, if event capture is not supported, we rely on mouse handlers.
			if ( eventCaptureSupported ) {
				// If this is the first virtual mouse binding for the document,
				// register our touchstart handler on the document.

				activeDocHandlers[ "touchstart" ] = ( activeDocHandlers[ "touchstart" ] || 0) + 1;

				if ( activeDocHandlers[ "touchstart" ] === 1 ) {
					$document.bind( "touchstart", handleTouchStart )
						.bind( "touchend", handleTouchEnd )

						// On touch platforms, touching the screen and then dragging your finger
						// causes the window content to scroll after some distance threshold is
						// exceeded. On these platforms, a scroll prevents a click event from being
						// dispatched, and on some platforms, even the touchend is suppressed. To
						// mimic the suppression of the click event, we need to watch for a scroll
						// event. Unfortunately, some platforms like iOS don't dispatch scroll
						// events until *AFTER* the user lifts their finger (touchend). This means
						// we need to watch both scroll and touchmove events to figure out whether
						// or not a scroll happenens before the touchend event is fired.

						.bind( "touchmove", handleTouchMove )
						.bind( "scroll", handleScroll );
				}
			}
		},

		teardown: function( data, namespace ) {
			// If this is the last virtual binding for this eventType,
			// remove its global handler from the document.

			--activeDocHandlers[ eventType ];

			if ( !activeDocHandlers[ eventType ] ) {
				$document.unbind( realType, mouseEventCallback );
			}

			if ( eventCaptureSupported ) {
				// If this is the last virtual mouse binding in existence,
				// remove our document touchstart listener.

				--activeDocHandlers[ "touchstart" ];

				if ( !activeDocHandlers[ "touchstart" ] ) {
					$document.unbind( "touchstart", handleTouchStart )
						.unbind( "touchmove", handleTouchMove )
						.unbind( "touchend", handleTouchEnd )
						.unbind( "scroll", handleScroll );
				}
			}

			var $this = $( this ),
				bindings = $.data( this, dataPropertyName );

			// teardown may be called when an element was
			// removed from the DOM. If this is the case,
			// jQuery core may have already stripped the element
			// of any data bindings so we need to check it before
			// using it.
			if ( bindings ) {
				bindings[ eventType ] = false;
			}

			// Unregister the dummy event handler.

			$this.unbind( realType, dummyMouseHandler );

			// If this is the last virtual mouse binding on the
			// element, remove the binding data from the element.

			if ( !hasVirtualBindings( this ) ) {
				$this.removeData( dataPropertyName );
			}
		}
	};
}

// Expose our custom events to the jQuery bind/unbind mechanism.

for ( var i = 0; i < virtualEventNames.length; i++ ) {
	$.event.special[ virtualEventNames[ i ] ] = getSpecialEventObject( virtualEventNames[ i ] );
}

// Add a capture click handler to block clicks.
// Note that we require event capture support for this so if the device
// doesn't support it, we punt for now and rely solely on mouse events.
if ( eventCaptureSupported ) {
	function suppressEvent ( e ) {
		var cnt = clickBlockList.length,
			target = e.target,
			x, y, ele, i, o, touchID;

		if ( cnt ) {
			x = e.clientX;
			y = e.clientY;
			threshold = $.vmouse.clickDistanceThreshold;

			// The idea here is to run through the clickBlockList to see if
			// the current click event is in the proximity of one of our
			// vclick events that had preventDefault() called on it. If we find
			// one, then we block the click.
			//
			// Why do we have to rely on proximity?
			//
			// Because the target of the touch event that triggered the vclick
			// can be different from the target of the click event synthesized
			// by the browser. The target of a mouse/click event that is syntehsized
			// from a touch event seems to be implementation specific. For example,
			// some browsers will fire mouse/click events for a link that is near
			// a touch event, even though the target of the touchstart/touchend event
			// says the user touched outside the link. Also, it seems that with most
			// browsers, the target of the mouse/click event is not calculated until the
			// time it is dispatched, so if you replace an element that you touched
			// with another element, the target of the mouse/click will be the new
			// element underneath that point.
			//
			// Aside from proximity, we also check to see if the target and any
			// of its ancestors were the ones that blocked a click. This is necessary
			// because of the strange mouse/click target calculation done in the
			// Android 2.1 browser, where if you click on an element, and there is a
			// mouse/click handler on one of its ancestors, the target will be the
			// innermost child of the touched element, even if that child is no where
			// near the point of touch.

			ele = target;

			while ( ele ) {
				for ( i = 0; i < cnt; i++ ) {
					o = clickBlockList[ i ];
					touchID = 0;

					if ( ( ele === target && Math.abs( o.x - x ) < threshold && Math.abs( o.y - y ) < threshold ) ||
								$.data( ele, touchTargetPropertyName ) === o.touchID ) {
						// XXX: We may want to consider removing matches from the block list
						//      instead of waiting for the reset timer to fire.

						// SAP MODIFICATION
						// The event is suppressed only when its target is different than the touchend event's target.
						// This ensures that only the unnecessary events are suppressed.
						if ( target === o.target ) {
							return;
						}

						e.preventDefault();
						e.stopPropagation();
						return;
					}
				}
				ele = ele.parentNode;
			}
		}
	}

	// SAP MODIFICATION
	// In the original version, only the click event is suppressed.
	// But this can't solve the issue that on screen keyboard is opened 
	// when clicking on the current page switches to an input DOM element 
	// on the same position. This keyboard opening is caused by mousedown
	// and mouseup event which have delay reach on the underneath input.
	// Thus the mousedown and mouseup events should also be suppressed.
	//
	// The mousedown, mouseup and click events are suppressed only when their
	// coordinate is proximitely the same as the coordinate of recorded touch
	// events and the mouse event's target is different than the target of the
	// touch event.
	document.addEventListener( "mousedown", suppressEvent, true );
	document.addEventListener( "mouseup", suppressEvent, true );
	document.addEventListener( "click", suppressEvent, true );
}
})( jQuery, window, document );


(function( $, window, undefined ) {
	var $document = $( document );

	// add new event shortcuts
	$.each( ( "touchstart touchmove touchend " +
		"tap taphold " +
		"swipe swipeleft swiperight " +
		"scrollstart scrollstop" ).split( " " ), function( i, name ) {

		$.fn[ name ] = function( fn ) {
			return fn ? this.bind( name, fn ) : this.trigger( name );
		};

		// jQuery < 1.8
		if ( $.attrFn ) {
			$.attrFn[ name ] = true;
		}
	});

	var supportTouch = $.mobile.support.touch,
		scrollEvent = "touchmove scroll",
		touchStartEvent = supportTouch ? "touchstart" : "mousedown",
		touchStopEvent = supportTouch ? "touchend" : "mouseup",
		touchMoveEvent = supportTouch ? "touchmove" : "mousemove";

	function triggerCustomEvent( obj, eventType, event ) {
		var originalType = event.type;
		event.type = eventType;
		$.event.dispatch.call( obj, event );
		event.type = originalType;
	}

	// also handles scrollstop
	$.event.special.scrollstart = {

		enabled: true,

		setup: function() {

			var thisObject = this,
				$this = $( thisObject ),
				scrolling,
				timer;

			function trigger( event, state ) {
				scrolling = state;
				triggerCustomEvent( thisObject, scrolling ? "scrollstart" : "scrollstop", event );
			}

			// iPhone triggers scroll after a small delay; use touchmove instead
			$this.bind( scrollEvent, function( event ) {

				if ( !$.event.special.scrollstart.enabled ) {
					return;
				}

				if ( !scrolling ) {
					trigger( event, true );
				}

				clearTimeout( timer );
				timer = setTimeout( function() {
					trigger( event, false );
				}, 50 );
			});
		}
	};

	// also handles taphold
	$.event.special.tap = {
		tapholdThreshold: 750,

		setup: function() {
			var thisObject = this,
				$this = $( thisObject );

			$this.bind( "vmousedown", function( event ) {

				if ( event.which && event.which !== 1 ) {
					return false;
				}

				var origTarget = event.target,
					origEvent = event.originalEvent,
					timer;

				function clearTapTimer() {
					clearTimeout( timer );
				}

				function clearTapHandlers() {
					clearTapTimer();

					$this.unbind( "vclick", clickHandler )
						.unbind( "vmouseup", clearTapTimer );
					$document.unbind( "vmousecancel", clearTapHandlers );
				}

				function clickHandler( event ) {
					clearTapHandlers();

					// ONLY trigger a 'tap' event if the start target is
					// the same as the stop target.
					if ( origTarget === event.target ) {
						triggerCustomEvent( thisObject, "tap", event );
					}
				}

				$this.bind( "vmouseup", clearTapTimer )
					.bind( "vclick", clickHandler );
				$document.bind( "vmousecancel", clearTapHandlers );

				timer = setTimeout( function() {
					triggerCustomEvent( thisObject, "taphold", $.Event( "taphold", { target: origTarget } ) );
				}, $.event.special.tap.tapholdThreshold );
			});
		}
	};

	// also handles swipeleft, swiperight
	$.event.special.swipe = {
		scrollSupressionThreshold: 30, // More than this horizontal displacement, and we will suppress scrolling.

		durationThreshold: 1000, // More time than this, and it isn't a swipe.

		horizontalDistanceThreshold: 30,  // Swipe horizontal displacement must be more than this.

		verticalDistanceThreshold: 75,  // Swipe vertical displacement must be less than this.

		start: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event;
			return {
						time: ( new Date() ).getTime(),
						coords: [ data.pageX, data.pageY ],
						origin: $( event.target )
					};
		},

		stop: function( event ) {
			var data = event.originalEvent.touches ?
					event.originalEvent.touches[ 0 ] : event;
			return {
						time: ( new Date() ).getTime(),
						coords: [ data.pageX, data.pageY ]
					};
		},

		handleSwipe: function( start, stop ) {
			if ( stop.time - start.time < $.event.special.swipe.durationThreshold &&
				Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.horizontalDistanceThreshold &&
				Math.abs( start.coords[ 1 ] - stop.coords[ 1 ] ) < $.event.special.swipe.verticalDistanceThreshold ) {

				start.origin.trigger( "swipe" )
					.trigger( start.coords[0] > stop.coords[ 0 ] ? "swipeleft" : "swiperight" );
			}
		},

		setup: function() {
			var thisObject = this,
				$this = $( thisObject );

			$this.bind( touchStartEvent, function( event ) {
				// SAP MODIFICATION: mark touch events, so only the lowest UIArea within the hierarchy will create a swipe event
				if (event.originalEvent._sapui_swipestartHandled) {
					return;
				}
				event.originalEvent._sapui_swipestartHandled = true;
				var start = $.event.special.swipe.start( event ),
					stop;

				function moveHandler( event ) {
					if ( !start ) {
						return;
					}

					stop = $.event.special.swipe.stop( event );

					// prevent scrolling
					// SAP MODIFICATION: skip this behavior on chrome+desktop, as it prevents text selection on non-input fields (CSN #3696977/2013)
					// NOTE: other browsers (Firefox, IE, Safari) don't stop the text selection when calling preventDefault, so we only alter the behaviour for Chrome to be as close to the original implementation of jQuery 
					if(!sap.ui.Device.system.desktop || sap.ui.Device.browser.name !== "cr") {
						if ( Math.abs( start.coords[ 0 ] - stop.coords[ 0 ] ) > $.event.special.swipe.scrollSupressionThreshold ) {
							event.preventDefault();
						}
					}
				}

				$this.bind( touchMoveEvent, moveHandler )
					.one( touchStopEvent, function() {
						$this.unbind( touchMoveEvent, moveHandler );

						if ( start && stop ) {
							$.event.special.swipe.handleSwipe( start, stop );
						}
						start = stop = undefined;
					});
			});
		}
	};
	$.each({
		scrollstop: "scrollstart",
		taphold: "tap",
		swipeleft: "swipe",
		swiperight: "swipe"
	}, function( event, sourceEvent ) {

		$.event.special[ event ] = {
			setup: function() {
				$( this ).bind( sourceEvent, $.noop );
			}
		};
	});

})( jQuery, this );


}));

jQuery.sap.declare('sap-ui-core-all');
jQuery.sap.declare('sap.ui.Device'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.IPv6'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.SecondLevelDomains'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.URI'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.handlebars'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.jquery.jquery-1.7.1'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.jqueryui.jquery-ui-datepicker'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.jqueryui.jquery-ui-position'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.punycode'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.vkbeautify'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('jquery.sap.global'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.thirdparty.jquery-mobile-custom'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('jquery.sap.keycodes') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*
 * Provides constants for key codes. Useful in the implementation of keypress/keydown event handlers.
 */
jQuery.sap.declare("jquery.sap.keycodes", false);

/**
 * Enumeration of key codes.
 *
 * @namespace
 * @public
 * @since 0.9.0
 */
jQuery.sap.KeyCodes = {
	/**
	 * @type number
	 * @public
	 */
	BACKSPACE : 8,
	/**
	 * @type number
	 * @public
	 */
	TAB : 9,
	/**
	 * @type number
	 * @public
	 */
	ENTER : 13,
	/**
	 * @type number
	 * @public
	 */
	SHIFT : 16,
	/**
	 * @type number
	 * @public
	 */
	CONTROL : 17,
	/**
	 * @type number
	 * @public
	 */
	ALT : 18,
	/**
	 * @type number
	 * @public
	 */
	BREAK : 19,
	/**
	 * @type number
	 * @public
	 */
	CAPS_LOCK : 20,
	/**
	 * @type number
	 * @public
	 */
	ESCAPE : 27,
	/**
	 * @type number
	 * @public
	 */
	SPACE : 32,
	/**
	 * @type number
	 * @public
	 */
	PAGE_UP : 33,
	/**
	 * @type number
	 * @public
	 */
	PAGE_DOWN : 34,
	/**
	 * @type number
	 * @public
	 */
	END : 35,
	/**
	 * @type number
	 * @public
	 */
	HOME : 36,
	/**
	 * @type number
	 * @public
	 */
	ARROW_LEFT : 37,
	/**
	 * @type number
	 * @public
	 */
	ARROW_UP : 38,
	/**
	 * @type number
	 * @public
	 */
	ARROW_RIGHT : 39,
	/**
	 * @type number
	 * @public
	 */
	ARROW_DOWN : 40,
	/**
	 * @type number
	 * @public
	 */
	PRINT : 44,
	/**
	 * @type number
	 * @public
	 */
	INSERT : 45,
	/**
	 * @type number
	 * @public
	 */
	DELETE : 46,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_0 : 48,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_1 : 49,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_2 : 50,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_3 : 51,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_4 : 52,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_5 : 53,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_6 : 54,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_7 : 55,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_8 : 56,
	/**
	 * @type number
	 * @public
	 */
	DIGIT_9 : 57,
	/**
	 * @type number
	 * @public
	 */
	A : 65,
	/**
	 * @type number
	 * @public
	 */
	B : 66,
	/**
	 * @type number
	 * @public
	 */
	C : 67,
	/**
	 * @type number
	 * @public
	 */
	D : 68,
	/**
	 * @type number
	 * @public
	 */
	E : 69,
	/**
	 * @type number
	 * @public
	 */
	F : 70,
	/**
	 * @type number
	 * @public
	 */
	G : 71,
	/**
	 * @type number
	 * @public
	 */
	H : 72,
	/**
	 * @type number
	 * @public
	 */
	I : 73,
	/**
	 * @type number
	 * @public
	 */
	J : 74,
	/**
	 * @type number
	 * @public
	 */
	K : 75,
	/**
	 * @type number
	 * @public
	 */
	L : 76,
	/**
	 * @type number
	 * @public
	 */
	M : 77,
	/**
	 * @type number
	 * @public
	 */
	N : 78,
	/**
	 * @type number
	 * @public
	 */
	O : 79,
	/**
	 * @type number
	 * @public
	 */
	P : 80,
	/**
	 * @type number
	 * @public
	 */
	Q : 81,
	/**
	 * @type number
	 * @public
	 */
	R : 82,
	/**
	 * @type number
	 * @public
	 */
	S : 83,
	/**
	 * @type number
	 * @public
	 */
	T : 84,
	/**
	 * @type number
	 * @public
	 */
	U : 85,
	/**
	 * @type number
	 * @public
	 */
	V : 86,
	/**
	 * @type number
	 * @public
	 */
	W : 87,
	/**
	 * @type number
	 * @public
	 */
	X : 88,
	/**
	 * @type number
	 * @public
	 */
	Y : 89,
	/**
	 * @type number
	 * @public
	 */
	Z : 90,
	/**
	 * @type number
	 * @public
	 */
	WINDOWS : 91,
	/**
	 * @type number
	 * @public
	 */
	CONTEXT_MENU : 93,
	/**
	 * @type number
	 * @public
	 */
	TURN_OFF : 94,
	/**
	 * @type number
	 * @public
	 */
	SLEEP : 95,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_0 : 96,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_1 : 97,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_2 : 98,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_3 : 99,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_4 : 100,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_5 : 101,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_6 : 102,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_7 : 103,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_8 : 104,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_9 : 105,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_ASTERISK : 106,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_PLUS : 107,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_MINUS : 109,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_COMMA : 110,
	/**
	 * @type number
	 * @public
	 */
	NUMPAD_SLASH : 111,
	/**
	 * @type number
	 * @public
	 */
	F1 : 112,
	/**
	 * @type number
	 * @public
	 */
	F2 : 113,
	/**
	 * @type number
	 * @public
	 */
	F3 : 114,
	/**
	 * @type number
	 * @public
	 */
	F4 : 115,
	/**
	 * @type number
	 * @public
	 */
	F5 : 116,
	/**
	 * @type number
	 * @public
	 */
	F6 : 117,
	/**
	 * @type number
	 * @public
	 */
	F7 : 118,
	/**
	 * @type number
	 * @public
	 */
	F8 : 119,
	/**
	 * @type number
	 * @public
	 */
	F9 : 120,
	/**
	 * @type number
	 * @public
	 */
	F10 : 121,
	/**
	 * @type number
	 * @public
	 */
	F11 : 122,
	/**
	 * @type number
	 * @public
	 */
	F12 : 123,
	/**
	 * @type number
	 * @public
	 */
	NUM_LOCK : 144,
	/**
	 * @type number
	 * @public
	 */
	SCROLL_LOCK : 145,
	/**
	 * @type number
	 * @public
	 */
	OPEN_BRACKET : 186,
	/**
	 * @type number
	 * @public
	 */
	PLUS : 187,
	/**
	 * @type number
	 * @public
	 */
	COMMA : 188,
	/**
	 * @type number
	 * @public
	 */
	SLASH : 189,
	/**
	 * @type number
	 * @public
	 */
	DOT : 190,
	/**
	 * @type number
	 * @public
	 */
	PIPE : 191,
	/**
	 * @type number
	 * @public
	 */
	SEMICOLON : 192,
	/**
	 * @type number
	 * @public
	 */
	MINUS : 219,
	/**
	 * @type number
	 * @public
	 */
	GREAT_ACCENT : 220,
	/**
	 * @type number
	 * @public
	 */
	EQUALS : 221,
	/**
	 * @type number
	 * @public
	 */
	SINGLE_QUOTE : 222,
	/**
	 * @type number
	 * @public
	 */
	BACKSLASH : 226
};
}; // end of jquery.sap.keycodes.js
if ( !jQuery.sap.isDeclared('jquery.sap.logger') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*
 * Abandoned, empty module (since 1.1.2). Functionality has been integrated into module 'jquery.sap.global'.
 */
jQuery.sap.declare("jquery.sap.logger", false);

}; // end of jquery.sap.logger.js
if ( !jQuery.sap.isDeclared('jquery.sap.script') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides miscellaneous utility functions that might be useful for any script
jQuery.sap.declare("jquery.sap.script", false);

(function() {

	/**
	 * Some private variable used for creation of (pseudo-)unique ids.
	 * @type integer
	 * @private
	 */
	var iIdCounter = 0;

	/**
	 * Creates and returns a pseudo-unique id.
	 *
	 * No means for detection of overlap with already present or future UIDs.
	 *
	 * @return {string} A pseudo-unique id.
	 * @public
	 */
	jQuery.sap.uid = function uid() {
		return "id-" + new Date().valueOf() + "-" + iIdCounter++;
	};

	/**
	 * Calls a method after a given delay and returns an id for this timer
	 *
	 * @param {int} iDelay Delay time in milliseconds
	 * @param {object} oObject Object from which the method should be called
	 * @param {string|object} Method function pointer or name of the method
	 * @param {array} [aParameters] Method parameters
	 * @return {string} Id which can be used to cancel the timer with clearDelayedCall
	 * @public
	 */
	jQuery.sap.delayedCall = function delayedCall(iDelay, oObject, method, aParameters) {
		return setTimeout(function(){
			if (jQuery.type(method) == "string") {
				method = oObject[method];
			}
			method.apply(oObject, aParameters ||[]);
		}, iDelay);
	};

	/**
	 * Stops the delayed call.
	 *
	 * The function given when calling delayedCall is not called anymore.
	 *
	 * @param {string} sDelayedCallId The id returned, when calling delayedCall
	 * @public
	 */
	jQuery.sap.clearDelayedCall = function clearDelayedCall(sDelayedCallId) {
		clearTimeout(sDelayedCallId);
		return this;
	};

	/**
	 * Calls a method after a given interval and returns an id for this interval.
	 *
	 * @param {int} iInterval Interval time in milliseconds
	 * @param {object} oObject Object from which the method should be called
	 * @param {string|object} Method function pointer or name of the method
	 * @param {array} [aParameters] Method parameters
	 * @return {string} Id which can be used to cancel the interval with clearIntervalCall
	 * @public
	 */
	jQuery.sap.intervalCall = function intervalCall(iInterval, oObject, method, aParameters) {
		return setInterval(function(){
			if (jQuery.type(method) == "string") {
				method = oObject[method];
			}
			method.apply(oObject, aParameters ||[]);
		}, iInterval);
	};

	/**
	 * Stops the interval call.
	 *
	 * The function given when calling intervalCall is not called anymore.
	 *
	 * @param {string} sIntervalCallId The id returned, when calling intervalCall
	 * @public
	 */
	jQuery.sap.clearIntervalCall = function clearIntervalCall(sIntervalCallId) {
		clearInterval(sIntervalCallId);
		return this;
	};

	// Javadoc for private inner class "UriParams" - this list of comments is intentional!
	/**
	 * @interface	Encapsulates all URI parameters of the current windows location (URL).
	 *
	 * Use {@link jQuery.sap.getUriParameters} to create an instance of jQuery.sap.util.UriParameters.
	 *
	 * @author SAP AG
	 * @version 1.18.9
	 * @since 0.9.0
	 * @name jQuery.sap.util.UriParameters
	 * @public
	 */
	/**
	 * Returns the value(s) of the URI parameter with the given name sName.
	 *
	 * If the boolean parameter bAll is <code>true</code>, an array of string values of all
	 * occurrences of the URI parameter with the given name is returned. This array is empty
	 * if the URI parameter is not contained in the windows URL.
	 *
	 * If the boolean parameter bAll is <code>false</code> or is not specified, the value of the first
	 * occurrence of the URI parameter with the given name is returned. Might be <code>null</code>
	 * if the URI parameter is not contained in the windows URL.
	 *
	 * @param {string} sName The name of the URI parameter.
	 * @param {boolean} [bAll=false] Optional, specifies whether all or only the first parameter value should be returned.
	 * @return {string|array} The value(s) of the URI parameter with the given name
	 * @SecSource {return|XSS} Return value contains URL parameters
	 *
	 * @function
	 * @name jQuery.sap.util.UriParameters.prototype.get
	 */

	/*
	 * Implements jQuery.sap.util.UriParameters
	 */
	var UriParams = function(sUri) {
		this.mParams = {};
		var sQueryString = sUri || window.location.href;
		if ( sQueryString.indexOf('#') >= 0 ) {
			sQueryString = sQueryString.slice(0, sQueryString.indexOf('#'));
		}
		if(sQueryString.indexOf("?") >= 0){
			sQueryString = sQueryString.slice(sQueryString.indexOf("?") + 1);
			var aParameters = sQueryString.split("&"),
				mParameters = {},
				aParameter,
				sName,
				sValue;
			for(var i=0; i<aParameters.length; i++){
				aParameter = aParameters[i].split("=");
				sName = decodeURIComponent(aParameter[0]);
				sValue = aParameter.length > 1 ? decodeURIComponent(aParameter[1].replace(/\+/g,' ')) : "";
				if(sName){
					if(!Object.prototype.hasOwnProperty.call(mParameters, sName)){
						mParameters[sName] = [];
					}
					mParameters[sName].push(sValue);
				}
			}
			this.mParams = mParameters;
		}
	};

	UriParams.prototype = {};

	/*
	 * Implements jQuery.sap.util.UriParameters.prototype.get
	 */
	UriParams.prototype.get = function(sName, bAll) {
		var aValues = Object.prototype.hasOwnProperty.call(this.mParams, sName) ? this.mParams[sName] : [];
		return bAll === true ? aValues : (aValues[0] || null);
	};

	/**
	 * Creates and returns a new instance of {@link jQuery.sap.util.UriParameters}.
	 *
	 * Example for reading a single URI parameter (or the value of the first
	 * occurrence of the URI parameter):
	 * <pre>
	 *	var sValue = jQuery.sap.getUriParameters().get("myUriParam");
	 * </pre>
	 *
	 * Example for reading the values of the first of the URI parameter
	 * (with multiple occurrences):
	 * <pre>
	 *	var aValues = jQuery.sap.getUriParameters().get("myUriParam", true);
	 *	for(i in aValues){
	 *	var sValue = aValues[i];
	 *	}
	 * </pre>
	 *
	 * @public
	 * @return {jQuery.sap.util.UriParameters} A new URI parameters instance
	 */
	jQuery.sap.getUriParameters = function getUriParameters(sUri) {
		return new UriParams(sUri);
	};

	/**
	 * Sorts the given array in-place and removes any duplicates (identified by "===").
	 *
	 * Use <code>jQuery.unique()</code> for arrays of DOMElements.
	 *
	 * @param {Array} a An Array of any type
	 * @return {Array} Same array as given (for chaining)
	 * @public
	 */
	jQuery.sap.unique = function(a) {
		jQuery.sap.assert(a instanceof Array, "unique: a must be an array");
		var l=a.length;
		if ( l > 1 ) {
			a.sort();
			for(var i=1,j=0; i<l; i++) {
				// invariant: i is the entry to check, j is the last unique entry known so far
				if ( a[i] !== a[j] ) {
					a[++j] = a[i];
				}
			}
			// cut off the rest - if any
			if ( ++j < l ) {
				a.splice(j, l-j);
			}
		}
		return a;
	};

	/**
	 * Compares the two given values for equality, especially takes care not to compare
	 * arrays and objects by reference, but compares their content.
	 * Note: function does not work with comparing XML objects
	 *
	 * @param {any} a A value of any type
	 * @param {any} b A value of any type
	 * @param {int} [maxDepth=10] Maximum recursion depth
	 * 
	 * @return {boolean} Whether a and b are equal
	 * @public
	 */
	jQuery.sap.equal = function(a, b, maxDepth, depth) {
		if (!depth) depth = 0;
		if (!maxDepth) maxDepth = 10;
		if (depth > maxDepth) return false;
		if (a === b) return true;
		if (jQuery.isArray(a) && jQuery.isArray(b)) {
			if (a.length != b.length) { return false; }
			for (var i = 0; i < a.length; i++) {
				if (!jQuery.sap.equal(a[i], b[i], maxDepth, depth + 1)) { 
						return false;
				}
			}
			return true;
		}
		if (typeof a == "object" && typeof b == "object") {
			if (!a || !b) {
				return false;
			}
			if (a.constructor != b.constructor) {
				return false;
			}
			if (a.nodeName && b.nodeName && a.namespaceURI && b.namespaceURI) {
				return jQuery.sap.isEqualNode(a,b);
			}
			if (a instanceof Date) {
				return a.valueOf() == b.valueOf();
			}
			for (var i in a) {
				if (!jQuery.sap.equal(a[i], b[i], maxDepth, depth + 1)) { 
					return false;
				}
			}
			for (var i in b) {
				if (a[i] === undefined) { 
					return false;
				}
			}
			return true;
		}
		return false;
	};
	
	/**
	 * Iterates over elements of the given object or array. 
	 * 
	 * Works similar to <code>jQuery.each</code>, but a numeric index is only used for 
	 * instances of <code>Array</code>. For all other objects, including those with a numeric 
	 * <code>length</code> property, the properties are iterated by name. 
	 * 
	 * The contract for the <code>fnCallback</code> is the same as for <code>jQuery.each</code>,
	 * when it returns <code>false</code>, then the iteration stops (break).
	 * 
	 * @param {object|any[]} oObject object or array to enumerate the properties of
	 * @param {function} fnCallback function to call for each property name
	 * @return {object|any[]} the given <code>oObject</code> 
	 * @since 1.11
	 */
	jQuery.sap.each = function(oObject, fnCallback) {
		var isArray = jQuery.isArray(oObject),
			length, i;

		if ( isArray ) {
			for (i=0,length=oObject.length; i < length; i++) {
				if ( fnCallback.call(oObject[i], i, oObject[i]) === false ) {
					break;
				}
			}
		} else {
			for ( i in oObject ) {
				if ( fnCallback.call(oObject[i], i, oObject[i] ) === false ) {
					break;
				}
			}
		}

		return oObject;
	};
	
	/**
	 * Substitute for <code>for(n in o)</code> loops which fixes the 'Don'tEnum' bug of IE8.
	 * 
	 * Iterates over all enumerable properties of the given object and calls the
	 * given callback function for each of them. The assumed signature of the 
	 * callback function is 
	 * 
	 *	 fnCallback(name, value)
	 *	 
	 * where name is the name of the property and value is its value.
	 * 
	 * When an object in IE8 overrides a property of Object.prototype
	 * that has been marked as 'don't enum', then IE8 by mistake also 
	 * doesn't enumerate the overriding property. 
	 * 
	 * A 100% complete substitute is hard to achieve. The current implementation 
	 * enumerates an overridden property when it either is an 'own' property 
	 * (hasOwnProperty(name) is true) or when the property value is different 
	 * from the value in the Object.prototype object.
	 * 
	 * @param {object} oObject object to enumerate the properties of
	 * @param {function} fnCallback function to call for each property name
	 * @function
	 * @since 1.7.1
	 */
	jQuery.sap.forIn = {toString:null}.propertyIsEnumerable("toString") ?
		// for browsers without the bug we use the straight forward implementation of a for in loop
		function(oObject, fnCallback) {
			for(var n in oObject) {
				if ( fnCallback(n, oObject[n]) === false ) {
					return;
				}
			}
		} : 
		// use a special implementation for IE8 
		(function() {
			var DONT_ENUM_KEYS = ["toString","valueOf","toLocaleString", "hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],
					DONT_ENUM_KEYS_LENGTH = DONT_ENUM_KEYS.length,
					oObjectPrototype = Object.prototype,
					fnHasOwnProperty = oObjectPrototype.hasOwnProperty;
					
			return function(oObject, fnCallback) {
				var n,i;
				
				// standard for(in) loop
				for(n in oObject) {
					if ( fnCallback(n, oObject[n]) === false ) {
						return;
					}
				}
				// additionally check the known 'don't enum' names
				for(var i=0; i<DONT_ENUM_KEYS_LENGTH; i++) {
					n = DONT_ENUM_KEYS[i];
					// assume an enumerable property if it is either an own property
					// or if its value differes fro mthe value in the Object.prototype
					if ( fnHasOwnProperty.call(oObject,n) || oObject[n] !== oObjectPrototype[n] ) {
						if ( fnCallback(n, oObject[n]) === false ) {
							return;
						}
					}
				}
				// Note: this substitute implementation still fails in several regards
				// - it fails when oObject is identical to Object.prototype (iterates non-enumerable properties)
				// - it fails when one of the don't enum properties by intention has been overridden in the 
				//	 prototype chain with a value identical to the value in Object.prototype
				// - the don't enum properties are handled out of order. This is okay with the ECMAScript
				//	 spec but might be unexpected for some callers
			}
	 	}());
		

	/**
	 * Calculate delta of old list and new list
	 * This implements the algorithm described in "A Technique for Isolating Differences Between Files"
	 * (Commun. ACM, April 1978, Volume 21, Number 4, Pages 264-268)
	 * @public
	 * @param {Array} aOld Old Array
	 * @param {Array} aNew New Array
	 * @param {function} [fnCompare] Function to compare list entries
	 * @return {Array} List of changes
	 */
	jQuery.sap.arrayDiff = function(aOld, aNew, fnCompare){
		fnCompare = fnCompare || function(vValue1, vValue2) {
			return jQuery.sap.equal(vValue1, vValue2);
		}

		var aOldRefs = [];
		var aNewRefs = [];

		//Find references
		var aMatches = [];
		for (var i = 0; i < aNew.length; i++) {
			var oNewEntry = aNew[i];
			var iFound = 0;
			var iTempJ;
			for (var j = 0; j < aOld.length; j++) {
				if (fnCompare(aOld[j],oNewEntry)) {
					iFound++;
					iTempJ = j;
					if (iFound > 1) {
						break;
					}
				}
			}
			if (iFound == 1) {
				var oMatchDetails = {
					oldIndex: iTempJ,
					newIndex: i
				};
				if (aMatches[iTempJ]) {
					delete aOldRefs[iTempJ];
					delete aNewRefs[aMatches[iTempJ].newIndex];
				} else {
					aNewRefs[i] = {
						data: aNew[i],
						row: iTempJ
					};
					aOldRefs[iTempJ] = {
						data: aOld[iTempJ],
						row: i
					};
					aMatches[iTempJ] = oMatchDetails;
				}
			}
		}

		//Pass 4: Find adjacent matches in ascending order
		for (var i = 0; i < aNew.length - 1; i++) {
			if (aNewRefs[i] &&
				!aNewRefs[i+1] &&
				aNewRefs[i].row + 1 < aOld.length &&
				!aOldRefs[aNewRefs[i].row + 1] &&
				fnCompare(aOld[ aNewRefs[i].row + 1 ], aNew[i+1])) {

				aNewRefs[i+1] = {
					data: aNew[i+1],
					row: aNewRefs[i].row + 1
				};
				aOldRefs[aNewRefs[i].row+1] = {
					data: aOldRefs[aNewRefs[i].row+1],
					row: i + 1
				};

			}
		}

		//Pass 5: Find adjacent matches in descending order
		for (var i = aNew.length - 1; i > 0; i--) {
			if (aNewRefs[i] &&
				!aNewRefs[i-1] &&
				aNewRefs[i].row > 0 &&
				!aOldRefs[aNewRefs[i].row - 1] &&
				fnCompare(aOld[aNewRefs[i].row - 1], aNew[i-1])) {

				aNewRefs[i-1] = {
					data: aNew[i-1],
					row: aNewRefs[i].row - 1
				};
				aOldRefs[aNewRefs[i].row-1] = {
					data: aOldRefs[aNewRefs[i].row-1],
					row: i - 1
				};

			}
		}

		//Pass 6: Generate diff data
		var aDiff = [];

		if (aNew.length == 0) {
			//New list is empty, all items were deleted
			for (var i = 0; i < aOld.length; i++) {
				aDiff.push({
					index: 0,
					type: 'delete'
				});
			}
		} else {
			var iNewListIndex = 0;
			if (!aOldRefs[0]) {
				//Detect all deletions at the beginning of the old list
				for (var i = 0; i < aOld.length && !aOldRefs[i]; i++) {
					aDiff.push({
						index: 0,
						type: 'delete'
					});
					iNewListIndex = i + 1;
				}
			}

			for (var i = 0; i < aNew.length; i++) {
				if (!aNewRefs[i] || aNewRefs[i].row > iNewListIndex) {
					//Entry doesn't exist in old list = insert
					aDiff.push({
						index: i,
						type: 'insert'
					});
				} else {
					iNewListIndex = aNewRefs[i].row + 1;
					for (var j = aNewRefs[i].row + 1; j < aOld.length && (!aOldRefs[j] || aOldRefs[j].row < i); j++) {
						aDiff.push({
							index: i+1,
							type: 'delete'
						});
						iNewListIndex = j + 1;
					}
				}
			}
		}

		return aDiff;
	};

	/**
	 * Parse simple JS objects.
	 * 
	 * A parser for JS object literals. This is different from a JSON parser, as it does not have
	 * the JSON specification as a format description, but a subset of the JavaScript language.
	 * The main difference is, that keys in objects do not need to be quoted and strings can also
	 * be defined using apostrophes instead of quotation marks.
	 * 
	 * The parser does not support functions, but only boolean, number, string, object and array.
	 * 
	 * @param {string} The string containing the JS objects
	 * @throws an error, if the string does not contain a valid JS object
	 * @returns {object} the JS object
	 * 
	 * @since 1.11
	 */
	jQuery.sap.parseJS = (function() {

		var at, // The index of the current character
		ch, // The current character
		escapee = {
			'"': '"',
			'\'': '\'',
			'\\': '\\',
			'/': '/',
			b: '\b',
			f: '\f',
			n: '\n',
			r: '\r',
			t: '\t'
		},
			text,

			error = function(m) {

				// Call error when something is wrong.
				throw {
					name: 'SyntaxError',
					message: m,
					at: at,
					text: text
				};
			},

			next = function(c) {

				// If a c parameter is provided, verify that it matches the current character.
				if (c && c !== ch) {
					error("Expected '" + c + "' instead of '" + ch + "'");
				}

				// Get the next character. When there are no more characters,
				// return the empty string.
				ch = text.charAt(at);
				at += 1;
				return ch;
			},

			number = function() {

				// Parse a number value.
				var number, string = '';

				if (ch === '-') {
					string = '-';
					next('-');
				}
				while (ch >= '0' && ch <= '9') {
					string += ch;
					next();
				}
				if (ch === '.') {
					string += '.';
					while (next() && ch >= '0' && ch <= '9') {
						string += ch;
					}
				}
				if (ch === 'e' || ch === 'E') {
					string += ch;
					next();
					if (ch === '-' || ch === '+') {
						string += ch;
						next();
					}
					while (ch >= '0' && ch <= '9') {
						string += ch;
						next();
					}
				}
				number = +string;
				if (!isFinite(number)) {
					error("Bad number");
				} else {
					return number;
				}
			},

			string = function() {

				// Parse a string value.
				var hex, i, string = '', quote,
					uffff;

				// When parsing for string values, we must look for " and \ characters.
				if (ch === '"' || ch === '\'') {
					quote = ch;
					while (next()) {
						if (ch === quote) {
							next();
							return string;
						}
						if (ch === '\\') {
							next();
							if (ch === 'u') {
								uffff = 0;
								for (i = 0; i < 4; i += 1) {
									hex = parseInt(next(), 16);
									if (!isFinite(hex)) {
										break;
									}
									uffff = uffff * 16 + hex;
								}
								string += String.fromCharCode(uffff);
							} else if (typeof escapee[ch] === 'string') {
								string += escapee[ch];
							} else {
								break;
							}
						} else {
							string += ch;
						}
					}
				}
				error("Bad string");
			},

			name = function() {

				// Parse a name value.
				var name = '',
					charcode,
					allowed = function(ch) {
						return ch === "_" ||
							(ch >= "0" && ch <= "9") ||
							(ch >= "a" && ch <= "z") ||
							(ch >= "A" && ch <= "Z") 
					};

				if (allowed(ch)) {
					name += ch;
				} else {
					error("Bad name");
				}

				while (next()) {
					if (ch === ' ') {
						next();
						return name;
					}
					if (ch === ':') {
						return name;
					}
					if (allowed(ch)) {
						name += ch;
					} else {
						error("Bad name");
					}
				}
				error("Bad name");
			},

			white = function() {

				// Skip whitespace.
				while (ch && ch <= ' ') {
					next();
				}
			},

			word = function() {

				// true, false, or null.
				switch (ch) {
				case 't':
					next('t');
					next('r');
					next('u');
					next('e');
					return true;
				case 'f':
					next('f');
					next('a');
					next('l');
					next('s');
					next('e');
					return false;
				case 'n':
					next('n');
					next('u');
					next('l');
					next('l');
					return null;
				}
				error("Unexpected '" + ch + "'");
			},

			value, // Place holder for the value function.
			array = function() {

				// Parse an array value.
				var array = [];

				if (ch === '[') {
					next('[');
					white();
					if (ch === ']') {
						next(']');
						return array; // empty array
					}
					while (ch) {
						array.push(value());
						white();
						if (ch === ']') {
							next(']');
							return array;
						}
						next(',');
						white();
					}
				}
				error("Bad array");
			},

			object = function() {

				// Parse an object value.
				var key, object = {};

				if (ch === '{') {
					next('{');
					white();
					if (ch === '}') {
						next('}');
						return object; // empty object
					}
					while (ch) {
						if (ch >= "0" && ch <= "9") {
							key = number();
						} else if (ch === '"' || ch === '\''){
							key = string();
						} else {
							key = name();
						}
						white();
						next(':');
						if (Object.hasOwnProperty.call(object, key)) {
							error('Duplicate key "' + key + '"');
						}
						object[key] = value();
						white();
						if (ch === '}') {
							next('}');
							return object;
						}
						next(',');
						white();
					}
				}
				error("Bad object");
			};

		value = function() {

			// Parse a JS value. It could be an object, an array, a string, a number,
			// or a word.
			white();
			switch (ch) {
			case '{':
				return object();
			case '[':
				return array();
			case '"':
			case '\'':
				return string();
			case '-':
				return number();
			default:
				return ch >= '0' && ch <= '9' ? number() : word();
			}
		};

		// Return the parse function. It will have access to all of the above
		// functions and variables.
		return function(source, start) {
			var result;

			text = source;
			at = start || 0;
			ch = ' ';
			result = value();
			
			if ( isNaN(start) ) {
				white();
				if (ch) {
					error("Syntax error");
				}
				return result;
			} else {
				return { result : result, at : at-1 };
			}

		};
	}())
	
}());

}; // end of jquery.sap.script.js
if ( !jQuery.sap.isDeclared('jquery.sap.sjax') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*
 * Provides convenience functions for synchronous communication, based on the jQuery.ajax() function.
 */
jQuery.sap.declare("jquery.sap.sjax", false);

(function() {

	jQuery.sap.sjaxSettings = {
		/**
		 * Whether to return an object consisting of data and status and error codes or only the simple data
		 */
		complexResult: true,

		/**
		 * fallback value when complexResult is set to false and an error occurred. Then fallback will be returned.
		 */
		fallback: undefined
	};

	/**
	 * Convenience wrapper around <code>jQuery.ajax()</code> that avoids the need for callback functions when
	 * synchronous calls are made. If the setting <code>complexResult</code> is true (default), then the return value
	 * is an object with the following properties
	 * <ul>
	 * <li><code>success</code> boolean whether the call succeeded or not
	 * <li><code>data</code> any the data returned by the call. For dataType 'text' this is a string,
	 *                       for JSON it is an object, for XML it is a document. When the call failed, then data is not defined
	 * <li><code>status</code> string a textual status ('success,', 'error', 'timeout',...)
	 * <li><code>statusCode</code> string the HTTP status code of the request
	 * <li><code>error</code> Error an error object (exception) in case an error occurred
	 * </ul>
	 *
	 * When <code>complexResult</code> is false, then in the case of success, only 'data' is returned, in case of an error the
	 * 'fallback' setting is returned (defaults to undefined).
	 *
	 * Note that async=false is always enforced by this method.
	 *
	 * @param {String} oOrigSettings the ajax() settings
	 * @return result, see above
	 *
	 * @public
	 * @since 0.9.0
	 * @SecSink {0|PATH} Parameter is used for future HTTP requests
	 */
	jQuery.sap.sjax = function sjax(oOrigSettings) {

		var s = jQuery.extend(true, {}, jQuery.sap.sjaxSettings, oOrigSettings,

			// the following settings are enforced as this is the rightmost object in the extend call
			{
				async: false,
				success : function(data, textStatus, xhr) {
//					oResult = { success : true, data : data, status : textStatus, statusCode : xhr.status };
					oResult = { success : true, data : data, status : textStatus, statusCode : xhr&&xhr.status };
				},
				error : function(xhr, textStatus, error) {
					oResult = { success : false, data : undefined, status : textStatus, error : error, statusCode : xhr.status };
				}
			});

		var oResult = undefined;

		jQuery.ajax(s);

		if (!s.complexResult) {
			return oResult.success ? oResult.data : s.fallback;
		}

		return oResult;
	};

	/**
	 * Convenience wrapper that checks whether a given web resource could be accessed.
	 * @SecSink {0|PATH} Parameter is used for future HTTP requests
	 * @SecSource {return} Returned value is under control of an external resource
	 */
	jQuery.sap.syncHead = function(sUrl) {
		return jQuery.sap.sjax({type:'HEAD', url: sUrl}).success;
	};

	/**
	 * Convenience wrapper for {@link jQuery.sap.sjax} that enforeces the Http method GET and defaults the
	 * data type of the result to 'text'.
	 *
	 * @param {String} sUrl the URL
	 * @param {String|object} data request parameters in the format accepted by jQuery.ajax()
	 * @param {String} [sDataType='text'] the type of data expected from the server, default is "text"
	 * @return result @see jQuery.sap.sjax
	 *
	 * @public
	 * @since 0.9.0
	 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
	 * @SecSource {return} Returned value is under control of an external resource
	 */
	jQuery.sap.syncGet = function syncGet(sUrl, data, sDataType) {
		return jQuery.sap.sjax({
			url: sUrl,
			data: data,
			type: 'GET',
			dataType: sDataType || 'text'
		});
	};

	/**
	 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method POST and defaults the
	 * data type of the result to 'text'.
	 *
	 * @param {String} sUrl the URL
	 * @param {String|object} data request parameters in the format accepted by jQuery.ajax()
	 * @param {String} [sDataType='text'] the type of data expected from the server, default is "text"
	 * @return result @see jQuery.sap.sjax
	 *
	 * @public
	 * @since 0.9.0
	 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
	 * @SecSource {return} Returned value is under control of an external resource
	 */
	jQuery.sap.syncPost = function syncPost(sUrl, data, sDataType) {
		return jQuery.sap.sjax({
			url: sUrl,
			data: data,
			type: 'POST',
			dataType: sDataType || 'text'
		});
	};

	/**
	 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'text'.
	 * If a fallback value is given, the function simply returns the response as a text or - if some error occurred -
	 * the fallback value. This is useful for applications that don't require detailed error diagnostics.
	 *
	 * If applications need to know about occurring errors, they can either call <code>sjax()</code> directly
	 * or they can omit the fallback value (providing only two parameters to syncGetText()).
	 * They then receive the same complex result object as for the sjax() call.
	 *
	 * @param {String} sUrl the URL
	 * @param {String|object} data request parameters in the format accepted by jQuery.ajax()
	 * @param {String} [fallback] if set, only data is returned (and this fallback instead in case of errors); if unset, a result structure is returned
	 * @return  result @see jQuery.sap.sjax
	 *
	 * @public
	 * @since 0.9.0
	 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
	 */
	jQuery.sap.syncGetText = function syncGetText(sUrl, data, fallback) {
		return jQuery.sap.sjax({
			url: sUrl,
			data: data,
			type: 'GET',
			dataType: 'text',
			fallback: fallback,
			complexResult : (arguments.length < 3)
		});
	};

	/**
	 * Convenience wrapper for {@link jQuery.sap.sjax} that enforces the Http method GET and the data type 'json'.
	 * If a fallback value is given, the function simply returns the response as an object or - if some error occurred -
	 * the fallback value. This is useful for applications that don't require detailed error diagnostics.
	 *
	 * If applications need to know about occurring errors, they can either call <code>sjax()</code> directly
	 * or they can omit the fallback value (providing only two parameters to syncGetJSON()).
	 * They then receive the same complex result object as for the sjax() call.
	 *
	 * Note that providing "undefined" or "null" as a fallback is different from omitting the fallback (complex result).
	 *
	 * @param {String} sUrl the URL
	 * @param {String|object} data request parameters in the format accepted by jQuery.ajax()
	 * @param {object} [fallback] if set, only data is returned (and this fallback instead in case of errors); if unset, a result structure is returned
	 * @return result @see jQuery.sap.sjax
	 *
	 * @public
	 * @since 0.9.0
	 * @SecSink {0 1|PATH} Parameter is used for future HTTP requests
	 */
	jQuery.sap.syncGetJSON = function syncGetJSON(sUrl, data, fallback) {
		return jQuery.sap.sjax({
			url: sUrl,
			data: data || null,
			type: 'GET',
			dataType: 'json',
			fallback: fallback,
			complexResult : (arguments.length < 3)
		});
	};

}());
}; // end of jquery.sap.sjax.js
if ( !jQuery.sap.isDeclared('jquery.sap.storage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*
 * Provides methods to store and retrieve data based on Web Storage API.
 */
jQuery.sap.declare("jquery.sap.storage", false);

(function() {

	/**
	 * Check whether the current environment supports JSON.parse and JSON stringify.
	 * @private
	 */
	var bSupportJSON = !!(window.JSON && JSON.parse && JSON.stringify);
	
	/**
	 * Prefix added to all storage keys (typically IDs) passed by the applications
	 * when they are calling state storage methods. The goal of such prefix is to
	 * leave space for saving data (with the same key) also scenarios other than
	 * state saving.
	 * @private
	 */
	var sStateStorageKeyPrefix = "state.key_";

	/**
	 * @interface A Storage API for JavaScript.
	 *
	 * Provides methods to store data on the client using Web Storage API support by the browser. The data
	 * received by this API must be already serialized, in string format. Similarly, the API returns the retrieved
	 * data in serialized string format, so it is the responsibility of the caller to de-serialize it, if applicable.
	 * 
	 * Attention: The Web Storage API stores the data on the client. Therefore do not use this API for confidential information. 
	 * 
	 * One can get access to the 'default' storage by using {@link jQuery.sap.storage} directly
	 * or alternatively via factory functionality available as <code>jQuery.sap.storage(jQuery.sap.storage.Type.session)</code>
	 * returning an object implementing this interface.
	 *
	 * A typical intended usage of this API is the storage of a string representing the state of a control.
	 * In such usage, the data is stored in the browser session, and
	 * the methods to be used are {@link #put} and {@link #get}.
	 * The method {@link #remove} can be used to delete the previously saved state.
	 *
	 * In sake of completeness, the method {@link #clear} is available.
	 * However, it should be called only in very particular situations,
	 * when a global erasing of data is required. If only keys with certain prefix
	 * should be deleted the method {@link #removeAll} should be used.
	 *
	 * @author SAP AG
	 * @version 1.18.9
	 * @since 0.11.0
	 * @public
	 * @name jQuery.sap.storage.Storage
	 */

	/** 
	 * 
	 * Constructor for an instance of jQuery.sap.storage.Storage
	 *
	 * @param {jQuery.sap.storage.Type || Storage} [pStorage=jQuery.sap.storage.Type.session] the type this storage should be of or an Object implementing the typical Storage API for direct usage.
	 * @param {string} [sStorageKeyPrefix='state.key_'] the prefix to use in this storage.
	 * 
	 * @private
	 */
	var fnStorage = /** @lends jQuery.sap.storage.Storage */ function(pStorage, sStorageKeyPrefix){
		var sType = "unknown";
		var sPrefix = sStorageKeyPrefix || sStateStorageKeyPrefix;
		sPrefix += "-";
		var oStorage;

		if(!oStorage || typeof(pStorage) === "string") {
			sType = pStorage || "session";
			try{
				oStorage = window[sType + "Storage"];
			}catch(e){
				oStorage = null;
			}
		} else if(typeof(pStorage) === Object) {
			sType = pStorage.getType ? pStorage.getType() : "unknown";
			oStorage = pStorage;
		}
		var bStorageAvailable = !!oStorage;

		/**
		 * Stores the passed state string in the session, under the key
		 * sStorageKeyPrefix + sId
		 * 
		 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
		 *
		 * @param {string} sId Id for the state to store
		 * @param {string} sStateToStore content to store
		 * @return {boolean} true if the data were successfully stored, false otherwise
		 * @public
		 */
		this.put = function(sId, sStateToStore) {
			//precondition: non-empty sId and available storage feature
			jQuery.sap.assert(typeof sId === "string" && sId, "sId must be a non-empty string");
			jQuery.sap.assert(typeof sStateToStore === "string" || bSupportJSON, "sStateToStore must be string or JSON must be supported");
			if (bStorageAvailable && sId) {
				try {
					oStorage.setItem(sPrefix+sId, bSupportJSON?JSON.stringify(sStateToStore):sStateToStore);
					return true;
				} catch(e) {
					return false;
				}
			} else {
				return false;
			}
		};

		/**
		 * Retrieves the state string stored in the session under the key
		 * sStorageKeyPrefix + sId
		 * 
		 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
		 *
		 * @param {string} sId Id for the state to retrieve
		 * @return {string} the string from the storage, if the retrieval
		 * was successful, and null otherwise
		 * @public
		 */
		this.get = function(sId) {
			//precondition: non-empty sId and available storage feature
			jQuery.sap.assert(typeof sId === "string" && sId, "sId must be a non-empty string");
			if (bStorageAvailable && sId ) {
				try {
					var sItem=oStorage.getItem(sPrefix+sId);
					return bSupportJSON?JSON.parse(sItem):sItem;
				} catch(e) {
					return null;
				}
			} else {
				return null;
			}
		};

		/**
		 * Deletes the state string stored in the session under the key
		 * sStorageKeyPrefix + sId
		 * 
		 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
		 *
		 * @param {string} sId Id for the state to delete
		 * @return {boolean} true if the deletion
		 * was successful or the data doesn't exist under the specified key,
		 * and false if the feature is unavailable or a problem occurred
		 * @public
		 */
		this.remove = function(sId) {
			//precondition: non-empty sId and available storage feature
			jQuery.sap.assert(typeof sId === "string" && sId, "sId must be a non-empty string");
			if (bStorageAvailable && sId) {
				try {
					oStorage.removeItem(sPrefix+sId);
					return true;
				} catch(e) {
					return false;
				}
			} else {
				return false;
			}
		};
		
		/**
		 * Deletes all state strings stored in the session under the key prefix 
		 * sStorageKeyPrefix + sIdPrefix.
		 * 
		 * sStorageKeyPrefix is the id prefix defined for the storage instance (@see jQuery.sap#storage)
		 * 
		 * @param {string} sIdPrefix Id prefix for the states to delete
		 * @return {boolean} true if the deletion
		 * was successful or the data doesn't exist under the specified key,
		 * and false if the feature is unavailable or a problem occurred
		 * @since 1.13.0
		 * @public
		 */
		this.removeAll = function(sIdPrefix) {
			//precondition: available storage feature
			if (bStorageAvailable && oStorage.length && typeof(oStorage.key) === "function") {
				try {
					var len = oStorage.length;
					var aKeysToRemove = [];
					var key, i;
					var p = sPrefix + (sIdPrefix || "");
					for(i=0; i<len; i++){
						key = oStorage.key(i);
						if(key && key.indexOf(p) == 0){
							aKeysToRemove.push(key);
						}
					}
					
					for(i=0; i<aKeysToRemove.length; i++){
						oStorage.removeItem(aKeysToRemove[i]);
					}
					
					return true;
				} catch(e) {
					return false;
				}
			} else {
				return false;
			}
		};

		/**
		 * Deletes all the entries saved in the session (Independent of the current Storage instance!).
		 * 
		 * CAUTION: This method should be called only in very particular situations,
		 * when a global erasing of data is required. Given that the method deletes
		 * the data saved under any ID, it should not be called when managing data
		 * for specific controls.
		 *
		 * @return {boolean} true if execution of removal
		 * was successful or the data to remove doesn't exist,
		 * and false if the feature is unavailable or a problem occurred
		 * @public
		 */
		this.clear = function() {
			//precondition: available storage feature
			if (bStorageAvailable) {
				try {
					oStorage.clear();
					return true;
				} catch(e) {
					return false;
				}
			} else {
				return false;
			}
		};

		/**
		 * Returns the type of the storage.
		 * @returns {jQuery.sap.storage.Type || string} the type of the storage or "unknown"
		 * @public
		 */
		this.getType = function(){
			return sType;
		};
	};


	/**
	 * A map holding instances of different 'standard' storages.
	 * Used to limit number of created storage objects.
	 * @private
	 */
	var mStorages = {};

	/**
	 * Returns a {@link jQuery.sap.storage.Storage Storage} object for a given HTML5 storage (type) and,
	 * as a convenience, provides static functions to access the default (session) storage.
	 *  
	 * When called as a function, it returns an instance of {@link jQuery.sap.storage.Storage}, providing access 
	 * to the storage of the given {@link jQuery.sap.storage.Type} or to the given HTML5 Storage object.
	 * 
	 * The default session storage can be easily accessed with methods {@link jQuery.sap.storage.get}, 
	 * {@link jQuery.sap.storage.put}, {@link jQuery.sap.storage.remove}, {@link jQuery.sap.storage.clear},
	 * {@link jQuery.sap.storage.getType} and {@link jQuery.sap.storage.removeAll}
	 *
	 * @param {jQuery.sap.storage.Type | Storage} 
	 *     oStorage the type specifying the storage to use or an object implementing the browser's Storage API.
	 * @param {string} [sIdPrefix] Prefix used for the Ids. If not set a default prefix is used.    
	 * @returns {jQuery.sap.storage.Storage}
	 * 
	 * @version 1.18.9
	 * @since 0.11.0
	 * @namespace
	 * @public
	 * 
	 * @borrows jQuery.sap.storage.Storage.get as get
	 * @borrows jQuery.sap.storage.Storage.put as put
	 * @borrows jQuery.sap.storage.Storage.remove as remove
	 * @borrows jQuery.sap.storage.Storage.clear as clear
	 * @borrows jQuery.sap.storage.Storage.getType as getType
	 * @borrows jQuery.sap.storage.Storage.removeAll as removeAll
	 */
	jQuery.sap.storage = function(oStorage, sIdPrefix){
		// if nothing or the default was passed in, simply return ourself
		if(!oStorage) {
			oStorage = jQuery.sap.storage.Type.session;
		}

		if(typeof(oStorage) === "string" && jQuery.sap.storage.Type[oStorage]) {
			var sKey = oStorage;
			if(sIdPrefix && sIdPrefix != sStateStorageKeyPrefix){
				sKey = oStorage+"_"+sIdPrefix;
			}
			
			return mStorages[sKey] || (mStorages[sKey] = new fnStorage(oStorage, sIdPrefix));
		}

		// OK, tough but probably good for issue identification. As something was passed in, let's at least ensure our used API is fulfilled.
		jQuery.sap.assert(oStorage instanceof Object && oStorage.clear && oStorage.setItem && oStorage.getItem && oStorage.removeItem, "storage: duck typing the storage");
		return new fnStorage(oStorage, sIdPrefix);
	};

	/**
	 * Enumeration of the storage types supported by {@link jQuery.sap.storage.Storage}
	 * @class
	 * @static
	 * @public
	 * @version 1.18.9
	 * @since 0.11.0
	 */
	jQuery.sap.storage.Type = {
			/**
			 * Indicates usage of the browser's localStorage feature
			 * @public
			 */
			local: "local",
			/**
			 * Indicates usage of the browser's sessionStorage feature
			 * @public
			 */
			session: "session",
			/**
			 * Indicates usage of the browser's globalStorage feature
			 * @public
			 */
			global: "global"
	};

	// ensure the storage constructor applied to our storage object
	fnStorage.apply(jQuery.sap.storage);
	mStorages[jQuery.sap.storage.Type.session] = jQuery.sap.storage;

// end of anonymous function creating the storage instance and its methods
}());
}; // end of jquery.sap.storage.js
if ( !jQuery.sap.isDeclared('jquery.sap.strings') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides useful string operations not available in pure JavaScript.
jQuery.sap.declare("jquery.sap.strings", false);

(function(){


	/**
	 * Checks whether a given sString ends with sEndString
	 * respecting the case of the strings.
	 *
	 * @param {string} sString The string to be checked
	 * @param {string} sEndString The end string to be searched
	 * @return True if sString ends with sEndString
	 * @type {boolean}
	 * @see jQuery.sap.endsWithIgnoreCase
	 * @public
	 */
	jQuery.sap.endsWith = function endsWith(sString, sEndString) {
		if (typeof(sEndString)!="string" || sEndString=="") {
			return false;
		}
		var iPos = sString.lastIndexOf(sEndString);
		return iPos >= 0 && iPos == sString.length - sEndString.length;
	};

	/**
	 * Checks whether a given sString ends with sEndString
	 * ignoring the case of the strings.
	 *
	 * @param {string} sString the string to be checked
	 * @param {string} sEndString the end string to be searched
	 * @return true if sString ends with sEndString
	 * @type {boolean}
	 * @see jQuery.sap.endsWith
	 * @public
	 */
	jQuery.sap.endsWithIgnoreCase = function endsWithIgnoreCase(sString, sEndString) {
		if (typeof(sEndString)!="string" || sEndString=="") {
			return false;
		}
		sString = sString.toUpperCase();
		sEndString = sEndString.toUpperCase();
		return jQuery.sap.endsWith(sString,sEndString);
	};

	/**
	 * Checks whether a given sString starts with sStartString
	 * respecting the case of the strings.
	 *
	 * @param {string} sString The string to be checked
	 * @param {string} sStartString The start string to be searched
	 * @return True if sString ends with sEndString
	 * @type {boolean}
	 * @see jQuery.sap.startsWithIgnoreCase
	 * @public
	 */
	jQuery.sap.startsWith = function startsWith(sString, sStartString) {
		if (typeof(sStartString)!="string" || sStartString=="") {
			return false;
		}
		if (sString == sStartString) {
			return true;
		}
		return sString.indexOf(sStartString) == 0;
	};

	/**
	 * Checks whether a given sString starts with sStartString
	 * ignoring the case of the strings.
	 *
	 * @param {string} sString The string to be checked
	 * @param {string} sStartString The start string to be searched
	 * @return True if sString ends with sEndString
	 * @type {boolean}
	 * @see jQuery.sap.startsWith
	 * @public
	 */
	jQuery.sap.startsWithIgnoreCase = function startsWithIgnoreCase(sString, sStartString) {
		if (typeof(sStartString)!="string" || sStartString=="") {
			return false;
		}
		sString = sString.toUpperCase();
		sStartString = sStartString.toUpperCase();
		return jQuery.sap.startsWith(sString,sStartString);
	};

	/**
	 * Converts a character of the string to upper case.<br/>
	 * If no pos is defined as second parameter or pos is negative or greater than sString the first character will be
	 * converted into upper case. the first char position is 0.
	 *
	 * @param {string} sString The string to be checked
	 * @param {integer} iPos the position of the character that will be uppercase
	 * @return The string with the firstletter in upper case
	 * @type {string}
	 * @public
	 * @SecPassthrough {0|return}
	 */
	jQuery.sap.charToUpperCase = function charToUpperCase(sString,iPos) {
		if (!sString) {
			return sString;
		}
		if (!iPos || isNaN(iPos) || iPos <= 0 || iPos >= sString.length) {
			iPos = 0;
		}
		var sChar = sString.charAt(iPos).toUpperCase();
		if (iPos>0) {
			return sString.substring(0,iPos) + sChar + sString.substring(iPos+1);
		}
		return sChar + sString.substring(iPos+1);
	};

	/**
	 * Pads a string on the left side until is has the given length.<br/>
	 *
	 * @param {string} sString The string to be padded
	 * @param {string} sPadChar The char to use for the padding
	 * @param {integer} iLength the target length of the string
	 * @return The padded string
	 * @type {string}
	 * @public
	 * @SecPassthrough {0 1|return}
	 */
	jQuery.sap.padLeft = function padLeft(sString, sPadChar, iLength) {
		if (!sString) {
			sString = "";
		}
		while (sString.length < iLength) {
			sString = sPadChar + sString;
		}
		return sString;
	};

	/**
	 * Pads a string on the right side until is has the given length.<br/>
	 *
	 * @param {string} sString The string to be padded
	 * @param {string} sPadChar The char to use for the padding
	 * @param {integer} iLength the target length of the string
	 * @return The padded string
	 * @type {string}
	 * @public
	 * @SecPassthrough {0 1|return}
	 */
	jQuery.sap.padRight = function padRight(sString, sPadChar, iLength) {
		if (!sString) {
			sString = "";
		}
		while (sString.length < iLength) {
			sString = sString + sPadChar;
		}
		return sString;
	};


	var rCamelCase = /-(.)/ig;

	/**
	 * Transforms a hyphen separated string to an camel case string. 
	 *
	 * @param {string} sString Hyphen separated string
	 * @return The transformed string
	 * @type {string}
	 * @since 1.7.0
	 * @public
	 * @SecPassthrough {0|return}
	 */
	jQuery.sap.camelCase = function camelCase(sString) { 
		return sString.replace( rCamelCase, function( sMatch, sChar ) {
			return sChar.toUpperCase();
		});
	};

	
	var rHyphen = /([A-Z])/g;
	
	/**
	 * Transforms a camel case string into a hyphen separated string.
	 * 
	 * @param {string} sString camel case string
	 * @return The transformed string
	 * @type {string}
	 * @since 1.15.0
	 * @public
	 * @SecPassthrough {0|return}
	 */
	jQuery.sap.hyphen = function hyphen(sString) {
		return sString.replace( rHyphen, function(sMatch, sChar) { 
			return "-" + sChar.toLowerCase(); 
		});
	};

	
	var rEscapeRegExp = /[-[\]{}()*+?.,\\^$|#\s]/g;

	/**
	 * This function escapes the reserved letters in Regular Expression
   * @param {string} sString string to escape
   * @return The escaped string
   * @type {string}
   * @since 1.9.3
   * @public
   * @SecPassthrough {0|return}
	 */
	jQuery.sap.escapeRegExp = function escapeRegExp(sString) {
		return sString.replace(rEscapeRegExp, "\\$&");
	};
	
	/**
	 * Creates a string from a pattern by replacing placeholders with concrete values.
	 *
	 * The syntax of the pattern is inspired by (but not fully equivalent to) the 
	 * java.util.MessageFormat.
	 *
	 * Placeholders have the form <code>{ integer }</code>, where any occurrence of 
	 * <code>{0}</code> is replaced by the value with index 0 in <code>aValues</code>,
	 * <code>{1}</code> y the value with index 1 in <code>aValues</code> etc.
	 *
	 * To avoid interpretation of curly braces as placeholders, any non-placeholder fragment 
	 * of the pattern can be enclosed in single quotes. The surrounding single quotes will be 
	 * omitted from the result. Single quotes that are not meant to escape a fragment and 
	 * that should appear in the result, need to be doubled. In the result, only a single 
	 * single quote will occur.
	 *
	 * Example Pattern Strings:
	 * <pre>
	 *   jQuery.sap.formatMessage("Say {0}", ["Hello"]) -> "Say Hello"  // normal use case
	 *   jQuery.sap.formatMessage("Say '{0}'", ["Hello"]) -> "Say {0}"  // escaped placeholder
	 *   jQuery.sap.formatMessage("Say ''{0}''", ["Hello"]) -> "Say 'Hello'" // doubled single quote 
	 *   jQuery.sap.formatMessage("Say '{0}'''", ["Hello"]) -> "Say {0}'" // doubled single quote in quoted fragment
	 * </pre>
	 * 
	 * In contrast to java.util.MessageFormat, format types or format styles are not supported. 
	 * Everything after the argument index and up to the first closing curly brace is ignored.
	 * Nested placeholders (as supported by java.lang.MessageFormat for the format type choice)
	 * are not ignored but reported as a parse error. 
	 *
	 * This method throws an Error when the pattern syntax is not fulfilled (e.g. unbalanced curly 
	 * braces, nested placeholders or a non-numerical argument index).
	 *
	 * This method can also be used as a formatter within a binding. The first part of a composite binding 
	 * will be used as pattern, the following parts as aValues. If there is only one value and this
	 * value is an array it will be handled like the default described above.
	 *  
	 * @param {string} sPattern A pattern string in the described syntax 
	 * @param {any[]} [aValues=[]] The values to be used instead of the placeholders.
	 * 										 
	 * @return {string} The formatted result string 
	 * @since 1.12.5
	 * @SecPassthrough {*|return}
	 * @public
	 */
	jQuery.sap.formatMessage = function formatMessage(sPattern, aValues) {
		jQuery.sap.assert(typeof sPattern === "string" || sPattern instanceof String, "pattern must be string");
		if (arguments.length > 2 || (aValues != null && !jQuery.isArray(aValues))) {
			aValues = Array.prototype.slice.call(arguments,1);
		} 
		aValues = aValues || [];
		return sPattern.replace(rMessageFormat, function($0,$1,$2,$3,offset) {
			if ( $1 ) {
				// a doubled single quote in a normal string fragment 
				//   --> emit a single quote
				return "'";
			} else if ( $2 ) {
				// a quoted sequence of chars, potentially containing doubled single quotes again 
				//   --> emit with doubled single quotes replaced by a single quote 
				return $2.replace(/''/g, "'");
			} else if ( $3 ) {
				// a welformed curly brace
				//   --> emit the argument but ignore other parameters 
				return String(aValues[parseInt($3, 10)]);
			}
			// e.g. malformed curly braces 
			//   --> throw Error 
			throw new Error("formatMessage: pattern syntax error at pos. " + offset);
		});
	}
	
	/**
	 * Pattern to analyze MessageFormat strings.
	 * 
	 * Group 1: captures doubled single quotes within the string
	 * Group 2: captures quoted fragments within the string. 
	 *            Note that java.util.MessageFormat silently forgives a missing single quote at 
	 *            the end of a pattern. This special case is handled by the RegEx as well.  
	 * Group 3: captures placeholders
	 *            Checks only for numerical argument index, any remainder is ignored up to the next 
	 *            closing curly brace. Nested placeholdes are not accepted!
	 * Group 4: captures any remaining curly braces and indicates syntax errors
	 *
	 * @private
	 *                    [-1] [----- quoted string -----] [------ placeholder ------] [--]
	 */
	var rMessageFormat = /('')|'([^']+(?:''[^']*)*)(?:'|$)|\{([0-9]+(?:\s*,[^{}]*)?)\}|[{}]/g;
	
}());
}; // end of jquery.sap.strings.js
if ( !jQuery.sap.isDeclared('jquery.sap.xml') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides xml parsing and error checking functionality.
jQuery.sap.declare("jquery.sap.xml", false);


(function() {

	/**
	 * Parses the specified XML formatted string text using native parsing
	 * function of the browser and returns a valid XML document. If an error
	 * occurred during parsing a parse error object is returned as property (parseError) of the
	 * returned XML document object. The parse error object has the following error
	 * information parameters: errorCode, url, reason, srcText, line, linepos, filepos
	 *
	 * @param {string}
	 *            sXMLText the XML data as string
	 * @return {object} the parsed XML document with a parseError property as described in
	 *         getParseError. An error occurred if the errorCode property of the parseError is != 0.
	 * @public
	 */
	jQuery.sap.parseXML = function parseXML(sXMLText) {
		var oXMLDocument;
		if (window.DOMParser) {
			var oParser = new DOMParser();
			try {
				oXMLDocument = oParser.parseFromString(sXMLText, "text/xml");
			} catch (e) {
				var oParseError = jQuery.sap.getParseError(oXMLDocument);
				oXMLDocument = {};
				oParseError.reason = e.message;
				oXMLDocument.parseError = oParseError;
				return oXMLDocument;
			}
		} else {
			oXMLDocument = new ActiveXObject("Microsoft.XMLDOM");
			oXMLDocument.async = false;
			oXMLDocument.loadXML(sXMLText);
		}
		var oParseError = jQuery.sap.getParseError(oXMLDocument);
		if (oParseError){
			if (!oXMLDocument.parseError) {
				oXMLDocument.parseError = oParseError;
			}
		}
		return oXMLDocument;
	};

	/**
	 * Serializes the specified XML document into a string representation.
	 *
	 * @param {string}
	 *            oXMLDocument the XML document object to be serialized as string
	 * @return {object} the serialized XML string
	 * @public
	 */
	jQuery.sap.serializeXML = function serializeXML(oXMLDocument) {
		var sXMLString = "";
		if (window.ActiveXObject) {			
			sXMLString = oXMLDocument.xml;
			if (sXMLString) {
				return sXMLString;
			}
		} 
		if (window.XMLSerializer) {
			var serializer = new XMLSerializer();
			sXMLString = serializer.serializeToString(oXMLDocument);
		}
		return sXMLString;
	};
	
	jQuery.sap.isEqualNode = function(oNode1, oNode2) {
		if (oNode1 === oNode2) return true;
		if (!oNode1 || !oNode2) return false;
		if (oNode1.isEqualNode) {
			return oNode1.isEqualNode(oNode2)
		}
		if (oNode1.nodeType != oNode2.nodeType) return false;
		if (oNode1.nodeValue != oNode2.nodeValue) return false;
		if (oNode1.baseName != oNode2.baseName) return false;
		if (oNode1.nodeName != oNode2.nodeName) return false;
		if (oNode1.nameSpaceURI != oNode2.nameSpaceURI) return false;
		if (oNode1.prefix != oNode2.prefix) return false;
		if (oNode1.nodeType != 1) return true; //ELEMENT_NODE
		if (oNode1.attributes.length != oNode2.attributes.length) return false;
		for (var i = 0; i < oNode1.attributes.length; i++) {
			if (!jQuery.sap.isEqualNode(oNode1.attributes[i], oNode2.attributes[i])) {
				return false;
			}
		}
		if (oNode1.childNodes.length != oNode2.childNodes.length) return false;
		for (var i = 0; i < oNode1.childNodes.length; i++) {
			if (!jQuery.sap.isEqualNode(oNode1.childNodes[i], oNode2.childNodes[i])) {
				return false;
			}
		}
		return true;
	}


	/**
	 * Extracts parse error information from the specified document (if any). If
	 * an error was found the returned object has the following error
	 * information parameters: errorCode, url, reason, srcText, line, linepos,
	 * filepos
	 *
	 * @return oParseError if errors were found, or an object with an errorCode of 0 only
	 * @private
	 */
	jQuery.sap.getParseError = function getParseError(oDocument) {
		var oParseError = {
			errorCode : -1,
			url : "",
			reason : "unknown error",
			srcText : "",
			line : -1,
			linepos : -1,
			filepos : -1
		};

		// IE
		if (!!sap.ui.Device.browser.internet_explorer && oDocument && oDocument.parseError
				&& oDocument.parseError.errorCode != 0) {
			return oDocument.parseError;
		}

		// Firefox
		if (!!sap.ui.Device.browser.firefox && oDocument && oDocument.documentElement
				&& oDocument.documentElement.tagName == "parsererror") {

			var sErrorText = oDocument.documentElement.firstChild.nodeValue, rParserError = /XML Parsing Error: (.*)\nLocation: (.*)\nLine Number (\d+), Column (\d+):(.*)/;

			if (rParserError.test(sErrorText)) {
				oParseError.reason = RegExp.$1;
				oParseError.url = RegExp.$2;
				oParseError.line = parseInt(RegExp.$3, 10);
				oParseError.linepos = parseInt(RegExp.$4, 10);
				oParseError.srcText = RegExp.$5;

			}
			return oParseError;
		}

		// Safari
		if (!!sap.ui.Device.browser.webkit && oDocument && oDocument.documentElement
				&& oDocument.documentElement.tagName == "html"
				&& oDocument.getElementsByTagName("parsererror").length > 0) {

			var sErrorText = jQuery.sap.serializeXML(oDocument), rParserError = /error on line (\d+) at column (\d+): ([^<]*)/;

			if (rParserError.test(sErrorText)) {
				oParseError.reason = RegExp.$3;
				oParseError.url = "";
				oParseError.line = parseInt(RegExp.$1, 10);
				oParseError.linepos = parseInt(RegExp.$2, 10);
				oParseError.srcText = "";

			}
			return oParseError;
		}

		if (!oDocument || !oDocument.documentElement) {
			return oParseError;
		}

		return	{
				errorCode : 0
			};
	};

}());
}; // end of jquery.sap.xml.js
if ( !jQuery.sap.isDeclared('sap.ui.base.BindingParser') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides static class sap.ui.base.BindingParser
jQuery.sap.declare("sap.ui.base.BindingParser");


(function() {
	
	/**
	 * Regular expression to check for a (new) object literal
	 */
	var rObject = /^\{\s*[a-zA-Z_][a-zA-Z0-9_]*\s*:/;
	
	/**
	 * Regular expression to split the binding string into hard coded string fragments and embedded bindings.
	 * 
	 * Also handles escaping of '{' and '}'.
	 */
	var rFragments = /(\\[\\\{\}])|(\{)/g;

	/**
	 * Regular expression to escape potential binding chars
	 */
	var rBindingChars = /([\\\{\}])/g;
	
	/**
	 * Helper to create a formatter function. Only used to reduce the closure size of the formatter
	 */
	function makeFormatter(aFragments) {
		var fnFormatter = function(aValues) {
			var aResult = [],
				l=aFragments.length,
				i;
			
			for(i=0; i<l; i++) {
				if ( typeof aFragments[i] === "number" ) {
					// a numerical fragment references the part with the same number 
					aResult.push(arguments[aFragments[i]])
				} else {
					// anything else is a string fragment 
					aResult.push(aFragments[i]);
				}
			}
			return aResult.join('');
		};
		fnFormatter.textFragments = aFragments;
		return fnFormatter;
	}

	/**
	 * Creates a binding info object with the given path. 
	 * 
	 * If the path contains a model specifier (prefix separated with a '>'),
	 * the <code>model</code> property is set as well and the prefix is 
	 * removed from the path. 
	 */
	function makeSimpleBindingInfo(sPath) {
		var iPos = sPath.indexOf(">"),
			oBindingInfo = { path : sPath };
		
		if ( iPos > 0 ) {
			oBindingInfo.model = sPath.slice(0,iPos);
			oBindingInfo.path = sPath.slice(iPos+1);
		}
		
		return oBindingInfo;
	}
	
	/**
	 * @static
	 * @class
	 */
	sap.ui.base.BindingParser = {};
	
	sap.ui.base.BindingParser._keepBindingStrings = false;
	
	sap.ui.base.BindingParser.simpleParser = function(sString, oContext) {

		if ( jQuery.sap.startsWith(sString, "{") && jQuery.sap.endsWith(sString, "}") ) {
			return makeSimpleBindingInfo(sString.slice(1,-1));
		}
	
	};
	
	sap.ui.base.BindingParser.simpleParser.escape = function(sValue) {
		// there was no escaping defined for the simple parser
		return sValue;
	};
	
	sap.ui.base.BindingParser.complexParser = function(sString, oContext, bUnescape) {
		var parseObject=jQuery.sap.parseJS,
			oBindingInfo = {parts:[]},
			aFragments=[],
			bUnescaped,
			oParseResult,
			p=0,
			m,end;

		function resolveRef(o,sProp) {
			if ( typeof o[sProp] === "string" ) {
				if ( jQuery.sap.startsWith(o[sProp], ".") ) {
					o[sProp] = jQuery.proxy(jQuery.sap.getObject(o[sProp].slice(1), undefined, oContext), oContext);
				} else {
					o[sProp] = jQuery.sap.getObject(o[sProp]);
				} 
			}
		}

		function resolveType(o,sProp) {
			var FNType;
			if ( typeof o[sProp] === "string" ) {
				if ( jQuery.sap.startsWith(o[sProp], ".") ) {
					FNType = jQuery.sap.getObject(o[sProp].slice(1), undefined, oContext);
				} else {
					FNType = jQuery.sap.getObject(o[sProp]);
				} 
				// TODO find another solution for the type parameters?
				if (typeof FNType === "function") {
					o[sProp] = new FNType(o.formatOptions, o.constraints);
				} else {
					o[sProp] = FNType;
				}
				delete o.formatOptions;
				delete o.constraints;
			}
		}

		function resolveObject(o,sProp, sParentProp) {
			var FNType;
			if (!(typeof o[sProp] === "object" || jQuery.isArray(o[sProp]))) {
				return;
			}
			if (jQuery.isArray(o[sProp])) {
				jQuery.each(o[sProp], function(iIndex, oObject) {
					resolveObject(o[sProp], iIndex, sProp);
				});
			} else {
				if (sProp === "filters" || sParentProp === "filters") {
					FNType = jQuery.sap.getObject("sap.ui.model.Filter");
				} else if (sProp === "sorter" || sParentProp === "sorter") {
					FNType = jQuery.sap.getObject("sap.ui.model.Sorter");
					resolveRef(o[sProp], "group");
				}
				if (FNType) {
					o[sProp] = new FNType(o[sProp]);
				}
			}
		}

		while ( m=rFragments.exec(sString) ) {
			
			// check for a skipped literal string fragment  
			if ( p < m.index ) {
				aFragments.push(sString.slice(p, m.index));
			}
			
			// handle the different kinds of matches
			if ( m[1] ) {
				
				// an escaped opening bracket, closing bracket or backslash
				aFragments.push(m[1].slice(1));
				bUnescaped = true;
				
			} else { 
				
				// an embedded binding: check for a property name that would indicate a complex object 
				if ( rObject.test(sString.slice(m.index)) ) {
					
					oParseResult = parseObject(sString, m.index);
					resolveType(oParseResult.result,'type');
					resolveObject(oParseResult.result,'filters');
					resolveObject(oParseResult.result,'sorter');
					resolveRef(oParseResult.result,'formatter');
					resolveRef(oParseResult.result,'factory'); // list binding
					aFragments.push(oBindingInfo.parts.length);
					oBindingInfo.parts.push(oParseResult.result);
					rFragments.lastIndex = oParseResult.at;
					
				} else {
					
					// otherwise it must be a simple binding (path only)
					
					// TODO find closing brace via regex as well?
					end = sString.indexOf('}', m.index);
					if ( end < m.index ) {
						throw new SyntaxError("no closing braces found in '" + sString + "' after pos:" + m.index);
					}
					
					aFragments.push(oBindingInfo.parts.length);
					oBindingInfo.parts.push(makeSimpleBindingInfo(sString.slice(m.index+1, end)));
					rFragments.lastIndex = end+1;
					
				}
			}
			
			// remember where we are
			p = rFragments.lastIndex;
		}
		
		// check for a trailing literal string fragment  
		if ( p < sString.length ) {
			aFragments.push(sString.slice(p));
		}

		// only if a part has been found we can return a binding info
		if (oBindingInfo.parts.length > 0) {
			if ( aFragments.length === 1 /* implies: && typeof aFragments[0] === "number" */ ) {
				// special case: a single binding only
				oBindingInfo = oBindingInfo.parts[0];
			} else /* if ( aFragments.length > 1 ) */ {
				// create the formatter function from the fragments
				oBindingInfo.formatter = makeFormatter(aFragments);
			}
			if (sap.ui.base.BindingParser._keepBindingStrings) {
				oBindingInfo.bindingString = sString;
			}
			return oBindingInfo;
		} else if ( bUnescape && bUnescaped ) {
			return aFragments.join('');
		}
		
	};

	sap.ui.base.BindingParser.complexParser.escape = function(sValue) {
		return sValue.replace(rBindingChars, "\\$1");
	};
	
}());

}; // end of sap/ui/base/BindingParser.js
if ( !jQuery.sap.isDeclared('sap.ui.base.DataType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.base.DataType
jQuery.sap.declare("sap.ui.base.DataType");

/**
 * @class Describes the metadata of a data type and provides methods for validation.
 * @author Frank Weigel
 * @since 0.9.0
 */
sap.ui.base.DataType = function() {
	// Avoid construction of a DataType.
	// DataType is only a function to support the "instanceof" operator.
	throw new Error();
};

/**
 * The qualified name of the data type.
 * Note that this name usually equals the design time name of the type.
 * Only for primitive types it differs, namely it omits the package 'sap.ui.core'.
 * @return {string} name of the data type
 * @public
 */
sap.ui.base.DataType.prototype.getName = function() {
	return undefined;
};

/**
 * The base type of this type or undefined if this is a primitive type.
 * @return {sap.ui.base.DataType} base type or undefined
 * @public
 */
sap.ui.base.DataType.prototype.getBaseType = function() {
	return undefined;
};

/**
 * The component type of this type or undefined if this is not an array.
 * @return {sap.ui.base.DataType} component type or undefined
 * @public
 */
sap.ui.base.DataType.prototype.getComponentType = function() {
	return undefined;
};

/**
 * The default value for this type. Each type must define a default value.
 * @return {any} default value of the data type. The type of the returned value
 *    must match the JavaScript type of the data type (a string for string types etc.)
 * @public
 */
sap.ui.base.DataType.prototype.getDefaultValue = function() {
	return undefined;
};

/**
 * Whether this type is an array type.
 * @return {boolean} whether this type is an array type
 * @public
 */
sap.ui.base.DataType.prototype.isArrayType = function() {
	return undefined;
};

/**
 * Parses the given string value and converts it into the specific data type.
 * @param {string} sValue string representation for a value of this type
 * @return the value in the correct internal format
 * @public
 */
sap.ui.base.DataType.prototype.parseValue = function(sValue) {
	// currently this function considers to handle primitive values
	// - in future may be other values might be also relevant.
	var sType = this.getName();
	if (sType == "string") {
		return sValue;
	} else if (sType == "boolean") {
		return sValue == "true";
	} else if (sType == "int") {
		return parseInt(sValue, 10);
	} else if (sType == "float") {
		return parseFloat(sValue);
	} else if (sType == "object") {
		return sValue ? jQuery.parseJSON(sValue) : null;
	} else {
		// support for other types like e.g.
		// sap.ui.core.CSSSize (just apply)
		return sValue;
	}
};

/**
 * A validation check. To be implemented by concrete types.
 * @param {any} vValue the value to be checked
 * @return {boolean} whether the given value is valid for this data type (without conversion)
 * @public
 */
sap.ui.base.DataType.prototype.isValid = undefined;

/**
 * Sets the normalizer function for that data type
 * 
 * @param {function} fnNormalizer the function to call for normalizing. Will be called with the value
 * as the first parameter. It must return the (normalized) value.
 * @public
 */
sap.ui.base.DataType.prototype.setNormalizer = function(fnNormalizer) {
	jQuery.sap.assert(typeof fnNormalizer === "function", "DataType.setNormalizer: fnNormalizer must be a function");
	this._fnNormalizer = fnNormalizer;
};

/**
 * Changes a value using the normalizer specified for this datatype
 * 
 * @param the value to be normalized
 * @return the normalized value
 * @public
 */
sap.ui.base.DataType.prototype.normalize = function(oValue) {
	if (typeof this._fnNormalizer === "function") {
		return this._fnNormalizer(oValue);
	} else {
		return oValue;
	}
};


(function() {

	function createType(name, s, base) {

		jQuery.sap.assert(typeof name === "string" && !!name, "DataType.<createType>: type name must be a string");
		jQuery.sap.assert(!base || base instanceof sap.ui.base.DataType, "DataType.<createType>: base type must be empty or a DataType");
		s = s || {};
		base = base || sap.ui.base.DataType.prototype;

		// create a new type object with the base type as prototype
		var type = jQuery.sap.newObject(base);

		// getter for the name
		type.getName = function() { return name; };

		// if a default value is specified, create a getter for it
		if ( s.hasOwnProperty("defaultValue") ) {
			var vDefault = s.defaultValue;
			type.getDefaultValue = function() { return vDefault; };
		}

		// if a validator is specified either chain it with the base type validator
		// or set it if no base validator exists
		if ( s.hasOwnProperty("isValid") ) {
			var fnIsValid = s.isValid;
			type.isValid = base.isValid ? function(vValue) {
				if ( !base.isValid(vValue) ) {
					return false;
				}
				return fnIsValid(vValue);
			} : fnIsValid;
		};

		// not an array type
		type.isArrayType = function() { return false; };
		
		return type;
	}

	function createArrayType(componentType) {
		jQuery.sap.assert(componentType instanceof sap.ui.base.DataType, "DataType.<createArrayType>: componentType must be a DataType");

		// create a new type object with the base type as prototype
		var type = jQuery.sap.newObject(sap.ui.base.DataType.prototype);

		// getter for the name
		type.getName = function() { return componentType.getName() + "[]"; };

		// getter for component type
		type.getComponentType = function() { return componentType; };

		// array validator
		type.isValid = function(aValues) {
			if (aValues === null) {
				return true;
			}
			if (jQuery.isArray(aValues)) {
				for (var i = 0; i < aValues.length; i++) {
					if (!componentType.isValid(aValues[i])) {
						return false;
					}
				}
				return true;
			}
			return false;
		};

		// array parser
		type.parseValue = function(sValue) {
			var aValues = sValue.split(",");
			for (var i = 0; i < aValues.length; i++) {
				aValues[i] = componentType.parseValue(aValues[i]);
			}
			return aValues;
		};

		// is an array type
		type.isArrayType = function() { return true; };

		return type;
	}

	var PREDEFINED_TYPES = {

		"any" :
				createType("any", {
					defaultValue : null,
					isValid : function(vValue) {
						return true;
					}
				}),

		"boolean" :
			createType("boolean", {
				defaultValue : false,
				isValid : function(vValue) {
					return typeof vValue === "boolean";
				}
			}),

		"int" :
			createType("int", {
				defaultValue : 0,
				isValid : function(vValue) {
					return typeof vValue === "number" && Math.floor(vValue) == vValue;
				}
			}),

		"float" :
			createType("float", {
				defaultValue : 0.0,
				isValid : function(vValue) {
					return typeof vValue === "number";
				}
			}),

		"string" :
			createType("string", {
				defaultValue : "",
				isValid : function(vValue) {
					return typeof vValue === "string" || vValue instanceof String;
				}
			}),
		"object" :
			createType("object", {
				defaultValue : null,
				isValid : function(vValue) {
					return typeof vValue === "object" || typeof vValue === "function";
				}
			})
	};

	/**
	 * Returns the type object for the type with the given name.
	 * @return the type object or undefined when no such type object exists.
	 * @public
	 */
	sap.ui.base.DataType.getType = function(sTypeName) {
		if (sTypeName.indexOf("[]") > 0) {
			var sComponentTypeName = sTypeName.substr(0, sTypeName.length - 2),
				oComponentType = this.getType(sComponentTypeName);
			return oComponentType && createArrayType(oComponentType);
		} else {
			return PREDEFINED_TYPES[sTypeName] || jQuery.sap.getObject(sTypeName);
		}
	};

	/**
	 * Creates a new type as a subtype of a given type.
	 * @param {string} sName the unique name of the new type
	 * @param {object} [mSettings settings] for the new type
	 * @param {any} [mSettings.defaultValue] the default value for the new type
	 * @param {function} [mSettings.isValid] a validator function for values of the new type
	 * @param {sap.ui.base.DataType} [base] the base type for the new type
	 * @public
	 */
	sap.ui.base.DataType.createType = createType;

	// ---- minimal support for interface types ----
	
	var mInterfaces = {};
	
	/**
	 * Registers the given array of type names as known interface types.
	 * Only purpose is to enable the {@link #isInterfaceType} check.
	 * @param {string[]} aTypes interface types to be reigstered  
	 * @private
	 */
	sap.ui.base.DataType.registerInterfaceTypes = function(aTypes) {
		for(var i=0; i<aTypes.length; i++) {
			jQuery.sap.setObject(aTypes[i], mInterfaces[aTypes[i]] = new String(aTypes[i]));
		}
	};
	
	/**
	 * @param {string} sType name of type to check
	 * @return {boolean} whether the given type is known to be an interface type
	 * @private 
	 */
	sap.ui.base.DataType.isInterfaceType = function(sType) {
		return mInterfaces.hasOwnProperty(sType) && jQuery.sap.getObject(sType) === mInterfaces[sType];
	};

}());
}; // end of sap/ui/base/DataType.js
if ( !jQuery.sap.isDeclared('sap.ui.base.Exception') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.base.Exception");

/**
 * Exception class
 *
 * This is the base exception class. In contrary to the Error an Exception
 * should be thrown in cases, where the exception can, and should, be handled
 * within the framework, instead of causing the application to exit.
 *
 * The try/catch statement in JavaScript can not catch specific exceptions, so
 * when catching internal exceptions you should make sure to rethrow other errors:
 *
 * try {
 *     ...
 * }
 * catch (oException) {
 *     if (oException instanceof sap.ui.base.Exception) {
 *         ... handle exception ...
 *     }
 *     else {
 *         throw oException;
 *     }
 * }
 *
 */
sap.ui.base.Exception = function(message) {
	this.name = "Exception";
	this.message = message;
};

}; // end of sap/ui/base/Exception.js
if ( !jQuery.sap.isDeclared('sap.ui.base.Interface') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.base.Interface
jQuery.sap.declare("sap.ui.base.Interface");

/**
 * Constructs an instance of sap.ui.base.Interface which restricts access to methods marked as public.
 *
 * @class A class that creates an Interface for an existing class. If a class returns the interface in its constructor,
 *        only the defined functions will be visible, no internals of the class can be accessed.
 *
 * @author Malte Wedel, Daniel Brinkmann
 * @version 1.18.9
 * @param {sap.ui.base.Object}
 *            oObject the instance that needs an interface created
 * @param {string[]}
 *            aMethods the names of the methods, that should be available on this interface
 * @constructor
 * @public
 */
sap.ui.base.Interface = function(oObject, aMethods) {

	// if object is null or undefined, return itself
	if (!oObject) {
		return oObject;
	}

	// this function is inline to not appear as a method on the interface

	function fCreateDelegator(oObject, sMethodName) {
		return function() {
//				return oObject[sMethodName].apply(oObject, arguments);
				var tmp = oObject[sMethodName].apply(oObject, arguments);
				// to avoid to hide the implementation behind the interface you need
				// to override the getInterface function in the object
				return (tmp instanceof sap.ui.base.Object) ? tmp.getInterface() : tmp;
			};
	}

	// if there are no methods return
	if (!aMethods) {
		return {};
	}

	var sMethodName;

	// create functions for all delegated methods
	// PERFOPT: 'cache' length of aMethods to reduce # of resolutions
	for (var i = 0, ml = aMethods.length; i < ml; i++) {
		sMethodName = aMethods[i];
		this[sMethodName] = fCreateDelegator(oObject, sMethodName);
	}

};
}; // end of sap/ui/base/Interface.js
if ( !jQuery.sap.isDeclared('sap.ui.base.Metadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.base.Metadata
jQuery.sap.declare("sap.ui.base.Metadata");


/**
 * Creates a new metadata object from the given static infos.
 *
 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
 * @param {object} oClassInfo info to construct the class and its metadata from
 *
 * @class Metadata for a class.
 * @author Frank Weigel
 * @version 1.18.9
 * @since 0.8.6
 * @public
 */
sap.ui.base.Metadata = function(sClassName, oClassInfo) {

	jQuery.sap.assert(typeof sClassName === "string" && sClassName, "Metadata: sClassName must be a non-empty string");
	jQuery.sap.assert(typeof oClassInfo === "object", "Metadata: oClassInfo must be empty or an object");

	// support for old usage of Metadata
	if ( !oClassInfo || typeof oClassInfo.metadata !== "object" ) {
		oClassInfo = {
			metadata : oClassInfo || {},
			// retrieve class by its name. Using a lookup costs time but avoids the need for redundant arguments to this function
			constructor : jQuery.sap.getObject(sClassName)
		};
		oClassInfo.metadata.__version = 1.0;
	}
	oClassInfo.metadata.__version = oClassInfo.metadata.__version || 2.0;
	if ( typeof oClassInfo.constructor !== "function" ) {
		throw Error("constructor for class " + sClassName + " must have been declared before creating metadata for it");
	}

	// invariant: oClassInfo exists, oClassInfo.metadata exists, oClassInfo.constructor exists
	this._sClassName = sClassName;
	this._oClass = oClassInfo.constructor;
	this.extend(oClassInfo);
};

/**
 * @private
 * @final
 */
sap.ui.base.Metadata.prototype.extend = function(oClassInfo) {
	this.applySettings(oClassInfo);
	this.afterApplySettings();
};

/**
 * @private
 * @since 1.3.1
 */
sap.ui.base.Metadata.prototype.applySettings = function(oClassInfo) {

	var that = this,
	  oStaticInfo = oClassInfo.metadata,
		oPrototype, n;

	if ( oStaticInfo.baseType ) {
		// lookup base class by its name - same reasoning as above
		var oParentClass = jQuery.sap.getObject(oStaticInfo.baseType);
		if ( typeof oParentClass !== "function" ) {
			jQuery.sap.log.fatal("base class '" + oStaticInfo.baseType + "' does not exist");
		}
		// link metadata with base metadata
		if ( oParentClass.getMetadata ) {
			this._oParent = oParentClass.getMetadata();
			jQuery.sap.assert(oParentClass === oParentClass.getMetadata().getClass(), "Metadata: oParentClass must match the class in the parent metadata");
		} else {
			// fallback, if base class has no metadata
			this._oParent = new sap.ui.base.Metadata(oStaticInfo.baseType, {});
		}
	} else {
		this._oParent = undefined;
	}

	this._bAbstract = !!oStaticInfo["abstract"];
	this._bFinal = !!oStaticInfo["final"];
	this._sStereotype = oStaticInfo.stereotype || (this._oParent ? this._oParent._sStereotype : "object");
	
	// handle interfaces
	this._aInterfaces = jQuery.sap.unique(oStaticInfo.interfaces || []);

	// take over metadata from static info
	this._aPublicMethods = jQuery.sap.unique(oStaticInfo.publicMethods || []);

	// enrich prototype
	oPrototype = this._oClass.prototype;
	jQuery.sap.forIn(oClassInfo, function(n, v) {
		if ( n !== "metadata" && n !== "constructor" ) {
			oPrototype[n] = v;
			if ( !n.match(/^_|^on|^init$|^exit$/) ) {
				// TODO hard coded knowledge about event handlers ("on") and about init/exit hooks is not nice....
				that._aPublicMethods.push(n);
			}
		}
	});
	
};

/**
 * Called after new settings have been applied.
 *
 * Typically, this method is used to do some cleanup (e.g. uniqueness)
 * or to calculate an optimized version of some data.
 * @private
 * @since 1.3.1
 */
sap.ui.base.Metadata.prototype.afterApplySettings = function() {
	// create the flattened "all" view
	if ( this._oParent ) {
		//this._aAllInterfaces = jQuery.sap.unique(this._oParent._aAllInterfaces.concat(this._aInterfaces));
		this._aAllPublicMethods = jQuery.sap.unique(this._oParent._aAllPublicMethods.concat(this._aPublicMethods));
	} else {
		//this._aAllInterfaces = this._aInterfaces;
		this._aAllPublicMethods = this._aPublicMethods;
	}

};

/**
 * Stereotype of the described class. 
 * @experimental might be enhanced to a set of stereotypes
 */
sap.ui.base.Metadata.prototype.getStereotype = function() {
	return this._sStereotype;
};

/**
 * Returns the fully qualified name of the class that is described by this metadata object
 * @return {string} name of the described class
 * @public
 */
sap.ui.base.Metadata.prototype.getName = function() {
	return this._sClassName;
};

/**
 * Returns the (constructor of the) class described by this metadata object.
 * @return {function} class described by this metadata
 * @public
 */
sap.ui.base.Metadata.prototype.getClass = function() {
	return this._oClass;
};

/**
 * Returns the metadata object of the base class of the class described by this metadata object
 * or null if the class has no (documented) base class.
 *
 * @return {sap.ui.base.Metadata} metadata of the base class
 * @public
 */
sap.ui.base.Metadata.prototype.getParent = function() {
	return this._oParent;
};

/**
 * Returns an array with the names of the public methods declared by this class.
 *
 * @return {string[]} array with names of public methods declared by this class
 * @public
 */
sap.ui.base.Metadata.prototype.getPublicMethods = function() {
	return this._aPublicMethods;
};

/**
 * Returns an array with the names of all public methods declared by this class
 * and its ancestors.
 *
 * @return {string[]} array with names of all public methods provided by this class and its ancestors
 * @public
 */
sap.ui.base.Metadata.prototype.getAllPublicMethods = function() {
	return this._aAllPublicMethods;
};

/**
 * Returns the names of interfaces implemented by this class.
 * As the representation of interfaces is not clear yet, this method is still private.
 *
 * @return {string} array of names of implemented interfaces
 * @private
 */
sap.ui.base.Metadata.prototype.getInterfaces = function() {
	return this._aInterfaces;
};

/**
 * Checks whether the class described by this object or one of its ancestors
 * implements the given interface.
 *
 * @param {string} sInterface name of the interface to test for (in dot notation)
 * @return {boolean} whether this class implements the interface
 * @public
 */
sap.ui.base.Metadata.prototype.isInstanceOf = function(sInterface) {
	if ( this._oParent ) {
		if ( this._oParent.isInstanceOf(sInterface) ) {
			return true;
		}
	};

	var a=this._aInterfaces;
	for(var i=0,l=a.length; i<l; i++) {
		// FIXME doesn't handle interface inheritance (requires object representation for interfaces)
		if ( a[i] === sInterface ) {
			return true;
		}
	}

	return false;
};


sap.ui.base.Metadata.prototype.isAbstract = function() {
	return this._bAbstract;
};

sap.ui.base.Metadata.prototype.isFinal = function() {
	return this._bFinal;
};

/**
 * Adds one or more new methods to the list of API methods.
 *
 * Can be used by contributer classes (like the EnabledPropagator) to enrich the declared set of methods.
 * The method can either be called with multiple names (strings) or with one array of strings.
 *
 * <b>Note</b>: the newly added method(s) will only be visible in {@link sap.ui.base.Interface interface}
 * objects that are created <i>after</i> this method has been called.
 *
 * @param {string||string[]} sMethod name(s) of the new method(s)
 */
sap.ui.base.Metadata.prototype.addPublicMethods = function(sMethod /* ... */) {
	var aNames = (sMethod instanceof Array) ? sMethod : arguments;
	function upush(a,v) {
		Array.prototype.push.apply(a, v); // appends "inplace"
		jQuery.sap.unique(a);
	}
	upush(this._aPublicMethods, aNames);
	upush(this._aAllPublicMethods, aNames);
};

/**
 * @since 1.3.1
 * @private
 */
sap.ui.base.Metadata.createClass = function (fnBaseClass, sClassName, oClassInfo, FNMetaImpl) {

	if ( typeof fnBaseClass === "string" ) {
		FNMetaImpl = oClassInfo;
		oClassInfo = sClassName;
		sClassName = fnBaseClass;
		fnBaseClass = null;
	}

	jQuery.sap.assert(!fnBaseClass || typeof fnBaseClass === "function");
	jQuery.sap.assert(typeof sClassName === "string" && !!sClassName);
	jQuery.sap.assert(!oClassInfo || typeof oClassInfo === "object");
	jQuery.sap.assert(!FNMetaImpl || typeof FNMetaImpl === "function");

	// allow metadata class to preprocess 
	FNMetaImpl = FNMetaImpl || sap.ui.base.Metadata;
	if ( typeof FNMetaImpl.preprocessClassInfo === "function" ) {
		oClassInfo = FNMetaImpl.preprocessClassInfo(oClassInfo); 
	}
  
	// normalize oClassInfo
	oClassInfo = oClassInfo || {};
	oClassInfo.metadata = oClassInfo.metadata || {};
	if ( !oClassInfo.hasOwnProperty('constructor') ) {
		oClassInfo.constructor = undefined;
	}

	var fnClass = oClassInfo.constructor;
	jQuery.sap.assert(!fnClass || typeof fnClass === "function");

	// ensure defaults
	if ( fnBaseClass ) {
		// default constructor just delegates to base class
		if ( !fnClass ) {
			if ( oClassInfo.metadata.deprecated ) {
			  // create default factory with deprecation warning
				fnClass = function() {
					jQuery.sap.log.warning("Usage of deprecated class: " + sClassName);
					fnBaseClass.apply(this, arguments); 
				};
			} else {
        // create default factory 
				fnClass = function() { 
					fnBaseClass.apply(this, arguments); 
				};
			}
		}
		// create prototype chain
		fnClass.prototype = jQuery.sap.newObject(fnBaseClass.prototype);
		fnClass.prototype.constructor = fnClass;
		// enforce correct baseType
		oClassInfo.metadata.baseType = fnBaseClass.getMetadata().getName();
	} else {
		// default constructor does nothing
		fnClass = fnClass || function() { };
		// enforce correct baseType
		delete oClassInfo.metadata.baseType;
	}
	oClassInfo.constructor = fnClass;

	// make the class visible as JS Object
	jQuery.sap.setObject(sClassName, fnClass);

	// add metadata
	var oMetadata = new FNMetaImpl(sClassName, oClassInfo);
	fnClass.getMetadata = fnClass.prototype.getMetadata = jQuery.sap.getter(oMetadata);

	// enrich function
	if ( !fnClass.getMetadata().isFinal() ) {
		fnClass.extend = function(sSCName, oSCClassInfo, fnSCMetaImpl) {
			return sap.ui.base.Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);
		};
	}

	return fnClass;
};


}; // end of sap/ui/base/Metadata.js
if ( !jQuery.sap.isDeclared('sap.ui.base.Object') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * SAPUI5 base classes
 *
 * @namespace
 * @name sap.ui.base
 * @public
 */

// Provides class sap.ui.base.Object
jQuery.sap.declare("sap.ui.base.Object");



/**
 * Constructor for a sap.ui.base.Object.
 *
 * @class Base class for all SAPUI5 Objects
 * @abstract
 * @author Malte Wedel
 * @version 1.18.9
 * @public
 * @name sap.ui.base.Object
 */
sap.ui.base.Metadata.createClass("sap.ui.base.Object", {

	constructor : function() {
		// complain if 'this' is not an instance of a subclass
		if ( !(this instanceof sap.ui.base.Object) ) {
			throw Error("Cannot instantiate object: \"new\" is missing!");
		}
	}

});

/**
 * Destructor method for objects
 * @public
 */
sap.ui.base.Object.prototype.destroy = function() {
};

/**
 * Returns the public interface of the object.
 *
 * @return {sap.ui.base.Interface} the public interface of the object
 * @public
 */
sap.ui.base.Object.prototype.getInterface = function() {
	// New implementation that avoids the overhead of a dedicated member for the interface
	// initially, an Object instance has no associated Interface and the getInterface
	// method is defined only in the prototype. So the code here will be executed.
	// It creates an interface (basically the same code as in the old implementation)
	var oInterface = new sap.ui.base.Interface(this, this.getMetadata().getAllPublicMethods());
	// Now this Object instance gets a new, private implementation of getInterface
	// that returns the newly created oInterface. Future calls of getInterface on the
	// same Object therefore will return the already created interface
	this.getInterface = jQuery.sap.getter(oInterface);
	// as the first caller doesn't benefit from the new method implementation we have to
	// return the created interface as well.
	return oInterface;
};

/**
 * Returns the metadata for the class that this object belongs to.
 * 
 * This method is only defined when metadata has been declared by using {@link sap.ui.base.Object.defineClass} 
 * or {@link sap.ui.base.Object.extend}.
 *
 * @return {sap.ui.base.Metadata] metadata for the class of the object
 * @name sap.ui.base.Object.prototype#getMetadata
 * @function
 * @public
 */

/**
 * Creates a subclass of class sap.ui.base.Object with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 *
 * <code>oClassInfo</code> might contain three kinds of informations:
 * <ul>
 * <li><code>metadata:</code> an (optional) object literal with metadata about the class.
 * The information in the object literal will be wrapped by an instance of {@link sap.ui.base.Metadata Metadata}
 * and might contain the following information
 * <ul>
 * <li><code>interfaces:</code> {string[]} (optional) set of names of implemented interfaces (defaults to no interfaces)</li>
 * <li><code>publicMethods:</code> {string[]} (optional) list of methods that should be part of the public
 * facade of the class</li>
 * <li><code>abstract:</code> {boolean} (optional) flag that marks the class as abstract (purely informational, defaults to false)</li>
 * <li><code>final:</code> {boolean} (optional) flag that marks the class as final (defaults to false)</li>
 * </ul>
 * Subclasses of sap.ui.base.Object can enrich the set of supported metadata (e.g. see {@link sap.ui.core.Element.extend}).
 * </li>
 *
 * <li><code>constructor:</code> a function that serves as a constructor function for the new class.
 * If no constructor function is given, the framework creates a default implementation that delegates all
 * its arguments to the constructor function of the base class.
 * </li>
 *
 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
 * make sense to use primitive values here other than to declare public constants.
 * </li>
 *
 * </ul>
 *
 * The prototype object of the newly created class uses the same prototype as instances of the base class
 * (prototype chaining).
 *
 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
 * itself.
 *
 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
 * can be specified. Instances of that class will be used to represent metadata for the newly created class
 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
 * metadata for a new class hierarchy they introduce (e.g. {@link sap.ui.core.Element.extend Element}).
 *
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] structured object with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.base.Object.extend
 * @function
 * @since 1.3.1
 */

/**
 * Creates metadata for a given class and attaches it to the constructor and prototype of that class.
 *
 * After creation, metadata can be retrieved with getMetadata().
 *
 * The static info can at least contain the following entries:
 * <ul>
 * <li>baseType: {string} fully qualified name of a base class or empty
 * <li>publicMethods: {string} an array of method names that will be visible in the interface proxy returned by {@link #getInterface}
 * </ul>
 *
 * @param {string} sClassName name of an (already declared) constructor function
 * @param {object} oStaticInfo static info used to create the metadata object
 * @param {string} oStaticInfo.baseType qualified name of a base class
 * @param {string[]} oStaticInfo.publicMethods array of names of public methods
 * @param {function} [xMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.base.Metadata.
 *
 * @return {sap.ui.base.Metadata} the created metadata object
 * @public
 * @static
 * @deprecated Since 1.3.1. Use the static <code>extend</code> method of the desired base class (e.g. {@link sap.ui.base.Object.extend})
 */
sap.ui.base.Object.defineClass = function(sClassName, oStaticInfo, FNMetaImpl) {
	// create Metadata object
	var oMetadata = new (FNMetaImpl || sap.ui.base.Metadata)(sClassName, oStaticInfo);
	var fnClass = oMetadata.getClass();
	fnClass.getMetadata = fnClass.prototype.getMetadata = jQuery.sap.getter(oMetadata);
	// enrich function
	if ( !oMetadata.isFinal() ) {
		fnClass.extend = function(sSCName, oSCClassInfo, fnSCMetaImpl) {
			return sap.ui.base.Metadata.createClass(fnClass, sSCName, oSCClassInfo, fnSCMetaImpl || FNMetaImpl);
		};
	}
	jQuery.sap.log.debug("defined class '" + sClassName + "'" + (oMetadata.getParent() ? " as subclass of " + oMetadata.getParent().getName() : "") );
	return oMetadata;
};

}; // end of sap/ui/base/Object.js
if ( !jQuery.sap.isDeclared('sap.ui.base.ObjectPool') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.base.ObjectPool
jQuery.sap.declare("sap.ui.base.ObjectPool");


/**
 * Creates an ObjectPool instance based on the given oObjectClass.&lt;br/&gt;
 * If there is a free pooled instance, returns that one, otherwise creates a new one.&lt;br/&gt;
 * In order to be maintained by the ObjectPool, oObjectClass must implement
 * methods described in the class description.
 *
 * @param {function} oObjectClass constructor for the class of objects that this pool should manage
 *
 * @class Manages a pool of objects all of the same type;
 * the type has to be specified at pool construction time.
 *
 * Maintains a list of free objects of the given type.
 * If {@link sap.ui.base.ObjectPool.prototype.borrowObject} is called, an existing free object
 * is taken from the pool and the <code>init</code> method is called on this
 * object.
 *
 * When no longer needed, any borrowed object should be returned to
 * the pool by calling {@link #returnObject}. At that point in time,
 * the reset method is called on the object and the object is added to the
 * list of free objects.
 *
 * See {@link sap.ui.base.Poolable} for a description of the contract for poolable objects.
 *
 * Example:
 * <pre>
 *   this.oEventPool = new sap.ui.base.ObjectPool(sap.ui.base.Event);
 *   var oEvent = this.oEventPool.borrowObject(iEventId, mParameters);
 * </pre>
 *
 * @extends sap.ui.base.Object
 * @author Malte Wedel
 * @version 1.18.9
 * @constructor
 * @name sap.ui.base.ObjectPool
 * @public
 */
sap.ui.base.Object.extend("sap.ui.base.ObjectPool", /** @lends sap.ui.base.ObjectPool */ {
	constructor: function(oObjectClass) {
	
		sap.ui.base.Object.apply(this);
	
		this.oObjectClass = oObjectClass;
	
		this.aFreeObjects = [];
	//	this.aUsedObjects = []; //PERFOPT: Holding those is currently senseless.
	
	}
});

/**
 * Borrows a free object from the pool. Any arguments to this method
 * are forwarded to the init method of the borrowed object.
 *
 * @param {any} [any] optional initialization parameters for the borrowed object
 * @return {object} the borrowed object of the same type that has been specified for this pool
 * @public
 */
sap.ui.base.ObjectPool.prototype.borrowObject = function() {

	// PERFOPT: Reduced callstack
	var oObject = this.aFreeObjects.length == 0 ?
			new this.oObjectClass() :
				this.aFreeObjects.pop();
	oObject.init.apply(oObject, arguments);
//	this.aUsedObjects.push(oObject); //PERFOPT: Holding those is currently senseless.

	return oObject;
};

/**
 * Returns an object to the pool. The object must have been borrowed from this
 * pool beforehand. The reset method is called on the object before it is added
 * to the set of free objects.
 *
 * @param {object} the object to return to the pool
 * @public
 */
sap.ui.base.ObjectPool.prototype.returnObject = function(oObject) {

	oObject.reset();
	// If the next line is ever activated again, ensure not simply the topmost object is poped but the one returned!!
//	this.aUsedObjects.pop(); //PERFOPT: Holding those is currently senseless.
	this.aFreeObjects.push(oObject);

};


/**
 * Poolable objects must provide a no-arg constructor which is used by the pool
 * to construct new, unused objects.
 *
 * To be more convenient to use, poolable objects should implement their constructor
 * in a way that it either can be called with no arguments (used by the pool) or
 * with the same signature as their {@link #init} method (to be used by applications).
 *
 * @name sap.ui.base.Poolable
 * @interface Contract for objects that can be pooled by ObjectPool
 * @constructor
 * @public
 */

/**
 * Called by the object pool when this instance will be actived for a caller.
 * The same method will be called after a new instance has been created by an otherwise
 * exhausted pool.
 *
 * If the caller provided any arguments to {@link sap.ui.base.ObjectPool#borrowObject}
 * all arguments will be propagated to this method.
 *
 * @name sap.ui.base.Poolable.prototype.init
 * @function
 * @public
 */

/**
 * Called by the object pool when an instance is returned to the pool.
 * While no specific implementation is required, poolable objects in general
 * should clean all caller specific state (set to null) in this method to
 * avoid memory leaks and to enforce garbage collection of the caller state.
 *
 * @name sap.ui.base.Poolable.prototype.reset
 * @function
 * @public
 */
}; // end of sap/ui/base/ObjectPool.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ComponentContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// A renderer for the ComponentContainer control
jQuery.sap.declare("sap.ui.core.ComponentContainerRenderer");

/**
 * @class ComponentContainer renderer.
 * @static
 */
sap.ui.core.ComponentContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl Object representation of the control that should be rendered
 */
sap.ui.core.ComponentContainerRenderer.render = function(oRenderManager, oComponentContainer){

    // convenience variable
	var oRM = oRenderManager;
	var bRTL = sap.ui.getCore().getConfiguration().getRTL();
	var oComponent = oComponentContainer.getComponentInstance();
	var sWidth = oComponentContainer.getWidth();
	var sHeight = oComponentContainer.getHeight();
	
	oRM.write("<div");
	oRM.writeControlData(oComponentContainer);
	if (sWidth) {
		oRM.addStyle("width", sWidth);
	}
	if (sHeight) {
		oRM.addStyle("height", sHeight);
	}
	oRM.writeStyles();
	oRM.addClass("sapUiComponentContainer"); // this class can be used to be able to style the container, for example for support or demo reasons
	oRM.writeClasses();
	oRM.write(">");
	oRM.write("<div id=\"" + oComponentContainer.getId() + "-uiarea\"");
	if (sWidth && sWidth !== "auto") {
		oRM.addStyle("width", "100%"); // if a width is specified we use 100% width for the uiarea
	}
	if (sHeight && sHeight !== "auto") {
		oRM.addStyle("height", "100%"); // if a height is specified we use 100% height for the uiarea
	}
	oRM.writeStyles();
	oRM.write(">");
	if (oComponent) {
		oComponent.render(oRM);
	}
	oRM.write("</div></div>");
};


}; // end of sap/ui/core/ComponentContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.DeclarativeSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.DeclarativeSupport
jQuery.sap.declare("sap.ui.core.DeclarativeSupport");





/**
 * @class Static class for enabling declarative UI support.  
 *
 * @author Peter Muessig, Tino Butz
 * @version 1.18.9
 * @since 1.7.0
 * @public
 */
sap.ui.core.DeclarativeSupport = {
};



/**
 * Defines the attributes of an element that should be handled differently.
 * Set key/value pairs. The key indicates the attribute. The value can be of type <code>Boolean</code> or <code>Function</code>.
 * When the value is of type <code>Function</code> it will receive three arguments: 
 * <code>sValue</code> the value of the attribute,
 * <code>mSettings</code> the settings of the control
 * <code>fnClass</code> the control class
 * @private
 */
sap.ui.core.DeclarativeSupport.attributes = {
	"data-sap-ui-type" : true,
	"data-sap-ui-aggregation" : true,
	"data-sap-ui-default-aggregation" : true,
	"data-sap-ui-binding" : function(sValue, mSettings) {
		var oBindingInfo = sap.ui.base.ManagedObject.bindingParser(sValue);
		// TODO reject complex bindings, types, formatters; enable 'parameters'? 
		mSettings.objectBindings = mSettings.objectBindings || {};
		mSettings.objectBindings[oBindingInfo.model || undefined] = oBindingInfo;
	},
	"data-tooltip" : function(sValue, mSettings) {
		// special handling for tooltip (which is an aggregation)
		// but can also be applied as property
		mSettings["tooltip"] = sValue;
	},
	"tooltip" : function(sValue, mSettings, fnClass) {
		// TODO: Remove this key / value when deprecation is removed
		mSettings["tooltip"] = sValue;
		jQuery.sap.log.warning('[Deprecated] Control "' + mSettings.id + '": The attribute "tooltip" is not prefixed with "data-*". Future version of declarative support will only suppport attributes with "data-*" prefix.');
	},
	"class":true,
	"style" : true,
	"id" : true
};


/**
 * Enhances the given DOM element by parsing the Control and Elements info and creating
 * the SAPUI5 controls for them.
 * 
 * @param {DomElement} oElement the element to compile
 * @param {sap.ui.core.mvc.HTMLView} [oView] The view instance to use
 * @param {boolean} [isRecursive] Whether the call of the function is recursive.
 * @public
 */
sap.ui.core.DeclarativeSupport.compile = function(oElement, oView, isRecursive) {
	// Find all defined classes
	var self = this;
	jQuery(oElement).find("[data-sap-ui-type]").filter(function() {
		return jQuery(this).parents("[data-sap-ui-type]").length === 0;
	}).each(function() {
		self._compile(this, oView, isRecursive);
	});
};



/**
 * Enhances the given element by parsing the attributes and child elements.
 * 
 * @param {DomElement} oElement the element to compile
 * @param {sap.ui.core.mvc.HTMLView} [oView] The view instance to use
 * @param {boolean} [isRecursive] Whether the call of the function is recursive.
 * @private
 */
sap.ui.core.DeclarativeSupport._compile = function(oElement, oView, isRecursive) {
	var $element = jQuery(oElement);

	var sType = $element.attr("data-sap-ui-type");
	var aControls = [];
	var bIsUIArea = sType === "sap.ui.core.UIArea";

	if (bIsUIArea) {
		// use a UIArea / better performance when rendering multiple controls
		// parse and create the controls / children of element
		var self = this;
		$element.children().each(function() {
			var oControl = self._createControl(this, oView);
			if (oControl) {
				aControls.push(oControl);
			}
		}); 
	} else {
		var oControl = this._createControl(oElement, oView);
		if (oControl) {
			aControls.push(oControl);
		}
	}
	
	// remove the old content
	$element.empty();

	// in case of the root control is not a UIArea we remove all HTML attributes
	// for a UIArea we remove only the data HTML attributes and keep the others
	// also marks the control as parsed (by removing data-sap-ui-type) 
	var aAttr = [];
	jQuery.each(oElement.attributes, function(iIndex, oAttr) {
		var sName = oAttr.name;
		if (!bIsUIArea || bIsUIArea && /^data-/g.test(sName.toLowerCase())) {
			aAttr.push(sName);
		}
	});
	if (aAttr.length > 0) {
		$element.removeAttr(aAttr.join(" "));
	}

	// add the controls
	jQuery.each(aControls, function(vKey, oControl) {
		if (oControl instanceof sap.ui.core.Control) {
			if (oView && !isRecursive) {
				oView.addContent(oControl);
			} else {
				oControl.placeAt(oElement);
				if (oView) {
					// Remember the unassociated control so that it can be destroyed on exit of the view
					oView.connectControl(oControl);	
				}
			}
		}
	});
};



/**
 * Parses a given DOM ref and converts it into a Control.
 * @param {DomElement} oElement reference to a DOM element
 * @param {sap.ui.core.mvc.HTMLView} [oView] The view instance to use.
 * @return {sap.ui.core.Control} reference to a Control
 * @private
 */
sap.ui.core.DeclarativeSupport._createControl = function(oElement, oView) {
	var $element = jQuery(oElement);

	var oControl = null;

	var sType = $element.attr("data-sap-ui-type");
	if (sType) {
		jQuery.sap.require(sType); // make sure fnClass.getMatadata() is available
		var fnClass = jQuery.sap.getObject(sType);
		jQuery.sap.assert(typeof fnClass !== "undefined", "Class not found: " + sType);
		
			
		var mSettings = {};
		var sId = mSettings.id = this._getId($element, oView);
		this._addSettingsForAttributes(mSettings, fnClass, oElement, oView);
		this._addSettingsForAggregations(mSettings, fnClass, oElement, oView);

		var oControl;
		if (sap.ui.core.mvc.View.prototype.isPrototypeOf(fnClass.prototype) && typeof fnClass._sType === "string") {
			// for views having a factory function defined we use the factory function!
			oControl = sap.ui.view(mSettings, undefined, fnClass._sType);
		} else {
			oControl = new fnClass(mSettings);
		}

		if (oElement.className) {
			oControl.addStyleClass(oElement.className);	
		}

		// mark control as parsed
		$element.removeAttr("data-sap-ui-type");

	} else {
		oControl = this._createHtmlControl(oElement, oView);
	}

	return oControl;
};


/**
 * Parses a given DOM ref and converts it into a HTMLControl.
 * @param {DomElement} oElement reference to a DOM element
 * @param {sap.ui.core.mvc.HTMLView} [oView] The view instance to use.
 * @return {sap.ui.core.HTML} reference to a Control
 * @private
 */
sap.ui.core.DeclarativeSupport._createHtmlControl = function(oElement, oView) {
	//include HTML content
	var oHTML = new sap.ui.core.HTML();
	oHTML.setDOMContent(oElement);
	// check for declarative content
	this.compile(oElement, oView, true)
	return oHTML;	
};


/**
 * Adds all defined attributes to the settings object of a control.
 * 
 * @param {object} mSettings reference of the settings of the control
 * @param {function} fnClass reference to a Class
 * @param {DomElement} oElement reference to a DOM element
 * @param {sap.ui.core.mvc.HTMLView} [oView] The view instance to use.
 * @return {object} the settings of the control.
 * @throws {Error} if an attribute is not supported
 * @private
 */
sap.ui.core.DeclarativeSupport._addSettingsForAttributes = function(mSettings, fnClass, oElement, oView) {	
	var self = this;
	var oSpecialAttributes = sap.ui.core.DeclarativeSupport.attributes;
	var fnBindingParser = sap.ui.base.ManagedObject.bindingParser;
	var aCustomData = [];
	var reCustomData = /^data-custom-data:(.+)/i;

	jQuery.each(oElement.attributes, function(iIndex, oAttr) {
		var sName = oAttr.name;
		var sValue = oAttr.value;
		
		if (!reCustomData.test(sName)) {

			// no custom data attribute:
			
			if (typeof oSpecialAttributes[sName] === "undefined") {
				sName = self.convertAttributeToSettingName(sName, mSettings.id);
				var oProperty = self._getProperty(fnClass, sName);
				if (oProperty) {
					var oBindingInfo = fnBindingParser(sValue, oView && oView.getController(), true );
					if ( oBindingInfo && typeof oBindingInfo === "object" ) {
						mSettings[sName] = oBindingInfo;
					} else {
						mSettings[sName] = self.convertValueToType(self.getPropertyDataType(oProperty), oBindingInfo || sValue);
					}
				} else if (self._getAssociation(fnClass, sName)) {
					var oAssociation = self._getAssociation(fnClass, sName);
					if (oAssociation.multiple) {
						// we support "," and " " to split between IDs
						sValue = sValue.replace(/\s*,\s*|\s+/g, ","); // normalize strings: "id1  ,    id2    id3" to "id1,id2,id3"
						var aId = sValue.split(","); // split array for all ","
						jQuery.each(aId, function(iIndex, sId) {
							aId[iIndex] = oView ? oView.createId(sId) : sId;
						});
						mSettings[sName] = aId;
					} else {
						mSettings[sName] = oView ? oView.createId(sValue) : sValue; // use the value as ID
					}
				} else if (self._getAggregation(fnClass, sName)) {
					var oAggregation = self._getAggregation(fnClass, sName);
					if (oAggregation.multiple) {
						var oBindingInfo = fnBindingParser(sValue, oView && oView.getController());
						if (oBindingInfo) {
							mSettings[sName] = oBindingInfo;
						} else {
							throw new Error("Aggregation " + sName + " with cardinality 0..n only allows binding paths as attribute value");
						}
					} else if (oAggregation.altTypes) {
						var oBindingInfo = fnBindingParser(sValue, oView && oView.getController(), true);
						if ( oBindingInfo && typeof oBindingInfo === "object" ) {
							mSettings[sName] = oBindingInfo;
						} else {
							mSettings[sName] = self.convertValueToType(oAggregation.altTypes[0], oBindingInfo || sValue);
						}
					} else {
						throw new Error("Aggregation " + sName + " not supported");
					}
				} else if (self._getEvent(fnClass, sName)) {
					var fnHandler = jQuery.sap.getObject(sValue);
					
					if (oView && typeof fnHandler === "undefined") {
						var oController = (oView._oContainingView || oView).getController();
						fnHandler = oController[sValue];
						if (typeof fnHandler === "function") {
							// the handler name is set as property on the function to keep this information
							// e.g. for serializers which converts a control tree back to a declarative format
							// TODO: Remember events and attach them without using jQuery proxy
							fnHandler = jQuery.proxy(fnHandler, oController);
							fnHandler._sapui_handlerName = sValue;
						}
					}

					if (typeof fnHandler === "function") {
						mSettings[sName] = fnHandler;
					} else {
						throw new Error('Control "' + mSettings.id + '": The function "' + sValue + '" for the event "' + sName + '" is not defined');
						
					}
				}
			} else if (typeof oSpecialAttributes[sName] === "function") {
				oSpecialAttributes[sName](sValue, mSettings, fnClass);
			}
			
		} else {

			// custom data handling:

			// determine the key of the custom data entry
			sName = jQuery.sap.camelCase(reCustomData.exec(sName)[1]);

			// create a binding info object if necessary
			var oBindingInfo = fnBindingParser(sValue, oView && oView.getController());

			// create the custom data object
			aCustomData.push(new sap.ui.core.CustomData({
				key: sName,
				value: oBindingInfo || sValue
			}));

		}

	});
	
	if (aCustomData.length > 0) {
		mSettings.customData = aCustomData;
	}
	
	return mSettings;
};


/**
 * Adds all defined aggregations to the settings object of a control.
 * 
 * @param {object} mSettings reference of the settings of the control
 * @param {function} fnClass reference to a Class
 * @param {DomElement} oElement reference to a DOM element
 * @param {sap.ui.core.mvc.HTMLView} [oView] The view instance to use.
 * @return {object} the settings of the control.
 * @private
 */
sap.ui.core.DeclarativeSupport._addSettingsForAggregations = function(mSettings, fnClass, oElement, oView) {
	var $element = jQuery(oElement);

	var sDefaultAggregation = this._getDefaultAggregation(fnClass, oElement);

	var self = this;
	var oAggregations = fnClass.getMetadata().getAllAggregations();

	$element.children().each(function() {
		// check for an aggregation tag of in case of a sepcifiying the
		// aggregration on the parent control this will be used in case
		// of no meta tag was found
		var $child = jQuery(this);
		var sAggregation = $child.attr("data-sap-ui-aggregation");
		var sType = $child.attr("data-sap-ui-type");

		var bUseDefault = false;
		if (!sAggregation) {
			bUseDefault = true;
			sAggregation = sDefaultAggregation;
		}

		// add the child to the aggregation
		if (sAggregation && oAggregations[sAggregation]) {
			var bMultiple = oAggregations[sAggregation].multiple;

			var addControl = function(oChildElement) {
				var oControl = self._createControl(oChildElement, oView);
				if (oControl) {
					if (bMultiple) {
						// 1..n AGGREGATION
						if (!mSettings[sAggregation]) {
							mSettings[sAggregation] = [];
						}
						if ( typeof mSettings[sAggregation].path === "string" ) {
							jQuery.sap.assert(!mSettings[sAggregation].template, "list bindings support only a single template object");
							mSettings[sAggregation].template = oControl;
						} else {
							mSettings[sAggregation].push(oControl);
						}

					} else {
						// 1..1 AGGREGATION
						mSettings[sAggregation] = oControl;
					}
				}
			};

			if (bUseDefault || (sType && !bUseDefault)) {
				addControl(this);
			} else {
				$child.children().each(function() {
					addControl(this);
				});
			}
		}

		$child.removeAttr("data-sap-ui-aggregation");
		$child.removeAttr("data-sap-ui-type");
	});
	return mSettings;
	
};


/**
 * Returns the id of the element.
 *
 * @param {DomElement} oElement reference to a DOM element
 * @param {sap.ui.core.mvc.HTMLView} [oView] The view instance to use.
 * @return {string} the id of the element
 * @private
 */
sap.ui.core.DeclarativeSupport._getId = function(oElement, oView) {
	var $element = jQuery(oElement);
	var sId = $element.attr("id");
	if (sId) {
		if (oView) {
			sId = oView.createId(sId);
			// Remember the id for the HTMLView rendering method. This is needed to replace the placeholder div with the actual
			// control HTML (Do not use ID as Firefox even finds detached IDs)
			$element.attr("data-sap-ui-id", sId);
		}
		// in case of having an ID retrieve it and clear it in the placeholder
		// DOM element to avoid double IDs
		$element.attr("id", "");	
	}
	return sId;
};


/**
 * Returns the property of a given class and property name.
 *
 * @param {function} fnClass reference to a Class
 * @param {string} sName the name of the property
 * @return {object} reference to the property object
 * @private
 */
sap.ui.core.DeclarativeSupport._getProperty = function(fnClass, sName) {
	return fnClass.getMetadata().getAllProperties()[sName];
};


/**
 * Converts a given value to the right property type.
 *
 * @param {object} oType the type of the value
 * @param {string} sValue the value to convert
 * @return {string} the converted value
 * @private
 */
sap.ui.core.DeclarativeSupport.convertValueToType = function(oType, sValue) {
	if (oType instanceof sap.ui.base.DataType) {
		sValue = oType.parseValue(sValue);
	}
	// else return original sValue (e.g. for enums)
	// Note: to avoid double resolution of binding expressions, we have to escape string values once again 
	return typeof sValue === "string" ? sap.ui.base.ManagedObject.bindingParser.escape(sValue) : sValue;
};


/**
 * Returns the data type object for a certain property.
 *
 * @param {object} oProperty reference to the property object
 * @return {object} the type of the property
 * @throws {Error} if no type for the property is found
 * @private
 */
sap.ui.core.DeclarativeSupport.getPropertyDataType = function(oProperty) {
	var oType = sap.ui.base.DataType.getType(oProperty.type);
	if (!oType) {
		throw new Error("Property " + oProperty.name + " has no known type");
	}
	return oType;
};



/**
 * Returns the settings name for a given html attribute (converts data-my-setting to mySetting)
 *
 * @param {string} sAttribute the name of the attribute
 * @param {string} sId the id of the control
 * @param {boolean} bDeprecationWarning whether to show a deprecation warning or not
 * @return {string} the settings name
 * @private
 */
sap.ui.core.DeclarativeSupport.convertAttributeToSettingName = function(sAttribute, sId, bDeprecationWarning) {
	if (sAttribute.indexOf("data-") === 0) {
		sAttribute = sAttribute.substr(5);
	} else if (bDeprecationWarning) {
		jQuery.sap.log.warning('[Deprecated] Control "' + sId + '": The attribute "' + sAttribute + '" is not prefixed with "data-*". Future version of declarative support will only suppport attributes with "data-*" prefix.');
	} else {
		throw new Error('Control "' + sId + '": The attribute "' + sAttribute + '" is not prefixed with "data-*".');
	}
	return jQuery.sap.camelCase(sAttribute);
};


/**
 * Returns the association of a given class and association name.
 *
 * @param {function} fnClass reference to a Class
 * @param {string} sName the name of the association
 * @return {object} reference to the association object
 * @private
 */
sap.ui.core.DeclarativeSupport._getAssociation = function(fnClass, sName) {
	return fnClass.getMetadata().getAllAssociations()[sName];
};

/**
 * Returns the aggregations of a given class and aggregation name.
 *
 * @param {function} fnClass reference to a Class
 * @param {string} sName the name of the association
 * @return {object} reference to the association object
 * @private
 */
sap.ui.core.DeclarativeSupport._getAggregation = function(fnClass, sName) {
	return fnClass.getMetadata().getAllAggregations()[sName];
};


/**
 * Returns the event of a given class and event name.
 *
 * @param {function} fnClass reference to a Class
 * @param {string} sName the name of the event
 * @return {object} reference to the event object
 * @private
 */
sap.ui.core.DeclarativeSupport._getEvent = function(fnClass, sName) {
	return fnClass.getMetadata().getAllEvents()[sName];
};


/**
 * Returns the default aggregation of the control.
 *
 * @param {function} fnClass reference to a Class
 * @param {DomElement} oElement reference to a DOM element
 * @return {string} the default aggregation
 * @private
 */
sap.ui.core.DeclarativeSupport._getDefaultAggregation = function(fnClass, oElement) {
	var $element = jQuery(oElement);
	var sDefaultAggregation = $element.attr("data-sap-ui-default-aggregation") || fnClass.getMetadata().getDefaultAggregationName();
	$element.removeAttr("data-sap-ui-default-aggregation");
	return sDefaultAggregation;
};

}; // end of sap/ui/core/DeclarativeSupport.js
if ( !jQuery.sap.isDeclared('sap.ui.core.HTMLRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// A renderer for the HTML control
jQuery.sap.declare("sap.ui.core.HTMLRenderer");

sap.ui.core.HTMLRenderer = {

	/**
	 * Renders either the configured content or a dummy div that will be replaced after rendering
	 */
	render : function(oRM, oControl) {
		var oUIArea = oControl.getUIArea();

		// render an invisible, but easily identifiable placeholder for the content
		oRM.write("<div id=\"sap-ui-dummy-" + oControl.getId() + "\" style=\"display:none\">");

		// Note: we do not render the content string here, but only in onAfterRendering
		// This has the advantage that syntax errors don't affect the whole control tree
		// but only this control...

		oRM.write("</div>");
	}

};
}; // end of sap/ui/core/HTMLRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.History') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

//Provides the history handler sap.ui.core.History
jQuery.sap.declare("sap.ui.core.History");



/**
 * Creates an instance of the History.
 * 
 * Attention: The Web Storage API which is used by this class stores the data on the client.
 * Therefore do not use this API for confidential information. 
 *
 * @class History handles the history of certain controls (e.g. sap.ui.commons.SearchField).
 *
 * @param {string} sId id for the history
 * @param {object} [mSettings] optional map/JSON-object with additional settings
 *
 * @extends sap.ui.base.Object
 * @author SAP AG
 * @version 1.18.9
 * @constructor
 * @name sap.ui.core.History
 * @private
 */
sap.ui.base.Object.extend("sap.ui.core.History", /** @lends sap.ui.core.History.prototype */ {

	constructor : function(sId, mSettings) {
		sap.ui.base.Object.apply(this);
		if(!mSettings){
			mSettings = {};
		}

		var sHistoryPrefix = mSettings.prefix ? mSettings.prefix : document.location.pathname;

		this._iMaxHistory = mSettings.max ? mSettings.max : 100;
		this._sHistoryId = sHistoryPrefix + sId;
		var that = this;

		jQuery.sap.require("jquery.sap.storage");
		this._oStorage = jQuery.sap.storage(jQuery.sap.storage.Type.local);

		this._fFilter = mSettings.filter ? mSettings.filter : function(sHistoryValue, sValue) {
			return sHistoryValue && (!sValue || (sValue && jQuery.sap.startsWithIgnoreCase(sHistoryValue, sValue)));
		};
		this._fCheckHistory = mSettings.checkHistory ? mSettings.checkHistory : function(aHistory) {
			return aHistory;
		};
	},

	/**
	 * Initializes the history if not already done.
	 *
	 * @private
	 */
	_initHistory : function() {
		if(!this._aHistory){
			var aHistory = this._oStorage.get(this._sHistoryId);
			if(typeof(aHistory) === "string") {
				// in case it is a string, convert it to an array
				aHistory = aHistory.split(",");
			} else if(!aHistory){
				// or create a new one in case of non existence
				aHistory = [];
			} // else assume that there is the means for serializing JSON used, returning an array directly
			//do a final check of the entries
			this._aHistory = this._fCheckHistory(aHistory);
		}
		return this._aHistory;
	},

	/**
	 * Returns the history values fitting to the given value (according to the specified filter.
	 *
	 * @private
	 */
	get : function(sValue) {
		var aHistory = this._initHistory();
		var aResult = [];
		for(var i=0; i<aHistory.length; i++){
			if(this._fFilter(aHistory[i], sValue)){
				aResult.push(aHistory[i]);
			}
		}
		return aResult;
	},

	/**
	 * Removes the given value from the history values.
	 *
	 * @private
	 */
	remove : function(sValue) {
		var aHistory = this._initHistory();
		var aResult = [];
		for(var i=0; i<aHistory.length; i++){
			if(aHistory[i] == sValue) {
				aHistory.splice(i, 1);
				break;
			}
		}
	},

	/**
	 * Adds the given value to the history.
	 *
	 * @private
	 */
	add : function(sValue) {
		var aHistory = this._initHistory();
		// ensure it is not contained twice -> remove
		for(var i=0; i<aHistory.length; i++){
			if(aHistory[i] === sValue){
				aHistory.splice(i,1);
				break;
			}
		}
		// and put it to the 'very top'
		aHistory.unshift(sValue);
		// but do not store more than specified
		if(aHistory.length > this._iMaxHistory) {
			aHistory.splice(this._iMaxHistory);
		}

		this._oStorage.put(this._sHistoryId, aHistory);
	},

	/**
	 * Clears the history.
	 *
	 * @private
	 */
	clear : function() {
		this._oStorage.remove(this._sHistoryId);
		this._aHistory = null;
	}

});

}; // end of sap/ui/core/History.js
if ( !jQuery.sap.isDeclared('sap.ui.core.IconPool') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.core.IconPool");


(function(){
	if(sap.ui.core.IconPool){
		return;
	}
	var aIconNames = ["accidental-leave","account","wrench","windows-doors","washing-machine","visits","video","travel-expense","temperature","task","synchronize","survey","settings","search","sales-document","retail-store","refresh","product","present","ppt-attachment","pool","pie-chart","picture","photo-voltaic","phone","pending","pdf-attachment","past","outgoing-call","opportunity","opportunities","notes","money-bills","map","log","line-charts","lightbulb","leads","lead","laptop","kpi-managing-my-area","kpi-corporate-performance","incoming-call","inbox","horizontal-bar-chart","history","heating-cooling","gantt-bars","future","fridge","fallback","expense-report","excel-attachment","energy-saving-lightbulb","employee","email","edit","duplicate","download","doc-attachment","dishwasher","delete","decline","complete","competitor","collections-management","chalkboard","cart","card","camera","calendar","begin","basket","bar-chart","attachment","arrow-top","arrow-right","arrow-left","arrow-bottom","approvals","appointment","alphabetical-order","along-stacked-chart","alert","addresses","address-book","add-filter","add-favorite","add","activities","action","accept","hint","group","check-availability","weather-proofing","payment-approval","batch-payments","bed","arobase","family-care","favorite","navigation-right-arrow","navigation-left-arrow","e-care","less","lateness","lab","internet-browser","instance","inspection","image-viewer","home","grid","goalseek","general-leave-request","create-leave-request","flight","filter","favorite-list","factory","endoscopy","employee-pane","employee-approvals","email-read","electrocardiogram","documents","decision","database","customer-history","customer","credit-card","create-entry-time","contacts","compare","clinical-order","chain-link","pull-down","cargo-train","car-rental","business-card","bar-code","folder-blank","passenger-train","question-mark","world","iphone","ipad","warning","sort","course-book","course-program","add-coursebook","print","save","play","pause","record","response","pushpin-on","pushpin-off","unfavorite","learning-assistant","timesheet","time-entry-request","list","action-settings","share","feed","role","flag","post","inspect","inspect-down","appointment-2","target-group","marketing-campaign","notification","comment","shipping-status","collaborate","shortcut","lead-outdated","tools-opportunity","permission","supplier","table-view","table-chart","switch-views","e-learning","manager","switch-classes","simple-payment","signature","sales-order-item","sales-order","request","receipt","puzzle","process","private","popup-window","person-placeholder","per-diem","paper-plane","paid-leave","pdf-reader","overview-chart","overlay","org-chart","number-sign","notification-2","my-sales-order","meal","loan","order-status","customer-order-entry","performance","menu","employee-lookup","education","customer-briefing","customer-and-contacts","my-view","accelerated","to-be-reviewed","warning2","feeder-arrow","quality-issue","workflow-tasks","create","home-share","globe","tags","work-history","x-ray","wounds-doc","web-cam","waiver","vertical-bar-chart","upstacked-chart","trip-report","microphone","unpaid-leave","tree","toaster-up","toaster-top","toaster-down","time-account","theater","taxi","subway-train","study-leave","stethoscope","step","sonography","soccor","physical-activity","pharmacy","official-service","offsite-work","nutrition-activity","newspaper","monitor-payments","map-2","machine","mri-scan","end-user-experience-monitoring","unwired","customer-financial-fact-sheet","retail-store-manager","Netweaver-business-client","electronic-medical-record","eam-work-order","customer-view","crm-service-manager","crm-sales","widgets","commission-check","collections-insight","clinical-tast-tracker","citizen-connect","cart-approval","capital-projects","bo-strategy-management","business-objects-mobile","business-objects-explorer","business-objects-experience","bbyd-dashboard","bbyd-active-sales","business-by-design","business-one","sap-box","manager-insight","accounting-document-verification","hr-approval","idea-wall","Chart-Tree-Map","cart-5","cart-4","wallet","vehicle-repair","upload","unlocked","umbrella","travel-request","travel-expense-report","travel-itinerary","time-overtime","thing-type","technical-object","tag","syringe","syntax","suitcase","simulate","shield","share-2","sales-quote","repost","provision","projector","add-product","pipeline-analysis","add-photo","palette","nurse","sales-notification","mileage","meeting-room","media-forward","media-play","media-pause","media-reverse","media-rewind","measurement-document","measuring-point","measure","map-3","locked","letter","journey-arrive","journey-change","journey-depart","it-system","it-instance","it-host","iphone-2","ipad-2","inventory","insurance-house","insurance-life","insurance-car","initiative","incident","group-2","goal","functional-location","full-screen","form","fob-watch","blank-tag","family-protection","folder","fax-machine","example","eraser","employee-rejections","drop-down-list","draw-rectangle","document","doctor","discussion-2","discussion","dimension","customer-and-supplier","crop","add-contact","compare-2","color-fill","collision","curriculum","chart-axis","full-stacked-chart","full-stacked-column-chart","vertical-bar-chart-2","horizontal-bar-chart-2","horizontal-stacked-chart","vertical-stacked-chart","choropleth-chart","geographic-bubble-chart","multiple-radar-chart","radar-chart","crossed-line-chart","multiple-line-chart","multiple-bar-chart","line-chart","line-chart-dual-axis","bubble-chart","scatter-chart","multiple-pie-chart","column-chart-dual-axis","tag-cloud-chart","area-chart","cause","cart-3","cart-2","bus-public-transport","burglary","building","border","bookmark","badge","attachment-audio","attachment-video","attachment-html","attachment-photo","attachment-e-pub","attachment-zip-file","attachment-text-file","add-equipment","add-activity","activity-individual","activity-2","add-activity-2","activity-items","activity-assigned-to-goal","status-completed","status-error","status-inactive","status-in-process","blank-tag-2","cart-full","locate-me","paging","company-view","document-text","explorer","personnel-view","sorting-ranking","drill-down","drill-up","vds-file","sap-logo-shape","folder-full","system-exit","system-exit-2","close-command-field","open-command-field","sys-enter-2","sys-enter","sys-help-2","sys-help","sys-back","sys-back-2","sys-cancel","sys-cancel-2","open-folder","sys-find-next","sys-find","sys-monitor","sys-prev-page","sys-first-page","sys-next-page","sys-last-page","generate-shortcut","create-session","display-more","enter-more","zoom-in","zoom-out","header","detail-view","collapse","expand","positive","negative","display","menu2","redo","undo","navigation-up-arrow","navigation-down-arrow","down","up","shelf","background","resize","move","show","hide","nav-back","error", "slim-arrow-right", "slim-arrow-left", "slim-arrow-down", "slim-arrow-up", "forward", "overflow", "value-help", "multi-select", "exit-full-screen"];
	var aIconCodes = ["e000","e001","e002","e003","e004","e005","e006","e007","e008","e009","e00a","e00b","e00c","e00d","e00e","e00f","e010","e011","e012","e013","e014","e015","e016","e017","e018","e019","e01a","e01b","e01c","e01d","e01e","e01f","e020","e021","e022","e023","e024","e025","e026","e027","e028","e029","e02a","e02b","e02c","e02d","e02e","e02f","e030","e031","e032","e033","e034","e035","e036","e037","e038","e039","e03a","e03b","e03c","e03d","e03e","e03f","e040","e041","e042","e043","e044","e045","e046","e047","e048","e049","e04a","e04b","e04c","e04d","e04e","e04f","e050","e051","e052","e053","e054","e055","e056","e057","e058","e059","e05a","e05b","e05c","e05d","e05e","e05f","e060","e061","e062","e063","e064","e065","e066","e067","e068","e069","e06a","e06b","e06c","e06d","e06e","e06f","e070","e071","e072","e073","e074","e075","e076","e077","e078","e079","e07a","e07b","e07c","e07d","e07e","e07f","e080","e081","e082","e083","e084","e085","e086","e087","e088","e089","e08a","e08b","e08c","e08d","e08e","e08f","e090","e091","e092","e093","e094","e095","e096","e097","e098","e099","e09a","e09b","e09c","e09d","e09e","e09f","e0a0","e0a1","e0a2","e0a3","e0a4","e0a5","e0a6","e0a7","e0a8","e0a9","e0aa","e0ab","e0ac","e0ad","e0ae","e0af","e0b0","e0b1","e0b2","e0b3","e0b4","e0b5","e0b6","e0b7","e0b8","e0b9","e0ba","e0bb","e0bc","e0bd","e0be","e0bf","e0c0","e0c1","e0c2","e0c3","e0c4","e0c5","e0c6","e0c7","e0c8","e0c9","e0ca","e0cb","e0cc","e0cd","e0ce","e0cf","e0d0","e0d1","e0d2","e0d3","e0d4","e0d5","e0d6","e0d7","e0d8","e0d9","e0da","e0db","e0dc","e0dd","e0de","e0df","e0e0","e0e1","e0e2","e0e3","e0e4","e0e5","e0e6","e0e7","e0e8","e0e9","e0ea","e0eb","e0ec","e0ed","e0ee","e0ef","e0f0","e0f1","e0f2","e0f3","e0f4","e0f5","e0f6","e0f7","e0f8","e0f9","e0fa","e0fb","e0fc","e0fd","e0fe","e0ff","e100","e101","e102","e103","e104","e105","e106","e107","e108","e109","e10a","e10b","e10c","e10d","e10e","e10f","e110","e111","e112","e113","e114","e115","e116","e117","e118","e119","e11a","e11b","e11c","e11d","e11e","e11f","e120","e121","e122","e123","e124","e125","e126","e127","e128","e129","e12a","e12b","e12c","e12d","e12e","e12f","e130","e131","e132","e133","e134","e135","e136","e137","e138","e139","e13a","e13b","e13c","e13d","e13e","e13f","e140","e141","e142","e143","e144","e145","e146","e147","e148","e149","e14a","e14b","e14c","e14d","e14e","e14f","e150","e151","e152","e153","e154","e155","e156","e157","e158","e159","e15a","e15b","e15c","e15d","e15e","e15f","e160","e161","e162","e163","e164","e165","e166","e167","e168","e169","e16a","e16b","e16c","e16d","e16e","e16f","e170","e171","e172","e173","e174","e175","e176","e177","e178","e179","e17a","e17b","e17c","e17d","e17e","e17f","e180","e181","e182","e183","e184","e185","e186","e187","e188","e189","e18a","e18b","e18c","e18d","e18e","e18f","e190","e191","e192","e193","e194","e195","e196","e197","e198","e199","e19a","e19b","e19c","e19d","e19e","e19f","e1a0","e1a1","e1a2","e1a3","e1a4","e1a5","e1a6","e1a7","e1a8","e1a9","e1aa","e1ab","e1ac","e1ad","e1ae","e1af","e1b0","e1b1","e1b2","e1b3","e1b4","e1b5","e1b6","e1b7","e1b8","e1b9","e1ba","e1bb","e1bc","e1bd","e1be","e1bf","e1c0","e1c1","e1c2","e1c3","e1c4","e1c5","e1c6","e1c7","e1c8","e1c9","e1ca","e1cb","e1cc","e1cd","e1ce","e1cf","e1d0","e1d1","e1d2","e1d3","e1d4","e1d5","e1d6","e1d7","e1d8","e1d9","e1da","e1db","e1dc","e1dd","e1de","e1df","e1e0","e1e1","e1e2","e1e3","e1e4","e1e5","e1e6","e1e7","e1e8","e1e9","e1ea","e1eb","e1ec","e1ed", "e1ee", "e1ef", "e1f0", "e1f1", "e1f2", "e1f3", "e1f4", "e1f5"];
	var mIconSuppressMirroring = {"chalkboard": true, "calendar": true, "alphabetical-order": true, "address-book": true, "hint": true, "payment-approval": true, "batch-payments": true, "arobase": true, "question-mark": true, "lead": true, "lead-outdated": true, "simple-payment": true, "sales-order-item": true, "sales-order": true, "per-diem": true, "paid-leave": true, "pdf-reader": true, "my-sales-order": true, "loan": true, "globe": true, "waiver": true, "unpaid-leave": true, "customer-financial-fact-sheet": true, "crm-sales": true, "commission-check": true, "collections-insight": true, "capital-projects": true, "business-one": true, "travel-expense": true, "travel-expense-report": true, "travel-request": true, "time-overtime": true, "sales-quote": true, "sales-notification": true, "incident": true, "money-bills": true, "sales-document": true, "opportunities": true, "expense-report": true, "monitor-payments": true, "widgets": true, "sys-help-2": true, "sys-help": true, "accept": true, "accounting-document-verification": true, "activities": true, "activity-2": true, "add-activity": true, "add-activity-2": true, "approvals": true, "bbyd-active-sales": true, "business-by-design": true, "cart-approval": true, "complete": true, "customer-order-entry": true, "employee-approvals": true, "hr-approval": true, "kpi-corporate-performance": true, "kpi-managing-my-area": true, "survey": true, "sys-enter": true, "sys-enter-2": true, "task": true};
	var sapIconFamily = "SAP-icons";
	var sProtocolName = "sap-icon";
	
	var mRegistry = {};
	
	var bFontFaceInserted = false;
	
	/**
	 * Constructor for IconPool - must not be used: all of the methods that are under IconPool are static methods.
	 *
	 * @class
	 * The IconPool is a static class for retrieving or registering icons.
	 * It also provides helping methods for easier consumption of icons.
	 * There are already icons registered in IconPool, please follow this link and find the name of the icon:
	 * 1. If you use the icon inside existing control, please call sap.ui.core.IconPool.getIconURI and assign the URI to controls which support icon.
	 * 2. If you want to support icon and standard image in your own control, please call createControlByURI by giving the URI and a constructor when URI isn't a icon URI. Icon instance or instance created by calling the given constructor is returned.
	 * 
	 * @public
	 */
	sap.ui.core.IconPool = function(){
		// Do not use the constructor
		throw new Error();
	};
	
	/**
	 * Creates an instance of sap.ui.core.Icon if the given URI is an icon URI, otherwise the given constructor is called.
	 * The given URI is set to the src property of the control.
	 *
	 * @param {string|object} setting contains the properties which will be used to instantiate the returned control. It should contain at least a property named src. If it's given with a string type, it will be taken as the value of src property.
	 * @param {function} constructor the constructor function which is called when the given URI isn't an icon URI
	 * @return {sap.ui.core.Control} either an instance of sap.ui.core.Icon or instance created by calling the given constructor
	 * @static
	 * @public
	 */
	sap.ui.core.IconPool.createControlByURI = function(setting, constructor){
		if(typeof setting === "string"){
			setting = {src: setting};
		}
		
		if(setting && setting.src){
			var sSrc = setting.src,
				fnConstructor = constructor;
			if(sap.ui.core.IconPool.isIconURI(sSrc)){
				if(!sap.ui.core.Icon){
					jQuery.sap.require("sap.ui.core.Icon");
				}
				fnConstructor = sap.ui.core.Icon;
				//converting to press event in case tap is specified
				if(setting.tap){
					setting.press = setting.tap;
					delete setting.tap;
				}
			}
			if(typeof fnConstructor === "function"){
				return new fnConstructor(setting);
			}
		}
	};
	
	/**
	 * Register an additional icon to the sap.ui.core.IconPool.
	 *
	 * @param {string} iconName the name of the icon.
	 * @param {string} collectionName the name of icon collection. The built in icons are with empty collectionName, so if additional icons need to be registered in IconPool, the collectionName can't be empty.  
	 * @param {object} iconInfo the icon info which contains the following properties:
	 * @param {string} iconInfo.fontFamily is the name of the font when importing the font using @font-face in CSS
	 * @param {string} iconInfo.content is the special code without the prefix, for example "e000"
	 * @param {boolean} [iconInfo.overWrite=false] indicates if already registered icons should be overwritten when the same name and collection are given. The built in icons can never be overwritten.
	 * @param {boolean} [iconInfo.suppressMirroring=false] indicates whether this icon should NOT be mirrored in RTL (right to left) mode.
	 * 
	 * @return {object} the info object of the registered icon which has the name, collection, uri, fontFamily, content and suppressMirroring properties.
	 * @static
	 * @public
	 */
	sap.ui.core.IconPool.addIcon = function(iconName, collectionName, iconInfo){
		// OLD API Compatibility fontFamily, content, overWrite, suppressMirroring
		if(typeof iconInfo === "string"){
			iconInfo = {
				fontFamily: arguments[2],
				content: arguments[3],
				overWrite: !!arguments[4],
				suppressMirroring: !!arguments[5]
			}
		}
		
		if(!mRegistry[collectionName]){
			mRegistry[collectionName] = {};
		}
		
		var collection = mRegistry[collectionName],
			icon, oldIcon = collection[iconName],
			parts;
		
		if(oldIcon && (collectionName === undefined || !iconInfo.overWrite)){
			jQuery.sap.log.warning("icon with the same iconName in the collection already exists, specify the last parameter to true in order to overwrite");
			return;
		}
		
		parts = {
			protocol: sProtocolName,
			hostname: collectionName || iconName,
			path: collectionName ? iconName : undefined
		};
		
		icon = {
			name: iconName,
			collection: collectionName,
			uri: window.URI.build(parts),
			fontFamily: iconInfo.fontFamily,
			content: String.fromCharCode(parseInt(iconInfo.content, 16)),
			suppressMirroring: iconInfo.suppressMirroring,
			//keep compatibility with old name
			skipMirroring: iconInfo.suppressMirroring
		};
		
		collection[iconName] = icon;
		return icon;
	};
	
	/**
	 * Returns the URI of the icon which has the same given iconName and collectionName.
	 *
	 * @param {string} iconName the name of the icon.
	 * @param {string} collectionName the name of icon collection. The built in icons are with undefined collectionName, so if the built in icons need to be used, just ignore this parameter.
	 * @return {string} the URI of the icon. if the icon can't be found in IconPool, undefined is returned. 
	 * @static
	 * @public
	 */
	sap.ui.core.IconPool.getIconURI = function(iconName, collectionName){
		var collection = mRegistry[collectionName];
		
		if(collection && collection[iconName]){
			return collection[iconName].uri;
		}
	};
	
	/**
	 * Returns the info object of the icon which has the same given iconName and collectionName.
	 *
	 * @param {string} iconName the name of the icon.
	 * @param {string} collectionName the name of icon collection. The built in icons are with undefined collectionName, so if the built in icons need to be used, just ignore this parameter.
	 * @return {object} the info object of the registered icon which has the uri, fontFamily and content properties. 
	 * @static
	 * @public
	 */
	sap.ui.core.IconPool.getIconInfo = function(iconName, collectionName){
		sap.ui.core.IconPool.insertFontFaceStyle();
		
		var sParsedIconName = iconName,
			sParsedCollectionName = collectionName,
			parts,
			collection;
		
		if(this.isIconURI(iconName)){
			parts = window.URI.parse(iconName);
			
			if(parts.path.length === 1){
				sParsedIconName = parts.hostname;
				sParsedCollectionName = undefined;
			}else{
				sParsedCollectionName = parts.hostname;
				sParsedIconName = parts.path.substr(1, parts.path.length);
			}
		}
		
		collection = mRegistry[sParsedCollectionName];
		
		return collection && collection[sParsedIconName];
	};
	
	/**
	 * Returns If the given uri is an icon URI.
	 *
	 * @param {string} uri the icon uri which is in the format "sap-icon://collectionName/iconName"
	 * @return {boolean} if the uri follows the icon uri format. 
	 * @static
	 * @public
	 */
	sap.ui.core.IconPool.isIconURI = function(uri){
		if(!uri){
			return false;
		}
		var parts = window.URI.parse(uri);
		
		return (parts.protocol === sProtocolName) && parts.hostname;
	};
	
	/**
	 * Returns all names of registered collections in IconPool
	 *
	 * @return {array} An array contains all of the registered collections' names. 
	 * @static
	 * @public
	 */
	sap.ui.core.IconPool.getIconCollectionNames = function(){
		var aNames =[];
		jQuery.map(mRegistry, function(value, key){
			aNames.push(key);
		});
		return aNames;
	};
	
	/**
	 * Returns all name of icons that are registerd under the given collection.
	 * @param {string} collectionName the name of collection where icon names are retrieved.
	 * @return {array} An array contains all of the registered icon names under the given collection. 
	 * @static
	 * @public
	 */
	sap.ui.core.IconPool.getIconNames = function(collectionName){
		var collection = mRegistry[collectionName],
			aNames = [];
		jQuery.map(collection, function(value, key){
			aNames.push(key);
		});
		
		return aNames;
	};
	
	
	sap.ui.core.IconPool.insertFontFaceStyle = function(){
		if(bFontFaceInserted){
			return;
		}
		
		var sFontPath = jQuery.sap.getModulePath("sap.ui.core", '/') + "themes/base/fonts/",
			aWindowPathParts, aFontPathParts, sFontFace, i;
		
		//In IE9 the relative paths in dynamically inserted styles in iframe are relative to the html page 
		//which contains the iframe, not the iframe itself.
		//http://support.microsoft.com/kb/937266
		//A conversion from relative path to absolute path is needed.
		if(!!sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 10 && /*check if it's in a iFrame*/window.self !== window.top) {
			sFontPath = sap.ui.core.IconPool._calcAbsPath(sFontPath, window.location.href);
		}
		
		/* This is the font used in sap.ui.core.Icon */
		sFontFace = "@font-face {" +
						"font-family: 'SAP-icons';" +
						"src: url('"+ sFontPath +"SAP-icons.eot');" +
						"src: url('"+ sFontPath +"SAP-icons.eot?#iefix') format('embedded-opentype')," +
						"url('"+ sFontPath +"SAP-icons.ttf') format('truetype');" +
						"font-weight: normal;" +
						"font-style: normal;" +
					"}";
		
		jQuery('head').append('<style type="text/css">' + sFontFace +'</style>');
		
		bFontFaceInserted = true;
	};
	
	sap.ui.core.IconPool._calcAbsPath = function(sRelative, sBase){
		// remove the URL parameters for base URL
		sBase = sBase && sBase.replace(/\?.*|#.*/g, "");
		
		// make the URL absolute
		var oUri = new window.URI(sRelative),
			oAbsUri = oUri.absoluteTo(sBase);
		
		// return the absolute URL (without URL parameters!!!)
		return oAbsUri.href();
	};
	
	sap.ui.core.IconPool._isMirroringSkipped = function(iconName){
		return !!mIconSuppressMirroring[iconName];
	};
	
	//register the built in icons
	jQuery.each(aIconNames, function(index, name){
		sap.ui.core.IconPool.addIcon(name, undefined, {
			fontFamily: sapIconFamily,
			content: aIconCodes[index],
			suppressMirroring: sap.ui.core.IconPool._isMirroringSkipped(name)
		});
	});
}());

}; // end of sap/ui/core/IconPool.js
if ( !jQuery.sap.isDeclared('sap.ui.core.IconRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.core.IconRenderer");

/**
 * @class FontIcon renderer. 
 * @static
 */
sap.ui.core.IconRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.core.IconRenderer.render = function(oRm, oControl){ 

	// An invisible icon is not rendered
	if (!oControl.getVisible()) {
		return;
	}
	
	// write the HTML into the render manager
	var oIconInfo = sap.ui.core.IconPool.getIconInfo(oControl.getSrc()),
		sWidth = oControl.getWidth(),
		sHeight = oControl.getHeight(),
		sColor = oControl.getColor(),
		sBackgroundColor = oControl.getBackgroundColor(),
		sSize = oControl.getSize(),
		tooltip = oControl.getTooltip_AsString(),
		//in IE8 :before is not supported, text needs to be rendered in span
		bTextNeeded = (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 9);
	oRm.write("<span");
	oRm.writeControlData(oControl);
	
	if(!oControl.getDecorative()){
		oRm.writeAttribute("tabindex", 0);
	}
	
	if (tooltip) {
		oRm.writeAttributeEscaped("title", tooltip);
	}
	if(oIconInfo){
		if(!bTextNeeded){
			oRm.writeAttribute("data-sap-ui-icon-content", oIconInfo.content);
		}
		oRm.addStyle("font-family", "'" + oIconInfo.fontFamily + "'");
	}
	if(sWidth){
		oRm.addStyle("width", sWidth);
	}
	if(sHeight){
		oRm.addStyle("height", sHeight);
		oRm.addStyle("line-height", sHeight);
	}
	if(sColor){
		oRm.addStyle("color", sColor);
	}
	if(sBackgroundColor){
		oRm.addStyle("background-color", sBackgroundColor);
	}
	if(sSize){
		oRm.addStyle("font-size", sSize);
	}
	oRm.writeStyles();
	
	oRm.addClass("sapUiIcon");
	if(oIconInfo && !oIconInfo.suppressMirroring){
		oRm.addClass("sapUiIconMirrorInRTL");
	}
	
	if(oControl.hasListeners("press")){
		//show pointer cursor if icon is active i.e. press or tap is set
		oRm.addClass("sapUiIconPointer");
	}
	
	oRm.writeClasses();
	
	oRm.write(">"); // span element
	if(oIconInfo && bTextNeeded){
		oRm.write(oIconInfo.content);
	}
	oRm.write("</span>");
};

}; // end of sap/ui/core/IconRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.LocalBusyIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.core.LocalBusyIndicatorRenderer");

/**
 * @class LocalBusyIndicator renderer.
 * @static
 */
sap.ui.core.LocalBusyIndicatorRenderer = {};

(function() {
	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *            oRm the RenderManager that can be used for writing to the
	 *            render output buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should
	 *            be rendered
	 */
	sap.ui.core.LocalBusyIndicatorRenderer.render = function(oRm, oControl) {
		oRm.write("<div");
		oRm.writeControlData(oControl);

		oRm.addClass("sapUiLocalBusyIndicator");
		oRm.writeClasses();
		oRm.write(">");

		fnRenderFlickerDivs(oRm, oControl);

		oRm.write("</div>");
	};

	var fnRenderFlickerDivs = function(oRm, oControl) {
		var sId = oControl.getId();
		var sIdAnimation = sId + "-animation";
		var aBoxEnum = [ "-leftBox", "-middleBox", "-rightBox" ];

		oRm.write('<div');
		oRm.writeAttribute('id', sIdAnimation);
		oRm.addClass("sapUiLocalBusyIndicatorAnimation");
		oRm.writeClasses();
		oRm.write(">");

		for ( var i = 0; i < aBoxEnum.length; i++) {
			oRm.write('<div');
			oRm.addClass("sapUiLocalBusyIndicatorBox");
			oRm.writeClasses();
			oRm.writeAttribute("id", sId + aBoxEnum[i]);
			oRm.write(">");
			oRm.write("</div>");

		}

		oRm.write("</div>");
	};
}());
}; // end of sap/ui/core/LocalBusyIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Locale') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

//Provides the locale object sap.ui.core.Locale
jQuery.sap.declare("sap.ui.core.Locale");


(function() {

	/**
	 * A regular expression that describes language tags according to BCP-47.
	 * @see BCP47 "Tags for Identifying Languages" (http://www.ietf.org/rfc/bcp/bcp47.txt)
	 *
	 * The matching groups are
	 *  0=all
	 *  1=language (shortest ISO639 code + ext. language sub tags | 4digits (reserved) | registered language sub tags)
	 *  2=script (4 letters)
	 *  3=region (2letter language or 3 digits)
	 *  4=variants (separated by '-', Note: capturing group contains leading '-' to shorten the regex!)
	 *  5=extensions (including leading singleton, multiple extensions separated by '-')
	 *  6=private use section (including leading 'x', multiple sections separated by '-')
	 *  
	 *            [-------------------- language ----------------------][--- script ---][------- region --------][------------ variants --------------][--------- extensions --------------][------ private use -------]
	 */
	var rLocale=/^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?(-[0-9A-Z]{5,8}|(?:[0-9][0-9A-Z]{3}))*(?:-([0-9A-WYZ](?:-[0-9A-Z]{2,8})+))*(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;

	/**
	 * Creates an instance of the Locale.
	 *
	 * @class Locale represents a locale setting, consisting of a language, script, region, variants, extensions and private use section
	 *
	 * @param {string} sLocaleId the locale identifier, in format en-US or en_US.
	 *
	 * @extends sap.ui.base.Object
	 * @author SAP AG
	 * @version 1.18.9
	 * @constructor
	 * @public
	 * @name sap.ui.core.Locale
	 */
	sap.ui.base.Object.extend("sap.ui.core.Locale", /** @lends sap.ui.core.Locale.prototype */ {

		constructor : function(sLocaleId) {
			sap.ui.base.Object.apply(this);
			var aResult = rLocale.exec(sLocaleId.replace(/_/g, "-"));
			
			// If the given Locale string cannot be parsed by the regular expression above we 
			// should at least tell the developer why the core fails to load.
			if (aResult === null) {
				throw "The given language does not adhere to BCP-47.";
			}
			
			this.sLocaleId = sLocaleId;
			this.sLanguage = aResult[1] || null;
			this.sScript = aResult[2] || null;
			this.sRegion = aResult[3] || null;
			this.sVariant = (aResult[4] && aResult[4].slice(1)) || null; // remove leading dash from capturing group
			this.sExtension = aResult[5] || null;
			this.sPrivateUse = aResult[6] || null;

			// normalization according to BCP47:
			if ( this.sLanguage ) {
				this.sLanguage = this.sLanguage.toLowerCase();
			}
			if ( this.sScript ) {
				this.sScript = this.sScript.toLowerCase().replace(/^[a-z]/, function($) { return $.toUpperCase(); });
			} 
			if ( this.sRegion ) {
				this.sRegion = this.sRegion.toUpperCase();
			} 
		},

		/**
		 * Get the locale language.
		 *
		 * Note that the case might differ from the original script tag 
		 * (Lower case is enforced as recommended by BCP47/ISO639).
		 * 
		 * @return {string} the language code
		 * @public
		 */
		getLanguage : function() {
			return this.sLanguage;
		},

		/**
		 * Get the locale script or null if none was specified.
		 * 
		 * Note that the case might differ from the original language tag
		 * (Upper case first letter and lower case reminder enforced as 
		 * recommended by BCP47/ISO15924)  
		 * 
		 * @return {string} the script code or null
		 * @public
		 */
		getScript : function() {
			return this.sScript;
		},

		/**
		 * Get the locale region or null if none was specified.
		 *
		 * Note that the case might differ from the original script tag 
		 * (Upper case is enforced as recommended by BCP47/ISO3166-1).
		 * 
		 * @return {string} the ISO3166-1 region code (2-letter or 3-digits)
		 * @public
		 */
		getRegion : function() {
			return this.sRegion;
		},

		/**
		 * Get the locale variants as a single string or null.
		 * 
		 * Multiple variants are separated by a dash '-'.
		 * 
		 * @return {string} the variant or null
		 * @public
		 */
		getVariant : function() {
			return this.sVariant;
		},

		/**
		 * Get the locale variants as an array of individual variants.
		 * 
		 * The separating dashes are not part of the result.
		 * If there is no variant section in the locale tag, an empty array is returned.
		 * 
		 * @return {string[]} the individual variant sections 
		 * @public
		 */
		getVariantSubtags : function() {
			return this.sVariant ? this.sVariant.split('-') : [];
		},

		/**
		 * Get the locale extension as a single string or null.
		 * 
		 * The extension always consists of a singleton character (not 'x'), 
		 * a dash '-' and one or more extension token, each separated 
		 * again with a dash.
		 * 
		 * Use {@link #getExtensions} to get the individual extension tokens as an array.
		 * 
		 * @return {string} the extension
		 * @public
		 */
		getExtension : function() {
			return this.sExtension;
		},

		/**
		 * Get the locale extensions as an array of tokens.
		 * 
		 * The leading singleton and the separating dashes are not part of the result.
		 * If there is no extensions section in the locale tag, an empty array is returned.
		 * 
		 * @return {string[]} the individual extension sections
		 * @public
		 */
		getExtensionSubtags : function() {
			return this.sExtension ? this.sExtension.slice(2).split('-') : [];
		},

		/**
		 * Get the locale private use section or null.
		 *
		 * @return {string} the private use section
		 * @public
		 */
		getPrivateUse : function() {
			return this.sPrivateUse;
		},

		/**
		 * Get the locale private use section
		 *
		 * @return {string} the private use section
		 * @public
		 */
		getPrivateUseSubtags : function() {
			return this.sPrivateUse ? this.sPrivateUse.slice(2).split('-') : [];
		},

		hasPrivateUseSubtag : function(sSubtag) {
			jQuery.sap.assert(sSubtag && sSubtag.match(/^[0-9A-Z]{1,8}$/i), "subtag must be a valid BCP47 private use tag");
			return jQuery.inArray(sSubtag, this.getPrivateUseSubtags()) >= 0;
		},

		toString : function() {
			var r=[this.sLanguage];
			if ( this.sScript ) {
				r.push(this.sScript);
			}
			if ( this.sRegion ) {
				r.push(this.sRegion);
			}
			if ( this.sVariant ) {
				r.push(this.sVariant);
			}
			if ( this.sExtension ) {
				r.push(this.sExtension );
			}
			if ( this.sPrivateUse ) {
				r.push(this.sPrivateUse );
			}
			return r.join("-");
		},
		
		/**
		 * Best guess to get a proper SAP Logon Language for this locale.
		 * 
		 * Conversions taken into account:
		 * <ul>
		 * <li>use the language part only</li> 
		 * <li>convert old ISO639 codes to newer ones (e.g. 'iw' to 'he')</li>
		 * <li>for Chinese, map 'Traditional Chinese' to SAP proprietary code 'zf'</li>
		 * <li>map private extensions x-sap1q and x-sap2q to SAP pseudo languages '1Q' and '2Q'</li>
		 * <li>remove ext. language sub tags</li>
		 * <li>convert to uppercase</li>
		 * </ul>
		 * 
		 * Note that the conversion also returns a result for languages that are not 
		 * supported by the default set of SAP languages. This method has no knowledge 
		 * about the concrete languages of any given backend system.
		 * 
		 * @return {string} a language code that should
		 * @public
		 * @since 1.17.0
		 */
		getSAPLogonLanguage : function() {
			var sLanguage = this.sLanguage || "",
				m;

			// cut off any ext. language sub tags 
			if ( sLanguage.indexOf("-") >= 0 ) {
				sLanguage = sLanguage.slice(0, sLanguage.indexOf("-"));
			}

			// convert to new ISO codes
			sLanguage = M_ISO639_OLD_TO_NEW[sLanguage] || sLanguage;

			// handle special cases for Chinese: map 'Traditional Chinese' (or region TW which implies Traditional) to 'zf'  
			if ( sLanguage === "zh" ) {
				if ( this.sScript === "Hant" || (!this.sScript && this.sRegion === "TW") ) {
					sLanguage = "zf";
				}
			}

			// recognize SAP supportability pseudo languages
			if ( this.sPrivateUse && (m = /-(saptrc|sappsd)(?:-|$)/i.exec(this.sPrivateUse)) ) {
				sLanguage = (m[1].toLowerCase() === "saptrc") ? "1Q" : "2Q";
			}

			// by convention, SAP systems seem to use uppercase letters 
			return sLanguage.toUpperCase();
		}

	});

	var M_ISO639_OLD_TO_NEW = {
			"iw" : "he",
			"ji" : "yi",
			"in" : "id", 
			"sh" : "sr"
	};

	/**
	 * A list of locales for which the CLDR specifies "right-to-left"
	 * as the character orientation.
	 * 
	 * The string literal below is substituted during the build.
	 * The value is determined from the CLDR JSON files which are 
	 * bundled with the UI5 runtime.
	 */ 
	var A_RTL_LOCALES = "ar,fa,he".split(",");

	/**
	 * Checks whether the given language tag implies a character orientation 
	 * of 'right-to-left' ('RTL').
	 * 
	 * The implementation of this method and the configuration above assume 
	 * that when a language (e.g. 'ar') is marked as 'RTL', then all language/region
	 * combinations for that language (e.g. 'ar_SA') will be 'RTL' as well, 
	 * even if the combination is not mentioned in the above configuration.
	 * There is no mean to define RTL=false for a language/region, when RTL=true for 
	 * the language alone. 
	 *
	 * As of 3/2013 this is true for all supported locales/regions of UI5.
	 * 
	 * @private
	 */
	sap.ui.core.Locale._impliesRTL = function(sLanguage) {
		var oLocale = new sap.ui.core.Locale(sLanguage);
		sLanguage = oLocale.getLanguage() || "";
		sLanguage = (sLanguage && M_ISO639_OLD_TO_NEW[sLanguage]) || sLanguage;
		var sRegion = oLocale.getRegion() || "";
		
		if ( sRegion && jQuery.inArray(sLanguage + "_" + sRegion, A_RTL_LOCALES) >= 0 ) {
			return true;
		}
		return jQuery.inArray(sLanguage, A_RTL_LOCALES) >= 0;
	};
	
}());

}; // end of sap/ui/core/Locale.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Renderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides (optional) base class for all renderers
jQuery.sap.declare("sap.ui.core.Renderer");

/**
 * @class Base Class for Renderer.
 *
 * @author Martin Schaus, Daniel Brinkmann
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.Renderer = {
};

/**
 * Provides some 'extends' functionality for Renderers.<br/> Creates a new
 * object (i.e. static class) that knows its parent (accessible from
 * <code>this._super</code>) and initially forwards method calls to the
 * parents methods.<br/> Methods can be overwritten afterwards as known from
 * JavaScript.
 *
 * @param {object}
 *            oParentClass the definition of the class that should be extended.
 * @return a new class definition that can be enriched.
 * @type object
 * @public
 */
sap.ui.core.Renderer.extend = function(oParentClass) {
	//var oChild = jQuery.extend(new jQuery.sap.newObject(oParentClass), {_super: oParentClass});
	//return oChild;
	var oChild = {_super: oParentClass};
	for(var f in oParentClass) {
		if(typeof(oParentClass[f]) == "function") {
			oChild[f] = (function(){
				var sMethod = f,
					that = oChild;
				return function() {
					return that._super[sMethod].apply(this, arguments);
				};
			}());
		}
	}
	return oChild;
};

/**
 * Returns the TextAlignment for the provided configuration.
 *
 * @param oTextAlign
 *            {sap.ui.core.TextAlign} the text alignment of the Control
 * @param oTextDirection
 *            {sap.ui.core.TextDirection} the text direction of the Control
 * @return the actual text alignment that must be set for this environment
 * @type {string}
 * @private
 */
sap.ui.core.Renderer.getTextAlign = function(oTextAlign, oTextDirection) {
	var sTextAlign = "";
	var oConfig = sap.ui.getCore().getConfiguration();

	switch (oTextAlign) {
	case sap.ui.core.TextAlign.End:
		switch (oTextDirection) {
		case "LTR":
			sTextAlign = "right";
			break;
		case "RTL":
			sTextAlign = "left";
			break;
		default:
			if (oConfig.getRTL()) { // this is really only influenced by the SAPUI5 configuration. The browser does not change alignment with text-direction
				sTextAlign = "left";
			} else {
				sTextAlign = "right";
			}
			break;
		}
		break;
	case sap.ui.core.TextAlign.Begin:
		switch (oTextDirection) {
		case "LTR":
			sTextAlign = "left";
			break;
		case "RTL":
			sTextAlign = "right";
			break;
		default:
			if (oConfig.getRTL()) {
				sTextAlign = "right";
			} else {
				sTextAlign = "left";
			}
			break;
		}
		break;
	case sap.ui.core.TextAlign.Right:
		if (oConfig.getRTL()) {
			if (oTextDirection == "LTR") {
				sTextAlign = "right";
			}
		} else {
			sTextAlign = "right";
		}
		break;
	case sap.ui.core.TextAlign.Center:
		sTextAlign = "center";
		break;
	case sap.ui.core.TextAlign.Left:
		if (oConfig.getRTL()) {
			sTextAlign = "left";
		} else {
			if (oTextDirection == "RTL") {
				sTextAlign = "left";
			}
		}
		break;
	}
	return sTextAlign;
};
}; // end of sap/ui/core/Renderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ScrollBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// A renderer for the ScrollBar control
jQuery.sap.declare("sap.ui.core.ScrollBarRenderer");

/**
 * @class ScrollBar renderer.
 * @static
 */
sap.ui.core.ScrollBarRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl Object representation of the control that should be rendered
 */
sap.ui.core.ScrollBarRenderer.render = function(oRenderManager, oScrollBar){

    // convenience variable
	var rm = oRenderManager;
	var bRTL = sap.ui.getCore().getConfiguration().getRTL();


	rm.addClass("sapUiScrollBar");
	
	var sScrollBarTouchClass;
	if (sap.ui.Device.support.touch) {
		sScrollBarTouchClass = "sapUiScrollBarTouch"
		rm.addClass(sScrollBarTouchClass);
	}

	// Get Properties
	var bVertical = oScrollBar.getVertical();
	var sSize = oScrollBar.getSize();
	var sContentSize = oScrollBar.getContentSize();
    
	var oBSS = jQuery.sap.scrollbarSize(sScrollBarTouchClass);
	var sWidth = oBSS.width;
	var sHeight = oBSS.height;

	if (bVertical){
		// First div. <div style="overflow:hidden;width:16px;height:200px">
		rm.write("<div");
		rm.writeControlData(oScrollBar);
		rm.write(" style=\"overflow:hidden;width:" + sWidth + "px");
		if (sSize) {
			rm.write(";height:" + sSize);
		}
		rm.write("\"");
		rm.writeClasses();
		rm.write(">");

		// Middle div - ScrollBar itself.
		rm.write("<div ");
		rm.writeAttribute( "id", oScrollBar.getId() + "-sb");
		rm.write(" style=\"width:" + sWidth*2 + "px;height:100%;overflow-y:scroll;overflow-x:hidden");
		if (bRTL) {
			//right to left mode. Special handling for mozilla 3.6 and safari - do not render right margin
			if ((!(!!sap.ui.Device.browser.firefox && sap.ui.Device.browser.version == 3.6)) && (!!!sap.ui.Device.browser.safari)) {
				rm.write(";margin-right:-" + sWidth + "px");
			}
		} else {
			rm.write(";margin-left:-" + sWidth + "px;");
		}
		rm.write("\">");

		//Last div - The content div <div style="height:1000px;width:16px"></div>
		rm.write("<div");
		rm.writeAttribute( "id", oScrollBar.getId() + "-sbcnt");
		rm.write(" style=\"width:" + sWidth + "px");
		if (sContentSize) {
			rm.write(";height:" + sContentSize);
		}
		rm.write("\"");
		rm.write(">");
		rm.write("</div>");
		rm.write("</div>");

		rm.write("<div> <span id=" + oScrollBar.getId() + "-ffsize" +" style='position: absolute; top: -9000px; left: -9000px; visibility: hidden; line-height: normal;'> FF Size</span></div>");
		rm.write("</div>");

	} else {

		// Horizontal Scrollbar
		// First div.    <div style="width:200px;height:16px;overflow:hidden">
		rm.write("<div");
		rm.writeControlData(oScrollBar);
		rm.write(" style=\"overflow:hidden;height:" + sHeight + "px");
		if (sSize) {
			rm.write(";width:" + sSize);
		}
		rm.write("\"");
		rm.writeClasses();
		rm.write(">");

		// Middle div - ScrollBar itself.
		rm.write("<div ");
		rm.writeAttribute( "id", oScrollBar.getId() + "-sb");
        rm.write(" style=\"height:" + sHeight*2 + "px;margin-top:-" + sHeight + "px;overflow-x:scroll;overflow-y:hidden\">");

		//Last div - The content div   <div style="width:1000px;height:16px;"></div>
		rm.write("<div");
		rm.writeAttribute( "id", oScrollBar.getId() + "-sbcnt");
		rm.write(" style=\"height:" + sHeight + "px");
		if (sContentSize) {
			rm.write(";width:" + sContentSize);
		}
		rm.write("\"");
		rm.write(">");
		rm.write("</div>");
		rm.write("</div>");
		rm.write("</div>");
	}
};


/* PURE HTML EXAMPLE, FOR TESTING, FOR EXAMPLE IE9 SCROLLING PROBLEM:
<h1>vertical</h1>
<div style="width:16px;height:200px;overflow:hidden">
<div style="width:32px;height:100%;margin-left:-16px;overflow-y:scroll;overflow-x:hidden" onscroll="document.getElementById('v').innerHTML = this.scrollTop">
<div style="height:1000px;width:16px"></div>
</div>
</div>
<div id="v"></div>

<h1>horizontal</h1>
<div style="width:200px;height:16px;overflow:hidden">
<div style="width:100%;height:32px;margin-top:-16px;overflow-x:scroll;overflow-y:hidden" onscroll="document.getElementById('h').innerHTML = this.scrollLeft">
<div style="width:1000px;height:16px;"></div>
</div>
</div>
<div id="h"></div>

*/
}; // end of sap/ui/core/ScrollBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ThemeCheck') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.ThemeCheck
jQuery.sap.declare("sap.ui.core.ThemeCheck");




(function() {

sap.ui._maxThemeCheckCycles = 100;

/**
 * Creates a new ThemeCheck object.
 *
 * @class Helper class used by the UI5 Core to check whether the themes are applied correctly.
 *
 * It could happen that e.g. in onAfterRendering not all themes are available. In these cases the
 * check waits until the CSS is applied and fires an onThemeChanged event.
 *
 * @extends sap.ui.base.Object
 * @since 1.10.0
 * @author SAP AG
 * @constructor
 * @private
 * @name sap.ui.core.ThemeCheck
 */
sap.ui.base.Object.extend("sap.ui.core.ThemeCheck", /** @lends sap.ui.core.ThemeCheck.prototype */ {

	constructor : function(oCore) {
		this._oCore = oCore;
		this._iCount = 0; // Prevent endless loop
		this._CUSTOMCSSCHECK = ".sapUiThemeDesignerCustomCss";
		this._CUSTOMID = "sap-ui-core-customcss";
		this._customCSSAdded = false;
		this._themeCheckedForCustom = null;
	},

	getInterface : function() {
		return this;
	},

	fireThemeChangedEvent : function(bOnlyOnInitFail, bForceCheck) {
		clear(this);
		var bUseThemeCheck = sap.ui._maxThemeCheckCycles > 0; //Possibility to switch off theme check (except of force mode (for Core.applyTheme))

		if(bUseThemeCheck || bForceCheck){
			delayedCheckTheme.apply(this, [true]);
		}else{
			sap.ui.core.ThemeCheck.themeLoaded = true;
		}

		if(!bOnlyOnInitFail && !this._sThemeCheckId){
			this._oCore.fireThemeChanged({theme: this._oCore.getConfiguration().getTheme()});
		}

	}

});

sap.ui.core.ThemeCheck.themeLoaded = false;

sap.ui.core.ThemeCheck.checkStyle = function(oStyle, bLog){
	if(typeof(oStyle) === "string"){
		oStyle = jQuery.sap.domById(oStyle);
	}
	var $Style = jQuery(oStyle);

	try {
		var res = !oStyle || !!((oStyle.sheet && oStyle.sheet.cssRules.length > 0) ||
        		!!(oStyle.styleSheet && oStyle.styleSheet.cssText.length > 0) ||
        		!!(oStyle.innerHTML && oStyle.innerHTML.length > 0));
		var res2 = $Style.attr("sap-ui-ready");
		res2 = !!(res2 === "true" || res2 === "false");
		if(bLog){
			jQuery.sap.log.debug("ThemeCheck: Check styles '"+$Style.attr("id")+"': "+res+"/"+res2+"/"+!!oStyle);
		}
		return res || res2;
	}catch(e){}

	if(bLog){
		jQuery.sap.log.debug("ThemeCheck: Error during check styles '"+$Style.attr("id")+"': false/false/"+!!oStyle);
	}
	return false;
};

function clear(oThemeCheck){
	sap.ui.core.ThemeCheck.themeLoaded = false;
	if(oThemeCheck._sThemeCheckId){
		jQuery.sap.clearDelayedCall(oThemeCheck._sThemeCheckId);
		oThemeCheck._sThemeCheckId = null;
		oThemeCheck._iCount = 0;
	}
}

function checkTheme(oThemeCheck) {
	var mLibs = oThemeCheck._oCore.getLoadedLibraries();
	var sThemeName = oThemeCheck._oCore.getConfiguration().getTheme();
	var sPath = oThemeCheck._oCore._getThemePath("sap.ui.core", sThemeName) + "custom.css";
	var res = true;

	if (!!oThemeCheck._customCSSAdded && oThemeCheck._themeCheckedForCustom === sThemeName){
		// include custom style sheet here because it has already been added using jQuery.sap.includeStyleSheet
		// hence, needs to be checked for successful inclusion, too
		mLibs["sap-ui-theme-"+oThemeCheck._CUSTOMID] = {};
	}

	jQuery.each(mLibs, function(lib) {
		res = res && sap.ui.core.ThemeCheck.checkStyle("sap-ui-theme-"+lib, true);
		if (!!res){
		/* as soon as css has been loaded, look if there is a flag for custom css inclusion inside, but only
			 * if this has not been checked successfully before for the same theme
			 */
		if(oThemeCheck._themeCheckedForCustom != sThemeName){
				if (checkCustom(oThemeCheck)){
						//load custom css available at sap/ui/core/themename/library.css
					jQuery.sap.includeStyleSheet(sPath,  oThemeCheck._CUSTOMID);
					oThemeCheck._customCSSAdded = true;
					jQuery.sap.log.warning("ThemeCheck delivered custom CSS needs to be loaded, Theme not yet applied");
					oThemeCheck._themeCheckedForCustom = sThemeName;
					res = false;
					return false;
				}
				else{
					// remove stylesheet once the particular class is not available (e.g. after theme switch)
					/*check for custom theme was not successful, so we need to make sure there are no custom style sheets attached*/
					var customCssLink = jQuery("LINK[id='"+  oThemeCheck._CUSTOMID + "']");
					if (customCssLink.length > 0){
						customCssLink.remove();
						jQuery.sap.log.debug("Custom CSS removed");
					}
					oThemeCheck._customCSSAdded = false;
				}
			}
		}
	});
	if(!res){
		jQuery.sap.log.warning("ThemeCheck: Theme not yet applied.");
	}
	else{
		oThemeCheck._themeCheckedForCustom = sThemeName;
	}
	return res;
}

/* checks if a particular class is available at the beginning of the core styles
 */
function checkCustom (oThemeCheck){
	var ruleName = null,
	bSuccess = false;

	//get the core styles
	jQuery.each(document.styleSheets, function(iIndex, oStyleSheet) {
			if (!!oStyleSheet.ownerNode && /sap.ui.core/.test(oStyleSheet.ownerNode.id) && oStyleSheet.cssRules && oStyleSheet.cssRules.length > 0){
				ruleName = oStyleSheet.cssRules[0].selectorText;
				if(ruleName === oThemeCheck._CUSTOMCSSCHECK){
					bSuccess = true;
					return false;
				}
			}
			else if(!!oStyleSheet.owningElement && /sap.ui.core/.test(oStyleSheet.owningElement.id) && oStyleSheet.rules && oStyleSheet.rules.length > 0){
					//ie8 doesn't know ownerNode
				ruleName = oStyleSheet.rules[0].selectorText;
				if(ruleName === oThemeCheck._CUSTOMCSSCHECK){
					bSuccess = true;
					return false;
				}
			}
	});
	// we should now have some rule name ==> try to match against custom check
	return bSuccess;
}

function delayedCheckTheme(bFirst) {
	this._iCount++;

	var bEmergencyExit = this._iCount > sap.ui._maxThemeCheckCycles;

	if(!checkTheme(this) && !bEmergencyExit){
		this._sThemeCheckId = jQuery.sap.delayedCall(2, this, delayedCheckTheme);
	}else if(!bFirst){
		clear(this);
		sap.ui.core.ThemeCheck.themeLoaded = true;
		this._oCore.fireThemeChanged({theme: this._oCore.getConfiguration().getTheme()});
		if(bEmergencyExit){
			jQuery.sap.log.warning("ThemeCheck: max. check cycles reached.");
		}
	}else{
		sap.ui.core.ThemeCheck.themeLoaded = true;
	}
}

})();

}; // end of sap/ui/core/ThemeCheck.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ValueStateSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides helper class ValueStateSupport
jQuery.sap.declare("sap.ui.core.ValueStateSupport");

(function() {
	sap.ui.core.ValueStateSupport = {};
	var mTexts = null;


	var ensureTexts = function() {
		if (!mTexts) { // initialize texts if required
			mTexts = {};
			var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.core");
			mTexts[sap.ui.core.ValueState.Error] = rb.getText("VALUE_STATE_ERROR");
			mTexts[sap.ui.core.ValueState.Warning] = rb.getText("VALUE_STATE_WARNING");
			mTexts[sap.ui.core.ValueState.Success] = rb.getText("VALUE_STATE_SUCCESS");
		}
	};


	/**
	 * Appends a generic success, warning or error message to the given tooltip text if the given Element
	 * has a property "valueState" with one of these three states.
	 *
	 * @param {sap.ui.core.Element} oElement the Element of which the tooltip needs to be modified
	 * @param {string} sTooltipText the original tooltip text (may be null)
	 * @returns the given text, with appended success/warning/error text, if appropriate
	 *
	 * @public
	 */
	sap.ui.core.ValueStateSupport.enrichTooltip = function(oElement, sTooltipText) {
		jQuery.sap.assert(oElement instanceof sap.ui.core.Element, "oElement must be an Element");

		if (!sTooltipText && oElement.getTooltip()) {
			return undefined; // this means there is no tooltip text configured, but a tooltip object like a RichTooltip
		}

		if (oElement.getValueState) {
			var state = oElement.getValueState();
			if (state && (state != sap.ui.core.ValueState.None)) { // only for one of the three interesting state, not for the default
				ensureTexts();
				return (sTooltipText ? sTooltipText + " - " : "") + mTexts[state]; // add a suffix to the Tooltip
			}
		}

		return sTooltipText; // when there is no value state
	};


	/**
	 * Returns a generic success, warning or error message if the given Element
	 * has a property "valueState" with one of these three states.
	 *
	 * @param {sap.ui.core.Element} oElement the Element of which the valueState needs to be checked
	 * @returns the success/warning/error text, if appropriate; otherwise null
	 *
	 * @public
	 */
	sap.ui.core.ValueStateSupport.getAdditionalText = function(oElement) {
		var result = null;
		if (oElement.getValueState) {
			var state = oElement.getValueState();
			if (state && (state != sap.ui.core.ValueState.None)) { // only for one of the three interesting state, not for the default
				ensureTexts();
				result = mTexts[state];
			}
		}
		return result;
	};

})();

}; // end of sap/ui/core/ValueStateSupport.js
if ( !jQuery.sap.isDeclared('sap.ui.core.XMLTemplateProcessor') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */


jQuery.sap.declare("sap.ui.core.XMLTemplateProcessor");


(function() {

	function parseScalarType(sType, sValue, sName, oController) {
		// check for a binding expression (string)
		var oBindingInfo = sap.ui.base.ManagedObject.bindingParser(sValue, oController, true);
		if ( oBindingInfo && typeof oBindingInfo === "object" ) {
			return oBindingInfo;
		}

		var vValue = sValue = oBindingInfo || sValue; // oBindingInfo could be an unescaped string 
		var oType = sap.ui.base.DataType.getType(sType);
		if (oType) {
			if (oType instanceof sap.ui.base.DataType) {
				vValue = oType.parseValue(sValue);
			}
			// else keep original sValue (e.g. for enums)
		} else {
			throw new Error("Property " + sName + " has unknown type " + sType);
		}
		
		// Note: to avoid double resolution of binding expressions, we have to escape string values once again 
		return typeof vValue === "string" ? sap.ui.base.ManagedObject.bindingParser.escape(vValue) : vValue;
	}

	function localName(xmlNode) {
		// localName for standard browsers, baseName for IE, nodeName in the absence of namespaces
		return xmlNode.localName || xmlNode.baseName || xmlNode.nodeName;
	}

	/**
	 * The XMLTemplateProcessor class is used to load and process Control trees in XML-declarative notation.
	 * 
	 * @static
	 * @class sap.ui.core.XMLTemplateProcessor
	 * @name sap.ui.core.XMLTemplateProcessor
	 */
	sap.ui.core.XMLTemplateProcessor = {};

	
	
	/**   API METHODS ***/
	
	
	/**
	 * Loads an XML template using the module loading mechanism and returns the root XML element of the XML document.
	 *
	 * @param {string} sTemplateName
	 * @param {string} [sExtension]
	 * @return {Element} an XML document root element
	 */
	sap.ui.core.XMLTemplateProcessor.loadTemplate = function(sTemplateName, sExtension) {
		var sResourceName = jQuery.sap.getResourceName(sTemplateName, "." + (sExtension || "view") + ".xml");
		return jQuery.sap.loadResource(sResourceName).documentElement; // result is the document node
	};


	/**
	 * Parses only the attributes of the XML root node (View!) and fills them into the given settings object.
	 * Children are parsed later on after the controller has been set.
	 * TODO cannot handle event handlers in the root node
	 * 
	 * @param {Element} xmlNode the XML element representing the View
	 * @param {sap.ui.core.ManagedObject} oView the View to consider when parsing the attributes
	 * @param {object} mSettings the settings object which should be enriched with the suitable attributes from the XML node
	 * @return undefined
	 */
	sap.ui.core.XMLTemplateProcessor.parseViewAttributes = function(xmlNode, oView, mSettings) {

		var mAllProperties = oView.getMetadata().getAllProperties();
		for ( var i = 0; i < xmlNode.attributes.length; i++) {
			var attr = xmlNode.attributes[i];
			if (attr.name === 'controllerName') {
				oView._controllerName = attr.value;
			} else if (attr.name === 'resourceBundleName') {
				oView._resourceBundleName =  attr.value;
			} else if (attr.name === 'resourceBundleUrl') {
				oView._resourceBundleUrl =  attr.value;
			} else if (attr.name === 'resourceBundleLocale') {
				oView._resourceBundleLocale =  attr.value;
			} else if (attr.name === 'resourceBundleAlias') {
				oView._resourceBundleAlias =  attr.value;
			} else if (!mSettings[attr.name] && mAllProperties[attr.name]) {
				mSettings[attr.name] = parseScalarType(mAllProperties[attr.name].type, attr.value, attr.name, oView._oContainingView.oController);
			}
		}
	};


	/**
	 * Parses a complete XML template definition (full node hierarchy)
	 * 
	 * @param {Element} xmlNode the XML element representing the View/Fragment
	 * @param {sap.ui.core.ManagedObject} oView the View/Fragment which corresponds to the parsed XML
	 * @return an array containing Controls and/or plain HTML element strings
	 */
	sap.ui.core.XMLTemplateProcessor.parseTemplate = function(xmlNode, oView) {

		var aResult=[];
		var oCustomizingConfig = undefined;
		var sCurrentName = oView.sViewName || oView._sFragmentName; // TODO: should Fragments and Views be separated here?
		if (!sCurrentName) {
			var oTopView = oView;
			var iLoopCounter = 0; // Make sure there are not infinite loops
			while (++iLoopCounter < 1000 && oTopView && oTopView !== oTopView._oContainingView) {
				oTopView = oTopView._oContainingView;
			}
			sCurrentName = oTopView.sViewName;
		}

		if (oView.isSubView()) {
			parseNode(xmlNode, true);
		} else {
			parseChildren(xmlNode);
		}

		return aResult;

		/**
		 * Parses an XML node that might represent a UI5 control or simple XHTML.
		 * XHTML will be added to the aResult array as a sequence of strings,
		 * UI5 controls will be instantiated and added as controls
		 * 
		 * @param xmlNode the XML node to parse
		 * @param bRoot whether this node is the root node
		 * @return undefined but the aResult array is filled 
		 */
		function parseNode(xmlNode, bRoot, bIgnoreToplevelTextNodes) {

			if ( xmlNode.nodeType === 1 /* ELEMENT_NODE */ ) {

				var sLocalName = localName(xmlNode);
				if (xmlNode.namespaceURI === "http://www.w3.org/1999/xhtml" || xmlNode.namespaceURI === "http://www.w3.org/2000/svg") {
					// write opening tag
					aResult.push("<" + sLocalName + " ");
					// write attributes
					var sId;
					for (var i = 0; i < xmlNode.attributes.length; i++) {
						var attr = xmlNode.attributes[i];
						var value = attr.value;
						if (attr.name === "id") {
							value = oView._oContainingView.createId(value);
						}
						aResult.push(attr.name + "=\"" + jQuery.sap.encodeHTML(value) + "\" ");
					}
					if ( bRoot === true ) {
						aResult.push("data-sap-ui-preserve" + "=\"" + oView.getId() + "\" ");
					}
					aResult.push(">");

					// write children
					parseChildren(xmlNode);

					// close the tag
					aResult.push("</" + sLocalName + ">");

				} else if (sLocalName === "FragmentDefinition" && xmlNode.namespaceURI === "sap.ui.core") {
					// a Fragment element - which is not turned into a control itself. Only its content is parsed.
					parseChildren(xmlNode, false, true);
					// TODO: check if this branch is required or can be handled by the below one 
					
				} else {

					// assumption: an ELEMENT_NODE with non-XHTML namespace is a SAPUI5 control and the namespace equals the library name
					var aChildren = createControlOrExtension(xmlNode);

					for (var i = 0; i < aChildren.length; i++) {
						var oChild = aChildren[i];
						if (oView.getMetadata().hasAggregation("content")){
							oView.addAggregation("content", oChild);
						}
						else if (oView.getMetadata().hasAssociation(("content"))){
							oView.addAssociation("content", oChild);
						}
	
						aResult.push(oChild);
					}

				}

			} else if (xmlNode.nodeType === 3 /* TEXT_NODE */ && !bIgnoreToplevelTextNodes) {

				var text = xmlNode.textContent || xmlNode.text,
				parentName = localName(xmlNode.parentNode);
				if (text) {
					if (parentName != "style") {
						text = jQuery.sap.encodeHTML(text);
					}
					aResult.push(text);
				}

			}

		}

		/**
		 * Parses the children of an XML node
		 */
		function parseChildren(xmlNode, bRoot, bIgnoreToplevelTextNodes) {
			var children = xmlNode.childNodes;
			for (var i = 0; i < children.length; i++) {
				parseNode(children[i], bRoot, bIgnoreToplevelTextNodes);
			}
		}

		function findControlClass(sNamespaceURI, sLocalName) {
			var sClassName;
			var mLibraries = sap.ui.getCore().getLoadedLibraries();
			jQuery.each(mLibraries, function(sLibName, oLibrary) {
				if ( sNamespaceURI === oLibrary.namespace || sNamespaceURI === oLibrary.name ) {
					sClassName = oLibrary.name + "." + ((oLibrary.tagNames && oLibrary.tagNames[sLocalName]) || sLocalName);
				}
			});
			// TODO guess library from sNamespaceURI and load corresponding lib!?
			sClassName = sClassName || sNamespaceURI + "." + sLocalName;

			// ensure that control and library are loaded
			jQuery.sap.require(sClassName); // make sure oClass.getMetadata() exists

			return jQuery.sap.getObject(sClassName);
		}

		/**
		 * Takes an arbitrary node (control or plain HTML) and creates zero or one or more SAPUI5 controls from it,
		 * iterating over the attributes and child nodes.
		 * 
		 * @return an array with 0..n controls
		 * @private
		 */
		function createControls(node) {
			// differentiate between SAPUI5 and plain-HTML children
			if (node.namespaceURI === "http://www.w3.org/1999/xhtml" || node.namespaceURI === "http://www.w3.org/2000/svg" ) {
				var id = node.attributes['id'] ? node.attributes['id'].textContent || node.attributes['id'].text : null;
				// plain HTML node - create a new View control
				return [ new sap.ui.core.mvc.XMLView({
					id: id ? oView._oContainingView.createId(id) : undefined,
							xmlNode:node,
							containingView:oView._oContainingView}) ];
				
			} else {
				// non-HTML (SAPUI5) control
				return createControlOrExtension(node);
			}
		}
		
		/**
		 * Creates 0..n UI5 controls from an XML node which is not plain HTML, but a UI5 node (either control or ExtensionPoint).
		 * One control for regular controls, zero for ExtensionPoints without configured extension and
		 * n controls for multi-root Fragments.
		 * 
		 * @return an array with 0..n controls created from a node
		 * @private
		 */
		function createControlOrExtension(node) { // this will also be extended for Fragments with multiple roots
			
			if (localName(node) === "ExtensionPoint" && node.namespaceURI === "sap.ui.core") {
				// ExtensionPoint
				return createExtension(node, oView);
				
			} else {
				// a plain and simple regular UI5 control
				return createRegularControls(node);
			}
		}

		/**
		 * Creates 0..n UI5 controls from an ExtensionPoint node.
		 * One control if the ExtensionPoint is e.g. filled with a View, zero for ExtensionPoints without configured extension and
		 * n controls for multi-root Fragments as extension.
		 * 
		 * @return an array with 0..n controls created from an ExtensionPoint node
		 * @private
		 */
		function createExtension(node, oView) {
			var vResult = undefined;
			
			if (sap.ui.core.CustomizingConfiguration) {
				// Extension Point - is something configured?
				var extensionConfig = sap.ui.core.CustomizingConfiguration.getViewExtension(sCurrentName, node.getAttribute("name"));
				if (extensionConfig) {
					if (extensionConfig.className) {
						jQuery.sap.require(extensionConfig.className); // make sure oClass.getMetadata() exists
						var oClass = jQuery.sap.getObject(extensionConfig.className);
						jQuery.sap.log.info("Customizing: View extension found for extension point '" + node.getAttribute("name") 
								+ "' in View '" + sCurrentName + "': " + extensionConfig.className + ": " + (extensionConfig.viewName || extensionConfig.fragmentName));
								
						if (extensionConfig.className === "sap.ui.core.Fragment") {
							var oFragment = new oClass({
								type: extensionConfig.type, 
								fragmentName: extensionConfig.fragmentName,
								containingView: oView
							});
							vResult = (jQuery.isArray(oFragment) ? oFragment : [oFragment]); // vResult is now an array, even if empty - so if a Fragment is configured, the default content below is not added anymore
							
						} else if (extensionConfig.className === "sap.ui.core.mvc.View") {
							var oView = sap.ui.view({type: extensionConfig.type, viewName: extensionConfig.viewName});
							vResult = [oView]; // vResult is now an array, even if empty - so if a Fragment is configured, the default content below is not added anymore
							
						} else {
							// unknown extension class
							jQuery.sap.log.warning("Customizing: Unknown extension className configured (and ignored) in Component.js for extension point '" + node.getAttribute("name") 
									+ "' in View '" + sCurrentName + "': " + extensionConfig.className);
						}
					} else {
						jQuery.sap.log.warning("Customizing: no extension className configured in Component.js for extension point '" + node.getAttribute("name") 
								+ "' in View '" + sCurrentName + "': " + extensionConfig.className);
					}
				} else {
					// no extension configured
				}
			}
			
			if (!vResult) { // no extension configured or found or customizing disabled - check for default content
				vResult = [];
				var children = node.childNodes;
				for (var i = 0; i < children.length; i++) {
					var oChildNode = children[i];
					if (oChildNode.nodeType === 1 /* ELEMENT_NODE */) { // text nodes are ignored - plaintext inside extension points is not supported; no warning log because even whitespace is a text node
						vResult = jQuery.merge(vResult, createControls(oChildNode));
					}
				}
			}
			
			return vResult || [];
		}
		
		/**
		 * Creates 0..n UI5 controls from an XML node.
		 * One control for regular controls, zero for ExtensionPoints without configured extension and
		 * n controls for multi-root Fragments.
		 * 
		 * @return an array with 0..n controls created from a node
		 * @private
		 */
		function createRegularControls(node) {
			var ns = node.namespaceURI,
			oClass = findControlClass(ns, localName(node)),
			oMetadata = oClass.getMetadata(),
			mJSONKeys = oMetadata.getJSONKeys(),
			mSettings = {},
			sStyleClasses = "",
			aCustomData = [],
			sOriginalControlId;

			for (var i = 0; i < node.attributes.length; i++) {
				var attr = node.attributes[i];

				var sName = attr.name;
				var sValue = attr.value;

				// apply the value of the attribute to a
				//   * property,
				//   * association (id of the control),
				//   * event (name of the function in the controller) or
				//   * CustomData element (namespace-prefixed attribute)

				var oInfo = mJSONKeys[sName];

				if (sName === "id") {
					// special handling for ID
					mSettings[sName] = oView._oContainingView.createId(sValue);
					sOriginalControlId = sValue;

				} else if (sName === "class") {
					// special handling for CSS classes, which will be added via addStyleClass()
					sStyleClasses += sValue;

				} else if (sName === "viewName") {
					mSettings[sName] = sValue;

				} else if (sName === "fragmentName") {
					mSettings[sName] = sValue;
					mSettings['containingView'] = oView._oContainingView;

				} else if (sName === "binding") {
					var oBindingInfo = sap.ui.base.ManagedObject.bindingParser(sValue, oView._oContainingView.oController)
					// TODO reject complex bindings, types, formatters; enable 'parameters'? 
					mSettings.objectBindings = mSettings.objectBindings || {};
					mSettings.objectBindings[oBindingInfo.model || undefined] = oBindingInfo;

				} else if (sName.indexOf(":") > -1) {  // namespace-prefixed attribute found
					if (attr.namespaceURI === "http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1") {  // CustomData attribute found
						var sLocalName = localName(attr);
						aCustomData.push(new sap.ui.core.CustomData({
							key:sLocalName,
							value:parseScalarType("any", sValue, sLocalName, oView._oContainingView.oController)
						}));
					} else if ( sName.indexOf("xmlns:") !== 0 ) { // other, unknown namespace and not an xml namespace alias definition
						jQuery.sap.log.warning(oView + ": XMLView parser encountered and ignored attribute '" + sName + "' (value: '" + sValue + "') with unknown namespace");
						// TODO: here XMLView could check for namespace handlers registered by the application for this namespace which could modify mSettings according to their interpretation of the attribute
					}

				} else if (oInfo && oInfo._iKind === 0 /* PROPERTY */ ) {
					// other PROPERTY
					mSettings[sName] = parseScalarType(oInfo.type, sValue, sName, oView._oContainingView.oController);

				} else if (oInfo && oInfo._iKind === 1 /* SINGLE_AGGREGATION */ && oInfo.altTypes ) {
					// AGGREGATION with scalar type (altType)
					mSettings[sName] = parseScalarType(oInfo.altTypes[0], sValue, sName, oView._oContainingView.oController);

				} else if (oInfo && oInfo._iKind === 2 /* MULTIPLE_AGGREGATION */ ) {
					var oBindingInfo = sap.ui.base.ManagedObject.bindingParser(sValue, oView._oContainingView.oController);
					if ( oBindingInfo ) {
						mSettings[sName] = oBindingInfo;
					} else {
						// TODO we now in theory allow more than just a binding path. Update message?
						jQuery.sap.log.error(oView + ": aggregations with cardinality 0..n only allow binding paths as attribute value (wrong value: " + sName + "='" + sValue + "')");
					}

				} else if (oInfo && oInfo._iKind === 3 /* SINGLE_ASSOCIATION */ ) {
					// ASSOCIATION
					mSettings[sName] = oView.createId(sValue); // use the value as ID

				} else if (oInfo && oInfo._iKind === 4 /* MULTIPLE_ASSOCIATION */ ) {
					// we support "," and " " to separate IDs 
					mSettings[sName] = jQuery.map(sValue.split(/[\s,]+/g), function(sId) {
						// Note: empty IDs need to ignored, therefore splitting by a sequence of separators is okay. 
						return sId ? oView.createId(sId) : null;
					});

				} else if (oInfo && oInfo._iKind === 5 /* EVENT */ ) {
					// EVENT
					var fnEventHandler = oView._oContainingView.oController[sValue];
					if (typeof(fnEventHandler) !== "function") {
						jQuery.sap.log.warning(oView + ": event handler function \"" + sValue + "\" is not a function or does not exist in the controller.");
					}
					if (fnEventHandler) {
						// the handler name is set as property on the function to keep this information
						// e.g. for serializers which converts a control tree back to a declarative format
						fnEventHandler["_sapui_handlerName"] = sValue;
						mSettings[sName] = [fnEventHandler, oView._oContainingView.oController];
					}

				} else if ( sName !== "xmlns" ) {
					jQuery.sap.log.warning(oView + ": XMLTemplateProcessor encountered and ignored unknown attribute '" + sName + "' (value: '" + sValue + "')");
				}
			}
			if (aCustomData.length > 0) {
				mSettings.customData = aCustomData;
			}

			function handleChildren(node, oAggregation, mAggregations) {

				var childNode,oNamedAggregation;

				// loop over all nodes
				for (childNode=node.firstChild; childNode; childNode = childNode.nextSibling) {

					// inspect only element nodes
					if ( childNode.nodeType === 1 /* ELEMENT_NODE */ ) {

						// check for a named aggregation (must have the same namespace as the parent and an aggregation with the same name must exist)
						oNamedAggregation = childNode.namespaceURI === ns && mAggregations && mAggregations[localName(childNode)];
						if (oNamedAggregation) {

							// the children of the current childNode are aggregated controls (or HTML) below the named aggregation
							handleChildren(childNode, oNamedAggregation);

						}
						else if (oAggregation) {
							// child node name does not equal an aggregation name,
							// so this child must be a control (or HTML) which is aggregated below the DEFAULT aggregation
							var aControls = createControls(childNode);
							for (var i = 0; i < aControls.length; i++) {
								var oControl = aControls[i];
								// append the child to the aggregation
								var name = oAggregation._sName;
								if (oAggregation.multiple) {
									// 1..n AGGREGATION
									if (!mSettings[name]) {
										mSettings[name] = [];
									}
									if ( typeof mSettings[name].path === "string" ) {
										jQuery.sap.assert(!mSettings[name].template, "list bindings support only a single template object");
										mSettings[name].template = oControl;
									} else {
										mSettings[name].push(oControl);
									}
								} else {
									// 1..1 AGGREGATION
									jQuery.sap.assert(!mSettings[name], "multiple aggregates defined for aggregation with cardinality 0..1");
									mSettings[name] = oControl;
								}
							}
						} else if (localName(node) !== "FragmentDefinition" || node.namespaceURI !== "sap.ui.core") { // children of FragmentDefinitions are ok, they need no aggregation
							throw new Error("Cannot add direct child without default aggregation defined for control " + oMetadata.getElementName());
						}

					} else if ( childNode.nodeType === 3 /* TEXT_NODE */ ) {
						if ( jQuery.trim(childNode.textContent || childNode.text) ) { // whitespace would be okay
							throw new Error("Cannot add text nodes as direct child of an aggregation. For adding text to an aggregation, a surrounding html tag is needed");
						}
					} // other nodes types are silently ignored

				}
			}

			// loop child nodes and handle all AGGREGATIONS
			var oAggregation = oMetadata.getDefaultAggregation();
			var mAggregations = oMetadata.getAllAggregations();
			handleChildren(node, oAggregation, mAggregations);

			// customizing of control properties
			if (sap.ui.core.CustomizingConfiguration && sOriginalControlId) {
				var mCustomSettings = sap.ui.core.CustomizingConfiguration.getCustomProperties(sCurrentName, sOriginalControlId);
				if (mCustomSettings) {
					mSettings = jQuery.extend(mSettings, mCustomSettings); // override original property initialization with customized property values
				}
			}
			
			// apply the settings to the control
			var vNewControlInstance;
			if (sap.ui.core.mvc.View.prototype.isPrototypeOf(oClass.prototype) && typeof oClass._sType === "string") {
				// for views having a factory function defined we use the factory function!
				vNewControlInstance = sap.ui.view(mSettings, undefined, oClass._sType);
			} else {
				// call the control constructor
				// NOTE: the sap.ui.core.Fragment constructor can return an array containing multiple controls (for multi-root Fragments)
				//   This is the reason for all the related functions around here returning arrays.
				vNewControlInstance = new oClass(mSettings);
			}

			if (sStyleClasses && vNewControlInstance.addStyleClass) {
				// Elements do not have a style class!
				vNewControlInstance.addStyleClass(sStyleClasses);
			}

			if (!vNewControlInstance) {
				vNewControlInstance = [];
			} else if (!jQuery.isArray(vNewControlInstance)) {
				vNewControlInstance = [vNewControlInstance];
			}
			return vNewControlInstance;
		}

	};

}());

}; // end of sap/ui/core/XMLTemplateProcessor.js
if ( !jQuery.sap.isDeclared('sap.ui.core.delegate.ScrollEnablement') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * @namespace
 * @name sap.ui.core.delegate
 * @public
 */

// Provides class sap.ui.core.delegate.ScrollEnablement
jQuery.sap.declare("sap.ui.core.delegate.ScrollEnablement");



(function($) {

	sap.ui.base.Object.extend("sap.ui.core.delegate.ScrollEnablement", /* @lends sap.ui.core.delegate.ScrollEnablement */ {

		/**
		 * Creates a ScrollEnablement delegate that can be attached to Controls requiring
		 * capabilities for scrolling of a certain part of their DOM on mobile devices.
		 *
		 * @class Delegate for touch scrolling on mobile devices
		 *
		 * @author SAP AG
		 *
		 * This delegate uses CSS (-webkit-overflow-scrolling) only if supported. Otherwise the desired
		 * scrolling library is used. Please also consider the documentation
		 * of the library for a proper usage.
		 *
		 * Controls that implement ScrollEnablement should additionally provide the getScrollDelegate method that returns
		 * the current instance of this delegate object
		 *
		 * @extends sap.ui.base.Object
		 * @name sap.ui.core.delegate.ScrollEnablement
		 * @experimental Since 1.5.2. This class is experimental and provides only limited functionality. Also the API might be changed in future.
		 *
		 * @param {sap.ui.core.Control} oControl the Control of which this Scroller is the delegate
		 * @param {string} sScrollContentDom the Id of the element within the DOM of the Control which should be scrollable
		 * @param {object} oConfig the configuration of the scroll delegate
		 * @param {boolean} [oConfig.horizontal=false] Whether the element should be scrollable horizontally
		 * @param {boolean} [oConfig.vertical=false] Whether the element should be scrollable vertically
		 * @param {boolean} [oConfig.zynga=false] If set, then the Zynga scroller (http://zynga.github.com/scroller/) is used otherwise iScroll (http://cubiq.org/iscroll-4) is used.
		 * @param {boolean} [oConfig.preventDefault=false] If set, the default of touchmove is prevented
		 * @param {boolean} [oConfig.nonTouchScrolling=false] If true, the delegate will also be active to allow touch like scrolling with the mouse on non-touch platforms; if set to "scrollbar", there will be normal scrolling with scrollbars and no touch-like scrolling where the content is dragged
		 *
		 * @version 1.18.9
		 * @constructor
		 * @protected
		 */
		constructor : function(oControl, sScrollContentDom, oConfig) {

			sap.ui.base.Object.apply(this);

			this._oControl = oControl;
			this._oControl.addDelegate(this);
			this._sContentId = sScrollContentDom;
			this._bHorizontal = !!oConfig.horizontal;
			this._bVertical = !!oConfig.vertical;
			this._scrollX = 0;
			this._scrollY = 0;
			this._scroller = null;
			this._scrollbarClass = oConfig.scrollbarClass || false;
			this._bounce = oConfig.bounce;

			initDelegateMembers(this, oConfig);

			if(this._init){
				this._init.apply(this, arguments);
			}
		},

		/**
		 * Enable or disable horizontal scrolling.
		 *
		 * @param {boolean} bHorizontal set true to enable horizontal scrolling, false - to disable
		 * @protected
		 */
		setHorizontal : function(bHorizontal) {
			this._bHorizontal = !!bHorizontal;

			if (this._scroller) {
				if (this._zynga) {

					// Zynga keeps scrolling options internally
					this._scroller.options.scrollingX = this._bHorizontal;
				} else {
					// iScroll
					this._scroller.hScroll = this._scroller.hScrollbar = this._bHorizontal;
					this._scroller._scrollbar('h');
				}
			} else if(this._setOverflow) { // native scrolling
				this._setOverflow();
			}
		},

		/**
		 * Enable or disable vertical scrolling.
		 *
		 * @param {boolean} bVertical set true to enable vertical scrolling, false - to disable
		 * @protected
		 */
		setVertical : function(bVertical) {
			this._bVertical = !!bVertical;

			if (this._scroller) {
				if (this._zynga) {

					// Zynga options
					this._scroller.options.scrollingY = this._bVertical;
				} else {

					// iScroll
					this._scroller.vScroll = this._scroller.vScrollbar = this._bVertical;
					this._scroller._scrollbar('v');
				}
			} else if(this._setOverflow) { //native scrolling
				this._setOverflow();
			}
		},

		/**
		 * Get current setting for horizontal scrolling.
		 *
		 * @return {boolean} true if horizontal scrolling is enabled
		 * @protected
		 * @since 1.9.1
		 */
		getHorizontal : function() {
			return this._bHorizontal;
		},

		/**
		 * Get current setting for vertical scrolling.
		 *
		 * @return {boolean} true if vertical scrolling is enabled
		 * @protected
		 * @since 1.9.1
		 */
		getVertical : function() {
			return this._bVertical;
		},

		/**
		 * Setter for property <code>bounce</code>.
		 *
		 * @param {boolean} bBounce new value for property <code>bounce</code>.
		 * @protected
		 * @since 1.17
		 */
		setBounce: function(bBounce) {
			this._bounce = !!bBounce;
		},

		/**
		 * Set overflow control on top of scroll container.
		 *
		 * @param {sap.ui.core.Control} top control that should be normally hidden over
		 * the top border of the scroll container (pull-down content).
		 * This function is supported in iScroll delegates only. In MouseScroll delegates the element is not hidden and should have an appropriate rendering for being always displayed and should have an alternative way for triggering (e.g. a Button).
		 * @protected
		 * @since 1.9.2
		 */
		setPullDown : function(oControl) {
			this._oPullDown = oControl;
			return this;
		},

		/**
		 * Sets GrowingList control to scroll container
		 *
		 * @param {sap.m.GrowingList} GrowingList instance
		 * This function is supported in iScroll and mouse delegates only.
		 * @protected
		 * @since 1.11.0
		 */
		setGrowingList : function(oGrowingList, fnScrollLoadCallback) {
			this._oGrowingList = oGrowingList;
			this._fnScrollLoadCallback = jQuery.proxy(fnScrollLoadCallback, oGrowingList);
			return this;
		},

		/**
		 * Sets IconTabBar control to scroll container
		 *
		 * @param {sap.m.IconTabBar} IconTabBar instance
		 * This function is supported in iScroll only.
		 * @protected
		 * @since 1.16.1
		 */
		setIconTabBar : function(oIconTabBar, fnScrollEndCallback, fnScrollStartCallback) {
			this._oIconTabBar = oIconTabBar;
			this._fnScrollEndCallback = jQuery.proxy(fnScrollEndCallback, oIconTabBar);
			this._fnScrollStartCallback = jQuery.proxy(fnScrollStartCallback, oIconTabBar);
			return this;
		},

		scrollTo : function(x, y, time) {
			this._scrollX = x; // remember for later rendering
			this._scrollY = y;
			this._scrollTo(x, y, time);
			return this;
		},

		/**
		 * Destroys this Scrolling delegate.
		 *
		 * This function must be called by the control which uses this delegate in the <code>exit</code> function.
		 * @protected
		 */
		destroy : function() {
			if(this._exit){
				this._exit();
			}

			if(this._oControl){
				this._oControl.removeDelegate(this);
				this._oControl = undefined;
			}
		},

		/**
		 * Refreshes this Scrolling delegate.
		 *
		 * @protected
		 */
		refresh : function() {
			if(this._refresh){
				this._refresh();
			}
		}

	});


	/* =========================================================== */
	/* Delegate members for usage of iScroll library               */
	/* =========================================================== */


	var oIScrollDelegate = {

		getScrollTop : function() {
			return this._scrollY;
		},

		getScrollLeft : function() {
			return this._scrollX;
		},

		getMaxScrollTop : function() {
			return -this._scroller.maxScrollY;
		},

		_scrollTo : function(x, y, time) {
			this._scroller.scrollTo(-x, -y, time, false);
		},

		_refresh : function() {
			if (this._scroller && this._sScrollerId) {
				var oScroller = $.sap.domById(this._sScrollerId);

				if (oScroller && (oScroller.offsetHeight > 0)) { // only refresh if rendered and not collapsed to zero height (e.g. display: none)

					this._bIgnoreScrollEnd = true; // this refresh may introduce wrong position 0 after invisible rerendering
					this._scroller.refresh();
					this._bIgnoreScrollEnd = false;

					// and if scroller is not yet at the correct position (e.g. due to rerendering) move it there
					if (-this._scrollX != this._scroller.x || -this._scrollY != this._scroller.y) {
						this._scroller.scrollTo(-this._scrollX, -this._scrollY, 0);
					}

					// reset scrollTop of the section after webkit soft keyboard is closed
					if(this._scroller.wrapper && this._scroller.wrapper.scrollTop){
						this._scroller.wrapper.scrollTop = 0;
					}
				}
			}
		},

		_cleanup : function() {
			this._toggleResizeListeners(false);

			if (this._scroller) {
				this._scroller.stop();
				this._scrollX = -this._scroller.x; // remember position for after rendering
				var oScroller = $.sap.domById(this._sScrollerId);

				if (oScroller && (oScroller.offsetHeight > 0)) {
					this._scrollY = -this._scroller.y;
				}

				this._scroller.destroy();
				this._scroller = null;
			}
		},

		_toggleResizeListeners : function(bToggle){

			if(this._sScrollerResizeListenerId){
				sap.ui.core.ResizeHandler.deregister(this._sScrollerResizeListenerId);
				this._sScrollerResizeListenerId = null;
			}

			if(this._sContentResizeListenerId){
				sap.ui.core.ResizeHandler.deregister(this._sContentResizeListenerId);
				this._sContentResizeListenerId = null;
			}

			if(bToggle && this._sContentId && $.sap.domById(this._sContentId)){

				//TODO Prevent a double refresh
				var $fRefresh = $.proxy(this._refresh, this);
				this._sScrollerResizeListenerId = sap.ui.core.ResizeHandler.register( $.sap.domById(this._sScrollerId), $fRefresh );
				this._sContentResizeListenerId = sap.ui.core.ResizeHandler.register( $.sap.domById(this._sContentId), $fRefresh );
			}

		},

		onBeforeRendering : function() {
			this._cleanup();
		},

		onfocusin: function(evt) {
			// on Android Inputs need to be scrolled into view
			if (sap.ui.core.delegate.ScrollEnablement._bScrollToInput && sap.ui.Device.os.android) {
				var element = evt.srcElement;
				this._sTimerId && jQuery.sap.clearDelayedCall(this._sTimerId);
				if (element && element.nodeName &&
						(element.nodeName.toUpperCase() === "INPUT" || element.nodeName.toUpperCase() === "TEXTAREA")) {
					this._sTimerId = jQuery.sap.delayedCall(400, this, function() {
						var offset = this._scroller._offset(element);
						offset.top += 48;
						this._scroller.scrollTo(offset.left, offset.top);
					});
				}
			}
		},

		onAfterRendering : function() {
			var that = this,
				bBounce = (this._bounce !== undefined) ? this._bounce : sap.ui.Device.os.ios;

			var $Content = $.sap.byId(this._sContentId);

			this._sScrollerId = $Content.parent().attr("id");

			// Fix for displaced edit box overlay on scrolled pages in Android 4.x and 2.3.4 browsers:
			var bDontUseTransform = (
					!!sap.ui.Device.os.android &&
					!sap.ui.Device.browser.chrome &&
					(sap.ui.Device.os.version == 4 || !sap.ui.Device.os.versionStr.indexOf("2.3.4")) &&
					$Content.find("input,textarea").length
				);

			this._iTopOffset = this._oPullDown && this._oPullDown.getDomRef && this._oPullDown.getDomRef().offsetHeight || 0;

			var x = this._scrollX || 0,
				y = this._scrollY || 0;
			
			// RTL adaptations
			if (sap.ui.getCore().getConfiguration().getRTL()) {
				// iScroll does not support RTL, so in RTL mode we need some tweaks (see https://github.com/cubiq/iscroll/issues/247)
				$Content.attr("dir", "rtl");
				var $Parent = $Content.parent();
				$Parent.attr("dir", "ltr");
				
				if (!this._bScrollPosInitialized) {
					x = this._scrollX = $Content.width() - $Parent.width(); // initial scroll position: scrolled to the right edge in RTL
					this._bScrollPosInitialized = true;
				}
			}

			this._scroller = new window.iScroll(this._sScrollerId, {
				useTransition: true,
				useTransform: !bDontUseTransform,
				hideScrollbar: true,
				fadeScrollbar: true,
				bounce: !!bBounce,
				momentum: true,
				handleClick: false,	/* implicitly set to false otherwise we have double click event */
				hScroll: this._bHorizontal,
				vScroll: this._bVertical,
				x: -x,
				y: -y,
				topOffset: this._iTopOffset,
				scrollbarClass: this._scrollbarClass,
				onBeforeScrollStart: function(oEvent) {

					// A touch on a scrolling list means "stop scrolling" and not a tap.
					if (that._isScrolling) {

						// Do not allow core to convert touchstart+touchend into a tap event during scrolling:
						oEvent.stopPropagation();

						// Disable native HTML behavior on <a> elements:
						oEvent.preventDefault();
					}
				},

				onScrollEnd: function() {
					if (!that._bIgnoreScrollEnd && that._scroller) { // that.scroller can be undefined when scrolled into the empty place
						that._scrollX = -that._scroller.x;
						that._scrollY = -that._scroller.y;
					}

					if (that._oPullDown) {
						that._oPullDown.doScrollEnd();
					}

					if (that._oGrowingList && that._fnScrollLoadCallback) {

						// start loading if 75% of the scroll container is scrolled
						var scrollThreshold = Math.floor(this.wrapperH / 4);
						var bInLoadingLimit = -this.maxScrollY + this.y < scrollThreshold;

						// user needs to scroll bottom and must be in loading range
						if (this.dirY > 0 && bInLoadingLimit) {
							that._fnScrollLoadCallback();
						}

					}

					if (that._oIconTabBar && that._fnScrollEndCallback) {
						that._fnScrollEndCallback();
					}

					that._isScrolling = false;
				},

				onRefresh: function(){
					if (that._oPullDown) {
						that._oPullDown.doRefresh();
					}

					// Reset resize listeners after each refresh to avoid concurrent errors like in
					// the following case:
					// 1. List height: 2000px. Resize handler remembers it
					// 2. PullToRefresh calls refresh, list is empty, height: 800px, iScroll remembers it
					// 3. List is filled again, no change, list height is 2000px.
					// 4. Resize handler checks after 200ms and finds no changes: iScroll has wrong size and
					//    must be refreshed.
					// Due to this, refresh and resize handler registration should be done synchronously
					that._toggleResizeListeners(true);
				},

				onScrollMove: function(oEvent) {
					if (!that._isScrolling) {

						// Workaround for problems with active input and textarea: close keyboard on scroll start
						var rIsTextField = /(INPUT|TEXTAREA)/i,
							oActiveEl = document.activeElement;

						if (rIsTextField.test(oActiveEl.tagName) && oEvent.target !== oActiveEl ) {
							oActiveEl.blur();
						}
					}

					that._isScrolling = true;

					if (that._oPullDown) {
						that._oPullDown.doScrollMove();
					}

					if (that._oIconTabBar && that._fnScrollStartCallback) {
						that._fnScrollStartCallback();
					}
				}
			});

			// Traverse the parents and check if any has a ScrollDelegate with the same vertical or horizontal scroll.
			// Controls that implement ScrollEnablement should provide the getScrollDelegate method.
			for (var oParent = this._oControl; oParent = oParent.oParent;) {
				var oSD = oParent.getScrollDelegate ? oParent.getScrollDelegate() : null;
				if(oSD && (oSD.getVertical() && this.getVertical() || oSD.getHorizontal() && this.getHorizontal())){
					this._scroller._sapui_isNested = true;
					break;
				}
			}

			// SAP modification: disable nested scrolling.
			this._scroller._move = function(oEvent){

				if(oEvent._sapui_handledByControl && !oEvent._sapui_scroll){ return; }

				// Enable scrolling of outer container when the inner container is scrolled to the end
				// so that a user can "pull out" contents that have been accidentally moved outside of
				// the scrolling container by momentum scrolling.
				if(this._sapui_isNested){
					oEvent._sapui_handledByControl =
						!(this.dirY < 0 && this.y >= 0) &&
						!(this.dirY > 0 && this.y <= this.maxScrollY) &&
						!(this.dirX < 0 && this.x >= 0) &&
						!(this.dirX > 0 && this.x <= this.maxScrollX);
				}

				window.iScroll.prototype._move.call(this,oEvent);
			};

			// re-apply scrolling position after rendering - but only if changed and the height is > 0
			var oScroller = $Content.parent()[0];

			if (oScroller && (oScroller.offsetHeight > 0)) {
				if (this._scrollX != -this._scroller.x || this._scrollY != -this._scroller.y){
					this._scroller.scrollTo(-this._scrollX, -this._scrollY, 0);
				}
			}

			// listen to size changes
			this._toggleResizeListeners(true);

		},

		ontouchmove : function(oEvent) {

			if (this._preventTouchMoveDefault) {

				//Prevent the default touch action e.g. scrolling the whole page
				oEvent.preventDefault();
			}
		}
	};

	/* =========================================================== */
	/* Delegate members for usage of Zynga library                 */
	/* =========================================================== */

	var oZyngaDelegate = {

		_refresh : function() {
			if (this._scroller && this._sContentId && $.sap.domById(this._sContentId)) {
				var $Content = $.sap.byId(this._sContentId);
				var $Container = $Content.parent();
				this._scroller.setDimensions($Container.width(), $Container.height(), $Content.width(), $Content.height());
			}
		},

		_cleanup : function() {
			if(this._sScrollerResizeListenerId){
				sap.ui.core.ResizeHandler.deregister(this._sScrollerResizeListenerId);
				this._sScrollerResizeListenerId = null;
			}

			if(this._sContentResizeListenerId){
				sap.ui.core.ResizeHandler.deregister(this._sContentResizeListenerId);
				this._sContentResizeListenerId = null;
			}

			if (this._scroller) {
				var oVals = this._scroller.getValues();
				this._scrollX = oVals.left; // remember position for after rendering
				this._scrollY = oVals.top;
			}
		},

		_scrollTo : function(x, y, time){
			if(this._scroller){
				if (!isNaN(time)){
					this._scroller.options.animationDuration = time;
				}
				this._scroller.scrollTo(x, y, !!time);
			}
		},

		onBeforeRendering : function() {
			this._cleanup();
		},

		onAfterRendering : function() {
			this._refresh();

			this._scroller.scrollTo(this._scrollX, this._scrollY, false);

			this._sContentResizeListenerId = sap.ui.core.ResizeHandler.register(
				$.sap.domById(this._sContentId),
				$.proxy(function(){
					if((!this._sContentId || !$.sap.domById(this._sContentId)) && this._sContentResizeListenerId){
						sap.ui.core.ResizeHandler.deregister(this._sContentResizeListenerId);
						this._sContentResizeListenerId = null;
					}else{
						this._refresh();
					}
				}, this)
			);
		},

		ontouchstart : function(oEvent) {

			// Don't react if initial down happens on a form element
			if (oEvent.target.tagName.match(/input|textarea|select/i)) {
				return;
			}

			this._scroller.doTouchStart(oEvent.touches, oEvent.timeStamp);
		},

		ontouchend : function(oEvent) {
			this._scroller.doTouchEnd(oEvent.timeStamp);
		},

		ontouchmove : function(oEvent) {
			this._scroller.doTouchMove(oEvent.touches, oEvent.timeStamp);
			if(this._preventTouchMoveDefault) {
				//Prevent the default touch action e.g. scrolling the whole page
				oEvent.preventDefault();
			} else {
				// Zynga relies on default browser behavior and
				// the app.control prevents default at window level in initMobile
				oEvent.stopPropagation();
			}
		}
	};

	/* =========================================================== */
	/* Native scroll delegate                                      */
	/* =========================================================== */

	var oNativeScrollDelegate = {

		getScrollTop : function() {
			return this._scrollY || 0;
		},

		getScrollLeft : function() {
			return this._scrollX || 0;
		},

		getMaxScrollTop : function() {
			return (this._$Container && this._$Container.length) ? this._$Container[0].scrollHeight - this._$Container.height() : -1;
		},

		_setOverflow : function(){
			var $Container = this._$Container;
			if(!$Container || !$Container[0]) return;

			// Let container scroll into the configured directions
			$Container.css("z-index", "0"); // performance hack for webkit
			if(sap.ui.Device.os.ios){
				$Container
					.css("overflow-x", this._bHorizontal ? "scroll" : "hidden")
					.css("overflow-y", this._bVertical ? "scroll" : "hidden")
					.css("-webkit-overflow-scrolling", "touch");
			} else { //other browsers do not support -webkit-overflow-scrolling
				$Container
					.css("overflow-x", this._bHorizontal ? "auto" : "hidden")
					.css("overflow-y", this._bVertical ? "auto" : "hidden");
			}

			// Make sure that contents fits between headers and footers in case of absolute
			// positioned content section (Page: absolute, Dialog: relative):
			if(window.getComputedStyle($Container[0]).position == "absolute"){
				var header = $Container.prev()[0];
				if(header){
					var top = header.offsetHeight + header.offsetTop;
					if($Container[0].offsetTop != top){
						$Container.css("top", top + "px");
					}
				}
				var footer = $Container.next()[0];
				if(footer){
					var bottom = footer.parentElement.clientHeight - footer.offsetTop;
					if($Container[0].offsetTop + $Container[0].clientHeight != bottom){
						$Container.css("bottom", bottom + "px");
					}
				}
				// Remove iScroll border hack.
				$Container.children(".sapMPageScroll").css("border", "none");
			}
		},

		_refresh : function(){
			var $Container = this._$Container;
			if(!$Container || !$Container.height()) return;

			var $Content = $.sap.byId(this._sContentId);

			var top = 0; // additional space for P2R || growing
			if(this._oPullDown && this._oPullDown._bTouchMode){
				// hide pull to refresh (except for state 2 - loading)
				var domRef = this._oPullDown.getDomRef();
				if(domRef){
					top = domRef.offsetHeight + domRef.offsetTop;
					if(this._oPullDown._iState != 2 && this._scrollY < top){
						this._scrollY = top;
					}
				}
			} else if(this._fnScrollLoadCallback){ // make growing list always scrollable
				top = 5;
			} else if(this._bHorizontal && sap.ui.Device.os.ios){ // allow horizontal scrolling on IOS
				top = 2;
			}
			if(top){
				// make sure it always scrolls with the growing list and pull to refresh
				$Content.css("min-height", $Container[0].clientHeight + top + "px");
			}

			if($Container.scrollTop() != this._scrollY){
				$Container.scrollTop(this._scrollY);
			}

			if (!(this._oPullDown && this._oPullDown._bTouchMode)
				&& !this._fnScrollLoadCallback
				&& !!!sap.ui.Device.browser.internet_explorer) {
				// for IE the resize listener must remain in place for the case when navigating away and coming back.
				// For the other browsers it seems to work fine without.
				sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
				this._sResizeListenerId = null;
			}
		},

		_onScroll: function(oEvent) {
			var $Container = this._$Container;

			this._scrollX = $Container.scrollLeft(); // remember position
			this._scrollY = $Container.scrollTop();

			// Growing List/Table
			if (this._fnScrollLoadCallback && $Container[0].scrollHeight - $Container.scrollTop() - $Container.height() < 100 ) {
				this._fnScrollLoadCallback(); // close to the bottom
			}

			// PullToRefresh in pull/touch mode
			if(this._oPullDown){
				this._oPullDown.doScrollMove(this._scrollY, this._bScrolling, true);
			}

			// IconTabBar.
			// TODO: allow native scrolling in IconTabBar
			if(!this._bScrolling && this._fnScrollEndCallback){
				this._fnScrollEndCallback();
			}
		},

		_onStart : function(oEvent){
			var container = this._$Container[0];
			if(!container) return;

			// vertically scrollable, for rubber page prevention
			this._bScrollable = this._bVertical && (container.scrollHeight > container.clientHeight + 1);
			// enable horizontal scrolling on ios
			this._bScrollable = this._bScrollable || this._bHorizontal && sap.ui.Device.os.ios;

			if(this._bScrollable){
				if(sap.ui.Device.os.ios){
					if(container.scrollTop == 0){
						container.scrollTop = 1;
					}
		
					var delta = container.scrollHeight - container.clientHeight;
					if(container.scrollTop === delta){
						container.scrollTop = delta-1;
					}
				}
				this._bScrolling = true;
			}

			// IconTabBar
			if (this._fnScrollStartCallback) {
				this._bScrolling = true;
				this._fnScrollStartCallback();
			}

		},

		_onTouchMove : function(oEvent){
			// Prevent rubber scroll of the whole application window in IOS.
			// see jQuery.sap.mobile.js
			if(this._bScrollable){
				oEvent.setMarked();
				if(window.iScroll){ // if both iScroll and native scrolling are used (IconTabBar)
					oEvent.setMarked("scroll");
				}
			}
		},

		_onEnd : function(){
			if(!this._bScrolling) return;
			// Attention: there still may be momentum scrolling  with two more scroll events thereafter,
			// but PullDown fires the refresh event based on the current scroll state
			this._bScrolling = false;
			if (this._oPullDown && this._oPullDown._bTouchMode) { this._oPullDown.doScrollEnd(); }
			this._refresh();

			// IconTabBar.
			if (this._fnScrollEndCallback) { this._fnScrollEndCallback(); }
		},

		// Mouse drag scrolling, optional.
		// Set options.nonTouchScrolling = true to enable
		_onMouseDown : function(oEvent){
			var container = this._$Container[0];
			if(!container) return;

			if(oEvent.button) return; // react on the left button only

			// Store initial coordinates for mouse drag
			this._iX = container.scrollLeft + oEvent.pageX;
			this._iY = container.scrollTop + oEvent.pageY;

			// initialize scrolling
			this._onStart(oEvent);
		},

		_onMouseMove : function(oEvent){
			if(this._bScrolling){
				this._$Container[0].scrollLeft = this._iX - oEvent.pageX;
				this._$Container[0].scrollTop = this._iY - oEvent.pageY;
			}
		},

		onBeforeRendering: function() {
			if (this._sResizeListenerId) {
				sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
				this._sResizeListenerId = null;
			}

			var $Container = this._$Container;
			if ($Container) {
				if ($Container.height() > 0) {
					this._scrollX = $Container.scrollLeft(); // remember position
					this._scrollY = $Container.scrollTop();
				}
				$Container.off(); // delete all event handlers
			}
		},

		onAfterRendering: function() {

			var $Container = this._$Container = $.sap.byId(this._sContentId).parent();
			var _fnRefresh = jQuery.proxy(this._refresh, this);

			this._setOverflow();

			// apply the previous scroll state
			this._scrollTo(this._scrollX, this._scrollY);

			this._refresh();

			if (!$Container.is(":visible")
				|| !!sap.ui.Device.browser.internet_explorer
				|| this._oPullDown
				|| this._fnScrollLoadCallback) {
				// element may be hidden and have height 0
				this._sResizeListenerId = sap.ui.core.ResizeHandler.register($Container[0], _fnRefresh);
			}

			// Set event listeners
			$Container.scroll(jQuery.proxy(this._onScroll, this));
			if(sap.ui.Device.support.touch){
				$Container
					.on("touchcancel touchend", jQuery.proxy(this._onEnd, this))
					.on("touchstart", jQuery.proxy(this._onStart, this))
					.on("touchmove", jQuery.proxy(this._onTouchMove, this));
			} else if(this._bMouseDrag){
				//TODO: allow mouse dragging scroll on desktop after the text selection issue is clarified
				$Container
					.on("mouseup mouseleave", jQuery.proxy(this._onEnd, this))
					.mousedown(jQuery.proxy(this._onMouseDown, this))
					.mousemove(jQuery.proxy(this._onMouseMove, this));
			}
		},

		_readActualScrollPosition: function() {
			// if container has a size, this method reads the current scroll position and stores it as desired position
			if (this._$Container.width() > 0) {
				this._scrollX = this._$Container.scrollLeft();
			}
			if (this._$Container.height() > 0) {
				this._scrollY = this._$Container.scrollTop();
			}
		},

		_scrollTo: function(x, y, time) {
			if (this._$Container.length > 0) {
				if (time > 0) {
					this._$Container.animate({ scrollTop: y, scrollLeft: x }, time, jQuery.proxy(this._readActualScrollPosition, this));
				} else {
					this._$Container.scrollTop(y);
					this._$Container.scrollLeft(x);
					this._readActualScrollPosition(); // if container is too large no scrolling is possible
				}
			}
		}
	};

	/*
	 * Init delegator prototype according to various conditions.
	 */
	function initDelegateMembers(oScrollerInstance, oConfig) {
		var oDelegateMembers;

		if (!$.support.touch && !$.sap.simulateMobileOnDesktop && !oConfig.nonTouchScrolling) {  //TODO: Maybe find some better criteria
			// nothing to do on desktop browsers when disabled
			return;
		}

		if(sap.ui.Device.support.touch || $.sap.simulateMobileOnDesktop){
			$.sap.require("jquery.sap.mobile");
		}

		oDelegateMembers = {
			_init : function(oControl, sScrollContentDom, oConfig) {

				function createZyngaScroller(contentId, horizontal, vertical){
					var oScroller = new window.Scroller(function(left, top, zoom){
							var $Container = $.sap.byId(contentId).parent();
							$Container.scrollLeft(left);
							$Container.scrollTop(top);
						}, {
							scrollingX: horizontal,
							scrollingY: vertical,
							bouncing: false
					});
					return oScroller;
				}

				function isNativeScrollingSupported() {
					// native scrolling on non-touch devices (desktop) without simulation and with nonTouchScrolling === "scrollbar"
					return !sap.ui.Device.support.touch && !$.sap.simulateMobileOnDesktop && oConfig.nonTouchScrolling === "scrollbar";
				}

				// What library to use?
				var sLib = "n";
				if(oConfig.zynga){
					sLib = "z";
				} else if(!isNativeScrollingSupported()){
					sLib = "i"; // iScroll
				}

				// Initialization
				this._preventTouchMoveDefault = !!oConfig.preventDefault;
				this._scroller = null;
				switch (sLib) {
					case "z": // Zynga library
						$.sap.require("sap.ui.thirdparty.zyngascroll");
						$.extend(this, oZyngaDelegate);
						this._zynga = true;
						this._scroller = createZyngaScroller(this._sContentId, this._bHorizontal, this._bVertical);
						break;
					case "i": // iScroll library
						$.sap.require("sap.ui.thirdparty.iscroll");
						$.extend(this, oIScrollDelegate);
						this._bIScroll = true;
						break;
					default: // native scrolling;
						$.extend(this, oNativeScrollDelegate);
						if(oConfig.nonTouchScrolling === true){
							this._bMouseDrag = true; // optional mouse drag scrolling
						}
						if (sap.ui.getCore().getConfiguration().getRTL()) {
							this._scrollX = 9999; // in RTL case initially scroll to the very right
						}
						break;
				}
			},
			_exit : function() {
				if(this._cleanup){ this._cleanup(); }
				this._scroller = null;
			}
		};
		// Copy over members to prototype
		$.extend(oScrollerInstance, oDelegateMembers);
	}

}(jQuery));

}; // end of sap/ui/core/delegate/ScrollEnablement.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.ViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for View
jQuery.sap.declare("sap.ui.core.mvc.ViewRenderer");

/**
 * @class View renderer.
 * @static
 */
sap.ui.core.mvc.ViewRenderer = {
};

sap.ui.core.mvc.ViewRenderer.addDisplayClass = function(rm, oControl) {
	if (oControl.getDisplayBlock() || (oControl.getWidth() === "100%" && oControl.getHeight() === "100%")) {
		rm.addClass("sapUiViewDisplayBlock");
	}
};
}; // end of sap/ui/core/mvc/ViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.XMLViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for XMLView
jQuery.sap.declare("sap.ui.core.mvc.XMLViewRenderer");


sap.ui.core.mvc.XMLViewRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.mvc.XMLView} oControl an object representation of the control that should be rendered
 */
sap.ui.core.mvc.XMLViewRenderer.render = function(rm, oControl) {

	// write the HTML into the render manager
	var $oldContent = oControl._$oldContent = sap.ui.core.RenderManager.findPreservedContent(oControl.getId());
	if ( $oldContent.length === 0 ) {
		// jQuery.sap.log.debug("rendering " + oControl + " anew");
		var bSubView = oControl.isSubView();
		if(!bSubView){
			rm.write("<div");
			rm.writeControlData(oControl);
			rm.addClass("sapUiView");
			rm.addClass("sapUiXMLView");
			sap.ui.core.mvc.ViewRenderer.addDisplayClass(rm, oControl);
			rm.writeAttribute("data-sap-ui-preserve", oControl.getId());

			if (oControl.getWidth()) {
				rm.addStyle("width", oControl.getWidth());
			}
			if (oControl.getHeight()) {
				rm.addStyle("height", oControl.getHeight());
			}
			rm.writeStyles();

			rm.writeClasses();

			rm.write(">");
		}
		for (var i = 0; i < oControl._aParsedContent.length; i++) {
			var fragment = oControl._aParsedContent[i];
			if(fragment && typeof(fragment) === "string") {
				rm.write(fragment);
			} else {
				rm.renderControl(fragment);
			}
		}
		if (!bSubView) {
			rm.write("</div>");
		}

	} else {

		// render dummy control for early after rendering notification
		rm.renderControl(oControl.oAfterRenderingNotifier);
		
		// jQuery.sap.log.debug("rendering placeholder instead of " + oControl + " (preserved dom)");
		// preserve mode: render only root tag and child controls
		rm.write('<div id="sap-ui-dummy-' + oControl.getId() + '" class="sapUiHidden">');
		for (var i = 0; i < oControl._aParsedContent.length; i++) {
			var fragment = oControl._aParsedContent[i];
			if( typeof(fragment) !== "string") {
				// jQuery.sap.log.debug("replacing preserved DOM for child " + fragment + " with a placeholder");
				jQuery.sap.byId(fragment.getId(), $oldContent).replaceWith('<div id="sap-ui-dummy-' + fragment.getId() + '" class="sapUiHidden"/>');
				rm.renderControl(fragment);
			}
		}
		rm.write('</div>');

	}
};

}; // end of sap/ui/core/mvc/XMLViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.tmpl.DOMElementRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// A renderer for the DOM element control
jQuery.sap.declare("sap.ui.core.tmpl.DOMElementRenderer");

/**
 * @class DOM element renderer.
 * @static
 */
sap.ui.core.tmpl.DOMElementRenderer = {};

/**
 * Renders the DOM element for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRM RenderManager that can be used for writing to the
 *            Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oElement Object representation of the DOM element that should be
 *            rendered
 */
sap.ui.core.tmpl.DOMElementRenderer.render = function(oRM, oElement) {
	    
	// opening tag incl. control data
	oRM.write("<");
	oRM.write(oElement.getTag());
	oRM.writeControlData(oElement);
	
	// add the attributes of the DOM element
	jQuery.each(oElement.getAttributes(), function(iIndex, oAttribute) {
		var sName = oAttribute.getName().toLowerCase();
		if (sName === "class") {
			// the class attribute will be splitted and added separately
			var aClasses = oAttribute.getValue().split(" ");
			jQuery.each(aClasses, function(iIndex, sClass) {
				var sClass = sClass.trim();
				if (sClass) {
					oRM.addClass(sClass);
				}
			});
		} else if (sName === "style") {
			// the style attribute will be splitted and added separately
			var aStyles = oAttribute.getValue().split(";");
			jQuery.each(aStyles, function(iIndex, sStyle) {
				var iIndex = sStyle.indexOf(":");
				if (iIndex != -1) {
					var sKey = sStyle.substring(0, iIndex).trim();
					var sValue = sStyle.substring(iIndex + 1).trim();
					oRM.addStyle(sKey, sValue);
				}
			});
		} else {
			oRM.writeAttributeEscaped(oAttribute.getName(), oAttribute.getValue());
		}
	});
	
	// support for custom classes and styles
	oRM.writeClasses();
	oRM.writeStyles();
	
	// create the nested structure (if required)
	var aElements = oElement.getElements(),
	    bHasChildren = !!oElement.getText() || aElements.length > 0;
	
	if (!bHasChildren) {
		oRM.write("/>");
	} else {
		oRM.write(">");
		
		// append the text (do escaping)
		if (oElement.getText()) {
			oRM.writeEscaped(oElement.getText());
		}
		
		// append the nested DOM elements
		jQuery.each(aElements, function(iIndex, oChildElement) {
			oRM.renderControl(oChildElement);
		});

		// closing tag
		oRM.write("</");
		oRM.write(oElement.getTag());
		oRM.write(">");
	}
};
}; // end of sap/ui/core/tmpl/DOMElementRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.tmpl.TemplateControlRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// A renderer for the ScrollBar control
jQuery.sap.declare("sap.ui.core.tmpl.TemplateControlRenderer");

/**
 * @class Control renderer.
 * @static
 */
sap.ui.core.tmpl.TemplateControlRenderer = {};

/**
 * Renders the Template for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRM RenderManager that can be used for writing to the
 *            Render-Output-Buffer
 * @param {sap.ui.core.tmpl.TemplateControl}
 *            oControl Object representation of the template control 
 *            that should be rendered
 */
sap.ui.core.tmpl.TemplateControlRenderer.render = function(oRM, oControl) {
	
	// render the control
	/*
	var rHTML = /([^<]*)<(\w+)([^>]*)>/i.exec(sHTML);
	if (rHTML) {
		// append the control data
		// TODO: addStyleClass and attributes support!
		oRM.write(rHTML[1]);
		oRM.write("<");
		oRM.write(rHTML[2]);
		oRM.writeControlData(oControl);
		oRM.write(rHTML[3]);
		oRM.write(">");
		oRM.write(sHTML.substring(rHTML[0].length));
	} else {
		// TODO: is this really valid or should we put a root tag around
		// to write the control data!
		oRM.write(sHTML);
	}
	*/

	// check the control being inlined
	var bInline = oControl.isInline();
	
	// we need to make sure to have a common root tag (therefore we add a DIV)
	// if we have no common root tag, the re-rendering would not clean up
	// the old markup properly.
	//   -> the approach above enhance the root tag from the template
	if (!bInline) {
		oRM.write("<div");
		oRM.writeControlData(oControl);
		oRM.writeStyles();
		oRM.writeClasses();
		oRM.write(">");
	}
	
	// in case of declaring a control the renderTemplate function is part of the
	// specific renderer implementation - in case of anonymous template controls
	// the renderer is defined at the control instance
	var fnRenderer = this.renderTemplate || oControl.getTemplateRenderer();
	if (fnRenderer) {
		fnRenderer.apply(this, arguments);
	}
	
	if (!bInline) {
		oRM.write("</div>");
	}
	
};

}; // end of sap/ui/core/tmpl/TemplateControlRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.util.LibraryInfo') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.util.LibraryInfo
jQuery.sap.declare("sap.ui.core.util.LibraryInfo");



/**
 * Provides library information.
 * @class Provides library information.
 *
 * @extends sap.ui.base.Object
 * @author SAP AG
 * @version 1.18.9
 * @constructor
 * @private
 * @name sap.ui.core.util.LibraryInfo
 */
sap.ui.base.Object.extend("sap.ui.core.util.LibraryInfo", {
	constructor : function() {
		sap.ui.base.Object.apply(this);
		this._oLibInfos = {};
	},
	
	destroy : function() {
		sap.ui.base.Object.prototype.destroy.apply(this, arguments);
		this._oLibInfos = {};
	},
	
	getInterface : function() {
		return this;
	}
});


sap.ui.core.util.LibraryInfo.prototype._getLibraryInfo = function(sLibraryName, fnCallback) {
	sLibraryName = sLibraryName.replace(/\//g, ".");
	
	if(this._oLibInfos[sLibraryName]){
		jQuery.sap.delayedCall(0, window, fnCallback, [this._oLibInfos[sLibraryName]]);
		return;
	}
	
	var sUrl = jQuery.sap.getModulePath(sLibraryName, '/'),
		that = this;
	
	jQuery.ajax({
		url : sUrl+".library",
		dataType : "xml",
		error : function(xhr, status, e) {
			jQuery.sap.log.error("failed to load library details from '" + sUrl + ".library': " + status + ", " + e);
			that._oLibInfos[sLibraryName] = {name: sLibraryName, data: null, url: sUrl};
			fnCallback(that._oLibInfos[sLibraryName]);
		},
		success : function(oData, sStatus, oXHR) { 
			that._oLibInfos[sLibraryName] = {name: sLibraryName, data: oData, url: sUrl};
			fnCallback(that._oLibInfos[sLibraryName]);
		}
	});
};


sap.ui.core.util.LibraryInfo.prototype._getThirdPartyInfo = function(sLibraryName, fnCallback) {
	this._getLibraryInfo(sLibraryName, function(oData){
		var result = {libs: [], library: oData.name, libraryUrl: oData.url};

		if(oData.data){
			var $Libs = jQuery(oData.data).find("appData").find("thirdparty").children();
			$Libs.each(function(i, o){
				if(o.nodeName === "lib"){
					var $Lib = jQuery(o);
					var $license = $Lib.children("license");
					result.libs.push({
						displayName: $Lib.attr("displayName"),
						homepage: $Lib.attr("homepage"),
						license: {
							url: $license.attr("url"),
							type: $license.attr("type"),
							file: oData.url + $license.attr("file")
						}
					});
				}
			});
		}
		
		fnCallback(result);
	});
};


sap.ui.core.util.LibraryInfo.prototype._getDocuIndex = function(sLibraryName, fnCallback) {
	this._getLibraryInfo(sLibraryName, function(oData){
		var lib = oData.name,
			libUrl = oData.url,
			result = {"docu": {}, library: lib, libraryUrl: libUrl};

		if(!oData.data){
			fnCallback(result);
			return;
		}
			
		var $Doc = jQuery(oData.data).find("appData").find("documentation");
		var sUrl = $Doc.attr("indexUrl");
		
		if(!sUrl){
			fnCallback(result);
			return;
		}
			
		if($Doc.attr("resolve") == "lib"){
			sUrl = oData.url + sUrl;
		}
		
		jQuery.ajax({
			url : sUrl,
			dataType : "json",
			error : function(xhr, status, e) {
				jQuery.sap.log.error("failed to load library docu from '" + sUrl + "': " + status + ", " + e);
				fnCallback(result);
			},
			success : function(oData, sStatus, oXHR) { 
				oData.library = lib;
				oData.libraryUrl = libUrl;
				fnCallback(oData);
			}
		});					
	});
};
}; // end of sap/ui/core/util/LibraryInfo.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ws.ReadyState') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides enumeration sap.ui.core.ws.ReadyState
jQuery.sap.declare("sap.ui.core.ws.ReadyState");

/**
 * @class Defines the different ready states for a WebSocket connection.
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.ws.ReadyState = {

	/**
	 * The connection has not yet been established.
	 * @public
	 */
	CONNECTING: 0,

	/**
	 * The WebSocket connection is established and communication is possible.
	 * @public
	 */
	OPEN: 1,

	/**
	 * The connection is going through the closing handshake.
	 * @public
	 */
	CLOSING: 2,

	/**
	 * The connection has been closed or could not be opened.
	 * @public
	 */
	CLOSED: 3

};

}; // end of sap/ui/core/ws/ReadyState.js
if ( !jQuery.sap.isDeclared('sap.ui.model.BindingMode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides enumeration sap.ui.model.FilterOperator
jQuery.sap.declare("sap.ui.model.BindingMode");

/**
* @class
* Binding type definitions.
*
* @static
* @public
*/
sap.ui.model.BindingMode = {

		/**
		 * BindingMode default means that the binding mode of the model is used
		 * @public
		 */
		Default: "Default",

		/**
		 * BindingMode one time means value is only read from the model once
		 * @public
		 */
		OneTime: "OneTime",

		/**
		 * BindingMode one way means from model to view
		 * @public
		 */
		OneWay: "OneWay",

		/**
		 * BindingMode two way means from model to view and vice versa
		 * @public
		 */
		TwoWay: "TwoWay"

};
}; // end of sap/ui/model/BindingMode.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ChangeReason') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides enumeration for changes in model
jQuery.sap.declare("sap.ui.model.ChangeReason");

/**
* @class
* Change Reason for ListBindings.
*
* @static
* @public
*/
sap.ui.model.ChangeReason = {

		/**
		 * The list was sorted
		 * @public
		 */
		Sort: "sort",

		/**
		 * The List was filtered
		 * @public
		 */
		Filter: "filter",

		/**
		 * The list has changed
		 * @public
		 */
		Change: "change",

		/**
		 * The list context has changed
		 * @public
		 */
		Context: "context",
		/**
		 * The list was refreshed
		 * @public
		 */
		Refresh: "refresh"
};
}; // end of sap/ui/model/ChangeReason.js
if ( !jQuery.sap.isDeclared('sap.ui.model.FilterOperator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides enumeration sap.ui.model.FilterOperator
jQuery.sap.declare("sap.ui.model.FilterOperator");

/**
* @class
* Operators for the Filter.
*
* @static
* @public
*/
sap.ui.model.FilterOperator = {
		/**
		 * FilterOperator equals
		 * @public
		 */
		EQ: "EQ",

		/**
		 * FilterOperator not equals
		 * @public
		 */
		NE: "NE",

		/**
		 * FilterOperator less than
		 * @public
		 */
		LT: "LT",

		/**
		 * FilterOperator less or equals
		 * @public
		 */
		LE: "LE",

		/**
		 * FilterOperator greater than
		 * @public
		 */
		GT: "GT",

		/**
		 * FilterOperator greater or equals
		 * @public
		 */
		GE: "GE",

		/**
		 * FilterOperator between
		 * @public
		 */
		BT: "BT",

		/**
		 * FilterOperator contains
		 * @public
		 */
		Contains: "Contains",

		/**
		 * FilterOperator starts with
		 * @public
		 */
		StartsWith: "StartsWith",

		/**
		 * FilterOperator ends with
		 * @public
		 */
		EndsWith: "EndsWith"
};
}; // end of sap/ui/model/FilterOperator.js
if ( !jQuery.sap.isDeclared('sap.ui.model.FilterType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides enumeration sap.ui.model.FilterOperator
jQuery.sap.declare("sap.ui.model.FilterType");

/**
* @class
* Operators for the Filter.
*
* @static
* @public
*/
sap.ui.model.FilterType = {
		/**
		 * Filters which are changed by the application
		 * @public
		 */
		Application: "Application",

		/**
		 * Filters which are set by the different controls
		 * @public
		 */
		Control: "Control"
};
}; // end of sap/ui/model/FilterType.js
if ( !jQuery.sap.isDeclared('sap.ui.model.FormatException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.model.FormatException");


/**
 * FormatException class
 *
 * This exception is thrown, when an error occurs while trying to convert a value of the model to
 * a specific property value in the UI.
 *
 */
sap.ui.model.FormatException = function(message) {
	this.name = "FormatException";
	this.message = message;
};
sap.ui.model.FormatException.prototype = jQuery.sap.newObject(sap.ui.base.Exception.prototype);
}; // end of sap/ui/model/FormatException.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ParseException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.model.ParseException");


/**
 * ParseException class
 *
 * This exception is thrown, when a parse error occurs while converting a
 * string value to a specific property type in the model.
 */
sap.ui.model.ParseException = function(message) {
	this.name = "ParseException";
	this.message = message;
};
sap.ui.model.ParseException.prototype = jQuery.sap.newObject(sap.ui.base.Exception.prototype);
}; // end of sap/ui/model/ParseException.js
if ( !jQuery.sap.isDeclared('sap.ui.model.Sorter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the concept of a sorter for list bindings
jQuery.sap.declare("sap.ui.model.Sorter");

/**
 *
 * Constructor for Sorter
 *
 * @class
 * Sorter for the list binding
 * This object defines the sort order for the list binding.
 *
 *
 * @param {String} sPath the binding path used for sorting
 * @param {boolean} [bDescending=false] whether the sort order should be descending
 * @param {boolean|function} vGroup configure grouping of the content, can either be true to enable grouping
 *        based on the raw model property value, or a function which calculates the group value out of the 
 *        context (e.g. oContext.getProperty("date").getYear() for year grouping). The control needs to
 *        implement the grouping behaviour for the aggregation which you want to group.
 * @public
 * @name sap.ui.model.Sorter
 */
sap.ui.base.Object.extend("sap.ui.model.Sorter", /** @lends sap.ui.model.Sorter */ {
	
	constructor : function(sPath, bDescending, vGroup){
		if (typeof sPath === "object") {
			var oSorterData = sPath;
			sPath = oSorterData.path;
			bDescending = oSorterData.descending;
			vGroup = oSorterData.group;
		}
		this.sPath = sPath;

		// if a model separator is found in the path, extract model name
		var iSeparatorPos = this.sPath.indexOf(">");
		if (iSeparatorPos > 0) {
			this.sPath = this.sPath.substr(iSeparatorPos + 1);
		}

		this.bDescending = bDescending;
		this.vGroup = vGroup;
		if (typeof vGroup == "boolean" && vGroup) {
			this.fnGroup = function(oContext) {
				return oContext.getProperty(this.sPath);
			}
		}
		if (typeof vGroup == "function") {
			this.fnGroup = vGroup;
		}
	}

});

/**
 * Creates a new subclass of class sap.ui.model.Sorter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.Sorter.extend
 * @function
 */

}; // end of sap/ui/model/Sorter.js
if ( !jQuery.sap.isDeclared('sap.ui.model.Type') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.Type");


/**
 * Constructor for a new Type.
 *
 * @class
 * This is an abstract base class for type objects.
 * @abstract
 *
 * @extends sap.ui.base.Object
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @name sap.ui.model.Type
 */
sap.ui.base.Object.extend("sap.ui.model.Type", /** @lends sap.ui.model.Type */ {
	
	constructor : function () {
		sap.ui.base.Object.apply(this, arguments);
		this.sName = "Type";
	},

	metadata : {
		"abstract" : true,
		publicMethods : [
	    // methods
	    "getName"
	  ]
	}
	
});

/**
 * Creates a new subclass of class sap.ui.model.Type with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.Type.extend
 * @function
 */


/**
 * Returns the name of this type.
 *
 * @return {String} the name of this type
 * @public
 */
sap.ui.model.Type.prototype.getName = function() {
	return this.sName;
};
}; // end of sap/ui/model/Type.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ValidateException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.model.ValidateException");


/**
 * ValidateException class
 *
 * This exception is thrown, when a validation error occurs while checking the
 * defined constraints for a type.
 */
sap.ui.model.ValidateException = function(message, violatedConstraints) {
	this.name = "ValidateException";
	this.message = message;
	this.violatedConstraints = violatedConstraints;
};
sap.ui.model.ValidateException.prototype = jQuery.sap.newObject(sap.ui.base.Exception.prototype);

}; // end of sap/ui/model/ValidateException.js
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.Filter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.model.odata.Filter");


/**
 * Constructor for Filter
 *
 * @class
 * Filter for the list binding
 *
 * @param {string} sPath the binding path for this filter
 * @param {object[]} aValues Array of FilterOperators and their values: [{operator:"GE",value1:"val1"},{operator:"LE",value1:"val1"},{operator:"BT",value1:"val1",value2:"val2"}]
 * @param {boolean} [bAND=true] If true the values from aValues will be ANDed; otherwise ORed
 * @public
 * @name sap.ui.model.odata.Filter
 * @deprecated
 */
sap.ui.base.Object.extend("sap.ui.model.odata.Filter", /** @lends sap.ui.model.odata.Filter */ {
	
	constructor : function(sPath, aValues, bAND){
		if (typeof sPath === "object") {
			var oFilterData = sPath;
			sPath = oFilterData.path;
			aValues = oFilterData.values;
			bAND = oFilterData.and;
		}
		this.sPath = sPath;
		this.aValues = aValues;
		this.bAND = bAND == undefined ? true : bAND;
	}

});

}; // end of sap/ui/model/odata/Filter.js
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.ODataMetadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */



// Provides class sap.ui.model.odata.ODataMetadata
jQuery.sap.declare("sap.ui.model.odata.ODataMetadata");

/*global OData *///declare unusual global vars for JSLint/SAPUI5 validation

/**
 * Constructor for a new ODataMetadata.
 *
 * @param {object} oMetadata the parsed metadata object provided by datajs
 *
 * @class
 * Implementation to access oData metadata
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @name sap.ui.model.odata.ODataMetadata
 * @extends sap.ui.base.Object
 */
sap.ui.base.Object.extend("sap.ui.model.odata.ODataMetadata", /** @lends sap.ui.model.odata.ODataMetadata */ {

	constructor : function(oModel, bLoadMetadataAsync) {

		this.oModel = oModel;
		this.oMetadata = null;
		this._loadMetadata(oModel, bLoadMetadataAsync);
	},

	metadata : {
		publicMethods : ["getServiceMetadata"]
	}

});

/**
 * Loads the metadata for the service
 * @private
 */
sap.ui.model.odata.ODataMetadata.prototype._loadMetadata = function(oModel, bAsync) {

	var oRequest = oModel._createRequest("$metadata", null, bAsync);

	// request the metadata of the service
	var that = this;

	function _handleSuccess(oMetadata, oResponse) {
		that.oMetadata = oMetadata;
		
		if (!oModel.bUseBatch) {
			oModel.bUseBatch = that._getUseBatchExtensionValue();			
		}

		that.oModel.fireMetadataLoaded();

		// trigger loading of data if bindings are already there
		that.oModel.refresh();
	}

	function _handleError(oError) {
		that.oModel.fireMetadataFailed(oError);
		that.oModel._handleError(oError);
	}

	// execute the request
	OData.read(oRequest, _handleSuccess, _handleError, OData.metadataHandler);

};

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataMetadata with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 *
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code>
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.odata.ODataMetadata.extend
 * @function
 */

/**
 * Return the metadata object
 *
 * @return {Object} metdata object
 * @public
 */
sap.ui.model.odata.ODataMetadata.prototype.getServiceMetadata = function() {
	return this.oMetadata;
};


/**
 * Extract the entity type name of a given sPath. Also navigation properties in the path will be followed to get the right entity type for that property.
 * eg.
 * /Categories(1)/Products(1)/Category --> will get the Categories entity type
 * /Products --> will get the Products entity type
 * @return {object} the entity type or null if not found
 */
sap.ui.model.odata.ODataMetadata.prototype._getEntityTypeByPath = function(sPath) {
	if (!sPath) {
		jQuery.sap.assert(undefined, "sPath not defined!");
		return null;
	}
	if (!this.oMetadata || jQuery.isEmptyObject(this.oMetadata)) {
		jQuery.sap.assert(undefined, "No metadata loaded!");
		return null;
	}
	// remove starting and trailing /
	var sCandidate = sPath.replace(/^\/|\/$/g, ""),
		aParts = sCandidate.split("/"),
		iLength = aParts.length,
		aAssociationName,
		oAssociation,
		oParentEntityType,
		oEnd,
		aEntityTypeName,
		oEntityType,
		oResultEntityType,
		that = this;

	// remove key from first path segment if any (e.g. Products(555) --> Products)
	if (aParts[0].indexOf("(") != -1){
		aParts[0] = aParts[0].substring(0,aParts[0].indexOf("("));
	}

	if (iLength > 1 ) {
		// check if navigation property is used
		// e.g. Categories(1)/Products(1)/Category --> Category is a navigation property so we need the collection Categories

		oParentEntityType = that._getEntityTypeByPath(aParts[0]);

		for (var i = 1; i < aParts.length; i++ ){
			if (oParentEntityType) {
				// remove key from current part if any
				if (aParts[i].indexOf("(") != -1){
					aParts[i] = aParts[i].substring(0,aParts[i].indexOf("("));
				}
				// check for navigation properties
				// if no navigation property found we assume that the current part is a normal property so we return the current oParentEntityType
				// which is the parent entity type of that property
				if (oParentEntityType.navigationProperty) {
					oResultEntityType = that._getEntityTypeByNavProperty(oParentEntityType, aParts[i]);
					if (oResultEntityType) {
						oParentEntityType = oResultEntityType;
					}
				}

				oEntityType = oParentEntityType;

			}
		};
	} else {
		// if only one part exists it should be the name of the collection and we can get the entity type for it
		aEntityTypeName = this._splitName(this._getEntityTypeName(aParts[0]));
		oEntityType = this._getObjectMetadata("entityType", aEntityTypeName[0], aEntityTypeName[1]);
		if (oEntityType) {
			// store the type name also in the oEntityType
			oEntityType.entityType = this._getEntityTypeName(aParts[0]);
		}
	}

	// check for function imports
	if (!oEntityType) {
		var sFuncCandName = aParts[aParts.length - 1]; // last segment is always a function import
		var oFuncType = this._getFunctionImportMetadata(sFuncCandName, "GET");
		if (oFuncType && oFuncType.entitySet) { // only collections supported which have an entitySet
			oEntityType = this._getEntityTypeByPath(oFuncType.entitySet);
			if (oEntityType) {
				// store the type name also in the oEntityType
				oEntityType.entityType = this._getEntityTypeName(oFuncType.entitySet);
			}
		}
	}


	//jQuery.sap.assert(oEntityType, "EntityType for path " + sPath + " could not be found!");
	return oEntityType;
};


/**
 * splits a name e.g. Namespace.Name into [Name, Namespace]
 */
sap.ui.model.odata.ODataMetadata.prototype._splitName = function(sFullName) {
	var aParts = [];
	if (sFullName) {
		var iSepIdx = sFullName.lastIndexOf(".");
		aParts[0] = sFullName.substr(iSepIdx + 1);
		aParts[1] = sFullName.substr(0, iSepIdx);
	}
	return aParts;
};


/**
*  search metadata for specified collection name (= entity set name)
*/
sap.ui.model.odata.ODataMetadata.prototype._getEntityTypeName = function(sCollection) {
	var sEntityTypeName;
	if (sCollection) {
		jQuery.each(this.oMetadata.dataServices.schema, function(i, oSchema) {
			if (oSchema.entityContainer) {
				jQuery.each(oSchema.entityContainer, function(k, oEntityContainer) {
					if (oEntityContainer.entitySet) {
						jQuery.each(oEntityContainer.entitySet, function(j, oEntitySet) {
							if (oEntitySet.name === sCollection) {
								sEntityTypeName = oEntitySet.entityType;
								return false;
							}
						});
					}
				});
			}
		});
	}
	//jQuery.sap.assert(sEntityTypeName, "EntityType name of EntitySet "+ sCollection + " not found!");
	return sEntityTypeName;
};

/**
 * get the object of a specified type name and namespace
 */
sap.ui.model.odata.ODataMetadata.prototype._getObjectMetadata = function(sObjectType, sObjectName, sNamespace) {
	var oObject;
	if (sObjectName && sNamespace) {
		// search in all schemas for the sObjectName
		jQuery.each(this.oMetadata.dataServices.schema, function(i, oSchema) {
			// check if we found the right schema which will contain the sObjectName
			if (oSchema[sObjectType] && oSchema.namespace === sNamespace) {
				jQuery.each(oSchema[sObjectType], function(j, oCurrentObject) {
					if (oCurrentObject.name === sObjectName) {
						oObject = oCurrentObject;
						return false;
					}
				});
				return !oObject;
			}
		});
	}
	//jQuery.sap.assert(oObject, "ObjectType " + sObjectType + " for name " + sObjectName + " not found!");
	return oObject;
};

/**
 * get the the use-batch extension value if any
 */
sap.ui.model.odata.ODataMetadata.prototype._getUseBatchExtensionValue = function() {
	var bUseBatch = false;
	// search in all schemas for the use batch extension
	jQuery.each(this.oMetadata.dataServices.schema, function(i, oSchema) {
		if (oSchema.entityContainer) {
			jQuery.each(oSchema.entityContainer, function(k, oEntityContainer) {
				if (oEntityContainer.extensions) {
					jQuery.each(oEntityContainer.extensions, function(l, oExtension) {
						if (oExtension.name === "use-batch" && oExtension.namespace === "http://www.sap.com/Protocols/SAPData") {
							bUseBatch = (typeof oExtension.value === 'string') ? (oExtension.value.toLowerCase() === 'true') : !!oExtension.value;
							return false;
						}
					});
				}
			});
		}
	});
	return bUseBatch;
};

/**
 * Retrieve the function import metadata for a name and a method.
 *
 * @param {string} sFunctionName The name of the function import to look up
 * @param {string} sMethod The HTTP Method for which this function is requested
 */
sap.ui.model.odata.ODataMetadata.prototype._getFunctionImportMetadata = function(sFunctionName, sMethod) {
	var oObject = null;
	// search in all schemas for the sObjectName
	jQuery.each(this.oMetadata.dataServices.schema, function(i, oSchema) {
		// check if we found the right schema which will contain the sObjectName
		if (oSchema["entityContainer"]) {
			jQuery.each(oSchema["entityContainer"], function(j,oEntityContainer) {
				if (oEntityContainer["functionImport"]) {
					jQuery.each(oEntityContainer["functionImport"], function(k,oFunctionImport) {
						if (oFunctionImport.name === sFunctionName && oFunctionImport.httpMethod === sMethod) {
							oObject = oFunctionImport;
							return false;
						}
					});
				}
				return !oObject;
			});
		}
		return !oObject;
	});
//	jQuery.sap.assert(oObject, "FunctionImport for name " + sFunctionName
//			+ " and method " + sMethod + " not found!");
	return oObject;
};


sap.ui.model.odata.ODataMetadata.prototype._getEntityTypeByNavProperty = function(oEntityType, sNavPropertyName) {
	var that = this, aAssociationName, oAssociation, aEntityTypeName, oNavEntityType;

	jQuery.each(oEntityType.navigationProperty, function(k, oNavigationProperty) {
		if (oNavigationProperty.name === sNavPropertyName) {
			// get association for navigation property and then the collection name
			aAssociationName = that._splitName(oNavigationProperty.relationship);
		    oAssociation = that._getObjectMetadata("association", aAssociationName[0], aAssociationName[1]);
			if (oAssociation) {
				var oEnd = oAssociation.end[0];
				if (oEnd.role !== oNavigationProperty.toRole) {
					oEnd = oAssociation.end[1];
				}
				aEntityTypeName = that._splitName(oEnd.type);
				oNavEntityType = that._getObjectMetadata("entityType", aEntityTypeName[0], aEntityTypeName[1]);
				if (oNavEntityType) {
					// store the type name also in the oEntityType
					oNavEntityType.entityType = oEnd.type;
				}
				return false;
			}
		}
	});
	return oNavEntityType;
};

/**
 * get all navigation property names in an array by the specified entity type
 */
sap.ui.model.odata.ODataMetadata.prototype._getNavigationPropertyNames = function(oEntityType) {
	var aNavProps = [];
	if (oEntityType.navigationProperty) {
		jQuery.each(oEntityType.navigationProperty, function(k, oNavigationProperty) {
			aNavProps.push(oNavigationProperty.name);
		});
	}
	return aNavProps;
};

/**
*  extract the property metadata of a specified property of a entity type out of the metadata document
*/
sap.ui.model.odata.ODataMetadata.prototype._getPropertyMetadata = function(oEntityType, sProperty) {
	var oPropertyMetadata, that = this;

	// remove starting/trailing /
	sProperty = sProperty.replace(/^\/|\/$/g, "");
	var aParts = sProperty.split("/"); // path could point to a complex type

	jQuery.each(oEntityType.property, function(k, oProperty) {
		if (oProperty.name === aParts[0]){
			oPropertyMetadata = oProperty;
			return false;
		}
	});

	// check if complex type
	if (oPropertyMetadata && aParts.length > 1 && !jQuery.sap.startsWith(oPropertyMetadata.type.toLowerCase(), "edm.")) {
		var aName = this._splitName(oPropertyMetadata.type);
		oPropertyMetadata = this._getPropertyMetadata(this._getObjectMetadata("complexType", aName[0], aName[1]), aParts[1]);
	}

	// check if navigation property
	if (!oPropertyMetadata && aParts.length > 1) {
		var oParentEntityType = this._getEntityTypeByNavProperty(oEntityType, aParts[0]);
		if (oParentEntityType) {
			oPropertyMetadata = that._getPropertyMetadata(oParentEntityType, aParts[1]);
		}
	}

	//jQuery.sap.assert(oPropertyMetadata, "PropertyType for property "+ aParts[0]+ " of EntityType " + oEntityType.name + " not found!");
	return oPropertyMetadata;
};

}; // end of sap/ui/model/odata/ODataMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.thirdparty.caja-html-sanitizer') ) {
// This file has been generated by the SAPUI5 CreateModule Ant-Task
/* Copyright Google Inc.
 * Licensed under the Apache Licence Version 2.0
 * Autogenerated at Tue May 22 10:18:21 PDT 2012
 * \@overrides window
 * \@provides cssSchema, CSS_PROP_BIT_QUANTITY, CSS_PROP_BIT_HASH_VALUE, CSS_PROP_BIT_NEGATIVE_QUANTITY, CSS_PROP_BIT_QSTRING_CONTENT, CSS_PROP_BIT_QSTRING_URL, CSS_PROP_BIT_HISTORY_INSENSITIVE, CSS_PROP_BIT_Z_INDEX, CSS_PROP_BIT_ALLOWED_IN_LINK */
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_QUANTITY = 1;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_HASH_VALUE = 2;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_NEGATIVE_QUANTITY = 4;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_QSTRING_CONTENT = 8;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_QSTRING_URL = 16;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_HISTORY_INSENSITIVE = 32;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_Z_INDEX = 64;
/**
 * @const
 * @type {number}
 */
var CSS_PROP_BIT_ALLOWED_IN_LINK = 128;
var cssSchema = (function () {
    var s = [
      'rgb(?:\\(\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)|a\\(\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0|\\d+(?:\\.\\d+)?%)\\s*,\\s*(?:\\d+|0(?:\\.\\d+)?|\\.\\d+|1(?:\\.0+)?|0|\\d+(?:\\.\\d+)?%)) *\\)'
    ], c = [ /^ *$/i, RegExp('^ *(?:\\s*' + s[ 0 ] + '|(?:\\s*' + s[ 0 ] +
        ')?)+ *$', 'i'), RegExp('^ *\\s*' + s[ 0 ] + ' *$', 'i'),
      RegExp('^ *\\s*' + s[ 0 ] + '\\s*' + s[ 0 ] + ' *$', 'i') ], L = [ [
        'aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure', 'beige',
        'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet', 'brown',
        'burlywood', 'cadetblue', 'chartreuse', 'chocolate', 'coral',
        'cornflowerblue', 'cornsilk', 'crimson', 'cyan', 'darkblue',
        'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkkhaki',
        'darkmagenta', 'darkolivegreen', 'darkorange', 'darkorchid', 'darkred',
        'darksalmon', 'darkseagreen', 'darkslateblue', 'darkslategray',
        'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray',
        'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'fuchsia',
        'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green',
        'greenyellow', 'honeydew', 'hotpink', 'indianred', 'indigo', 'ivory',
        'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon',
        'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow',
        'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen',
        'lightskyblue', 'lightslategray', 'lightsteelblue', 'lightyellow',
        'lime', 'limegreen', 'linen', 'magenta', 'maroon', 'mediumaquamarine',
        'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen',
        'mediumslateblue', 'mediumspringgreen', 'mediumturquoise',
        'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose',
        'moccasin', 'navajowhite', 'navy', 'oldlace', 'olive', 'olivedrab',
        'orange', 'orangered', 'orchid', 'palegoldenrod', 'palegreen',
        'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru',
        'pink', 'plum', 'powderblue', 'purple', 'red', 'rosybrown',
        'royalblue', 'saddlebrown', 'salmon', 'sandybrown', 'seagreen',
        'seashell', 'sienna', 'silver', 'skyblue', 'slateblue', 'slategray',
        'snow', 'springgreen', 'steelblue', 'tan', 'teal', 'thistle', 'tomato',
        'turquoise', 'violet', 'wheat', 'white', 'whitesmoke', 'yellow',
        'yellowgreen' ], [ 'all-scroll', 'col-resize', 'crosshair', 'default',
        'e-resize', 'hand', 'help', 'move', 'n-resize', 'ne-resize', 'no-drop',
        'not-allowed', 'nw-resize', 'pointer', 'progress', 'row-resize',
        's-resize', 'se-resize', 'sw-resize', 'text', 'vertical-text',
        'w-resize', 'wait' ], [ '-moz-inline-box', '-moz-inline-stack',
        'block', 'inline', 'inline-block', 'inline-table', 'list-item',
        'run-in', 'table', 'table-caption', 'table-cell', 'table-column',
        'table-column-group', 'table-footer-group', 'table-header-group',
        'table-row', 'table-row-group' ], [ 'armenian', 'circle', 'decimal',
        'decimal-leading-zero', 'disc', 'georgian', 'lower-alpha',
        'lower-greek', 'lower-latin', 'lower-roman', 'square', 'upper-alpha',
        'upper-latin', 'upper-roman' ], [ '100', '200', '300', '400', '500',
        '600', '700', '800', '900', 'bold', 'bolder', 'lighter' ], [
        'condensed', 'expanded', 'extra-condensed', 'extra-expanded',
        'narrower', 'semi-condensed', 'semi-expanded', 'ultra-condensed',
        'ultra-expanded', 'wider' ], [ 'behind', 'center-left', 'center-right',
        'far-left', 'far-right', 'left-side', 'leftwards', 'right-side',
        'rightwards' ], [ 'large', 'larger', 'small', 'smaller', 'x-large',
        'x-small', 'xx-large', 'xx-small' ], [ '-moz-pre-wrap', '-o-pre-wrap',
        '-pre-wrap', 'nowrap', 'pre', 'pre-line', 'pre-wrap' ], [ 'dashed',
        'dotted', 'double', 'groove', 'outset', 'ridge', 'solid' ], [
        'baseline', 'middle', 'sub', 'super', 'text-bottom', 'text-top' ], [
        'caption', 'icon', 'menu', 'message-box', 'small-caption', 'status-bar'
      ], [ 'fast', 'faster', 'slow', 'slower', 'x-fast', 'x-slow' ], [ 'above',
        'below', 'higher', 'level', 'lower' ], [ 'border-box', 'contain',
        'content-box', 'cover', 'padding-box' ], [ 'cursive', 'fantasy',
        'monospace', 'sans-serif', 'serif' ], [ 'loud', 'silent', 'soft',
        'x-loud', 'x-soft' ], [ 'no-repeat', 'repeat-x', 'repeat-y', 'round',
        'space' ], [ 'blink', 'line-through', 'overline', 'underline' ], [
        'high', 'low', 'x-high', 'x-low' ], [ 'absolute', 'relative', 'static'
      ], [ 'capitalize', 'lowercase', 'uppercase' ], [ 'child', 'female',
        'male' ], [ 'bidi-override', 'embed' ], [ 'bottom', 'top' ], [ 'clip',
        'ellipsis' ], [ 'continuous', 'digits' ], [ 'hide', 'show' ], [
        'inside', 'outside' ], [ 'italic', 'oblique' ], [ 'left', 'right' ], [
        'ltr', 'rtl' ], [ 'no-content', 'no-display' ], [ 'suppress',
        'unrestricted' ], [ 'thick', 'thin' ], [ ',' ], [ '/' ], [ 'always' ],
      [ 'auto' ], [ 'avoid' ], [ 'both' ], [ 'break-word' ], [ 'center' ], [
        'code' ], [ 'collapse' ], [ 'fixed' ], [ 'hidden' ], [ 'inherit' ], [
        'inset' ], [ 'invert' ], [ 'justify' ], [ 'local' ], [ 'medium' ], [
        'mix' ], [ 'none' ], [ 'normal' ], [ 'once' ], [ 'repeat' ], [ 'scroll'
      ], [ 'separate' ], [ 'small-caps' ], [ 'spell-out' ], [ 'transparent' ],
      [ 'visible' ] ];
    return {
      '-moz-border-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 36 ] ]
      },
      '-moz-border-radius-bottomleft': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-moz-border-radius-bottomright': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-moz-border-radius-topleft': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-moz-border-radius-topright': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-moz-box-shadow': {
        'cssExtra': c[ 1 ],
        'cssAlternates': [ 'boxShadow' ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 35 ], L[ 48 ], L[ 54 ] ]
      },
      '-moz-opacity': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 47 ] ]
      },
      '-moz-outline': {
        'cssExtra': c[ 3 ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 9 ], L[ 34 ], L[ 46 ], L[ 47 ], L[ 48 ], L[
            49 ], L[ 52 ], L[ 54 ] ]
      },
      '-moz-outline-color': {
        'cssExtra': c[ 2 ],
        'cssPropBits': 2,
        'cssLitGroup': [ L[ 0 ], L[ 47 ], L[ 49 ] ]
      },
      '-moz-outline-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 9 ], L[ 46 ], L[ 47 ], L[ 48 ], L[ 54 ] ]
      },
      '-moz-outline-width': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 34 ], L[ 47 ], L[ 52 ] ]
      },
      '-o-text-overflow': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 25 ] ]
      },
      '-webkit-border-bottom-left-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-webkit-border-bottom-right-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-webkit-border-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 36 ] ]
      },
      '-webkit-border-radius-bottom-left': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-webkit-border-radius-bottom-right': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-webkit-border-radius-top-left': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-webkit-border-radius-top-right': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-webkit-border-top-left-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-webkit-border-top-right-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      '-webkit-box-shadow': {
        'cssExtra': c[ 1 ],
        'cssAlternates': [ 'boxShadow' ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 35 ], L[ 48 ], L[ 54 ] ]
      },
      'azimuth': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 6 ], L[ 30 ], L[ 42 ], L[ 47 ] ]
      },
      'background': {
        'cssExtra': RegExp('^ *(?:\\s*' + s[ 0 ] + '){0,2} *$', 'i'),
        'cssPropBits': 23,
        'cssLitGroup': [ L[ 0 ], L[ 14 ], L[ 17 ], L[ 24 ], L[ 30 ], L[ 35 ],
          L[ 36 ], L[ 38 ], L[ 42 ], L[ 45 ], L[ 47 ], L[ 51 ], L[ 54 ], L[ 57
          ], L[ 58 ], L[ 62 ] ]
      },
      'background-attachment': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 35 ], L[ 45 ], L[ 51 ], L[ 58 ] ]
      },
      'background-color': {
        'cssExtra': c[ 2 ],
        'cssPropBits': 130,
        'cssLitGroup': [ L[ 0 ], L[ 47 ], L[ 62 ] ]
      },
      'background-image': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 35 ], L[ 54 ] ]
      },
      'background-position': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 24 ], L[ 30 ], L[ 35 ], L[ 42 ] ]
      },
      'background-repeat': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 17 ], L[ 35 ], L[ 57 ] ]
      },
      'border': {
        'cssExtra': c[ 3 ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 9 ], L[ 34 ], L[ 46 ], L[ 47 ], L[ 48 ], L[
            52 ], L[ 54 ], L[ 62 ] ]
      },
      'border-bottom': {
        'cssExtra': c[ 3 ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 9 ], L[ 34 ], L[ 46 ], L[ 47 ], L[ 48 ], L[
            52 ], L[ 54 ], L[ 62 ] ]
      },
      'border-bottom-color': {
        'cssExtra': c[ 2 ],
        'cssPropBits': 2,
        'cssLitGroup': [ L[ 0 ], L[ 47 ], L[ 62 ] ]
      },
      'border-bottom-left-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      'border-bottom-right-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      'border-bottom-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 9 ], L[ 46 ], L[ 47 ], L[ 48 ], L[ 54 ] ]
      },
      'border-bottom-width': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 34 ], L[ 47 ], L[ 52 ] ]
      },
      'border-collapse': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 44 ], L[ 47 ], L[ 59 ] ]
      },
      'border-color': {
        'cssExtra': RegExp('^ *(?:\\s*' + s[ 0 ] + '){1,4} *$', 'i'),
        'cssPropBits': 2,
        'cssLitGroup': [ L[ 0 ], L[ 47 ], L[ 62 ] ]
      },
      'border-left': {
        'cssExtra': c[ 3 ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 9 ], L[ 34 ], L[ 46 ], L[ 47 ], L[ 48 ], L[
            52 ], L[ 54 ], L[ 62 ] ]
      },
      'border-left-color': {
        'cssExtra': c[ 2 ],
        'cssPropBits': 2,
        'cssLitGroup': [ L[ 0 ], L[ 47 ], L[ 62 ] ]
      },
      'border-left-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 9 ], L[ 46 ], L[ 47 ], L[ 48 ], L[ 54 ] ]
      },
      'border-left-width': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 34 ], L[ 47 ], L[ 52 ] ]
      },
      'border-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 36 ] ]
      },
      'border-right': {
        'cssExtra': c[ 3 ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 9 ], L[ 34 ], L[ 46 ], L[ 47 ], L[ 48 ], L[
            52 ], L[ 54 ], L[ 62 ] ]
      },
      'border-right-color': {
        'cssExtra': c[ 2 ],
        'cssPropBits': 2,
        'cssLitGroup': [ L[ 0 ], L[ 47 ], L[ 62 ] ]
      },
      'border-right-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 9 ], L[ 46 ], L[ 47 ], L[ 48 ], L[ 54 ] ]
      },
      'border-right-width': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 34 ], L[ 47 ], L[ 52 ] ]
      },
      'border-spacing': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'border-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 9 ], L[ 46 ], L[ 47 ], L[ 48 ], L[ 54 ] ]
      },
      'border-top': {
        'cssExtra': c[ 3 ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 9 ], L[ 34 ], L[ 46 ], L[ 47 ], L[ 48 ], L[
            52 ], L[ 54 ], L[ 62 ] ]
      },
      'border-top-color': {
        'cssExtra': c[ 2 ],
        'cssPropBits': 2,
        'cssLitGroup': [ L[ 0 ], L[ 47 ], L[ 62 ] ]
      },
      'border-top-left-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      'border-top-right-radius': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5
      },
      'border-top-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 9 ], L[ 46 ], L[ 47 ], L[ 48 ], L[ 54 ] ]
      },
      'border-top-width': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 34 ], L[ 47 ], L[ 52 ] ]
      },
      'border-width': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 34 ], L[ 47 ], L[ 52 ] ]
      },
      'bottom': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'box-shadow': {
        'cssExtra': c[ 1 ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 35 ], L[ 48 ], L[ 54 ] ]
      },
      'caption-side': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 24 ], L[ 47 ] ]
      },
      'clear': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 30 ], L[ 40 ], L[ 47 ], L[ 54 ] ]
      },
      'clip': {
        'cssExtra':
        /^ *\s*rect\(\s*(?:0|[+\-]?\d+(?:\.\d+)?(?:[cem]m|ex|in|p[ctx])|auto)\s*,\s*(?:0|[+\-]?\d+(?:\.\d+)?(?:[cem]m|ex|in|p[ctx])|auto)\s*,\s*(?:0|[+\-]?\d+(?:\.\d+)?(?:[cem]m|ex|in|p[ctx])|auto)\s*,\s*(?:0|[+\-]?\d+(?:\.\d+)?(?:[cem]m|ex|in|p[ctx])|auto) *\) *$/i,
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'color': {
        'cssExtra': c[ 2 ],
        'cssPropBits': 130,
        'cssLitGroup': [ L[ 0 ], L[ 47 ] ]
      },
      'content': { 'cssPropBits': 0 },
      'counter-increment': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ], L[ 54 ] ]
      },
      'counter-reset': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ], L[ 54 ] ]
      },
      'cue': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 47 ], L[ 54 ] ]
      },
      'cue-after': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 47 ], L[ 54 ] ]
      },
      'cue-before': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 47 ], L[ 54 ] ]
      },
      'cursor': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 144,
        'cssLitGroup': [ L[ 1 ], L[ 35 ], L[ 38 ], L[ 47 ] ]
      },
      'direction': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 31 ], L[ 47 ] ]
      },
      'display': {
        'cssPropBits': 32,
        'cssLitGroup': [ L[ 2 ], L[ 47 ], L[ 54 ] ]
      },
      'elevation': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 13 ], L[ 47 ] ]
      },
      'empty-cells': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 27 ], L[ 47 ] ]
      },
      'filter': {
        'cssExtra':
        /^ *(?:\s*alpha\(\s*opacity\s*=\s*(?:0|\d+(?:\.\d+)?%|[+\-]?\d+(?:\.\d+)?) *\))+ *$/i,
        'cssPropBits': 32
      },
      'float': {
        'cssAlternates': [ 'cssFloat', 'styleFloat' ],
        'cssPropBits': 32,
        'cssLitGroup': [ L[ 30 ], L[ 47 ], L[ 54 ] ]
      },
      'font': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 9,
        'cssLitGroup': [ L[ 4 ], L[ 7 ], L[ 11 ], L[ 15 ], L[ 29 ], L[ 35 ], L[
            36 ], L[ 47 ], L[ 52 ], L[ 55 ], L[ 60 ] ]
      },
      'font-family': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 8,
        'cssLitGroup': [ L[ 15 ], L[ 35 ], L[ 47 ] ]
      },
      'font-size': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 7 ], L[ 47 ], L[ 52 ] ]
      },
      'font-stretch': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 5 ], L[ 55 ] ]
      },
      'font-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 29 ], L[ 47 ], L[ 55 ] ]
      },
      'font-variant': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 47 ], L[ 55 ], L[ 60 ] ]
      },
      'font-weight': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 4 ], L[ 47 ], L[ 55 ] ]
      },
      'height': {
        'cssPropBits': 37,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'left': {
        'cssPropBits': 37,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'letter-spacing': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ], L[ 55 ] ]
      },
      'line-height': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 47 ], L[ 55 ] ]
      },
      'list-style': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 3 ], L[ 28 ], L[ 47 ], L[ 54 ] ]
      },
      'list-style-image': {
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 47 ], L[ 54 ] ]
      },
      'list-style-position': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 28 ], L[ 47 ] ]
      },
      'list-style-type': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 3 ], L[ 47 ], L[ 54 ] ]
      },
      'margin': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'margin-bottom': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'margin-left': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'margin-right': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'margin-top': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'max-height': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 38 ], L[ 47 ], L[ 54 ] ]
      },
      'max-width': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 38 ], L[ 47 ], L[ 54 ] ]
      },
      'min-height': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'min-width': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'opacity': {
        'cssPropBits': 33,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'outline': {
        'cssExtra': c[ 3 ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 9 ], L[ 34 ], L[ 46 ], L[ 47 ], L[ 48 ], L[
            49 ], L[ 52 ], L[ 54 ] ]
      },
      'outline-color': {
        'cssExtra': c[ 2 ],
        'cssPropBits': 2,
        'cssLitGroup': [ L[ 0 ], L[ 47 ], L[ 49 ] ]
      },
      'outline-style': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 9 ], L[ 46 ], L[ 47 ], L[ 48 ], L[ 54 ] ]
      },
      'outline-width': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 34 ], L[ 47 ], L[ 52 ] ]
      },
      'overflow': {
        'cssPropBits': 32,
        'cssLitGroup': [ L[ 38 ], L[ 46 ], L[ 47 ], L[ 58 ], L[ 63 ] ]
      },
      'overflow-x': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 32 ], L[ 38 ], L[ 46 ], L[ 58 ], L[ 63 ] ]
      },
      'overflow-y': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 32 ], L[ 38 ], L[ 46 ], L[ 58 ], L[ 63 ] ]
      },
      'padding': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'padding-bottom': {
        'cssPropBits': 33,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'padding-left': {
        'cssPropBits': 33,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'padding-right': {
        'cssPropBits': 33,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'padding-top': {
        'cssPropBits': 33,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'page-break-after': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 30 ], L[ 37 ], L[ 38 ], L[ 39 ], L[ 47 ] ]
      },
      'page-break-before': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 30 ], L[ 37 ], L[ 38 ], L[ 39 ], L[ 47 ] ]
      },
      'page-break-inside': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 38 ], L[ 39 ], L[ 47 ] ]
      },
      'pause': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'pause-after': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'pause-before': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'pitch': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 19 ], L[ 47 ], L[ 52 ] ]
      },
      'pitch-range': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'play-during': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 16,
        'cssLitGroup': [ L[ 38 ], L[ 47 ], L[ 53 ], L[ 54 ], L[ 57 ] ]
      },
      'position': {
        'cssPropBits': 32,
        'cssLitGroup': [ L[ 20 ], L[ 47 ] ]
      },
      'quotes': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 47 ], L[ 54 ] ]
      },
      'richness': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'right': {
        'cssPropBits': 37,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'speak': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 47 ], L[ 54 ], L[ 55 ], L[ 61 ] ]
      },
      'speak-header': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 37 ], L[ 47 ], L[ 56 ] ]
      },
      'speak-numeral': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 26 ], L[ 47 ] ]
      },
      'speak-punctuation': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 43 ], L[ 47 ], L[ 54 ] ]
      },
      'speech-rate': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 12 ], L[ 47 ], L[ 52 ] ]
      },
      'stress': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'table-layout': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 38 ], L[ 45 ], L[ 47 ] ]
      },
      'text-align': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 30 ], L[ 42 ], L[ 47 ], L[ 50 ] ]
      },
      'text-decoration': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 18 ], L[ 47 ], L[ 54 ] ]
      },
      'text-indent': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ] ]
      },
      'text-overflow': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 25 ] ]
      },
      'text-shadow': {
        'cssExtra': c[ 1 ],
        'cssPropBits': 7,
        'cssLitGroup': [ L[ 0 ], L[ 35 ], L[ 48 ], L[ 54 ] ]
      },
      'text-transform': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 21 ], L[ 47 ], L[ 54 ] ]
      },
      'text-wrap': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 33 ], L[ 54 ], L[ 55 ] ]
      },
      'top': {
        'cssPropBits': 37,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'unicode-bidi': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 23 ], L[ 47 ], L[ 55 ] ]
      },
      'vertical-align': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 10 ], L[ 24 ], L[ 47 ] ]
      },
      'visibility': {
        'cssPropBits': 32,
        'cssLitGroup': [ L[ 44 ], L[ 46 ], L[ 47 ], L[ 63 ] ]
      },
      'voice-family': {
        'cssExtra': c[ 0 ],
        'cssPropBits': 8,
        'cssLitGroup': [ L[ 22 ], L[ 35 ], L[ 47 ] ]
      },
      'volume': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 16 ], L[ 47 ], L[ 52 ] ]
      },
      'white-space': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 8 ], L[ 47 ], L[ 55 ] ]
      },
      'width': {
        'cssPropBits': 33,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'word-spacing': {
        'cssPropBits': 5,
        'cssLitGroup': [ L[ 47 ], L[ 55 ] ]
      },
      'word-wrap': {
        'cssPropBits': 0,
        'cssLitGroup': [ L[ 41 ], L[ 55 ] ]
      },
      'z-index': {
        'cssPropBits': 69,
        'cssLitGroup': [ L[ 38 ], L[ 47 ] ]
      },
      'zoom': {
        'cssPropBits': 1,
        'cssLitGroup': [ L[ 55 ] ]
      }
    };
  })();
if (typeof window !== 'undefined') {
  window['cssSchema'] = cssSchema;
}

// Copyright (C) 2011 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * A lexical scannar for CSS3 as defined at http://www.w3.org/TR/css3-syntax .
 * 
 * @author Mike Samuel <mikesamuel@gmail.com>
 * \@provides lexCss, decodeCss
 * \@overrides window
 */

var lexCss;
var decodeCss;

(function () {

  /**
   * Decodes an escape sequence as specified in CSS3 section 4.1.
   * http://www.w3.org/TR/css3-syntax/#characters
   * @private
   */
  function decodeCssEscape(s) {
    var i = parseInt(s.substring(1), 16);
    // If parseInt didn't find a hex diigt, it returns NaN so return the
    // escaped character.
    // Otherwise, parseInt will stop at the first non-hex digit so there's no
    // need to worry about trailing whitespace.
    if (i > 0xffff) {
      // A supplemental codepoint.
      return i -= 0x10000,
        String.fromCharCode(
            0xd800 + (i >> 10),
            0xdc00 + (i & 0x3FF));
    } else if (i == i) {
      return String.fromCharCode(i);
    } else if (s[1] < ' ') {
      // "a backslash followed by a newline is ignored".
      return '';
    } else {
      return s[1];
    }
  }
   
  /**
   * Returns an equivalent CSS string literal given plain text: foo -> "foo".
   * @private
   */
  function escapeCssString(s, replacer) {
    return '"' + s.replace(/[\u0000-\u001f\\\"<>]/g, replacer) + '"';
  }

  /**
   * Maps chars to CSS escaped equivalents: "\n" -> "\\a ".
   * @private
   */
  function escapeCssStrChar(ch) {
    return cssStrChars[ch]
        || (cssStrChars[ch] = '\\' + ch.charCodeAt(0).toString(16) + ' ');
  }

  /**
   * Maps chars to URI escaped equivalents: "\n" -> "%0a".
   * @private
   */
  function escapeCssUrlChar(ch) {
    return cssUrlChars[ch]
        || (cssUrlChars[ch] = (ch < '\x10' ? '%0' : '%')
            + ch.charCodeAt(0).toString(16));
  }

  /**
   * Mapping of CSS special characters to escaped equivalents.
   * @private
   */
  var cssStrChars = {
    '\\': '\\\\'
  };

  /**
   * Mapping of CSS special characters to URL-escaped equivalents.
   * @private
   */
  var cssUrlChars = {
    '\\': '%5c'
  };

  // The comments below are copied from the CSS3 module syntax at
  // http://www.w3.org/TR/css3-syntax .
  // These string constants minify out when this is run-through closure
  // compiler.
  // Rules that have been adapted have comments prefixed with "Diff:", and
  // where rules have been combined to avoid back-tracking in the regex engine
  // or to work around limitations, there is a comment prefixed with
  // "NewRule:".

  // In the below, we assume CRLF and CR have been normalize to CR.

  // wc  ::=  #x9 | #xA | #xC | #xD | #x20
  var WC = '[\\t\\n\\f ]';
  // w  ::=  wc*
  var W = WC + '*';
  // nl  ::=  #xA | #xD #xA | #xD | #xC
  var NL = '[\\n\\f]';
  // nonascii  ::=  [#x80-#xD7FF#xE000-#xFFFD#x10000-#x10FFFF]
  // NewRule: Supplemental codepoints are represented as surrogate pairs in JS.
  var SURROGATE_PAIR = '[\\ud800-\\udbff][\\udc00-\\udfff]';
  var NONASCII = '[\\u0080-\\ud7ff\\ue000-\\ufffd]|' + SURROGATE_PAIR;
  // unicode  ::=  '\' [0-9a-fA-F]{1,6} wc?
  // NewRule: No point in having ESCAPE do (\\x|\\y)
  var UNICODE_TAIL = '[0-9a-fA-F]{1,6}' + WC + '?';
  var UNICODE = '\\\\' + UNICODE_TAIL;
  // escape  ::=  unicode
  //           | '\' [#x20-#x7E#x80-#xD7FF#xE000-#xFFFD#x10000-#x10FFFF]
  // NewRule: Below we use escape tail to efficiently match an escape or a
  // line continuation so we can decode string content.
  var ESCAPE_TAIL = '(?:' + UNICODE_TAIL
      + '|[\\u0020-\\u007e\\u0080-\\ud7ff\\ue000\\ufffd]|'
      + SURROGATE_PAIR + ')';
  var ESCAPE = '\\\\' + ESCAPE_TAIL;
  // urlchar  ::=  [#x9#x21#x23-#x26#x28-#x7E] | nonascii | escape
  var URLCHAR = '(?:[\\t\\x21\\x23-\\x26\\x28-\\x5b\\x5d-\\x7e]|'
      + NONASCII + '|' + ESCAPE + ')';
  // stringchar  ::= urlchar | #x20 | '\' nl
  // We ignore mismatched surrogate pairs inside strings, so stringchar
  // simplifies to a non-(quote|newline|backslash) or backslash any.
  // Since we normalize CRLF to a single code-unit, there is no special
  // handling needed for '\\' + CRLF.
  var STRINGCHAR = '[^\'"\\n\\f\\\\]|\\\\[\\s\\S]';
  // string  ::=  '"' (stringchar | "'")* '"' | "'" (stringchar | '"')* "'"
  var STRING = '"(?:\'|' + STRINGCHAR + ')*"'
      + '|\'(?:\"|' + STRINGCHAR + ')*\'';
  // num  ::=  [0-9]+ | [0-9]* '.' [0-9]+
  // Diff: We attach signs to num tokens.
  var NUM = '[-+]?(?:[0-9]+(?:[.][0-9]+)?|[.][0-9]+)';
  // nmstart  ::=  [a-zA-Z] | '_' | nonascii | escape
  var NMSTART = '(?:[a-zA-Z_]|' + NONASCII + '|' + ESCAPE + ')';
  // nmchar  ::=  [a-zA-Z0-9] | '-' | '_' | nonascii | escape
  var NMCHAR = '(?:[a-zA-Z0-9_-]|' + NONASCII + '|' + ESCAPE + ')';
  // name  ::=  nmchar+
  var NAME = NMCHAR + '+';
  // ident  ::=  '-'? nmstart nmchar*
  var IDENT = '-?' + NMSTART + NMCHAR + '*';

  // ATKEYWORD  ::=  '@' ident
  var ATKEYWORD = '@' + IDENT;
  // HASH  ::=  '#' name
  var HASH = '#' + NAME;
  // NUMBER  ::=  num
  var NUMBER = NUM;

  // NewRule: union of IDENT, ATKEYWORD, HASH, but excluding #[0-9].
  var WORD_TERM = '(?:@?-?' + NMSTART + '|#)' + NMCHAR + '*';

  // PERCENTAGE  ::=  num '%'
  var PERCENTAGE = NUM + '%';
  // DIMENSION  ::=  num ident
  var DIMENSION = NUM + IDENT;
  var NUMERIC_VALUE = NUM + '(?:%|' + IDENT + ')?';
  // URI  ::=  "url(" w (string | urlchar* ) w ")"
  var URI = 'url[(]' + W + '(?:' + STRING + '|' + URLCHAR + '*)' + W + '[)]';
  // UNICODE-RANGE  ::=  "U+" [0-9A-F?]{1,6} ('-' [0-9A-F]{1,6})?
  var UNICODE_RANGE = 'U[+][0-9A-F?]{1,6}(?:-[0-9A-F]{1,6})?';
  // CDO  ::=  "<\!--"
  var CDO = '<\!--';
  // CDC  ::=  "-->"
  var CDC = '-->';
  // S  ::=  wc+
  var S = WC + '+';
  // COMMENT  ::=  "/*" [^*]* '*'+ ([^/] [^*]* '*'+)* "/"
  // Diff: recognizes // comments.
  var COMMENT = '/(?:[*][^*]*[*]+(?:[^/][^*]*[*]+)*/|/[^\\n\\f]*)';
  // FUNCTION  ::=  ident '('
  // Diff: We exclude url explicitly.
  // TODO: should we be tolerant of "fn ("?
  var FUNCTION = '(?!url[(])' + IDENT + '[(]';
  // INCLUDES  ::=  "~="
  var INCLUDES = '~=';
  // DASHMATCH  ::=  "|="
  var DASHMATCH = '[|]=';
  // PREFIXMATCH  ::=  "^="
  var PREFIXMATCH = '[^]=';
  // SUFFIXMATCH  ::=  "$="
  var SUFFIXMATCH = '[$]=';
  // SUBSTRINGMATCH  ::=  "*="
  var SUBSTRINGMATCH = '[*]=';
  // NewRule: one rule for all the comparison operators.
  var CMP_OPS = '[~|^$*]=';
  // CHAR  ::=  any character not matched by the above rules, except for " or '
  // Diff: We exclude / and \ since they are handled above to prevent
  // /* without a following */ from combining when comments are concatenated.
  var CHAR = '[^"\'\\\\/]|/(?![/*])';
  // BOM  ::=  #xFEFF
  var BOM = '\\uFEFF';

  var CSS_TOKEN = new RegExp([
      BOM, UNICODE_RANGE, URI, FUNCTION, WORD_TERM, STRING, NUMERIC_VALUE,
      CDO, CDC, S, COMMENT, CMP_OPS, CHAR].join("|"), 'gi');

  /**
   * Decodes CSS escape sequences in a CSS string body.
   */
   decodeCss = function (css) {
     return css.replace(
         new RegExp('\\\\(?:' + ESCAPE_TAIL + '|' + NL + ')', 'g'),
         decodeCssEscape);
   };

  /**
   * Given CSS Text, returns an array of normalized tokens.
   * @param {string} cssText
   * @return {Array.<string>} tokens where all ignorable token sequences have
   *    been reduced to a single {@code " "} and all strings and
   *    {@code url(...)} tokens have been normalized to use double quotes as
   *    delimiters and to not otherwise contain double quotes.
   */
  lexCss = function (cssText) {
    cssText = '' + cssText;
    var tokens = cssText.replace(/\r\n?/g, '\n')  // Normalize CRLF & CR to LF.
        .match(CSS_TOKEN) || [];
    var j = 0;
    var last = ' ';
    for (var i = 0, n = tokens.length; i < n; ++i) {
      // Normalize all escape sequences.  We will have to re-escape some
      // codepoints in string and url(...) bodies but we already know the
      // boundaries.
      // We might mistakenly treat a malformed identifier like \22\20\22 as a
      // string, but that will not break any valid stylesheets since we requote
      // and re-escape in string below.
      var tok = decodeCss(tokens[i]);
      var len = tok.length;
      var cc = tok.charCodeAt(0);
      tok =
          // All strings should be double quoted, and the body should never
          // contain a double quote.
          (cc == '"'.charCodeAt(0) || cc == '\''.charCodeAt(0))
          ? escapeCssString(tok.substring(1, len - 1), escapeCssStrChar)
          // A breaking ignorable token should is replaced with a single space.
          : (cc == '/'.charCodeAt(0) && len > 1  // Comment.
             || tok == '\\' || tok == CDC || tok == CDO || tok == '\ufeff'
             // Characters in W.
             || cc <= ' '.charCodeAt(0))
          ? ' '
          // Make sure that all url(...)s are double quoted.
          : /url\(/i.test(tok)
          ? 'url(' + escapeCssString(
            tok.replace(
                new RegExp('^url\\(' + W + '["\']?|["\']?' + W + '\\)$', 'gi'),
                ''),
            escapeCssUrlChar)
            + ')'
          // Escapes in identifier like tokens will have been normalized above.
          : tok;
      // Merge adjacent space tokens.
      if (last != tok || tok != ' ') {
        tokens[j++] = last = tok;
      }
    }
    tokens.length = j;
    return tokens;
  };
})();

// Exports for closure compiler.
if (typeof window !== 'undefined') {
  window['lexCss'] = lexCss;
  window['decodeCss'] = decodeCss;
}

// Copyright (C) 2011 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview
 * JavaScript support for client-side CSS sanitization.
 * The CSS property schema API is defined in CssPropertyPatterns.java which
 * is used to generate css-defs.js.
 *
 * @author mikesamuel@gmail.com
 * \@requires CSS_PROP_BIT_ALLOWED_IN_LINK
 * \@requires CSS_PROP_BIT_HASH_VALUE
 * \@requires CSS_PROP_BIT_NEGATIVE_QUANTITY
 * \@requires CSS_PROP_BIT_QSTRING_CONTENT
 * \@requires CSS_PROP_BIT_QSTRING_URL
 * \@requires CSS_PROP_BIT_QUANTITY
 * \@requires CSS_PROP_BIT_Z_INDEX
 * \@requires cssSchema
 * \@requires decodeCss
 * \@requires html4
 * \@overrides window
 * \@requires parseCssStylesheet
 * \@provides sanitizeCssProperty
 * \@provides sanitizeCssSelectors
 * \@provides sanitizeStylesheet
 */

/**
 * Given a series of normalized CSS tokens, applies a property schema, as
 * defined in CssPropertyPatterns.java, and sanitizes the tokens in place.
 * @param property a property name.
 * @param propertySchema a property of cssSchema as defined by
 *    CssPropertyPatterns.java
 * @param tokens as parsed by lexCss.  Modified in place.
 * @param opt_naiveUriRewriter a URI rewriter; an object with a "rewrite"
 *     function that takes a URL and returns a safe URL.
 */
var sanitizeCssProperty = (function () {
  var NOEFFECT_URL = 'url("about:blank")';
  /**
   * The set of characters that need to be normalized inside url("...").
   * We normalize newlines because they are not allowed inside quoted strings,
   * normalize quote characters, angle-brackets, and asterisks because they
   * could be used to break out of the URL or introduce targets for CSS
   * error recovery.  We normalize parentheses since they delimit unquoted
   * URLs and calls and could be a target for error recovery.
   */
  var NORM_URL_REGEXP = /[\n\f\r\"\'()*<>]/g;
  /** The replacements for NORM_URL_REGEXP. */
  var NORM_URL_REPLACEMENTS = {
    '\n': '%0a',
    '\f': '%0c',
    '\r': '%0d',
    '"':  '%22',
    '\'': '%27',
    '(':  '%28',
    ')':  '%29',
    '*':  '%2a',
    '<':  '%3c',
    '>':  '%3e'
  };


  function normalizeUrl(s) {
    if ('string' === typeof s) {
      return 'url("' + s.replace(NORM_URL_REGEXP, normalizeUrlChar) + '")';
    } else {
      return NOEFFECT_URL;
    }
  }
  function normalizeUrlChar(ch) {
    return NORM_URL_REPLACEMENTS[ch];
  }

  // From RFC3986
  var URI_SCHEME_RE = new RegExp(
      '^' +
      '(?:' +
        '([^:\/?# ]+)' +         // scheme
      ':)?'
  );

  var ALLOWED_URI_SCHEMES = /^(?:https?|mailto)$/i;

  function safeUri(uri, prop, naiveUriRewriter) {
    if (!naiveUriRewriter) { return null; }
    var parsed = ('' + uri).match(URI_SCHEME_RE);
    if (parsed && (!parsed[1] || ALLOWED_URI_SCHEMES.test(parsed[1]))) {
      return naiveUriRewriter(uri, prop);
    } else {
      return null;
    }
  }

  function unionArrays(arrs) {
    var map = {};
    for (var i = arrs.length; --i >= 0;) {
      var arr = arrs[i];
      for (var j = arr.length; --j >= 0;) {
        map[arr[j]] = ALLOWED_LITERAL;
      }
    }
    return map;
  }

  /**
   * Normalize tokens within a function call they can match against
   * cssSchema[propName].cssExtra.
   * @return the exclusive end in tokens of the function call.
   */
  function normalizeFunctionCall(tokens, start) {
    var parenDepth = 1, end = start + 1, n = tokens.length;
    while (end < n && parenDepth) {
      // TODO: Can URLs appear in functions?
      var token = tokens[end++];
      parenDepth += (token === '(' ? 1 : token === ')' ? -1 : 0);
    }
    return end;
  }

  // Used as map value to avoid hasOwnProperty checks.
  var ALLOWED_LITERAL = {};

  return function (property, propertySchema, tokens, opt_naiveUriRewriter) {
    var propBits = propertySchema.cssPropBits;
    // Used to determine whether to treat quoted strings as URLs or
    // plain text content, and whether unrecognized keywords can be quoted
    // to treate ['Arial', 'Black'] equivalently to ['"Arial Black"'].
    var qstringBits = propBits & (
        CSS_PROP_BIT_QSTRING_CONTENT | CSS_PROP_BIT_QSTRING_URL);
    // TODO(mikesamuel): Figure out what to do with props like
    // content that admit both URLs and strings.

    // Used to join unquoted keywords into a single quoted string.
    var lastQuoted = NaN;
    var i = 0, k = 0;
    for (;i < tokens.length; ++i) {
      // Has the effect of normalizing hex digits, keywords,
      // and function names.
      var token = tokens[i].toLowerCase();
      var cc = token.charCodeAt(0), cc1, cc2, isnum1, isnum2, end;
      var litGroup, litMap;
      token = (
        // Strip out spaces.  Normally cssparser.js dumps these, but we
        // strip them out in case the content doesn't come via cssparser.js.
        (cc === ' '.charCodeAt(0)) ? ''
        : (cc === '"'.charCodeAt(0)) ? (  // Quoted string.
          (qstringBits === CSS_PROP_BIT_QSTRING_URL && opt_naiveUriRewriter)
          // Sanitize and convert to url("...") syntax.
          // Treat url content as case-sensitive.
          ? (normalizeUrl(safeUri(
                decodeCss(tokens[i].substring(1, token.length - 1)),
                property,
                opt_naiveUriRewriter)))
          // Drop if plain text content strings not allowed.
          : (qstringBits === CSS_PROP_BIT_QSTRING_CONTENT) ? token : '')
        // Preserve hash color literals if allowed.
        : (cc === '#'.charCodeAt(0) && /^#(?:[0-9a-f]{3}){1,2}$/.test(token))
        ? (propBits & CSS_PROP_BIT_HASH_VALUE ? token : '')
        : ('0'.charCodeAt(0) <= cc && cc <= '9'.charCodeAt(0))
        // A number starting with a digit.
        ? ((propBits & CSS_PROP_BIT_QUANTITY)
          ? ((propBits & CSS_PROP_BIT_Z_INDEX)
            ? (token.match(/^\d{1,7}$/) ? token : '')
            : token) 
          : '')
        // Normalize quantities so they don't start with a '.' or '+' sign and
        // make sure they all have an integer component so can't be confused
        // with a dotted identifier.
        // This can't be done in the lexer since ".4" is a valid rule part.
        : (cc1 = token.charCodeAt(1),
           cc2 = token.charCodeAt(2),
           isnum1 = '0'.charCodeAt(0) <= cc1 && cc1 <= '9'.charCodeAt(0),
           isnum2 = '0'.charCodeAt(0) <= cc2 && cc2 <= '9'.charCodeAt(0),
           // +.5 -> 0.5 if allowed.
           (cc === '+'.charCodeAt(0)
            && (isnum1 || (cc1 === '.'.charCodeAt(0) && isnum2))))
          ? ((propBits & CSS_PROP_BIT_QUANTITY)
            ? ((propBits & CSS_PROP_BIT_Z_INDEX)
              ? (token.match(/^\+\d{1,7}$/) ? token : '')
              : ((isnum1 ? '' : '0') + token.substring(1)))
            : '')
        // -.5 -> -0.5 if allowed otherwise -> 0 if quantities allowed.
        : (cc === '-'.charCodeAt(0)
           && (isnum1 || (cc1 === '.'.charCodeAt(0) && isnum2)))
          ? ((propBits & CSS_PROP_BIT_NEGATIVE_QUANTITY)
             ? ((propBits & CSS_PROP_BIT_Z_INDEX)
               ? (token.match(/^\-\d{1,7}$/) ? token : '')
               : ((isnum1 ? '-' : '-0') + token.substring(1)))
             : ((propBits & CSS_PROP_BIT_QUANTITY) ? '0' : ''))
        // .5 -> 0.5 if allowed.
        : (cc === '.'.charCodeAt(0) && isnum1)
        ? ((propBits & CSS_PROP_BIT_QUANTITY) ? '0' + token : '')
        // Handle url("...") by rewriting the body.
        : ('url(' === token.substring(0, 4))
        ? ((opt_naiveUriRewriter && (qstringBits & CSS_PROP_BIT_QSTRING_URL))
           ? normalizeUrl(safeUri(
                tokens[i].substring(5, token.length - 2),
                property,
                opt_naiveUriRewriter))
           : '')
        // Handle func(...) and literal tokens
        // such as keywords and punctuation.
        : (
          // Step 1. Combine func(...) into something that can be compared
          // against propertySchema.cssExtra.
          (token.charAt(token.length-1) === '(')
          && (end = normalizeFunctionCall(tokens, i),
              // When tokens is
              //   ['x', ' ', 'rgb(', '255', ',', '0', ',', '0', ')', ' ', 'y']
              // and i is the index of 'rgb(' and end is the index of ')'
              // splices tokens to where i now is the index of the whole call:
              //   ['x', ' ', 'rgb( 255 , 0 , 0 )', ' ', 'y']
              tokens.splice(i, end - i,
                            token = tokens.slice(i, end).join(' '))),
          litGroup = propertySchema.cssLitGroup,
          litMap = (litGroup
                    ? (propertySchema.cssLitMap
                       // Lazily compute the union from litGroup.
                       || (propertySchema.cssLitMap = unionArrays(litGroup)))
                    : ALLOWED_LITERAL),  // A convenient empty object.
          (litMap[token] === ALLOWED_LITERAL
           || propertySchema.cssExtra && propertySchema.cssExtra.test(token)))
          // Token is in the literal map or matches extra.
          ? token
          : (/^\w+$/.test(token)
             && (qstringBits === CSS_PROP_BIT_QSTRING_CONTENT))
          // Quote unrecognized keywords so font names like
          //    Arial Bold
          // ->
          //    "Arial Bold"
          ? (lastQuoted+1 === k
             // If the last token was also a keyword that was quoted, then
             // combine this token into that.
             ? (tokens[lastQuoted] = tokens[lastQuoted]
                .substring(0, tokens[lastQuoted].length-1) + ' ' + token + '"',
                token = '')
             : (lastQuoted = k, '"' + token + '"'))
          // Disallowed.
          : '');
      if (token) {
        tokens[k++] = token;
      }
    }
    // For single URL properties, if the URL failed to pass the sanitizer,
    // then just drop it.
    if (k === 1 && tokens[0] === NOEFFECT_URL) { k = 0; }
    tokens.length = k;
  };
})();

/**
 * Given a series of tokens, returns two lists of sanitized selectors.
 * @param {Array.<string>} selectors In the form produces by csslexer.js.
 * @param {string} suffix a suffix that is added to all IDs and which is
 *    used as a CLASS names so that the returned selectors will only match
 *    nodes under one with suffix as a class name.
 *    If suffix is {@code "sfx"}, the selector
 *    {@code ["a", "#foo", " ", "b", ".bar"]} will be namespaced to
 *    {@code [".sfx", " ", "a", "#foo-sfx", " ", "b", ".bar"]}.
 * @return {Array.<Array.<string>>} an array of length 2 where the zeroeth
 *    element contains history-insensitive selectors and the first element
 *    contains history-sensitive selectors.
 */
function sanitizeCssSelectors(selectors, suffix) {
  // Produce two distinct lists of selectors to sequester selectors that are
  // history sensitive (:visited), so that we can disallow properties in the
  // property groups for the history sensitive ones.
  var historySensitiveSelectors = [];
  var historyInsensitiveSelectors = [];

  // Remove any spaces that are not operators.
  var k = 0, i;
  for (i = 0; i < selectors.length; ++i) {
    if (!(selectors[i] == ' '
          && (selectors[i-1] == '>' || selectors[i+1] == '>'))) {
      selectors[k++] = selectors[i];
    }
  }
  selectors.length = k;

  // Split around commas.  If there is an error in one of the comma separated
  // bits, we throw the whole away, but the failure of one selector does not
  // affect others.
  var n = selectors.length, start = 0;
  for (i = 0; i < n; ++i) {
    if (selectors[i] == ',') {
      processSelector(start, i);
      start = i+1;
    }
  }
  processSelector(start, n);


  function processSelector(start, end) {
    var historySensitive = false;

    // Space around commas is not an operator.
    if (selectors[start] === ' ') { ++start; }
    if (end-1 !== start && selectors[end] === ' ') { --end; }

    // Split the selector into element selectors, content around
    // space (ancestor operator) and '>' (descendant operator).
    var out = [];
    var lastOperator = start;
    var elSelector = '';
    for (var i = start; i < end; ++i) {
      var tok = selectors[i];
      var isChild = (tok === '>');
      if (isChild || tok === ' ') {
        // We've found the end of a single link in the selector chain.
        // We disallow absolute positions relative to html.
        elSelector = processElementSelector(lastOperator, i, false);
        if (!elSelector || (isChild && /^html/i.test(elSelector))) {
          return;
        }
        lastOperator = i+1;
        out.push(elSelector, isChild ? ' > ' : ' ');
      }
    }
    elSelector = processElementSelector(lastOperator, end, true);
    if (!elSelector) { return; }
    out.push(elSelector);

    function processElementSelector(start, end, last) {
      var debugStart = start, debugEnd = end;

      // Split the element selector into three parts.
      // DIV.foo#bar:hover
      //    ^       ^
      // el classes pseudo
      var element, classId, pseudoSelector, tok, elType;
      element = '';
      if (start < end) {
        tok = selectors[start].toLowerCase();
        if (tok === '*'
            || (tok === 'body' && start+1 !== end && !last)
            || ('number' === typeof (elType = html4.ELEMENTS[tok])
                && !(elType & html4.eflags.UNSAFE))) {
          ++start;
          element = tok;
        }
      }
      classId = '';
      while (start < end) {
        tok = selectors[start];
        if (tok.charAt(0) === '#') {
          if (/^#_|__$|[^#0-9A-Za-z:_\-]/.test(tok)) { return null; }
          // Rewrite ID elements to include the suffix.
          classId += tok + '-' + suffix;
        } else if (tok === '.') {
          if (++start < end
              && /^[0-9A-Za-z:_\-]+$/.test(tok = selectors[start])
              && !/^_|__$/.test(tok)) {
            classId += '.' + tok;
          } else {
            return null;
          }
        } else {
          break;
        }
        ++start;
      }
      pseudoSelector = '';
      if (start < end && selectors[start] === ':') {
        tok = selectors[++start];
        if (tok === 'visited' || tok === 'link') {
          if (!/^[a*]?$/.test(element)) {
            return null;
          }
          historySensitive = true;
          pseudoSelector = ':' + tok;
          element = 'a';
          ++start;
        }
      }
      if (start === end) {
        return element + classId + pseudoSelector;
      }
      return null;
    }


    var safeSelector = out.join('');
    if (/^body\b/.test(safeSelector)) {
      // Substitute the class that is attached to pseudo body elements for
      // the body element.
      safeSelector = '.vdoc-body___.' + suffix + safeSelector.substring(4);
    } else {
      // Namespace the selector so that it only matches under
      // a node with suffix in its CLASS attribute.
      safeSelector = '.' + suffix + ' ' + safeSelector;
    }

    (historySensitive
     ? historySensitiveSelectors
     : historyInsensitiveSelectors).push(safeSelector);
  }

  return [historyInsensitiveSelectors, historySensitiveSelectors];
}

var sanitizeStylesheet = (function () {
  var allowed = {};
  var cssMediaTypeWhitelist = {
    'braille': allowed,
    'embossed': allowed,
    'handheld': allowed,
    'print': allowed,
    'projection': allowed,
    'screen': allowed,
    'speech': allowed,
    'tty': allowed,
    'tv': allowed
  };

  /**
   * Given a series of sanitized tokens, removes any properties that would
   * leak user history if allowed to style links differently depending on
   * whether the linked URL is in the user's browser history.
   * @param {Array.<string>} blockOfProperties
   */
  function sanitizeHistorySensitive(blockOfProperties) {
    var elide = false;
    for (var i = 0, n = blockOfProperties.length; i < n-1; ++i) {
      var token = blockOfProperties[i];
      if (':' === blockOfProperties[i+1]) {
        elide = !(cssSchema[token].cssPropBits & CSS_PROP_BIT_ALLOWED_IN_LINK);
      }
      if (elide) { blockOfProperties[i] = ''; }
      if (';' === token) { elide = false; }
    }
    return blockOfProperties.join('');
  }

  /**
   * @param {string} cssText a string containing a CSS stylesheet.
   * @param {string} suffix a suffix that is added to all IDs and which is
   *    used as a CLASS names so that the returned selectors will only match
   *    nodes under one with suffix as a class name.
   *    If suffix is {@code "sfx"}, the selector
   *    {@code ["a", "#foo", " ", "b", ".bar"]} will be namespaced to
   *    {@code [".sfx", " ", "a", "#foo-sfx", " ", "b", ".bar"]}.
   * @param {function(string, string)} opt_naiveUriRewriter maps URLs of media
   *    (images, sounds) that appear as CSS property values to sanitized
   *    URLs or null if the URL should not be allowed as an external media
   *    file in sanitized CSS.
   */
  return function /*sanitizeStylesheet*/(
       cssText, suffix, opt_naiveUriRewriter) {
    var safeCss = void 0;
    // A stack describing the { ... } regions.
    // Null elements indicate blocks that should not be emitted.
    var blockStack = [];
    // True when the content of the current block should be left off safeCss.
    var elide = false;
    parseCssStylesheet(
        cssText,
        {
          startStylesheet: function () {
            safeCss = [];
          },
          endStylesheet: function () {
          },
          startAtrule: function (atIdent, headerArray) {
            if (elide) {
              atIdent = null;
            } else if (atIdent === '@media') {
              headerArray = headerArray.filter(
                function (mediaType) {
                  return cssMediaTypeWhitelist[mediaType] == allowed;
                });
              if (headerArray.length) {
                safeCss.push(atIdent, headerArray.join(','), '{');
              } else {
                atIdent = null;
              }
            } else {
              if (atIdent === '@import') {
                // TODO: Use a logger instead.
                if (window.console) {
                  window.console.log(
                      '@import ' + headerArray.join(' ') + ' elided');
                }
              }
              atIdent = null;  // Elide the block.
            }
            elide = !atIdent;
            blockStack.push(atIdent);              
          },
          endAtrule: function () {
            var atIdent = blockStack.pop();
            if (!elide) {
              safeCss.push(';');
            }
            checkElide();
          },
          startBlock: function () {
            // There are no bare blocks in CSS, so we do not change the
            // block stack here, but instead in the events that bracket
            // blocks.
            if (!elide) {
              safeCss.push('{');
            }
          },
          endBlock: function () {
            if (!elide) {
              safeCss.push('}');
              elide = true;  // skip any semicolon from endAtRule.
            }
          },
          startRuleset: function (selectorArray) {
            var historySensitiveSelectors = void 0;
            var removeHistoryInsensitiveSelectors = false;
            if (!elide) {
              var selectors = sanitizeCssSelectors(selectorArray, suffix);
              var historyInsensitiveSelectors = selectors[0];
              historySensitiveSelectors = selectors[1];
              if (!historyInsensitiveSelectors.length
                  && !historySensitiveSelectors.length) {
                elide = true;
              } else {
                var selector = historyInsensitiveSelectors.join(', ');
                if (!selector) {
                  // If we have only history sensitive selectors,
                  // use an impossible rule so that we can capture the content
                  // for later processing by 
                  // history insenstive content for use below.
                  selector = 'head > html';
                  removeHistoryInsensitiveSelectors = true;
                }
                safeCss.push(selector, '{');
              }
            }
            blockStack.push(
                elide
                ? null
                // Sometimes a single list of selectors is split in two,
                //   div, a:visited
                // because we want to allow some properties for DIV that
                // we don't want to allow for A:VISITED to avoid leaking
                // user history.
                // Store the history sensitive selectors and the position
                // where the block starts so we can later create a copy
                // of the permissive tokens, and filter it to handle the
                // history sensitive case.
                : {
                    historySensitiveSelectors: historySensitiveSelectors,
                    endOfSelectors: safeCss.length - 1,  // 1 is open curly
                    removeHistoryInsensitiveSelectors:
                       removeHistoryInsensitiveSelectors
                  });
          },
          endRuleset: function () {
            var rules = blockStack.pop();
            var propertiesEnd = safeCss.length;
            if (!elide) {
              safeCss.push('}');
              if (rules) {
                var extraSelectors = rules.historySensitiveSelectors;
                if (extraSelectors.length) {
                  var propertyGroupTokens = safeCss.slice(rules.endOfSelectors);
                  safeCss.push(extraSelectors.join(', '),
                               sanitizeHistorySensitive(propertyGroupTokens));
                }
              }
            }
            if (rules && rules.removeHistoryInsensitiveSelectors) {
              safeCss.splice(
                // -1 and +1 account for curly braces.
                rules.endOfSelectors - 1, propertiesEnd + 1);
            }
            checkElide();
          },
          declaration: function (property, valueArray) {
            if (!elide) {
              var schema = cssSchema[property];
              if (schema) {
                sanitizeCssProperty(property, schema, valueArray, opt_naiveUriRewriter);
                if (valueArray.length) {
                  safeCss.push(property, ':', valueArray.join(' '), ';');
                }
              }
            }
          }
        });
    function checkElide() {
      elide = blockStack.length !== 0 
          && blockStack[blockStack.length-1] !== null;
    }
    return safeCss.join('');
  };
})();

// Exports for closure compiler.
if (typeof window !== 'undefined') {
  window['sanitizeCssProperty'] = sanitizeCssProperty;
  window['sanitizeCssSelectors'] = sanitizeCssSelectors;
  window['sanitizeStylesheet'] = sanitizeStylesheet;
}

// Copyright (C) 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview
 * Utilities for dealing with CSS source code.
 *
 * @author mikesamuel@gmail.com
 * \@requires lexCss
 * \@overrides window
 * \@provides parseCssStylesheet, parseCssDeclarations
 */

/**
 * parseCssStylesheet takes a chunk of CSS text and a handler object with
 * methods that it calls as below:
 * <pre>
 * // At the beginning of a stylesheet.
 * handler.startStylesheet();
 *
 * // For an @foo rule ended by a semicolon: @import "foo.css";
 * handler.startAtrule('@import', ['"foo.css"']);
 * handler.endAtrule();
 *
 * // For an @foo rule ended with a block. @media print { ... }
 * handler.startAtrule('@media', ['print']);
 * handler.startBlock();
 * // Calls to contents elided.  Probably selectors and declarations as below.
 * handler.endBlock();
 * handler.endAtrule();
 * 
 * // For a ruleset: p.clazz q, s { color: blue; }
 * handler.startRuleset(['p', '.', 'clazz', ' ', 'q', ',', ' ', 's']);
 * handler.declaration('color', ['blue']);
 * handler.endRuleset();
 *
 * // At the end of a stylesheet.
 * handler.endStylesheet();
 * </pre>
 * When errors are encountered, the parser drops the useless tokens and
 * attempts to resume parsing.
 *
 * @param {string} cssText CSS3 content to parse as a stylesheet.
 * @param {Object} handler An object like <pre>{
 *   startStylesheet: function () { ... },
 *   endStylesheet: function () { ... },
 *   startAtrule: function (atIdent, headerArray) { ... },
 *   endAtrule: function () { ... },
 *   startBlock: function () { ... },
 *   endBlock: function () { ... },
 *   startRuleset: function (selectorArray) { ... },
 *   endRuleset: function () { ... },
 *   declaration: function (property, valueArray) { ... },
 * }</pre>
 */
var parseCssStylesheet;

/**
 * parseCssDeclarations parses a run of declaration productions as seen in the
 * body of the HTML5 {@code style} attribute.
 * 
 * @param {string} cssText CSS3 content to parse as a run of declarations.
 * @param {Object} handler An object like <pre>{
 *   declaration: function (property, valueArray) { ... },
 * }</pre>
 */
var parseCssDeclarations;

(function () {
  // stylesheet  : [ CDO | CDC | S | statement ]*;
  parseCssStylesheet = function(cssText, handler) {
    var toks = lexCss(cssText);
    if (handler.startStylesheet) { handler.startStylesheet(); }
    for (var i = 0, n = toks.length; i < n;) {
      // CDO and CDC ("<!--" and "-->") are converted to space by the lexer.
      i = toks[i] === ' ' ? i+1 : statement(toks, i, n, handler);
    }
    if (handler.endStylesheet) { handler.endStylesheet(); }
  };

  // statement   : ruleset | at-rule;
  function statement(toks, i, n, handler) {
    if (i < n) {
      var tok = toks[i];
      if (tok.charAt(0) === '@') {
        return atrule(toks, i, n, handler, true);  
      } else {
        return ruleset(toks, i, n, handler);
      }
    } else {
      return i;
    }
  }

  // at-rule     : ATKEYWORD S* any* [ block | ';' S* ];
  function atrule(toks, i, n, handler, blockok) {
    var start = i++;
    while (i < n && toks[i] !== '{' && toks[i] !== ';') {
      ++i;
    }
    if (i < n && (blockok || toks[i] === ';')) {
      var s = start+1, e = i;
      if (s < n && toks[s] === ' ') { ++s; }
      if (e > s && toks[e-1] === ' ') { --e; }
      if (handler.startAtrule) {
        handler.startAtrule(toks[start].toLowerCase(), toks.slice(s, e));
      }
      i = (toks[i] === '{')
          ? block(toks, i, n, handler)
          : i+1;  // Skip over ';'
      if (handler.endAtrule) {
        handler.endAtrule();
      }
    }
    // Else we reached end of input or are missing a semicolon. 
    // Drop the rule on the floor.
    return i;
  }

  // block       : '{' S* [ any | block | ATKEYWORD S* | ';' S* ]* '}' S*;
   // Assumes the leading '{' has been verified by callers.
  function block(toks, i, n, handler) {
    ++i; //  skip over '{'
    if (handler.startBlock) { handler.startBlock(); }
    while (i < n) {
      var ch = toks[i].charAt(0);
      if (ch == '}') {
        ++i;
        break;
      }
      if (ch === ' ' || ch === ';') {
        i = i+1;
      } else if (ch === '@') {
        i = atrule(toks, i, n, handler, false);
      } else if (ch === '{') {
        i = block(toks, i, n, handler);
      } else {
        // Instead of using (any* block) to subsume ruleset we allow either
        // blocks or rulesets with a non-blank selector.
        // This is more restrictive but does not require atrule specific
        // parse tree fixup to realize that the contents of the block in
        //    @media print { ... }
        // is a ruleset.  We just don't care about any block carrying at-rules
        // whose body content is not ruleset content.
        i = ruleset(toks, i, n, handler);
      }
    }
    if (handler.endBlock) { handler.endBlock(); }
    return i;
  }

  // ruleset    : selector? '{' S* declaration? [ ';' S* declaration? ]* '}' S*;
  function ruleset(toks, i, n, handler) {
    // toks[s:e] are the selector tokens including internal whitespace.
    var s = i, e = selector(toks, i, n, true);
    if (e < 0) {
      // Skip malformed content per selector calling convention.
      e = ~e;
      // Make sure we skip at least one token.
      return i === e ? e+1 : e;
    }
    i = e;
    // Don't include any trailing space in the selector slice.
    if (e > s && toks[e-1] === ' ') { --e; }
    var tok = toks[i];
    ++i;  // Skip over '{'
    if (tok !== '{') {
      // Skips past the '{' when there is a malformed input.
      return i;
    }
    if (handler.startRuleset) {
      handler.startRuleset(toks.slice(s, e));
    }
    while (i < n) {
      tok = toks[i];
      if (tok === '}') {
        ++i;
        break;
      }
      if (tok === ' ') {
        i = i+1;
      } else {
        i = declaration(toks, i, n, handler);
      }
    }
    if (handler.endRuleset) {
      handler.endRuleset();
    }
    return i < n ? i+1 : i;
  }

  // selector    : any+;
  // any         : [ IDENT | NUMBER | PERCENTAGE | DIMENSION | STRING
  //               | DELIM | URI | HASH | UNICODE-RANGE | INCLUDES
  //               | FUNCTION S* any* ')' | DASHMATCH | '(' S* any* ')'
  //               | '[' S* any* ']' ] S*;
  // A negative return value, rv, indicates the selector was malformed and
  // the index at which we stopped is ~rv.
  function selector(toks, i, n, allowSemi) {
    var s = i;
    // The definition of any above can be summed up as
    //   "any run of token except ('[', ']', '(', ')', ':', ';', '{', '}')
    //    or nested runs of parenthesized tokens or square bracketed tokens".
    // Spaces are significant in the selector.
    // Selector is used as (selector?) so the below looks for (any*) for
    // simplicity.
    var tok;
    // Keeping a stack pointer actually causes this to minify better since
    // ".length" and ".push" are a lo of chars.
    var brackets = [], stackLast = -1;
    for (;i < n; ++i) {
      tok = toks[i].charAt(0);
      if (tok === '[' || tok === '(') {
        brackets[++stackLast] = tok;
      } else if ((tok === ']' && brackets[stackLast] === '[') ||
                 (tok === ')' && brackets[stackLast] === '(')) {
        --stackLast;
      } else if (tok === '{' || tok === '}' || tok === ';' || tok === '@'
                 || (tok === ':' && !allowSemi)) {
        break;
      }
    }
    if (stackLast >= 0) {
      // Returns the bitwise inverse of i+1 to indicate an error in the
      // token stream so that clients can ignore it.
      i = ~(i+1);
    }
    return i;
  }

  var ident = /^-?[a-z]/i;

  // declaration : property ':' S* value;
  // property    : IDENT S*;
  // value       : [ any | block | ATKEYWORD S* ]+;
  function declaration(toks, i, n, handler) {
    var property = toks[i++];
    if (!ident.test(property)) { 
      return i+1;  // skip one token.
    }
    var tok;
    if (i < n && toks[i] === ' ') { ++i; }
    if (i == n || toks[i] !== ':') {
      // skip tokens to next semi or close bracket.
      while (i < n && (tok = toks[i]) !== ';' && tok !== '}') { ++i; }
      return i;
    }
    ++i;
    if (i < n && toks[i] === ' ') { ++i; }

    // None of the rules we care about want atrules or blocks in value, so
    // we look for any+ but that is the same as selector but not zero-length.
    // This gets us the benefit of not emitting any value with mismatched
    // brackets.
    var s = i, e = selector(toks, i, n, false);
    if (e < 0) {
      // Skip malformed content per selector calling convention.
      e = ~e;
    } else {
      var value = [], valuelen = 0;
      for (var j = s; j < e; ++j) {
        tok = toks[j];
        if (tok !== ' ') {
          value[valuelen++] = tok;
        }
      }
      // One of the following is now true:
      // (1) e is flush with the end of the tokens as in <... style="x:y">.
      // (2) tok[e] points to a ';' in which case we need to consume the semi.
      // (3) tok[e] points to a '}' in which case we don't consume it.
      // (4) else there is bogus unparsed value content at toks[e:].
      // Allow declaration flush with end for style attr body.
      if (e < n) {  // 2, 3, or 4
        do {
          tok = toks[e];
          if (tok === ';' || tok === '}') { break; }
          // Don't emit the property if there is questionable trailing content.
          valuelen = 0;
        } while (++e < n);
        if (tok === ';') {
          ++e;
        }
      }
      if (valuelen && handler.declaration) {
        // TODO: coerce non-keyword ident tokens to quoted strings.
        handler.declaration(property.toLowerCase(), value);
      }
    }
    return e;
  }

  parseCssDeclarations = function(cssText, handler) {
    var toks = lexCss(cssText);
    for (var i = 0, n = toks.length; i < n;) {
      i = toks[i] !== ' ' ? declaration(toks, i, n, handler) : i+1;
    }
  };
})();

// Exports for closure compiler.
if (typeof window !== 'undefined') {
  window['parseCssStylesheet'] = parseCssStylesheet;
  window['parseCssDeclarations'] = parseCssDeclarations;
}

/*!
 * @copyright@
 */
// Based on coding from the HTML4 Sanitizer by Google Inc.
// The HTML Attributes and ELements were reorganized according to the actual HTML5 specification
// from the W3C. All types and flags were reviewed again as accurately as possible with HTML4 only
// elements removed, you can still see them as comments. All rules which are new or changed from the
// old HTML4 file are also marked "new" within the comment. The comments also state which attributes
// and elements are assigned to respective types and flags. All rules which were not 100% clear were
// analyzed in a way of similarity, so for example "audio" and "video" content behaves like images etc.
// URIEFFECTS state if a URL is loaded inplace within a tag where the actual document is in control
// of what type of content is loaded like "image" or if a new document is loaded like with "a href".
// LOADERTYPES state if content is loaded as sandboxed which means it is loaded within a specific
// surroundig player like with video content for example or if it is loaded freely without restrictions.
// @overrides window
// @provides html4

var html4 = {};
html4.atype = {
  NONE: 0,
  URI: 1, //action, cite, data, href, icon, manifest, poster, src
  URI_FRAGMENT: 11, //usemap
  SCRIPT: 2, //all event handlers
  STYLE: 3, //style
  ID: 4, //id
  IDREF: 5, //for
  IDREFS: 6, //headers
  GLOBAL_NAME: 7, //name of form, iframe, img, map, meta
  LOCAL_NAME: 8, //name of button, fieldset, input, keygen, object, output, param, select, textarea
  CLASSES: 9, //class
  FRAME_TARGET: 10 //formtarget, srcdoc, target
};

html4.ATTRIBS = {
	'*::accesskey': 0, //NONE
	'*::class': 9, //CLASSES
	'*::contenteditable': 0, //NONE new
	'*::contextmenu': 0, //NONE new
	'*::dir': 0, //NONE
	'*::draggable': 0, //NONE new
	'*::dropzone': 0, //NONE new
	'*::hidden': 0, //NONE new
	'*::id': 4, //ID
	'*::lang': 0, //NONE
	'*::onabort': 2, //SCRIPT new
	'*::onblur': 2, //SCRIPT new
	'*::oncanplay': 2, //SCRIPT new
	'*::oncanplaythrough': 2, //SCRIPT new
	'*::onchange': 2, //SCRIPT new
	'*::onclick': 2, //SCRIPT
	'*::oncontextmenu': 2, //SCRIPT new
	'*::oncuechange': 2, //SCRIPT new
	'*::ondblclick': 2, //SCRIPT
	'*::ondrag': 2, //SCRIPT new
	'*::ondragend': 2, //SCRIPT new
	'*::ondragenter': 2, //SCRIPT new
	'*::ondragleave': 2, //SCRIPT new
	'*::ondragover': 2, //SCRIPT new
	'*::ondragstart': 2, //SCRIPT new
	'*::ondrop': 2, //SCRIPT new
	'*::ondurationchange': 2, //SCRIPT new
	'*::onemptied': 2, //SCRIPT new
	'*::onended': 2, //SCRIPT new
	'*::onerror': 2, //SCRIPT new
	'*::onfocus': 2, //SCRIPT new
	'*::oninput': 2, //SCRIPT new
	'*::oninvalid':	 2, //SCRIPT new
	'*::onkeydown': 2, //SCRIPT
	'*::onkeypress': 2, //SCRIPT
	'*::onkeyup': 2, //SCRIPT
	'*::onload': 2, //SCRIPT
	'*::onloadeddata': 2, //SCRIPT new
	'*::onloadedmetadata': 2, //SCRIPT new
	'*::onloadstart': 2, //SCRIPT new
	'*::onmousedown': 2, //SCRIPT
	'*::onmousemove': 2, //SCRIPT
	'*::onmouseout': 2, //SCRIPT
	'*::onmouseover': 2, //SCRIPT
	'*::onmouseup': 2, //SCRIPT
	'*::onmousewheel': 2, //SCRIPT new
	'*::onpause': 2, //SCRIPT new
	'*::onplay': 2, //SCRIPT new
	'*::onplaying': 2, //SCRIPT new
	'*::onprogress': 2, //SCRIPT new
	'*::onratechange': 2, //SCRIPT new
	'*::onreadystatechange': 2, //SCRIPT new
	'*::onreset': 2, //SCRIPT new
	'*::onscroll': 2, //SCRIPT new
	'*::onseeked': 2, //SCRIPT new
	'*::onseeking': 2, //SCRIPT new
	'*::onselect': 2, //SCRIPT new
	'*::onshow': 2, //SCRIPT new
	'*::onstalled': 2, //SCRIPT new
	'*::onsubmit': 2, //SCRIPT new
	'*::onsuspend': 2, //SCRIPT new
	'*::ontimeupdate': 2, //SCRIPT new
	'*::onvolumechange': 2, //SCRIPT new
	'*::onwaiting': 2, //SCRIPT new
	'*::spellcheck': 0, //NONE new
	'*::style': 3, //STYLE
	'*::tabindex': 0, //NONE
	'*::title': 0, //NONE
//---------------------  'a::accesskey': 0, moved to global
//---------------------  'a::coords': 0,
	'a::href': 1, //URI
	'a::hreflang': 0, //NONE
	'a::media': 0, //NONE new
//---------------------  'a::name': 7,
//---------------------	 'a::onblur': 2, moved to global
//---------------------	 'a::onfocus': 2, moved to global
	'a::rel': 0, //NONE
//---------------------  'a::rev': 0,
//---------------------  'a::shape': 0,
//---------------------  'a::tabindex': 0, moved to global
	'a::target': 0, //changed to "0" because of CSN 1918585 2013, original value was 10 FRAME_TARGET but it seems uncritical
	'a::type': 0, //NONE
//---------------------  'area::accesskey': 0, moved to global
	'area::alt': 0, //NONE
	'area::coords': 0, //NONE
	'area::href': 1, //URI
	'area::hreflang': 0, //NONE new
	'area::media': 0, //NONE new
//---------------------  'area::nohref': 0,
//---------------------	 'area::onblur': 2, moved to global
//---------------------	 'area::onfocus': 2, moved to global
	'area::rel': 0, //NONE new
	'area::shape': 0, //NONE
//---------------------  'area::tabindex': 0, moved to global
	'area::target': 10, //FRAME_TARGET
	'area::type': 0, //NONE
	'audio::autoplay': 0, //NONE new
	'audio::controls': 0, //NONE new
	'audio::loop': 0, //NONE new
	'audio::mediagroup': 0, //NONE new
	'audio::preload': 0, //NONE new
	'audio::src': 1, //URI
	'base::href': 1, //URI
	'base::target': 10, //FRAME_TARGET
//---------------------  'bdo::dir': 0,
	'blockquote::cite': 1, //URI
	'body::onafterprint': 2, //SCRIPT new
	'body::onbeforeprint': 2, //SCRIPT new
	'body::onbeforeunload': 2, //SCRIPT new
	'body::onblur': 2, //SCRIPT new
	'body::onerror': 2, //SCRIPT new
	'body::onfocus': 2, //SCRIPT new
	'body::onhashchange': 2, //SCRIPT new
	'body::onload': 2, //SCRIPT new
	'body::onmessage': 2, //SCRIPT new
	'body::onoffline': 2, //SCRIPT new
	'body::ononline': 2, //SCRIPT new
	'body::onpagehide': 2, //SCRIPT new
	'body::onpageshow': 2, //SCRIPT new
	'body::onpopstate': 2, //SCRIPT new
	'body::onredo': 2, //SCRIPT new
	'body::onresize': 2, //SCRIPT new
	'body::onscroll': 2, //SCRIPT new
	'body::onstorage': 2, //SCRIPT new
	'body::onundo': 2, //SCRIPT new
	'body::onunload': 2, //SCRIPT new
//---------------------  'br::clear': 0,
//---------------------  'button::accesskey': 0, moved to global
	'button::autofocus': 0, //NONE new
	'button::disabled': 0, //NONE
	'button::form': 0, //NONE new
	'button::formaction': 1, //URI new
	'button::formenctype': 0, //NONE new
	'button::formmethod': 0, //NONE new
	'button::formnovalidate': 0, //NONE new
	'button::formtarget': 10, //FRAME_TARGET new
	'button::name': 8, //LOCAL_NAME
//---------------------	 'button::onblur': 2,
//---------------------	 'button::onfocus': 2,
//---------------------  'button::tabindex': 0, moved to global
	'button::type': 0, //NONE
	'button::value': 0, //NONE
	'canvas::height': 0, //NONE
	'canvas::width': 0, //NONE
//---------------------	 'caption::align': 0,
//---------------------  'col::align': 0,
//---------------------	 'col::char': 0,
//---------------------	 'col::charoff': 0,
	'col::span': 0, //NONE
//---------------------	 'col::valign': 0,
//---------------------	 'col::width': 0,
//---------------------	 'colgroup::align': 0,
//---------------------	 'colgroup::char': 0,
//---------------------	 'colgroup::charoff': 0,
	'colgroup::span': 0, //NONE
//---------------------	 'colgroup::valign': 0,
//---------------------	 'colgroup::width': 0,
	'command::checked': 0, //NONE new
	'command::disabled': 0, //NONE new
	'command::icon': 1, //URI new
	'command::label': 0, //NONE new
	'command::radiogroup': 0, //NONE new		
	'command::type': 0, //NONE new
	'del::cite': 1, //URI
	'del::datetime': 0, //NONE
	'details::open': 0, //NONE new
//---------------------	 'dir::compact': 0,
//---------------------	 'div::align': 0,
//---------------------	 'dl::compact': 0,
	'embed::height': 0, //NONE new
	'embed::src': 1, //URI new
	'embed::type': 0, //NONE new
	'embed::width': 0, //NONE new
	'fieldset::disabled': 0, //NONE new
	'fieldset::form': 0, //NONE new
	'fieldset::name': 8, //LOCAL_NAME new
//---------------------	 'font::color': 0,
//---------------------	 'font::face': 0,
//---------------------	 'font::size': 0,
//---------------------	 'form::accept': 0,
	'form::accept-charset': 0, //NONE
	'form::action': 1, //URI
	'form::autocomplete': 0, //NONE
	'form::enctype': 0, //NONE
	'form::method': 0, //NONE
	'form::name': 7, //GLOBAL_NAME
	'form::novalidate': 0, //NONE new
//---------------------	 'form::onreset': 2,
//---------------------	 'form::onsubmit': 2,
	'form::target': 10, //FRAME_TARGET
//---------------------	 'h1::align': 0,
//---------------------	 'h2::align': 0,
//---------------------	 'h3::align': 0,
//---------------------	 'h4::align': 0,
//---------------------	 'h5::align': 0,
//---------------------	 'h6::align': 0,
//---------------------	 'hr::align': 0,
//---------------------	 'hr::noshade': 0,
//---------------------	 'hr::size': 0,
//---------------------	 'hr::width': 0,
	'html:: manifest': 1, //URI new
//---------------------	 'iframe::align': 0,
//---------------------	'iframe::frameborder': 0,
	'iframe::height': 0, //NONE
//---------------------	 'iframe::marginheight': 0,
//---------------------	 'iframe::marginwidth': 0,
	'iframe::name': 7, //GLOBAL_NAME new
	'iframe::sandbox': 0, //NONE new
	'iframe::seamless': 0, //NONE new
	'iframe::src': 1, //URI new
	'iframe::srcdoc': 10, //FRAME_TARGET new
	'iframe::width': 0, //NONE
//---------------------	 'img::align': 0,
	'img::alt': 0, //NONE
//---------------------	 'img::border': 0,
	'img::height': 0, //NONE
//---------------------	 'img::hspace': 0,
	'img::ismap': 0, //NONE
	'img::name': 7, //GLOBAL_NAME
	'img::src': 1, //URI
	'img::usemap': 11, //URI_FRAGMENT
//---------------------	'img::vspace': 0,
	'img::width': 0, //NONE
	'input::accept': 0, //NONE
//---------------------	 'input::accesskey': 0, moved to global
//---------------------	 'input::align': 0,
	'input::alt': 0, //NONE
	'input::autocomplete': 0, //NONE
	'input::autofocus': 0, //NONE new
	'input::checked': 0, //NONE
	'input::dirname': 0, //NONE new
	'input::disabled': 0, //NONE
	'input::form': 0, //NONE new
	'input::formaction': 1, //URI new
	'input::formenctype': 0, //NONE new
	'input::formmethod': 0, //NONE new
	'input::formnovalidate': 0, //NONE new
	'input::formtarget': 10, //FRAME_TARGET new
	'input::height': 0, //NONE new
//---------------------	 'input::ismap': 0,
	'input::list': 0, //NONE new
	'input::max': 0, //NONE new
	'input::maxlength': 0, //NONE
	'input::min': 0, //NONE new
	'input::multiple': 0, //NONE new
	'input::name': 8, //LOCAL_NAME
//---------------------	 'input::onblur': 2,
//---------------------	 'input::onchange': 2,
//---------------------	 'input::onfocus': 2,
//---------------------	 'input::onselect': 2,
	'input::pattern': 0, //NONE new
	'input::placeholder': 0, //NONE new
	'input::readonly': 0, //NONE
	'input::required': 0, //NONE new
	'input::step': 0, //NONE new
	'input::size': 0, //NONE
	'input::src': 1, //URI
//---------------------  'input::tabindex': 0, moved to global
	'input::type': 0, //NONE
//---------------------	 'input::usemap': 11,
	'input::value': 0, //NONE
	'input::width': 0, //NONE new
	'ins::cite': 1, //URI
	'ins::datetime': 0, //NONE
//---------------------  'label::accesskey': 0, moved to global
	'keygen::autofocus': 0, //NONE new
	'keygen::challenge': 0, //NONE new
	'keygen::disabled': 0, //NONE new
	'keygen::form': 0, //NONE new
	'keygen::keytype': 0, //NONE new
	'keygen::name': 8, //LOCAL_NAME new
	'label::for': 5, //IDREF
	'label::form': 0, //NONE new
//---------------------	 'label::onblur': 2,
//---------------------	 'label::onfocus': 2,
//---------------------  'legend::accesskey': 0, moved to global
//---------------------  'legend::align': 0,
//---------------------  'li::type': 0,
	'link::href': 1, //URI new
	'link::hreflang': 0, //NONE new
	'link::media': 0, //NONE new
	'link::rel': 0, //NONE new
	'link::sizes': 0, //NONE new
	'link::type': 0, //NONE new
	'li::value': 0, //NONE new
	'map::name': 7, //GLOBAL_NAME
//---------------------  'menu::compact': 0,
	'menu::label': 0, //NONE new
	'menu::type': 0, //NONE new
	'meta::charset': 0, //NONE new
	'meta::content': 0, //NONE new
	'meta::http-equiv': 0, //NONE new
	'meta::name': 7, //GLOBAL_NAME new
	'meter::form': 0, //NONE new
	'meter::high': 0, //NONE new
	'meter::low': 0, //NONE new
	'meter::max': 0, //NONE new
	'meter::min': 0, //NONE new
	'meter::optimum': 0, //NONE new
	'meter::value': 0, //NONE new
	'object::data': 1, //URI new
	'object::form': 0, //NONE new
	'object::height': 0, //NONE new
	'object::name': 8, //LOCAL_NAME new
	'object::type': 0, //NONE new
	'object::usemap': 11, //URI_FRAGMENT new
	'object::width': 0, //NONE new
//---------------------  'ol::compact': 0,
	'ol::reversed': 0, //NONE new
	'ol::start': 0, //NONE
//---------------------  'ol::type': 0,
	'optgroup::disabled': 0, //NONE
	'optgroup::label': 0, //NONE
	'option::disabled': 0, //NONE
	'option::label': 0, //NONE
	'option::selected': 0, //NONE
	'option::value': 0, //NONE
	'output::for': 5, //IDREF new
	'output::form': 0, //NONE new
	'output::name': 8, //LOCAL_NAME new
//---------------------  'p::align': 0,
	'param::name': 8, //LOCAL_NAME new
	'param::value': 0, //NONE new
	'progress::form': 0, //NONE new
	'progress::max': 0, //NONE new
	'progress::value': 0, //NONE new
//---------------------  'pre::width': 0,
	'q::cite': 1, //URI
	'script::async': 0, //NONE new
	'script::charset': 0, //NONE new
	'script::defer': 0, //NONE new
	'script::src': 1, //URI new
	'script::type': 0, //NONE new
	'select::autofocus': 0, //NONE new
	'select::disabled': 0, //NONE
	'select::form': 0, //NONE new
	'select::multiple': 0, //NONE
	'select::name': 8, //LOCAL_NAME
//---------------------	 'select::onblur': 2,
//---------------------	 'select::onchange': 2,
//---------------------	 'select::onfocus': 2,
	'select::required': 0, //NONE new
	'select::size': 0, //NONE
//---------------------  'select::tabindex': 0, moved to global
	'source::media': 0, //NONE new
	'source::src': 1, //URI new
	'source::type': 0, //NONE new
	'style::media': 0, //NONE new
	'style::scoped': 0, //NONE new
	'style::type': 0, //NONE new
//---------------------	 'table::align': 0,
//---------------------	 'table::bgcolor': 0,
	'table::border': 0, //NONE
//---------------------	 'table::cellpadding': 0,
//---------------------	 'table::cellspacing': 0,
//---------------------	 'table::frame': 0,
//---------------------	 'table::rules': 0,
//---------------------	 'table::summary': 0,
//---------------------	 'table::width': 0,
//---------------------	 'tbody::align': 0,
//---------------------	 'tbody::char': 0,
//---------------------	 'tbody::charoff': 0,
//---------------------	 'tbody::valign': 0,
//---------------------	 'td::abbr': 0,
//---------------------	 'td::align': 0,
//---------------------	 'td::axis': 0,
//---------------------	 'td::bgcolor': 0,
//---------------------	 'td::char': 0,
//---------------------	 'td::charoff': 0,
	'td::colspan': 0, //NONE
	'td::headers': 6, //IDREFS
//---------------------	 'td::height': 0,
//---------------------	 'td::nowrap': 0,
	'td::rowspan': 0, //NONE
//---------------------	 'td::scope': 0,
//---------------------  'td::valign': 0,
//---------------------	 'td::width': 0,
//---------------------  'textarea::accesskey': 0, moved to global
	'textarea::autofocus': 0, //NONE new
	'textarea::cols': 0, //NONE
	'textarea::disabled': 0, //NONE
	'textarea::form': 0, //NONE new
	'textarea::maxlength': 0, //NONE new
	'textarea::name': 8, //LOCAL_NAME
//---------------------	 'textarea::onblur': 2,
//---------------------	 'textarea::onchange': 2,
//---------------------	 'textarea::onfocus': 2,
//---------------------	 'textarea::onselect': 2,
	'textarea::placeholder': 0, //NONE new
	'textarea::readonly': 0, //NONE
	'textarea::required': 0, //NONE new
	'textarea::rows': 0, //NONE
	'textarea::wrap': 0, //NONE new
//---------------------  'textarea::tabindex': 0, moved to global
//---------------------	 'tfoot::align': 0,
//---------------------	 'tfoot::char': 0,
//---------------------	 'tfoot::charoff': 0,
//---------------------	 'tfoot::valign': 0,
//---------------------	 'th::abbr': 0,
//---------------------	 'th::align': 0,
//---------------------	 'th::axis': 0,
//---------------------	 'th::bgcolor': 0,
//---------------------	 'th::char': 0,
//---------------------	 'th::charoff': 0,
	'th::colspan': 0, //NONE
	'th::headers': 6, //IDREFS
//---------------------	 'th::height': 0,
//---------------------	 'th::nowrap': 0,
	'th::rowspan': 0, //NONE
	'th::scope': 0, //NONE
//---------------------	 'th::valign': 0,
//---------------------	 'th::width': 0,
//---------------------	 'thead::align': 0,
//---------------------	 'thead::char': 0,
//---------------------	 'thead::charoff': 0,
//---------------------	 'thead::valign': 0,
	'time::datetime': 0, //NONE new
	'time::pubdate': 0, //NONE new
//---------------------	 'tr::align': 0,
//---------------------	 'tr::bgcolor': 0,
//---------------------	 'tr::char': 0,
//---------------------	 'tr::charoff': 0,
//---------------------	 'tr::valign': 0,
	'track::default': 0, //NONE new
	'track::kind': 0, //NONE new
	'track::label': 0, //NONE new
	'track::src': 1, //URI new
	'track::srclang': 0, //NONE new
//---------------------	 'ul::compact': 0,
//---------------------	 'ul::type': 0
	'video::autoplay': 0, //NONE new
	'video::controls': 0, //NONE new
	'video::height': 0, //NONE new
	'video::loop': 0, //NONE new
	'video::mediagroup': 0, //NONE new
	'video::poster': 1, //URI new
	'video::preload': 0, //NONE new
	'video::src': 1, //URI new
	'video::width': 0 //NONE new
};
html4.eflags = {
	OPTIONAL_ENDTAG: 1,
	EMPTY: 2,
	CDATA: 4,
	RCDATA: 8,
	UNSAFE: 16,
	FOLDABLE: 32,
	SCRIPT: 64,
	STYLE: 128
};
html4.ELEMENTS = {
	'a': 0,
	'abbr': 0,
//---------------------	 'acronym': 0,
	'address': 0,
//---------------------	 'applet': 16,
	'area': 2, //EMPTY
	'article': 0, //new
	'aside': 0, //new
	'audio': 0, //new
	'b': 0,
	'base': 18, //EMPTY, UNSAFE
//---------------------	 'basefont': 18,
	'bdi': 0, //new
	'bdo': 0,
//---------------------	 'big': 0,
	'blockquote': 0,
	'body': 49, //OPTIONAL_ENDTAG, UNSAFE, FOLDABLE
	'br': 2, //EMPTY
	'button': 0,
	'canvas': 0,
	'caption': 0,
//---------------------	 'center': 0,
	'cite': 0,
	'code': 0,
	'col': 2, //EMPTY
	'colgroup': 1, //OPTIONAL_ENDTAG
	'command': 2, //EMPTY new
	'datalist': 0, //new
	'dd': 1, //OPTIONAL_ENDTAG
	'del': 0,
	'details': 0, //new
	'dfn': 0,
//---------------------	 'dir': 0,
	'div': 0,
	'dl': 0,
	'dt': 1, //OPTIONAL_ENDTAG
	'em': 0,
	'embed': 18, //EMPTY, UNSAFE new
	'fieldset': 0,
	'figcaption': 0, //new
	'figure': 0, //new
//---------------------	 'font': 0,
	'footer': 0, //new
	'form': 0,
//---------------------	 'frame': 18,
//---------------------	 'frameset': 16,
	'h1': 0,
	'h2': 0,
	'h3': 0,
	'h4': 0,
	'h5': 0,
	'h6': 0,
	'head': 49, //OPTIONAL_ENDTAG, UNSAFE, FOLDABLE
	'header': 0, //new
	'hgroup': 0, //new
	'hr': 2, //EMPTY
	'html': 49, //OPTIONAL_ENDTAG, UNSAFE, FOLDABLE
	'i': 0,
	'iframe': 4, //CDATA
	'img': 2,//EMPTY
	'input': 2, //EMPTY
	'ins': 0,
//---------------------	 'isindex': 18,
	'kbd': 0,
	'keygen': 2, //EMPTY new
	'label': 0,
	'legend': 0,
	'li': 1, //OPTIONAL_ENDTAG
	'link': 18, //EMPTY, UNSAFE
	'map': 0,
	'mark': 0, //new
	'menu': 0,
	'meta': 18, //EMPTY, UNSAFE
	'meter': 0, //new
	'nav': 0,
//---------------------	 'nobr': 0,
//---------------------	 'noembed': 4,
//---------------------	 'noframes': 20,
	'noscript': 20, //CDATA, UNSAFE
	'object': 16, //UNSAFE
	'ol': 0,
	'optgroup': 1, //OPTIONAL_ENDTAG new !!!!vorher 0
	'option': 1, //OPTIONAL_ENDTAG
	'output': 0, //new
	'p': 1, //OPTIONAL_ENDTAG
	'param': 18, //EMPTY, UNSAFE
	'pre': 0,
	'progress': 0, //new
	'q': 0,
	'rp': 1, //OPTIONAL_ENDTAG new
	'rt': 1, //OPTIONAL_ENDTAG new
	'ruby': 0, //new
	's': 0,
	'samp': 0,
	'script': 84, //CDATA, UNSAFE, SCRIPT
	'section': 0, //new
	'select': 0,
	'small': 0,
	'source': 2, //EMPTY new
	'span': 0,
//---------------------	 'strike': 0,
	'strong': 0,
	'style': 148, //CDATA, UNSAFE, STYLE
	'sub': 0,
	'summary': 0, //new
	'sup': 0,
	'table': 0,
	'tbody': 1, //OPTIONAL_ENDTAG
	'td': 1, //OPTIONAL_ENDTAG
	'textarea': 8, //RCDATA
	'tfoot': 1, //OPTIONAL_ENDTAG
	'th': 1, //OPTIONAL_ENDTAG
	'thead': 1, //OPTIONAL_ENDTAG
	'time': 0, //new
	'title': 24, //RCDATA, UNSAFE
	'tr': 1, //OPTIONAL_ENDTAG
	'track': 2, //EMPTY new
//---------------------	 'tt': 0,
	'u': 0,
	'ul': 0,
	'var': 0,
	'video': 0, //new
	'wbr': 2 //EMPTY new
};
html4.ueffects = {
	NOT_LOADED: 0,
	SAME_DOCUMENT: 1,
	NEW_DOCUMENT: 2
};
html4.URIEFFECTS = {
	'a::href': 2, //NEW_DOCUMENT
	'area::href': 2, //NEW_DOCUMENT
	'audio::src': 1, //SAME_DOCUMENT new
	'base::href':2, //NEW_DOCUMENT new
	'blockquote::cite': 0, //NOT_LOADED
//---------------------	 'body::background': 1,
	'button::formaction': 2, //NEW_DOCUMENT new
	'command::icon': 1, //SAME_DOCUMENT new
	'del::cite': 0, //NOT_LOADED	
	'embed::src': 1, //SAME_DOCUMENT new
	'form::action': 2, //NEW_DOCUMENT
	'html:: manifest': 1, //SAME_DOCUMENT new
	'iframe::src': 1, //SAME_DOCUMENT new
	'img::src': 1, //SAME_DOCUMENT
	'input::formaction': 2, //NEW_DOCUMENT new
	'input::src': 1, //SAME_DOCUMENT
	'ins::cite': 0, //NOT_LOADED
	'link::href': 2, //NEW_DOCUMENT new
	'object::data': 1, //SAME_DOCUMENT new
	'q::cite': 0, //NOT_LOADED	
	'script::src': 1, //SAME_DOCUMENT new
	'source::src': 1, //SAME_DOCUMENT new
	'track::src': 1, //SAME_DOCUMENT new
	'video::poster': 1, //SAME_DOCUMENT new
	'video::src': 1 //SAME_DOCUMENT new
};
html4.ltypes = {
	UNSANDBOXED: 2,
	SANDBOXED: 1,
	DATA: 0
};
html4.LOADERTYPES = {
	'a::href': 2, //UNSANDBOXED
	'area::href': 2, //UNSANDBOXED
	'audio::src': 1, //SANDBOXED new
	'base::href': 2, //UNSANDBOXED new
	'blockquote::cite': 2, //UNSANDBOXED
//---------------------	 'body::background': 1,
	'button::formaction': 2, //UNSANDBOXED new
	'command::icon': 1, //SANDBOXED new
	'del::cite': 2, //UNSANDBOXED
	'embed::src': 1, //SANDBOXED new
	'form::action': 2, //UNSANDBOXED
	'html:: manifest': 1, //SANDBOXED new
	'iframe::src': 1, //SANDBOXED new
	'img::src': 1, //SANDBOXED
	'input::formaction': 2, //UNSANDBOXED new
	'input::src': 1, //SANDBOXED
	'ins::cite': 2, //UNSANDBOXED
	'link::href': 2, //UNSANDBOXED new
	'object::data': 0, //DATA new
	'q::cite': 2, //UNSANDBOXED
	'script::src': 1, //SANDBOXED new
	'source::src': 1, //SANDBOXED new
	'track::src': 1, //SANDBOXED new
	'video::poster': 1, //SANDBOXED new
	'video::src': 1 //SANDBOXED new
};if (typeof window !== 'undefined') {
	window['html4'] = html4;
}
// Copyright (C) 2006 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview
 * An HTML sanitizer that can satisfy a variety of security policies.
 *
 * <p>
 * The HTML sanitizer is built around a SAX parser and HTML element and
 * attributes schemas.
 * 
 * If the cssparser is loaded, inline styles are sanitized using the
 * css property and value schemas.  Else they are remove during
 * sanitization.
 *
 * If it exists, uses parseCssDeclarations, sanitizeCssProperty,  cssSchema
 *
 * @author mikesamuel@gmail.com
 * @author jasvir@gmail.com
 * \@requires html4
 * \@overrides window
 * \@provides html, html_sanitize
 */

/**
 * \@namespace
 */
var html = (function(html4) {

  // For closure compiler
  var parseCssDeclarations, sanitizeCssProperty, cssSchema;
  if ('undefined' !== typeof window) {
    parseCssDeclarations = window['parseCssDeclarations'];
    sanitizeCssProperty = window['sanitizeCssProperty'];
    cssSchema = window['cssSchema'];
  }

  var lcase;
  // The below may not be true on browsers in the Turkish locale.
  if ('script' === 'SCRIPT'.toLowerCase()) {
    lcase = function(s) { return s.toLowerCase(); };
  } else {
    /**
     * {\@updoc
     * $ lcase('SCRIPT')
     * # 'script'
     * $ lcase('script')
     * # 'script'
     * }
     */
    lcase = function(s) {
      return s.replace(
          /[A-Z]/g,
          function(ch) {
            return String.fromCharCode(ch.charCodeAt(0) | 32);
          });
    };
  }

  // The keys of this object must be 'quoted' or JSCompiler will mangle them!
  var ENTITIES = {
    'lt': '<',
    'gt': '>',
    'amp': '&',
    'nbsp': '\240',
    'quot': '"',
    'apos': '\''
  };

  var decimalEscapeRe = /^#(\d+)$/;
  var hexEscapeRe = /^#x([0-9A-Fa-f]+)$/;
  /**
   * Decodes an HTML entity.
   *
   * {\@updoc
   * $ lookupEntity('lt')
   * # '<'
   * $ lookupEntity('GT')
   * # '>'
   * $ lookupEntity('amp')
   * # '&'
   * $ lookupEntity('nbsp')
   * # '\xA0'
   * $ lookupEntity('apos')
   * # "'"
   * $ lookupEntity('quot')
   * # '"'
   * $ lookupEntity('#xa')
   * # '\n'
   * $ lookupEntity('#10')
   * # '\n'
   * $ lookupEntity('#x0a')
   * # '\n'
   * $ lookupEntity('#010')
   * # '\n'
   * $ lookupEntity('#x00A')
   * # '\n'
   * $ lookupEntity('Pi')      // Known failure
   * # '\u03A0'
   * $ lookupEntity('pi')      // Known failure
   * # '\u03C0'
   * }
   *
   * @param {string} name the content between the '&' and the ';'.
   * @return {string} a single unicode code-point as a string.
   */
  function lookupEntity(name) {
    name = lcase(name);  // TODO: &pi; is different from &Pi;
    if (ENTITIES.hasOwnProperty(name)) { return ENTITIES[name]; }
    var m = name.match(decimalEscapeRe);
    if (m) {
      return String.fromCharCode(parseInt(m[1], 10));
    } else if (!!(m = name.match(hexEscapeRe))) {
      return String.fromCharCode(parseInt(m[1], 16));
    }
    return '';
  }

  function decodeOneEntity(_, name) {
    return lookupEntity(name);
  }

  var nulRe = /\0/g;
  function stripNULs(s) {
    return s.replace(nulRe, '');
  }

  var entityRe = /&(#\d+|#x[0-9A-Fa-f]+|\w+);/g;
  /**
   * The plain text of a chunk of HTML CDATA which possibly containing.
   *
   * {\@updoc
   * $ unescapeEntities('')
   * # ''
   * $ unescapeEntities('hello World!')
   * # 'hello World!'
   * $ unescapeEntities('1 &lt; 2 &amp;&AMP; 4 &gt; 3&#10;')
   * # '1 < 2 && 4 > 3\n'
   * $ unescapeEntities('&lt;&lt <- unfinished entity&gt;')
   * # '<&lt <- unfinished entity>'
   * $ unescapeEntities('/foo?bar=baz&copy=true')  // & often unescaped in URLS
   * # '/foo?bar=baz&copy=true'
   * $ unescapeEntities('pi=&pi;&#x3c0;, Pi=&Pi;\u03A0') // FIXME: known failure
   * # 'pi=\u03C0\u03c0, Pi=\u03A0\u03A0'
   * }
   *
   * @param {string} s a chunk of HTML CDATA.  It must not start or end inside
   *     an HTML entity.
   */
  function unescapeEntities(s) {
    return s.replace(entityRe, decodeOneEntity);
  }

  var ampRe = /&/g;
  var looseAmpRe = /&([^a-z#]|#(?:[^0-9x]|x(?:[^0-9a-f]|$)|$)|$)/gi;
  var ltRe = /[<]/g;
  var gtRe = />/g;
  var quotRe = /\"/g;

  /**
   * Escapes HTML special characters in attribute values.
   *
   * {\@updoc
   * $ escapeAttrib('')
   * # ''
   * $ escapeAttrib('"<<&==&>>"')  // Do not just escape the first occurrence.
   * # '&#34;&lt;&lt;&amp;&#61;&#61;&amp;&gt;&gt;&#34;'
   * $ escapeAttrib('Hello <World>!')
   * # 'Hello &lt;World&gt;!'
   * }
   */
  function escapeAttrib(s) {
    return ('' + s).replace(ampRe, '&amp;').replace(ltRe, '&lt;')
        .replace(gtRe, '&gt;').replace(quotRe, '&#34;');
  }

  /**
   * Escape entities in RCDATA that can be escaped without changing the meaning.
   * {\@updoc
   * $ normalizeRCData('1 < 2 &&amp; 3 > 4 &amp;& 5 &lt; 7&8')
   * # '1 &lt; 2 &amp;&amp; 3 &gt; 4 &amp;&amp; 5 &lt; 7&amp;8'
   * }
   */
  function normalizeRCData(rcdata) {
    return rcdata
        .replace(looseAmpRe, '&amp;$1')
        .replace(ltRe, '&lt;')
        .replace(gtRe, '&gt;');
  }

  // TODO(mikesamuel): validate sanitizer regexs against the HTML5 grammar at
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html
  // http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html

  // We initially split input so that potentially meaningful characters
  // like '<' and '>' are separate tokens, using a fast dumb process that
  // ignores quoting.  Then we walk that token stream, and when we see a
  // '<' that's the start of a tag, we use ATTR_RE to extract tag
  // attributes from the next token.  That token will never have a '>'
  // character.  However, it might have an unbalanced quote character, and
  // when we see that, we combine additional tokens to balance the quote.

  var ATTR_RE = new RegExp(
    '^\\s*' +
    '([a-z][a-z-]*)' +          // 1 = Attribute name
    '(?:' + (
      '\\s*(=)\\s*' +           // 2 = Is there a value?
      '(' + (                   // 3 = Attribute value
        // TODO(felix8a): maybe use backref to match quotes
        '(\")[^\"]*(\"|$)' +    // 4, 5 = Double-quoted string
        '|' +
        '(\')[^\']*(\'|$)' +    // 6, 7 = Single-quoted string
        '|' +
        // Positive lookahead to prevent interpretation of
        // <foo a= b=c> as <foo a='b=c'>
        // TODO(felix8a): might be able to drop this case
        '(?=[a-z][a-z-]*\\s*=)' +
        '|' +
        // Unquoted value that isn't an attribute name
        // (since we didn't match the positive lookahead above)
        '[^\"\'\\s]*' ) +
      ')' ) +
    ')?',
    'i');

  var ENTITY_RE = /^(#[0-9]+|#x[0-9a-f]+|\w+);/i;

  // false on IE<=8, true on most other browsers
  var splitWillCapture = ('a,b'.split(/(,)/).length === 3);

  // bitmask for tags with special parsing, like <script> and <textarea>
  var EFLAGS_TEXT = html4.eflags.CDATA | html4.eflags.RCDATA;

  /**
   * Given a SAX-like event handler, produce a function that feeds those
   * events and a parameter to the event handler.
   *
   * The event handler has the form:{@code
   * {
   *   // Name is an upper-case HTML tag name.  Attribs is an array of
   *   // alternating upper-case attribute names, and attribute values.  The
   *   // attribs array is reused by the parser.  Param is the value passed to
   *   // the saxParser.
   *   startTag: function (name, attribs, param) { ... },
   *   endTag:   function (name, param) { ... },
   *   pcdata:   function (text, param) { ... },
   *   rcdata:   function (text, param) { ... },
   *   cdata:    function (text, param) { ... },
   *   startDoc: function (param) { ... },
   *   endDoc:   function (param) { ... }
   * }}
   *
   * @param {Object} handler a record containing event handlers.
   * @return {function(string, Object)} A function that takes a chunk of HTML
   *     and a parameter.  The parameter is passed on to the handler methods.
   */
  function makeSaxParser(handler) {
    return function(htmlText, param) {
      return parse(htmlText, handler, param);
    };
  }

  // Parsing strategy is to split input into parts that might be lexically
  // meaningful (every ">" becomes a separate part), and then recombine
  // parts if we discover they're in a different context.

  // Note, html-sanitizer filters unknown tags here, even though they also
  // get filtered out by the sanitizer's handler.  This is back-compat
  // behavior; makeSaxParser is public.

  // TODO(felix8a): Significant performance regressions from -legacy,
  // tested on
  //    Chrome 18.0
  //    Firefox 11.0
  //    IE 6, 7, 8, 9
  //    Opera 11.61
  //    Safari 5.1.3
  // Many of these are unusual patterns that are linearly slower and still
  // pretty fast (eg 1ms to 5ms), so not necessarily worth fixing.

  // TODO(felix8a): "<script> && && && ... <\/script>" is slower on all
  // browsers.  The hotspot is htmlSplit.

  // TODO(felix8a): "<p title='>>>>...'><\/p>" is slower on all browsers.
  // This is partly htmlSplit, but the hotspot is parseTagAndAttrs.

  // TODO(felix8a): "<a><\/a><a><\/a>..." is slower on IE9.
  // "<a>1<\/a><a>1<\/a>..." is faster, "<a><\/a>2<a><\/a>2..." is faster.

  // TODO(felix8a): "<p<p<p..." is slower on IE[6-8]

  var continuationMarker = {};
  function parse(htmlText, handler, param) {
    var h = handler;
    var m, p, tagName;
    var parts = htmlSplit(htmlText);
    var state = {
      noMoreGT: false,
      noMoreEndComments: false
    };
    parseCPS(handler, parts, 0, state, param);
  }

  function continuationMaker(h, parts, initial, state, param) {
    return function () {
      parseCPS(h, parts, initial, state, param);
    };
  }

  function parseCPS(h, parts, initial, state, param) {
    try {
      if (h.startDoc && initial == 0) { h.startDoc(param); }
      var m, p, tagName;
      for (var pos = initial, end = parts.length; pos < end;) {
        var current = parts[pos++];
        var next = parts[pos];
        switch (current) {
        case '&':
          if (ENTITY_RE.test(next)) {
            if (h.pcdata) { 
              h.pcdata('&' + next, param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
            pos++;
          } else {
            if (h.pcdata) { h.pcdata("&amp;", param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          }
          break;
        case '<\/':
          if (m = /^(\w+)[^\'\"]*/.exec(next)) {
            if (m[0].length === next.length && parts[pos + 1] === '>') {
              // fast case, no attribute parsing needed
              pos += 2;
              tagName = lcase(m[1]);
              if (html4.ELEMENTS.hasOwnProperty(tagName)) {
                if (h.endTag) {
                  h.endTag(tagName, param, continuationMarker,
                    continuationMaker(h, parts, pos, state, param));
                }
              }
            } else {
              // slow case, need to parse attributes
              // TODO(felix8a): do we really care about misparsing this?
              pos = parseEndTag(
                parts, pos, h, param, continuationMarker, state);
            }
          } else {
            if (h.pcdata) {
              h.pcdata('&lt;/', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          }
          break;
        case '<':
          if (m = /^(\w+)\s*\/?/.exec(next)) {
            if (m[0].length === next.length && parts[pos + 1] === '>') {
              // fast case, no attribute parsing needed
              pos += 2;
              tagName = lcase(m[1]);
              if (html4.ELEMENTS.hasOwnProperty(tagName)) {
                if (h.startTag) {
                  h.startTag(tagName, [], param, continuationMarker,
                    continuationMaker(h, parts, pos, state, param));
                }
                // tags like <script> and <textarea> have special parsing
                var eflags = html4.ELEMENTS[tagName];
                if (eflags & EFLAGS_TEXT) {
                  var tag = { name: tagName, next: pos, eflags: eflags };
                  pos = parseText(
                    parts, tag, h, param, continuationMarker, state);
                }
              }
            } else {
              // slow case, need to parse attributes
              pos = parseStartTag(
                parts, pos, h, param, continuationMarker, state);
            }
          } else {
            if (h.pcdata) {
              h.pcdata('&lt;', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          }
          break;
        case '<\!--':
          // The pathological case is n copies of '<\!--' without '-->', and
          // repeated failure to find '-->' is quadratic.  We avoid that by
          // remembering when search for '-->' fails.
          if (!state.noMoreEndComments) {
            // A comment <\!--x--> is split into three tokens:
            //   '<\!--', 'x--', '>'
            // We want to find the next '>' token that has a preceding '--'.
            // pos is at the 'x--'.
            for (p = pos + 1; p < end; p++) {
              if (parts[p] === '>' && /--$/.test(parts[p - 1])) { break; }
            }
            if (p < end) {
              pos = p + 1;
            } else {
              state.noMoreEndComments = true;
            }
          }
          if (state.noMoreEndComments) {
            if (h.pcdata) {
              h.pcdata('&lt;!--', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          }
          break;
        case '<\!':
          if (!/^\w/.test(next)) {
            if (h.pcdata) {
              h.pcdata('&lt;!', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param));
            }
          } else {
            // similar to noMoreEndComment logic
            if (!state.noMoreGT) {
              for (p = pos + 1; p < end; p++) {
                if (parts[p] === '>') { break; }
              }
              if (p < end) {
                pos = p + 1;
              } else {
                state.noMoreGT = true;
              }
            }
            if (state.noMoreGT) {
              if (h.pcdata) {
                h.pcdata('&lt;!', param, continuationMarker,
                  continuationMaker(h, parts, pos, state, param));
              }
            }
          }
          break;
        case '<?':
          // similar to noMoreEndComment logic
          if (!state.noMoreGT) {
            for (p = pos + 1; p < end; p++) {
              if (parts[p] === '>') { break; }
            }
            if (p < end) {
              pos = p + 1;
            } else {
              state.noMoreGT = true;
            }
          }
          if (state.noMoreGT) {
            if (h.pcdata) {
              h.pcdata('&lt;?', param, continuationMarker,
                continuationMaker(h, parts, pos, state, param)); 
            }
          }
          break;
        case '>':
          if (h.pcdata) {
            h.pcdata("&gt;", param, continuationMarker,
              continuationMaker(h, parts, pos, state, param)); 
          }
          break;
        case '':
          break;
        default:
          if (h.pcdata) {
            h.pcdata(current, param, continuationMarker, 
              continuationMaker(h, parts, pos, state, param)); 
          }
          break;
        }
      }
      if (h.endDoc) { h.endDoc(param); }
    } catch (e) {
      if (e !== continuationMarker) { throw e; }
    }
  }

  // Split str into parts for the html parser.
  function htmlSplit(str) {
    // can't hoist this out of the function because of the re.exec loop.
    var re = /(<\/|<\!--|<[!?]|[&<>])/g;
    str += '';
    if (splitWillCapture) {
      return str.split(re);
    } else {
      var parts = [];
      var lastPos = 0;
      var m;
      while ((m = re.exec(str)) !== null) {
        parts.push(str.substring(lastPos, m.index));
        parts.push(m[0]);
        lastPos = m.index + m[0].length;
      }
      parts.push(str.substring(lastPos));
      return parts;
    }
  }

  function parseEndTag(parts, pos, h, param, continuationMarker, state) {
    var tag = parseTagAndAttrs(parts, pos);
    // drop unclosed tags
    if (!tag) { return parts.length; }
    if (tag.eflags !== void 0) {
      if (h.endTag) {
        h.endTag(tag.name, param, continuationMarker,
          continuationMaker(h, parts, pos, state, param)); 
      }
    }
    return tag.next;
  }

  function parseStartTag(parts, pos, h, param, continuationMarker, state) {
    var tag = parseTagAndAttrs(parts, pos);
    // drop unclosed tags
    if (!tag) { return parts.length; }
    if (tag.eflags !== void 0) {
      if (h.startTag) { 
        h.startTag(tag.name, tag.attrs, param, continuationMarker,
          continuationMaker(h, parts, tag.next, state, param)); 
      }
      // tags like <script> and <textarea> have special parsing
      if (tag.eflags & EFLAGS_TEXT) {
        return parseText(parts, tag, h, param, continuationMarker, state);
      }
    }
    return tag.next;
  }

  var endTagRe = {};

  // Tags like <script> and <textarea> are flagged as CDATA or RCDATA,
  // which means everything is text until we see the correct closing tag.
  function parseText(parts, tag, h, param, continuationMarker, state) {
    var end = parts.length;
    if (!endTagRe.hasOwnProperty(tag.name)) {
      endTagRe[tag.name] = new RegExp('^' + tag.name + '(?:[\\s\\/]|$)', 'i');
    }
    var re = endTagRe[tag.name];
    var first = tag.next;
    var p = tag.next + 1;
    for (; p < end; p++) {
      if (parts[p - 1] === '<\/' && re.test(parts[p])) { break; }
    }
    if (p < end) { p -= 1; }
    var buf = parts.slice(first, p).join('');
    if (tag.eflags & html4.eflags.CDATA) {
      if (h.cdata) { 
        h.cdata(buf, param, continuationMarker,
          continuationMaker(h, parts, p, state, param)); 
      }
    } else if (tag.eflags & html4.eflags.RCDATA) {
      if (h.rcdata) {
        h.rcdata(normalizeRCData(buf), param, continuationMarker, 
          continuationMaker(h, parts, p, state, param)); 
      }
    } else {
      throw new Error('bug');
    }
    return p;
  }

  // at this point, parts[pos-1] is either "<" or "<\/".
  function parseTagAndAttrs(parts, pos) {
    var m = /^(\w+)/.exec(parts[pos]);
    var tag = { name: lcase(m[1]) };
    if (html4.ELEMENTS.hasOwnProperty(tag.name)) {
      tag.eflags = html4.ELEMENTS[tag.name];
    } else {
      tag.eflags = void 0;
    }
    var buf = parts[pos].substr(m[0].length);
    // Find the next '>'.  We optimistically assume this '>' is not in a
    // quoted context, and further down we fix things up if it turns out to
    // be quoted.
    var p = pos + 1;
    var end = parts.length;
    for (; p < end; p++) {
      if (parts[p] === '>') { break; }
      buf += parts[p];
    }
    if (end <= p) { return void 0; }
    var attrs = [];
    while (buf !== '') {
      m = ATTR_RE.exec(buf);
      if (!m) {
        // No attribute found: skip garbage
        buf = buf.replace(/^[\s\S][^a-z\s]*/, '');

      } else if ((m[4] && !m[5]) || (m[6] && !m[7])) {
        // Unterminated quote: slurp to the next unquoted '>'
        var quote = m[4] || m[6];
        var sawQuote = false;
        var abuf = [buf, parts[p++]];
        for (; p < end; p++) {
          if (sawQuote) {
            if (parts[p] === '>') { break; }
          } else if (0 <= parts[p].indexOf(quote)) {
            sawQuote = true;
          }
          abuf.push(parts[p]);
        }
        // Slurp failed: lose the garbage
        if (end <= p) { break; }
        // Otherwise retry attribute parsing
        buf = abuf.join('');
        continue;

      } else {
        // We have an attribute
        var aName = lcase(m[1]);
        var aValue = m[2] ? decodeValue(m[3]) : aName;
        attrs.push(aName, aValue);
        buf = buf.substr(m[0].length);
      }
    }
    tag.attrs = attrs;
    tag.next = p + 1;
    return tag;
  }

  function decodeValue(v) {
    var q = v.charCodeAt(0);
    if (q === 0x22 || q === 0x27) { // " or '
      v = v.substr(1, v.length - 2);
    }
    return unescapeEntities(stripNULs(v));
  }

  /**
   * Returns a function that strips unsafe tags and attributes from html.
   * @param {function(string, Array.<string>): ?Array.<string>} tagPolicy
   *     A function that takes (tagName, attribs[]), where tagName is a key in
   *     html4.ELEMENTS and attribs is an array of alternating attribute names
   *     and values.  It should return a sanitized attribute array, or null to
   *     delete the tag.  It's okay for tagPolicy to modify the attribs array,
   *     but the same array is reused, so it should not be held between calls.
   * @return {function(string, Array)} A function that sanitizes a string of
   *     HTML and appends result strings to the second argument, an array.
   */
  function makeHtmlSanitizer(tagPolicy) {
    var stack;
    var ignoring;
    var emit = function (text, out) {
      if (!ignoring) { out.push(text); }
    };
    return makeSaxParser({
      startDoc: function(_) {
        stack = [];
        ignoring = false;
      },
      startTag: function(tagName, attribs, out) {
        if (ignoring) { return; }
        if (!html4.ELEMENTS.hasOwnProperty(tagName)) { return; }
        var eflags = html4.ELEMENTS[tagName];
        if (eflags & html4.eflags.FOLDABLE) {
          return;
        }
        attribs = tagPolicy(tagName, attribs);
        if (!attribs) {
          ignoring = !(eflags & html4.eflags.EMPTY);
          return;
        }
        // TODO(mikesamuel): relying on tagPolicy not to insert unsafe
        // attribute names.
        if (!(eflags & html4.eflags.EMPTY)) {
          stack.push(tagName);
        }

        out.push('<', tagName);
        for (var i = 0, n = attribs.length; i < n; i += 2) {
          var attribName = attribs[i],
              value = attribs[i + 1];
          if (value !== null && value !== void 0) {
            out.push(' ', attribName, '="', escapeAttrib(value), '"');
          }
        }
        out.push('>');
      },
      endTag: function(tagName, out) {
        if (ignoring) {
          ignoring = false;
          return;
        }
        if (!html4.ELEMENTS.hasOwnProperty(tagName)) { return; }
        var eflags = html4.ELEMENTS[tagName];
        if (!(eflags & (html4.eflags.EMPTY | html4.eflags.FOLDABLE))) {
          var index;
          if (eflags & html4.eflags.OPTIONAL_ENDTAG) {
            for (index = stack.length; --index >= 0;) {
              var stackEl = stack[index];
              if (stackEl === tagName) { break; }
              if (!(html4.ELEMENTS[stackEl] &
                    html4.eflags.OPTIONAL_ENDTAG)) {
                // Don't pop non optional end tags looking for a match.
                return;
              }
            }
          } else {
            for (index = stack.length; --index >= 0;) {
              if (stack[index] === tagName) { break; }
            }
          }
          if (index < 0) { return; }  // Not opened.
          for (var i = stack.length; --i > index;) {
            var stackEl = stack[i];
            if (!(html4.ELEMENTS[stackEl] &
                  html4.eflags.OPTIONAL_ENDTAG)) {
              out.push('<\/', stackEl, '>');
            }
          }
          stack.length = index;
          out.push('<\/', tagName, '>');
        }
      },
      pcdata: emit,
      rcdata: emit,
      cdata: emit,
      endDoc: function(out) {
        for (; stack.length; stack.length--) {
          out.push('<\/', stack[stack.length - 1], '>');
        }
      }
    });
  }

  // From RFC3986
  var URI_SCHEME_RE = new RegExp(
      '^' +
      '(?:' +
        '([^:\/?# ]+)' +         // scheme
      ':)?'
  );

  var ALLOWED_URI_SCHEMES = /^(?:https?|mailto)$/i;

  function safeUri(uri, naiveUriRewriter) {
    if (!naiveUriRewriter) { return null; }
    var parsed = ('' + uri).match(URI_SCHEME_RE);
    if (parsed && (!parsed[1] || ALLOWED_URI_SCHEMES.test(parsed[1]))) {
      return naiveUriRewriter(uri);
    } else {
      return null;
    }
  }

  /**
   * Sanitizes attributes on an HTML tag.
   * @param {string} tagName An HTML tag name in lowercase.
   * @param {Array.<?string>} attribs An array of alternating names and values.
   * @param {?function(?string): ?string} opt_naiveUriRewriter A transform to
   *     apply to URI attributes; it can return a new string value, or null to
   *     delete the attribute.  If unspecified, URI attributes are deleted.
   * @param {function(?string): ?string} opt_nmTokenPolicy A transform to apply
   *     to attributes containing HTML names, element IDs, and space-separated
   *     lists of classes; it can return a new string value, or null to delete
   *     the attribute.  If unspecified, these attributes are kept unchanged.
   * @return {Array.<?string>} The sanitized attributes as a list of alternating
   *     names and values, where a null value means to omit the attribute.
   */
  function sanitizeAttribs(
      tagName, attribs, opt_naiveUriRewriter, opt_nmTokenPolicy) {
    for (var i = 0; i < attribs.length; i += 2) {
      var attribName = attribs[i];
      var value = attribs[i + 1];
      var atype = null, attribKey;
      if ((attribKey = tagName + '::' + attribName,
           html4.ATTRIBS.hasOwnProperty(attribKey)) ||
          (attribKey = '*::' + attribName,
           html4.ATTRIBS.hasOwnProperty(attribKey))) {
        atype = html4.ATTRIBS[attribKey];
      }
      if (atype !== null) {
        switch (atype) {
          case html4.atype.NONE: break;
          case html4.atype.SCRIPT:
            value = null;
            break;
          case html4.atype.STYLE:
            if ('undefined' === typeof parseCssDeclarations) {
              value = null;
              break;
            }
            var sanitizedDeclarations = [];
            parseCssDeclarations(
                value,
                {
                  declaration: function (property, tokens) {
                    var normProp = property.toLowerCase();
                    var schema = cssSchema[normProp];
                    if (!schema) {
                      return;
                    }
                    sanitizeCssProperty(
                        normProp, schema, tokens,
                        opt_naiveUriRewriter);
                    sanitizedDeclarations.push(property + ': ' + tokens.join(' '));
                  }
                });
            value = sanitizedDeclarations.length > 0 ? sanitizedDeclarations.join(' ; ') : null;
            break;
          case html4.atype.ID:
          case html4.atype.IDREF:
          case html4.atype.IDREFS:
          case html4.atype.GLOBAL_NAME:
          case html4.atype.LOCAL_NAME:
          case html4.atype.CLASSES:
            value = opt_nmTokenPolicy ? opt_nmTokenPolicy(value) : value;
            break;
          case html4.atype.URI:
            value = safeUri(value, opt_naiveUriRewriter);
            break;
          case html4.atype.URI_FRAGMENT:
            if (value && '#' === value.charAt(0)) {
              value = value.substring(1);  // remove the leading '#'
              value = opt_nmTokenPolicy ? opt_nmTokenPolicy(value) : value;
              if (value !== null && value !== void 0) {
                value = '#' + value;  // restore the leading '#'
              }
            } else {
              value = null;
            }
            break;
          default:
            value = null;
            break;
        }
      } else {
        value = null;
      }
      attribs[i + 1] = value;
    }
    return attribs;
  }

  /**
   * Creates a tag policy that omits all tags marked UNSAFE in html4-defs.js
   * and applies the default attribute sanitizer with the supplied policy for
   * URI attributes and NMTOKEN attributes.
   * @param {?function(?string): ?string} opt_naiveUriRewriter A transform to
   *     apply to URI attributes.  If not given, URI attributes are deleted.
   * @param {function(?string): ?string} opt_nmTokenPolicy A transform to apply
   *     to attributes containing HTML names, element IDs, and space-separated
   *     lists of classes.  If not given, such attributes are left unchanged.
   * @return {function(string, Array.<?string>)} A tagPolicy suitable for
   *     passing to html.sanitize.
   */
  function makeTagPolicy(opt_naiveUriRewriter, opt_nmTokenPolicy) {
    return function(tagName, attribs) {
      if (!(html4.ELEMENTS[tagName] & html4.eflags.UNSAFE)) {
        return sanitizeAttribs(
            tagName, attribs, opt_naiveUriRewriter, opt_nmTokenPolicy);
      }
    };
  }

  /**
   * Sanitizes HTML tags and attributes according to a given policy.
   * @param {string} inputHtml The HTML to sanitize.
   * @param {function(string, Array.<?string>)} tagPolicy A function that
   *     decides which tags to accept and sanitizes their attributes (see
   *     makeHtmlSanitizer above for details).
   * @return {string} The sanitized HTML.
   */
  function sanitizeWithPolicy(inputHtml, tagPolicy) {
    var outputArray = [];
    makeHtmlSanitizer(tagPolicy)(inputHtml, outputArray);
    return outputArray.join('');
  }

  /**
   * Strips unsafe tags and attributes from HTML.
   * @param {string} inputHtml The HTML to sanitize.
   * @param {?function(?string): ?string} opt_naiveUriRewriter A transform to
   *     apply to URI attributes.  If not given, URI attributes are deleted.
   * @param {function(?string): ?string} opt_nmTokenPolicy A transform to apply
   *     to attributes containing HTML names, element IDs, and space-separated
   *     lists of classes.  If not given, such attributes are left unchanged.
   */
  function sanitize(inputHtml, opt_naiveUriRewriter, opt_nmTokenPolicy) {
    var tagPolicy = makeTagPolicy(opt_naiveUriRewriter, opt_nmTokenPolicy);
    return sanitizeWithPolicy(inputHtml, tagPolicy);
  }

  return {
    escapeAttrib: escapeAttrib,
    makeHtmlSanitizer: makeHtmlSanitizer,
    makeSaxParser: makeSaxParser,
    makeTagPolicy: makeTagPolicy,
    normalizeRCData: normalizeRCData,
    sanitize: sanitize,
    sanitizeAttribs: sanitizeAttribs,
    sanitizeWithPolicy: sanitizeWithPolicy,
    unescapeEntities: unescapeEntities
  };
})(html4);

var html_sanitize = html.sanitize;

// Exports for closure compiler.  Note this file is also cajoled
// for domado and run in an environment without 'window'
if (typeof window !== 'undefined') {
  window['html'] = html;
  window['html_sanitize'] = html_sanitize;
}

jQuery.sap.declare('sap.ui.thirdparty.caja-html-sanitizer');

}; // end of sap/ui/thirdparty/caja-html-sanitizer.js
if ( !jQuery.sap.isDeclared('jquery.sap.act') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides functionality for activity detection
jQuery.sap.declare("jquery.sap.act", false);

(function() {
	
	if(typeof window.jQuery.sap.act === "object" || typeof window.jQuery.sap.act === "function" ){
		return;
	}
	
//	Date.now = Date.now || function() {
//		return new Date().getTime();
//	};
	
	/**
	 * @public
	 * @name jQuery.sap.act
	 * @namespace
	 * @static
	 */
	
	var _act = {},
		_active = true,
		_deactivatetimer = null,
		_I_MAX_IDLE_TIME = 10000, //max. idle time in ms
		_deactivateSupported = !!window.addEventListener, //Just skip IE8
		_aActivateListeners = [],
		_aDeactivateListeners = [],
		_activityDetected = false,
		_domChangeObserver = null;

	function _onDeactivate(){
		_deactivatetimer = null;
		
		if(_activityDetected){
			_onActivate();
			return;
		}
		
		_active = false;
		//_triggerEvent(_aDeactivateListeners); //Maybe provide later
		_domChangeObserver.observe(document.documentElement, {childList: true, attributes: true, subtree: true, characterData: true});
	};
	
	function _onActivate(){
		if(!_active){
			_active = true;
			_triggerEvent(_aActivateListeners);
			_domChangeObserver.disconnect();
		}
		if(_deactivatetimer){
			_activityDetected = true;
		}else{
			_deactivatetimer = setTimeout(_onDeactivate, _I_MAX_IDLE_TIME);
			_activityDetected = false;
		}
	};
	
	function _triggerEvent(aListeners){
		if(aListeners.length == 0) {
			return;
		}
		var aEventListeners = aListeners.slice();
		setTimeout(function(){
			var oInfo;
			for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
				oInfo = aEventListeners[i];
				oInfo.fFunction.call(oInfo.oListener || window);
			}
		}, 0);
	};
	
	
	/**
	 * Registers the given handler to the activity event, which is fired when an activity was detected after a certain period of inactivity.
	 * 
	 * The Event is not fired for Internet Explorer 8.
	 * 
	 * @param {Function} fnFunction The function to call, when an activity event occurs.
	 * @param {Object} [oListener] The 'this' context of the handler function.
	 * @protected
	 * 
	 * @function
	 * @name jQuery.sap.act#attachActivate
	 */
	_act.attachActivate = function(fnFunction, oListener){
		_aActivateListeners.push({oListener: oListener, fFunction:fnFunction});
	};
	
	/**
	 * Deregisters a previously registered handler from the activity event.
	 * 
	 * @param {Function} fnFunction The function to call, when an activity event occurs.
	 * @param {Object} [oListener] The 'this' context of the handler function.
	 * @protected
	 * 
	 * @function
	 * @name jQuery.sap.act#detachActivate
	 */
	_act.detachActivate = function(fnFunction, oListener){
		for (var i = 0, iL = _aActivateListeners.length; i < iL; i++) {
			if (_aActivateListeners[i].fFunction === fnFunction && _aActivateListeners[i].oListener === oListener) {
				_aActivateListeners.splice(i,1);
				break;
			}
		}
	};
	
	/**
	 * Checks whether recently an activity was detected.
	 * 
	 * Not supported for Internet Explorer 8.
	 * 
	 * @return true if recently an activity was detected, false otherwise
	 * @protected
	 * 
	 * @function
	 * @name jQuery.sap.act#isActive
	 */
	_act.isActive = !_deactivateSupported ? function(){return true;} : function(){return _active;};
	
	/**
	 * Reports an activity.
	 * 
	 * @public
	 * 
	 * @function
	 * @name jQuery.sap.act#refresh
	 */
	_act.refresh = !_deactivateSupported ? function(){} : _onActivate;
	
	
	// Setup and registering handlers
	
	if (_deactivateSupported) {
		var aEvents = ["resize", "orientationchange", "mousemove", "mousedown", "mouseup", //"mouseout", "mouseover",
		               "touchstart", "touchmove", "touchend", "touchcancel", "paste", "cut", "keydown", "keyup",
		               "DOMMouseScroll", "mousewheel"];
		for(var i=0; i<aEvents.length; i++){
			window.addEventListener(aEvents[i], _act.refresh, true);
		}
		
		if(window.MutationObserver){
			_domChangeObserver = new window.MutationObserver(_act.refresh);
    	}else if(window.WebKitMutationObserver){
    		_domChangeObserver = new window.WebKitMutationObserver(_act.refresh);
    	}else{
    		_domChangeObserver = {
    			observe : function(){
    				document.documentElement.addEventListener("DOMSubtreeModified", _act.refresh);
    			},
    			disconnect : function(){
    				document.documentElement.removeEventListener("DOMSubtreeModified", _act.refresh);
    			}
    		};
    	}
		
		_onActivate();
	}
	
	jQuery.sap.act = _act;
	
}());
}; // end of jquery.sap.act.js
if ( !jQuery.sap.isDeclared('jquery.sap.dom') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides functionality related to DOM analysis and manipulation which is not provided by jQuery itself.
jQuery.sap.declare("jquery.sap.dom", false);


(function() {

	/**
	 * Shortcut for document.getElementById() with additionally an IE6/7 bug fixed.
	 * Used to replace the jQuery.sap.domById when running in IE < v8.
	 *
	 * @param {String} sId the id of the DOM element to return
	 * @param {window} oWindow the window (optional)
	 * @return {DOMNode} the DOMNode identified by the given sId
	 * @private
	 */
	var domByIdInternal = function(sId, oWindow) {

		if (!oWindow) {
			oWindow = window;
		}
		if (!sId || sId=="") {
			return null;
		}

		var oDomRef = oWindow.document.getElementById(sId);

		// IE also returns the element with the name or id whatever is first
		// => the following line makes sure that this was the id
		if (oDomRef && oDomRef.id == sId) {
			return oDomRef;
		}

		// otherwise try to lookup the name
		var oRefs = oWindow.document.getElementsByName(sId);
		for (var i=0;i<oRefs.length;i++) {
			oDomRef = oRefs[i];
			if (oDomRef && oDomRef.id == sId) {
				return oDomRef;
			}
		}

		return null;

	};

	/**
	 * Shortcut for document.getElementById(), including a bug fix for older IE versions.
	 *
	 * @param {String} sId The id of the DOM element to return
	 * @param {window} [oWindow=window] The window (optional)
	 * @return {DOMNode} The DOMNode identified by the given sId
	 * @public
	 * @function
	 * @since 0.9.0
	 */
	jQuery.sap.domById = !!sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 8 ? domByIdInternal : function domById(sId, oWindow) {
		return sId ? (oWindow || window).document.getElementById(sId) : null;
	};


	/**
	 * Shortcut for jQuery("#" + id) with additionally the id being escaped properly.
	 * I.e.: returns the jQuery object for the DOM element with the given id
	 *
	 * Use this method instead of jQuery(...) if you know the argument is exactly one id and
	 * the id is not known in advance because it is in a variable (as opposed to a string
	 * constant with known content).
	 *
	 * @param {String} sId The id to search for and construct the jQuery object
	 * @param {DomNode} oContext The context DomNode
	 * @return {Object} The jQuery object for the DOM element identified by the given sId
	 * @public
	 * @since 0.9.1
	 */
	jQuery.sap.byId = function byId(sId, oContext) {
		var escapedId = "";
		if (sId) {
			escapedId = "#" + sId.replace(/(:|\.)/g,'\\$1');
		}
		return jQuery(escapedId, oContext);
	};


	/**
	 * Calls focus() on the given DOM element, but catches and ignores any errors that occur when doing so.
	 * (i.e. IE8 throws an error when the DOM element is invisible or disabled)
	 *
	 * @param {DomNode} oDomRef The DOM element to focus (or null - in this case the method does nothing)
	 * @return {boolean} Whether the focus() command was executed without an error
	 * @public
	 * @since 1.1.2
	 */
	jQuery.sap.focus = function focus(oDomRef) {
		if (!oDomRef) {
			return;
		}
		try {
			oDomRef.focus();
		} catch (e) {
			var id = (oDomRef && oDomRef.id) ? " (ID: '" + oDomRef.id + "')" : "";
			jQuery.sap.log.warning("Error when trying to focus a DOM element" + id + ": " + e.message);
			return false;
		}
		return true;
	};


	/**
	 * Sets or gets the position of the cursor in an element that supports cursor positioning
	 *
	 * @param {int} iPos The cursor position to set (or no parameter to retrieve the cursor position)
	 * @return {int | jQuery} The cursor position (or the jQuery collection if the position has been set)
	 * @public
	 * @methodOf jQuery.prototype
	 * @name cursorPos
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.cursorPos = function cursorPos(iPos) {
		var len = arguments.length,
			oTextRange,iLength,
			sTagName,
			sType;

		sTagName = this.prop("tagName");
		sType = this.prop("type");

		if( this.length === 1 && ((sTagName == "INPUT" && (sType == "text" || sType == "password" || sType == "search"))
				|| sTagName == "TEXTAREA" )) {

			var oDomRef = this.get(0);

			if (len > 0) { // SET

				if (typeof(oDomRef.selectionStart) == "number") { // FF and IE9+ method
					oDomRef.focus();
					oDomRef.selectionStart = iPos;
					oDomRef.selectionEnd = iPos;
				} else if (oDomRef.createTextRange) { // IE method
					oTextRange = oDomRef.createTextRange();
					var iMaxLength = oDomRef.value.length;

					if(iPos < 0 || iPos > iMaxLength) {
						iPos = iMaxLength;
					}
					if(oTextRange) {
						oTextRange.collapse();
						oTextRange.moveEnd("character",iPos);
						oTextRange.moveStart("character",iPos);
						oTextRange.select();
					}
				}

				return this;
				// end of SET

			} else { // GET
				if (typeof(oDomRef.selectionStart) == "number") { // Firefox etc.
					return oDomRef.selectionStart;
				} else if (oDomRef.createTextRange) { // IE 8
					oTextRange = window.document.selection.createRange();
					var oCopiedTextRange = oTextRange.duplicate();
					// Logic in TEXTAREA and INPUT is different in IE -> check for element type
					if(oDomRef.tagName == "TEXTAREA"){
						oCopiedTextRange.moveToElementText(oDomRef);
						var oCheckTextRange = oCopiedTextRange.duplicate();
						iLength = oCopiedTextRange.text.length;

						// first check if cursor on last position
						oCheckTextRange.moveStart("character", iLength);
						if(oCheckTextRange.inRange(oTextRange)){
							iStart = iLength;
						}else{
							// find out cursor position using a bisection algorithm
							var iCheckLength = iLength;
							var iStart = 0;
							while(iLength > 1){
								iCheckLength = Math.round(iLength / 2);
								iStart = iStart + iCheckLength;

								oCheckTextRange = oCopiedTextRange.duplicate();
								oCheckTextRange.moveStart("character", iStart);
								if(oCheckTextRange.inRange(oTextRange)){
									//cursor is after or on iStart -> Length = not checked Length
									iLength = iLength - iCheckLength;

								}else{
									//cursor is before iStart  -> Length = checked Length
									iStart = iStart - iCheckLength;
									iLength = iCheckLength;
								}
							}
						}
						return iStart;
					} else if (oCopiedTextRange.parentElement() === oDomRef) {
						// ensure there is only the cursor and not the range (as this would create erroneous position)!
						oCopiedTextRange.collapse();
						// now, move the selection range to the beginning of the inputField and simply get the selected range's length
						var iLength = oDomRef.value.length;
						oCopiedTextRange.moveStart('character', -iLength);
						return oCopiedTextRange.text.length;
					}
				}

				return -1;
			} // end of GET
		} else {
			// shouldn't really happen, but to be safe...
			return this;
		}
	};

	/**
	 * Sets the text selection in the first element of the collection
	 *
	 * @param {int} iStart Start position of the selection (inclusive)
	 * @param {int} iEnd End position of the selection (exclusive)
	 * @return {jQuery} The jQuery collection
	 * @public
	 * @methodOf jQuery.prototype
	 * @name selectText
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.selectText = function selectText(iStart, iEnd) {
		var oDomRef = this.get(0);

		if (oDomRef) {
			if (typeof(oDomRef.selectionStart) == "number") { // Firefox and IE9+
				// sanity checks
				if (iStart < 0) {
					iStart = 0;
				}
				if (iEnd > oDomRef.value.length) {
					iEnd = oDomRef.value.length;
				}
				if (!iEnd || iStart > iEnd) {
					iStart = 0;
					iEnd = 0;
				}
				oDomRef.selectionStart = iStart; // TODO: maybe need to decouple via setTimeout?
				oDomRef.selectionEnd = iEnd;
			} else if(oDomRef.createTextRange) { // IE
				var oTextEditRange = oDomRef.createTextRange();
				oTextEditRange.collapse();
				oTextEditRange.moveStart('character', iStart);
				oTextEditRange.moveEnd('character', iEnd - iStart);
				oTextEditRange.select();
			}
		}

		return this;
	};


	/**
	 * Returns the outer HTML of the given HTML element
	 *
	 * @return {String} outer HTML
	 * @public
	 * @methodOf jQuery.prototype
	 * @name outerHTML
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.outerHTML = function outerHTML() {
		var oDomRef = this.get(0);

		if (oDomRef && oDomRef.outerHTML) {
			return jQuery.trim(oDomRef.outerHTML);
		} else {
			var doc = this[0] ? this[0].ownerDocument : document;

			var oDummy = doc.createElement("div");
			oDummy.appendChild(oDomRef.cloneNode(true));
			return oDummy.innerHTML;
		}
	};


	/**
	 * Returns whether oDomRefChild is oDomRefContainer or is contained in oDomRefContainer.
	 *
	 * This is a browser-independent version of the .contains method of Internet Explorer.
	 * For compatibility reasons it returns true if oDomRefContainer and oDomRefChild are equal.
	 *
	 * This method intentionally does not operate on the jQuery object, as the original jQuery.contains()
	 * method also does not do so.
	 *
	 * @param {DOMNode} oDomRefContainer The container element
	 * @param {DOMNode} oDomRefChild The child element (must not be a text node, must be an element)
	 * @return {boolean} 'true' if oDomRefChild is contained in oDomRefContainer or oDomRefChild is oDomRefContainer
	 * @public
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.sap.containsOrEquals = function containsOrEquals(oDomRefContainer, oDomRefChild) {
		if (oDomRefChild && oDomRefContainer && oDomRefChild != document && oDomRefChild != window) {
			return (oDomRefContainer === oDomRefChild) || jQuery.contains(oDomRefContainer, oDomRefChild);
		}
		return false;
	};


	/**
	 * Returns a rectangle describing the current visual positioning of the first DOM object in the collection
	 * (or null if no element was given)
	 *
	 * @return {object} An object with left, top, width and height
	 * @public
	 * @methodOf jQuery.prototype
	 * @name rect
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.rect = function rect() {
		var oDomRef = this.get(0);

		if (oDomRef) {
			// this should be available in all 'modern browsers'
			if (oDomRef.getBoundingClientRect) {
				var oClientRect = oDomRef.getBoundingClientRect();
				var oRect = { top : oClientRect.top,
						left : oClientRect.left,
						width : oClientRect.right - oClientRect.left,
						height : oClientRect.bottom - oClientRect.top };

				var oWnd = jQuery.sap.ownerWindow(oDomRef);
				oRect.left += jQuery(oWnd).scrollLeft();
				oRect.top += jQuery(oWnd).scrollTop();

				return oRect;
			} else {
				// IE6 and older; avoid crashing and give some hardcoded size
				return { top : 10, left : 10, width : oDomRef.offsetWidth, height : oDomRef.offsetWidth };
			}
		}
		return null;
	};


	/**
	 * Returns whether a point described by X and Y is inside this Rectangle's boundaries
	 *
	 * @param {int} iPosX
	 * @param {int} iPosY
	 * @return Whether X and Y are inside this Rectangle's boundaries
	 * @public
	 * @methodOf jQuery.prototype
	 * @name rectContains
	 * @author SAP AG
	 * @since 0.18.0
	 */
	jQuery.fn.rectContains = function rectContains(iPosX, iPosY) {
		jQuery.sap.assert(!isNaN(iPosX), "iPosX must be a number");
		jQuery.sap.assert(!isNaN(iPosY), "iPosY must be a number");

		var oRect = this.rect();

		if (oRect) {

			return iPosX >= oRect.left
				&& iPosX <= oRect.left + oRect.width
				&& iPosY >= oRect.top
				&& iPosY <= oRect.top + oRect.height;

		}
		return false;
	};


	/**
	 * Returns true if the first element has a set tabindex
	 *
	 * @return {boolean} If the first element has a set tabindex
	 * @public
	 * @methodOf jQuery.prototype
	 * @name hasTabIndex
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.hasTabIndex = function hasTabIndex() {
		var iTabIndex = this.prop("tabIndex");
		return !isNaN(iTabIndex) && iTabIndex >= 0;
	};


	/**
	 * Returns the first focusable domRef in a given container (the first element of the collection)
	 *
	 * @return {DOMNode} The domRef
	 * @public
	 * @methodOf jQuery.prototype
	 * @name firstFocusableDomRef
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.firstFocusableDomRef = function firstFocusableDomRef() {
		var oContainerDomRef = this.get(0);
		var visibilityHiddenFilter = function (idx){return jQuery(this).css("visibility") == "hidden";};
		if (!oContainerDomRef || jQuery(oContainerDomRef).is(':hidden') ||
				jQuery(oContainerDomRef).filter(visibilityHiddenFilter).length == 1) {
			return null;
		}

		var oCurrDomRef = oContainerDomRef.firstChild,
			oDomRefFound = null;

		while (oCurrDomRef) {
			if(oCurrDomRef.nodeType == 1 && jQuery(oCurrDomRef).is(':visible')) {
				if (jQuery(oCurrDomRef).hasTabIndex()) {
					return oCurrDomRef;
				}

				if(oCurrDomRef.childNodes) {
					oDomRefFound = jQuery(oCurrDomRef).firstFocusableDomRef();
					if(oDomRefFound) {
						return oDomRefFound;
					}
				}
			}
			oCurrDomRef = oCurrDomRef.nextSibling;
		}

		return null;
	};


	/**
	 * Returns the last focusable domRef in a given container
	 *
	 * @return {DOMNode} The last domRef
	 * @public
	 * @methodOf jQuery.prototype
	 * @name lastFocusableDomRef
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.lastFocusableDomRef = function lastFocusableDomRef() {
		var oContainerDomRef = this.get(0);
		var visibilityHiddenFilter = function (idx){return jQuery(this).css("visibility") == "hidden";};
		if (!oContainerDomRef || jQuery(oContainerDomRef).is(':hidden') ||
				jQuery(oContainerDomRef).filter(visibilityHiddenFilter).length == 1) {
			return null;
		}

		var oCurrDomRef = oContainerDomRef.lastChild,
			oDomRefFound = null;

		while (oCurrDomRef) {
			if(oCurrDomRef.nodeType == 1 && jQuery(oCurrDomRef).is(':visible')) {
				if(oCurrDomRef.childNodes) {
					oDomRefFound = jQuery(oCurrDomRef).lastFocusableDomRef();
					if(oDomRefFound) {
						return oDomRefFound;
					}
				}

				if (jQuery(oCurrDomRef).hasTabIndex()) {
					return oCurrDomRef;
				}
			}
			oCurrDomRef = oCurrDomRef.previousSibling;
		}

		return null;
	};


	/**
	 * Sets or returns the scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
	 * Precondition: The element is rendered in RTL mode.
	 *
	 * Reason for this method is that the major browsers use three different values for the same scroll position when in RTL mode.
	 * This method hides those differences and returns/applies the same value that would be returned in LTR mode: The distance in px
	 * how far the given container is scrolled away from the leftmost scroll position.
	 *
	 * Returns "undefined" if no element and no iPos is given.
	 *
	 * @return {jQuery | int} The jQuery collection if iPos is given, otherwise the scroll position, counted from the leftmost position
	 * @public
	 * @methodOf jQuery.prototype
	 * @name scrollLeftRTL
	 * @author SAP AG
	 * @since 0.20.0
	 */
	jQuery.fn.scrollLeftRTL = function scrollLeftRTL(iPos) {
		var oDomRef = this.get(0);
		if (oDomRef) {

			if (iPos === undefined) { // GETTER code
				if (!!sap.ui.Device.browser.internet_explorer) {
					return oDomRef.scrollWidth - oDomRef.scrollLeft - oDomRef.clientWidth;

				} else if (!!sap.ui.Device.browser.webkit) {
					return oDomRef.scrollLeft;

				} else if (!!sap.ui.Device.browser.firefox) {
					return oDomRef.scrollWidth + oDomRef.scrollLeft - oDomRef.clientWidth;

				} else {
					// unrecognized browser; it is hard to return a best guess, as browser strategies are very different, so return the actual value
					return oDomRef.scrollLeft;
				}

			} else { // SETTER code
				oDomRef.scrollLeft = jQuery.sap.denormalizeScrollLeftRTL(iPos);
				return this;
			}
		}
	};

	/**
	 * Returns the MIRRORED scrollLeft value of the first element in the given jQuery collection in right-to-left mode.
	 * Precondition: The element is rendered in RTL mode.
	 *
	 * Reason for this method is that the major browsers return three different values for the same scroll position when in RTL mode.
	 * This method hides those differences and returns the value that would be returned in LTR mode if the UI would be mirrored horizontally:
	 * The distance in px how far the given container is scrolled away from the rightmost scroll position.
	 *
	 * Returns "undefined" if no element is given.
	 *
	 * @return {int} The scroll position, counted from the rightmost position
	 * @public
	 * @methodOf jQuery.prototype
	 * @name scrollRightRTL
	 * @author SAP AG
	 * @since 0.20.0
	 */
	jQuery.fn.scrollRightRTL = function scrollRightRTL() {
		var oDomRef = this.get(0);
		if (oDomRef) {

			if (!!sap.ui.Device.browser.internet_explorer) {
				return oDomRef.scrollLeft;

			} else if (!!sap.ui.Device.browser.webkit) {
				return oDomRef.scrollWidth - oDomRef.scrollLeft - oDomRef.clientWidth;

			} else if (!!sap.ui.Device.browser.firefox) {
				return (-oDomRef.scrollLeft);

			} else {
				// unrecognized browser; it is hard to return a best guess, as browser strategies are very different, so return the actual value
				return oDomRef.scrollLeft;
			}
		}
	};


	/**
	 * For the given scrollLeft value this method returns the scrollLeft value as understood by the current browser in RTL mode.
	 * This value is specific to the given DOM element, as the computation may involve its dimensions.
	 *
	 * So when oDomRef should be scrolled 2px from the leftmost position, the number "2" must be given as iNormalizedScrollLeft
	 * and the result of this method (which may be a large or even negative number, depending on the browser) can then be set as
	 * oDomRef.scrollLeft to achieve the desired (cross-browser-consistent) scrolling position.
	 *
	 * This method does no scrolling on its own, it only calculates the value to set (so it can also be used for animations).
	 *
	 * @param {int} iNormalizedScrollLeft The distance from the leftmost position to which the element should be scrolled
	 * @param {DOMNode} oDomRef The DOM element to which scrollLeft will be applied
	 * @return {int} The scroll position that must be set for the DOM element
	 * @public
	 * @author SAP AG
	 * @since 0.20.0
	 */
	jQuery.sap.denormalizeScrollLeftRTL = function byId(iNormalizedScrollLeft, oDomRef) {

		if (oDomRef) {
			if (!!sap.ui.Device.browser.internet_explorer) {
				return oDomRef.scrollWidth - oDomRef.clientWidth - iNormalizedScrollLeft;

			} else if (!!sap.ui.Device.browser.webkit) {
				return iNormalizedScrollLeft;

			} else if (!!sap.ui.Device.browser.firefox) {
				return oDomRef.clientWidth + iNormalizedScrollLeft - oDomRef.scrollWidth;

			} else {
				// unrecognized browser; it is hard to return a best guess, as browser strategies are very different, so return the actual value
				return iNormalizedScrollLeft;
			}
		}
	};




	/*!
	 * The following functions are taken from jQuery UI 1.8.17 but modified
	 *
	 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 * http://jquery.org/license
	 *
	 * http://docs.jquery.com/UI
	 */
	function visible( element ) {
		// check if one of the parents (until it's position parent) is invisible
		// prevent that elements in static area are always checked as invisible
		
		// list all items until the offsetParent item (with jQuery >1.6 you can use parentsUntil)
		var oOffsetParent = jQuery(element).offsetParent();
		var bOffsetParentFound = false;
		var $refs = jQuery(element).parents().filter(function() {
			if (this === oOffsetParent) {
				bOffsetParentFound = true;
			}
			return bOffsetParentFound;
		});
		
		// check for at least one item to be visible
		return !jQuery(element).add($refs).filter(function() {
			return jQuery.css( this, "visibility" ) === "hidden" || jQuery.expr.filters.hidden( this );
		}).length;
	}

	function focusable( element, isTabIndexNotNaN ) {
		var nodeName = element.nodeName.toLowerCase();
		if ( "area" === nodeName ) {
			var map = element.parentNode,
				mapName = map.name,
				img;
			if ( !element.href || !mapName || map.nodeName.toLowerCase() !== "map" ) {
				return false;
			}
			img = jQuery( "img[usemap=#" + mapName + "]" )[0];
			return !!img && visible( img );
		}
		return ( /input|select|textarea|button|object/.test( nodeName )
			? !element.disabled
			: "a" == nodeName
				? element.href || isTabIndexNotNaN
				: isTabIndexNotNaN)
			// the element and all of its ancestors must be visible
			&& visible( element );
	}


	if (!jQuery.expr[":"].focusable) {
		/*!
		 * The following function is taken from jQuery UI 1.8.17
		 *
		 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
		 * Dual licensed under the MIT or GPL Version 2 licenses.
		 * http://jquery.org/license
		 *
		 * http://docs.jquery.com/UI
		 *
		 * But since visible is modified, focusable is different too the jQuery UI version too.
		 */
		jQuery.extend( jQuery.expr[ ":" ], {
			/**
			 * This defines the jQuery ":focusable" selector; it is also defined in jQuery UI. If already present, nothing is
			 * done here, so we will not overwrite any previous implementation.
			 * If jQuery UI is loaded later on, this implementation here will be overwritten by that one, which is fine,
			 * as it is semantically the same thing and intended to do exactly the same.
			 */
			focusable: function( element ) {
				return focusable( element, !isNaN( jQuery.attr( element, "tabindex" ) ) );
			}
		});
	}

	if (!jQuery.expr[":"].tabbable) {
		/*!
		 * The following function is taken from jQuery UI 1.8.23
		 *
		 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
		 * Dual licensed under the MIT or GPL Version 2 licenses.
		 * http://jquery.org/license
		 *
		 * http://docs.jquery.com/UI
		 */
		jQuery.extend( jQuery.expr[ ":" ], {
			/**
			 * This defines the jQuery ":tabbable" selector; it is also defined in jQuery UI. If already present, nothing is
			 * done here, so we will not overwrite any previous implementation.
			 * If jQuery UI is loaded later on, this implementation here will be overwritten by that one, which is fine,
			 * as it is semantically the same thing and intended to do exactly the same.
			 */
			tabbable: function( element ) {
				var tabIndex = jQuery.attr( element, "tabindex" ),
					isTabIndexNaN = isNaN( tabIndex );
				return ( isTabIndexNaN || tabIndex >= 0 ) && focusable( element, !isTabIndexNaN );
			}
		});
	}

	if (!jQuery.expr[":"].sapFocusable) {
		/*!
		 * Do not use jQuery UI focusable because this might be overwritten if jQuery UI is loaded
		 */
		jQuery.extend( jQuery.expr[ ":" ], {
			/**
			 * This defines the jQuery ":sapFocusable" selector; If already present, nothing is
			 * done here, so we will not overwrite any previous implementation.
			 * If jQuery UI is loaded later on, this implementation here will NOT be overwritten by.
			 */
			sapFocusable: function( element ) {
				return focusable( element, !isNaN( jQuery.attr( element, "tabindex" ) ) );
			}
		});
	}
	
	if (!jQuery.fn.zIndex) {
		/*!
		 * The following function is taken from jQuery UI 1.8.23
		 *
		 * Copyright 2011, AUTHORS.txt (http://jqueryui.com/about)
		 * Dual licensed under the MIT or GPL Version 2 licenses.
		 * http://jquery.org/license
		 *
		 * http://docs.jquery.com/UI
		 */
		jQuery.fn.zIndex = function( zIndex ) {
			if ( zIndex !== undefined ) {
				return this.css( "zIndex", zIndex );
			}

			if ( this.length ) {
				var elem = jQuery( this[ 0 ] ), position, value;
				while ( elem.length && elem[ 0 ] !== document ) {
					// Ignore z-index if position is set to a value where z-index is ignored by the browser
					// This makes behavior of this function consistent across browsers
					// WebKit always returns auto if the element is positioned
					position = elem.css( "position" );
					if ( position === "absolute" || position === "relative" || position === "fixed" ) {
						// IE returns 0 when zIndex is not specified
						// other browsers return a string
						// we ignore the case of nested elements with an explicit value of 0
						// <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
						value = parseInt( elem.css( "zIndex" ), 10 );
						if ( !isNaN( value ) && value !== 0 ) {
							return value;
						}
					}
					elem = elem.parent();
				}
			}

			return 0;
		};
	}

	/**
	 * Gets the next parent DOM element with a given attribute and attribute value starting above the first given element
	 *
	 * @param {String} sAttibute Name of the attribute
	 * @param {String} sValue Value of the attribute (optional)
	 * @return {DOMNode} null or the DOM reference
	 * @public
	 * @methodOf jQuery.prototype
	 * @name parentByAttribute
	 * @author SAP AG
	 * @since 0.9.0
	 */
	jQuery.fn.parentByAttribute = function parentByAttribute(sAttribute, sValue) {
		if (this.length>0) {
			if (sValue) {
				return this.first().parents("["+sAttribute+"='"+sValue+"']").get(0);
			} else {
				return this.first().parents("["+sAttribute+"]").get(0);
			}
		}
	};


	/**
	 * Returns the window reference for a DomRef
	 *
	 * @param {DOMNode} oDomRef The DOM reference
	 * @return {window} Window reference
	 * @public
	 * @since 0.9.0
	 */
	jQuery.sap.ownerWindow = function ownerWindow(oDomRef){
		if (oDomRef.ownerDocument.parentWindow) {
			return oDomRef.ownerDocument.parentWindow;
		}
		return oDomRef.ownerDocument.defaultView;
	};
	
	
	var _oScrollbarSize = {};
	
	/**
	 * Returns the size (width of the vertical / height of the horizontal) native browser scrollbars.
	 * 
	 * This function must only be used when the DOM is ready.
	 *
	 * @param {String} [sClasses=null] the CSS class that should be added to the test element.
	 * @param {boolean} [bForce=false] force recalculation of size (e.g. when CSS was changed). When no classes are passed all calculated sizes are reset.
	 * @return {object} JSON object with properties <code>width</code> and <code>height</code> (the values are of type number and are pixels).
	 * @public
	 * @since 1.4.0
	 */
	jQuery.sap.scrollbarSize = function(sClasses, bForce) {
		if (typeof sClasses === "boolean") {
			bForce = sClasses;
			sClasses = null;
		}

		var sKey = sClasses || "#DEFAULT"; // # is an invalid character for CSS classes

		if (bForce) {
			if (sClasses) {
				delete _oScrollbarSize[sClasses];
			} else {
				_oScrollbarSize = {};
			}
		}
		
		if(_oScrollbarSize[sKey]) {
			return _oScrollbarSize[sKey];
		}

		if(!document.body){
			return {width: 0, height: 0};
		}
		
		var $Area = jQuery("<DIV/>")
			.css("visibility", "hidden")
			.css("height", "0")
			.css("width", "0")
			.css("overflow", "hidden");

		if (sClasses) {
			$Area.addClass(sClasses);
		}

		$Area.prependTo(document.body);
		
		var $Dummy = jQuery("<div style=\"visibility:visible;position:absolute;height:100px;width:100px;overflow:scroll;opacity:0;\"></div>");
		$Area.append($Dummy);

		var oDomRef = $Dummy.get(0);
		var iWidth = oDomRef.offsetWidth - oDomRef.scrollWidth;
		var iHeight = oDomRef.offsetHeight - oDomRef.scrollHeight;

		$Area.remove();
		
		_oScrollbarSize[sKey] = {width: iWidth, height: iHeight};

		return _oScrollbarSize[sKey];
	};

}());

}; // end of jquery.sap.dom.js
if ( !jQuery.sap.isDeclared('jquery.sap.encoder') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides encoding functions for JavaScript.
jQuery.sap.declare("jquery.sap.encoder", false);

(function(){

	/*
	 * Encoding according to the Secure Programming Guide
	 * https://wiki.wdf.sap.corp/wiki/display/NWCUIAMSIM/XSS+Secure+Programming+Guide
	 */

	/**
	 * Create hex and pad to length
	 * @private
	 */
	function hex(iChar, iLength) {
		var sHex = iChar.toString(16);
		if (iLength) {
			while (iLength > sHex.length) {
				sHex = "0" + sHex;
			}
		}
		return sHex;
	}

	/**
	 * RegExp and escape function for HTML escaping
	 */
	var rHtml = /[\x00-\x2b\x2f\x3a-\x40\x5b-\x5e\x60\x7b-\xff\u2028\u2029]/g,
		rHtmlReplace = /[\x00-\x08\x0b\x0c\x0e-\x1f\x7f-\x9f]/,
		mHtmlLookup = {
			"<": "&lt;",
			">": "&gt;",
			"&": "&amp;",
			"\"": "&quot;"
		};

	var fHtml = function(sChar) {
		var sEncoded = mHtmlLookup[sChar];
		if (!sEncoded) {
			if (rHtmlReplace.test(sChar)) {
				sEncoded = "&#xfffd;";
			}
			else {
				sEncoded = "&#x" + hex(sChar.charCodeAt(0)) + ";";
			}
			mHtmlLookup[sChar] = sEncoded;
		}
		return sEncoded;
	};

	/**
	 * Encode the string for inclusion into HTML content/attribute
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 * @SecValidate {0|return|XSS} validates the given string for HTML contexts
	 */
	jQuery.sap.encodeHTML = function(sString) {
		return sString.replace(rHtml, fHtml);
	};

	/**
	 * Encode the string for inclusion into XML content/attribute
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 * @SecValidate {0|return|XSS} validates the given string for XML contexts
	 */
	jQuery.sap.encodeXML = function(sString) {
		return sString.replace(rHtml, fHtml);
	};

	/**
	 * Encode the string for inclusion into HTML content/attribute.
	 * Old name "escapeHTML" kept for backward compatibility
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 * @deprecated Has been renamed, use {@link jQuery.sap.encodeHTML} instead.
	 */
	jQuery.sap.escapeHTML = function(sString) {
		return sString.replace(rHtml, fHtml);
	};

	/**
	 * RegExp and escape function for JS escaping
	 */
	var rJS = /[\x00-\x2b\x2d\x2f\x3a-\x40\x5b-\x5e\x60\x7b-\xff\u2028\u2029]/g,
		mJSLookup = {};

	var fJS = function(sChar) {
		var sEncoded = mJSLookup[sChar];
		if (!sEncoded) {
			var iChar = sChar.charCodeAt(0);
			if (iChar < 256) {
				sEncoded = "\\x" + hex(iChar, 2);
			}
			else {
				sEncoded = "\\u" + hex(iChar, 4);
			}
			mJSLookup[sChar] = sEncoded;
		}
		return sEncoded;
	};

	/**
	 * Encode the string for inclusion into a JS string literal
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 * @SecValidate {0|return|XSS} validates the given string for a JavaScript contexts
	 */
	jQuery.sap.encodeJS = function(sString) {
		return sString.replace(rJS, fJS);
	};

	/**
	 * Encode the string for inclusion into a JS string literal.
	 * Old name "escapeJS" kept for backward compatibility
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 * @deprecated Since 1.3.0. Has been renamed, use {@link jQuery.sap.encodeJS} instead.
	 */
	jQuery.sap.escapeJS = function(sString) {
		return sString.replace(rJS, fJS);
	};

	/**
	 * RegExp and escape function for URL escaping
	 */
	var rURL = /[\x00-\x2c\x2f\x3a-\x40\x5b-\x5e\x60\x7b-\uffff]/g,
		mURLLookup = {};

	var fURL = function(sChar) {
		var sEncoded = mURLLookup[sChar];
		if (!sEncoded) {
			var iChar = sChar.charCodeAt(0);
			if (iChar < 128) {
				sEncoded = "%" + hex(iChar, 2);
			}
			else if (iChar < 2048) {
				sEncoded = "%" + hex((iChar >> 6) | 192, 2) +
						   "%" + hex((iChar & 63) | 128, 2);
			}
			else {
				sEncoded = "%" + hex((iChar >> 12) | 224, 2) +
						   "%" + hex(((iChar >> 6) & 63) | 128, 2) +
						   "%" + hex((iChar & 63) | 128, 2);
			}
			mURLLookup[sChar] = sEncoded;
		}
		return sEncoded;
	};

	/**
	 * Encode the string for inclusion into an URL parameter
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 * @SecValidate {0|return|XSS} validates the given string for a URL context
	 */
	jQuery.sap.encodeURL = function(sString) {
		return sString.replace(rURL, fURL);
	};

	/**
	 * RegExp and escape function for CSS escaping
	 */
	var rCSS = /[\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xff\u2028\u2029][0-9A-Fa-f]?/g;

	var fCSS = function(sChar) {
		var iChar = sChar.charCodeAt(0);
		if (sChar.length == 1) {
			return "\\" + hex(iChar);
		}
		else {
			return "\\" + hex(iChar) + " " + sChar.substr(1);
		}
	};

	/**
	 * Encode the string for inclusion into CSS string literals or identifiers
	 *
	 * @param {string} sString The string to be escaped
	 * @return The escaped string
	 * @type {string}
	 * @public
	 * @SecValidate {0|return|XSS} validates the given string for a CSS context
	 */
	jQuery.sap.encodeCSS = function(sString) {
		return sString.replace(rCSS, fCSS);
	};

	/**
	 * WhitelistEntry object
	 * @param {string} protocol The protocol of the URL
	 * @param {string} host The host of the URL
	 * @param {string} port The port of the URL
	 * @param {string} path the path of the URL
	 * @public
	 */
	function WhitelistEntry(protocol, host, port, path){
		if (protocol) {
			this.protocol = protocol.toUpperCase();
		}
		if (host) {
			this.host = host.toUpperCase();
		}
		this.port = port;
		this.path = path;
	}

	var aWhitelist = new Array();

	/**
	 * clears the whitelist for URL valiadtion
	 *
	 * @public
	 */
	jQuery.sap.clearUrlWhitelist = function() {

		aWhitelist.splice(0,aWhitelist.length);

	};

	/**
	 * Adds a whitelist entry for URL valiadtion
	 *
	 * @param {string} protocol The protocol of the URL
	 * @param {string} host The host of the URL
	 * @param {string} port The port of the URL
	 * @param {string} path the path of the URL
	 * @public
	 */
	jQuery.sap.addUrlWhitelist = function(protocol, host, port, path) {
		var oEntry = new WhitelistEntry(protocol, host, port, path);
		var iIndex = aWhitelist.length;
		aWhitelist[iIndex] = oEntry;
	};

	/**
	 * Removes a whitelist entry for URL valiadtion
	 *
	 * @param {int} iIndex index of entry
	 * @public
	 */
	jQuery.sap.removeUrlWhitelist = function(iIndex) {
		aWhitelist.splice(iIndex,1)
	};

	/**
	 * Gets the whitelist for URL valiadtion
	 *
	 * @return {string[]} whitelist
	 * @public
	 */
	jQuery.sap.getUrlWhitelist = function() {
		return aWhitelist.slice();
	};

	/**
	 * Validates an URL. Check if it's not a script or other security issue.
	 *
	 * @param {string} sUrl
	 * @return true if valid, false if not valid
	 * @public
	 */
	jQuery.sap.validateUrl = function(sUrl) {

		var result = /(?:([^:\/?#]+):)?(?:\/\/([^\/?#:]*)(?::([0-9]+))?)?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/.exec(sUrl);
		if (!result) {
			return result;
		}

		var sProtocol = result[1],
			sHost = result[2],
			sPort = result[3],
			sPath = result[4],
			sQuery = result[5],
			sHash = result[6];

		var rCheck = /[\x00-\x24\x26-\x29\x2b\x2c\x2f\x3a-\x40\x5b-\x5e\x60\x7b-\x7d\x7f-\uffff]/;
		var rCheckMail = /[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;

		// protocol
		if (sProtocol) {
			sProtocol = sProtocol.toUpperCase();
			if (aWhitelist.length <= 0) {
				// no whitelist -> check for default protocols
				if (!/^(https?|ftp)/i.test(sProtocol)) {
					return false;
				}
			}
		}

		// Host -> whitelist + character check (TBD)
		if (sHost) {
			sHost = sHost.toUpperCase();
		}

		// Path -> split for "/" and check if forbidden characters exist
		if (sPath) {
			if (sProtocol === "MAILTO") {
				var bCheck = rCheckMail.test(sPath);
				if (!bCheck) {
					return false;
				}
			} else {
				var aComponents = sPath.split("/");
				for ( var i = 0; i < aComponents.length; i++) {
					var bCheck = rCheck.test(aComponents[i]);
					if (bCheck) {
						// forbidden character found
						return false;
					}
				}
			}
		}

		// query -> Split on & and = and check if forbidden characters exist
		if (sQuery) {
			var aComponents = sQuery.split("&");
			for ( var i = 0; i < aComponents.length; i++) {
				var iPos = aComponents[i].search("=");
				if (iPos != -1) {
					var sPart1 = aComponents[i].substring(0,iPos);
					var sPart2 = aComponents[i].substring(iPos+1);
					var bCheck1 = rCheck.test(sPart1);
					var bCheck2 = rCheck.test(sPart2);
					if (bCheck1 || bCheck2) {
						// forbidden character found
						return false;
					}
				}
			}
		}

		// hash
		if (sHash) {
			if (rCheck.test(sHash)) {
				// forbidden character found
				return false;
			}
		}

		//filter whitelist
		if (aWhitelist.length > 0) {
			var bFound = false;
			for(var i=0; i<aWhitelist.length; i++){
				jQuery.sap.assert(aWhitelist[i] instanceof WhitelistEntry, "whitelist entry type wrong");
				if (!sProtocol || !aWhitelist[i].protocol || sProtocol == aWhitelist[i].protocol) {
					// protocol OK
					var bOk = false;
					if (sHost && aWhitelist[i].host && /^\*/.test(aWhitelist[i].host)) {
						// check for wildcard search at begin
						var sHostEscaped = aWhitelist[i].host.slice(1).replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
						var rFilter = RegExp(sHostEscaped + "$");
						if (rFilter.test(sHost)) {
							bOk = true;
						}
					}else if (!sHost || !aWhitelist[i].host || sHost == aWhitelist[i].host){
						bOk = true;
					}
					if (bOk){
						// host OK
						if ((!sHost && !sPort) || !aWhitelist[i].port || sPort == aWhitelist[i].port) {
							// port OK
							if (aWhitelist[i].path && /\*$/.test(aWhitelist[i].path)) {
								// check for wildcard search at end
								var sPathEscaped = aWhitelist[i].path.slice(0,-1).replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
								var rFilter = RegExp("^"+sPathEscaped);
								if (rFilter.test(sPath)) {
									bFound = true;
								}
							} else if (!aWhitelist[i].path || sPath == aWhitelist[i].path) {
								// path OK
								bFound = true;
							}
						}
					}
				}
				if (bFound) {
					break;
				}
			}
			if (!bFound) {
				return false;
			}
		}

		return true;
	};

	/**
	 * Strips unsafe tags and attributes from HTML.
	 * 
	 * @param {string} sHTML the HTML to be sanitized. 
	 * @param {object} [mOptions={}] options for the sanitizer
	 * @return {string} sanitized HTML
	 * @private
	 */
	jQuery.sap._sanitizeHTML = function(sHTML, mOptions) {
		return fnSanitizer(sHTML, mOptions || {
			uriRewriter: function(sUrl) {
				// by default we use the URL whitelist to check the URL's 
				if (jQuery.sap.validateUrl(sUrl)) {
					return sUrl;
				}
			} 
		});
	};
	
	/**
	 * Registers an application defined sanitizer to be used instead of the built-in one.
	 * 
	 * The given sanitizer function must have the same signature as 
	 * {@link jQuery.sap._sanitizeHTML}:
	 * 
	 * <pre>
	 *   function sanitizer(sHtml, mOptions);
	 * </pre>
	 * 
	 * The parameter <code>mOptions</code> will always be provided, but might be empty. 
	 * The set of understood options is defined by the sanitizer. If no specific 
	 * options are given, the sanitizer should run with the most secure settings.
	 * Sanitizers should ignore unknown settings. Known, but misconfigured settings should be 
	 * reported as error.
	 *  
	 * @param {function} fnSanitizer
	 * @private
	 */
	jQuery.sap._setHTMLSanitizer = function (fnSanitizer) {
		jQuery.sap.assert(typeof fnSanitizer === "function", "Sanitizer must be a function");
		fnSanitizer = fnSanitizer || defaultSanitizer;
	};

	function defaultSanitizer(sHTML, mOptions) {
		if ( !window.html || !window.html.sanitize ) {
			jQuery.sap.require("sap.ui.thirdparty.caja-html-sanitizer");
			jQuery.sap.assert(window.html && window.html.sanitize, "Sanitizer should have been loaded");
		}
		
		var oTagPolicy = mOptions.tagPolicy || window.html.makeTagPolicy(mOptions.uriRewriter, mOptions.tokenPolicy);
		return window.html.sanitizeWithPolicy(sHTML, oTagPolicy);
	}
	
	/**
	 * Globally configured sanitizer.
	 * @private
	 */
	var fnSanitizer = defaultSanitizer;
	
}());
}; // end of jquery.sap.encoder.js
if ( !jQuery.sap.isDeclared('jquery.sap.events') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides functionality related to eventing.
jQuery.sap.declare("jquery.sap.events", false);


(function() {

	jQuery.sap._touchToMouseEvent = true;

	var onTouchStart,
		onTouchMove,
		onTouchEnd,
		onTouchCancel,
		onMouseEvent,
		aMouseEvents,
		bIsSimulatingTouchToMouseEvent = false;

	if (!!sap.ui.Device.browser.webkit && /Mobile/.test(navigator.userAgent) && "ontouchend" in document) {

		bIsSimulatingTouchToMouseEvent = true;

		var simulateTouchToMouseEvent = (function() {
			var document = window.document,
				bHandleEvent = false,
				oTarget = null,
				bIsMoved = false,
				iStartX,
				iStartY,
				i = 0;

			aMouseEvents = ["mousedown", "mouseover", "mouseup", "mouseout", "click"];

			/**
			 * Fires a synthetic mouse event for a given type and native touch event.
			 * @param {String} sType the type of the synthetic event to fire, e.g. "mousedown"
			 * @param {jQuery.Event} oEvent the event object
			 * @private
			 */
			var fireMouseEvent = function(sType, oEvent) {

				if (!bHandleEvent) {
					return;
				}

				// we need mapping of the different event types to get the correct target
				var oMappedEvent = oEvent.type == "touchend" ? oEvent.changedTouches[0] : oEvent.touches[0]; 

				// create the synthetic event
				var newEvent = document.createEvent('MouseEvent');  // trying to create an actual TouchEvent will create an error
				newEvent.initMouseEvent(sType, true, true, window, oEvent.detail,
						oMappedEvent.screenX, oMappedEvent.screenY, oMappedEvent.clientX, oMappedEvent.clientY,
						oEvent.ctrlKey, oEvent.shiftKey, oEvent.altKey, oEvent.metaKey,
						oEvent.button, oEvent.relatedTarget);

				newEvent.isSynthetic = true;

				// Timeout needed. Do not interrupt the native event handling.
				window.setTimeout(function() {
						oTarget.dispatchEvent(newEvent);
				}, 0);
			};

			/**
			 * Checks if the target of the event is an input field.
			 * @param {jQuery.Event} oEvent the event object
			 * @return {Boolean} whether the target of the event is an input field.
			 */
			var isInputField = function(oEvent) {
				return oEvent.target.tagName.match(/input|textarea|select/i);
			};

			/**
			 * Mouse event handler. Prevents propagation for native events. 
			 * @param {jQuery.Event} oEvent the event object
			 * @private
			 */
			onMouseEvent = function(oEvent) {
				if (!oEvent.isSynthetic && !isInputField(oEvent)) {
					oEvent.stopPropagation();
					oEvent.preventDefault();
				}
			};

			/**
			 * Touch start event handler. Called whenever a finger is added to the surface. Fires mouse start event.
			 * @param {jQuery.Event} oEvent the event object
			 * @private
			 */
			onTouchStart = function(oEvent) {
				var oTouches = oEvent.touches,
					oTouch;

				bHandleEvent = (oTouches.length == 1 && !isInputField(oEvent));

				if (bHandleEvent) {
					bIsMoved = false;
					oTouch = oTouches[0];

					// As we are only interested in the first touch target, we remember it
					oTarget = oTouch.target;
					if (oTarget.nodeType === 3) {

						// no text node
						oTarget = oTarget.parentNode;
					}

					// Remember the start position of the first touch to determine if a click was performed or not.
					iStartX = oTouch.clientX;
					iStartY = oTouch.clientY;
					fireMouseEvent("mousedown", oEvent);
				}
			};

			/**
			 * Touch move event handler. Fires mouse move event.
			 * @param {jQuery.Event} oEvent the event object
			 * @private
			 */
			onTouchMove = function(oEvent) {
				var oTouch;

				if (bHandleEvent) {
					oTouch = oEvent.touches[0];

					// Check if the finger is moved. When the finger was moved, no "click" event is fired.
					if (Math.abs(oTouch.clientX - iStartX) > 10 || Math.abs(oTouch.clientY - iStartY) > 10) {
						bIsMoved = true;
					}

					if (bIsMoved) {

						// Fire "mousemove" event only when the finger was moved. This is to prevent unwanted movements. 
						fireMouseEvent("mousemove", oEvent);
					}
				}
			};

			/**
			 * Touch end event handler. Fires mouse up and click event.
			 * @param {jQuery.Event} oEvent the event object
			 * @private
			 */
			onTouchEnd = function(oEvent) {
				fireMouseEvent("mouseup", oEvent);
				if (!bIsMoved) {
					fireMouseEvent("click", oEvent);
				}
			};

			/**
			 * Touch cancel event handler. Fires mouse up event.
			 * @param {jQuery.Event} oEvent the event object
			 * @private
			 */
			onTouchCancel = function(oEvent) {
				fireMouseEvent("mouseup", oEvent);
			};

			// Bind mouse events
			for (; i < aMouseEvents.length; i++) {

				// Add click on capturing phase to prevent propagation if necessary
				document.addEventListener(aMouseEvents[i], onMouseEvent, true);
			}

			// Bind touch events
			document.addEventListener('touchstart', onTouchStart, true);
			document.addEventListener('touchmove', onTouchMove, true);
			document.addEventListener('touchend', onTouchEnd, true);
			document.addEventListener('touchcancel', onTouchCancel, true);
		}());
	}

	/**
	 * Disable touch to mouse handling
	 *
	 * @public
	 */
	jQuery.sap.disableTouchToMouseHandling = function() {
		var i = 0;

		if (!bIsSimulatingTouchToMouseEvent) {
			return;
		}

		// unbind touch events
		document.removeEventListener('touchstart', onTouchStart, true);
		document.removeEventListener('touchmove', onTouchMove, true);
		document.removeEventListener('touchend', onTouchEnd, true);
		document.removeEventListener('touchcancel', onTouchCancel, true);

		// unbind mouse events
		for (; i < aMouseEvents.length; i++) {
			document.removeEventListener(aMouseEvents[i], onMouseEvent, true);
		}
	};

	/**
	 * List of DOM events that a UIArea automatically takes care of.
	 *
	 * A control/element doesn't have to bind listeners for these events.
	 * It instead can implement an <code>on<i>event</i>(oEvent)</code> method
	 * for any of these events that it wants to be notified about.
	 *
	 * @public
	 */
	jQuery.sap.ControlEvents = [  // IMPORTANT: update the public documentation when extending this list
		"click",
		"dblclick",
		"focusin",
		"focusout",
		"keydown",
		"keypress",
		"keyup",
		"mousedown",
		"mouseout",
		"mouseover",
		"mouseup",
		"select",
		"selectstart",
		"dragstart",
		"dragenter",
		"dragover",
		"dragleave",
		"dragend",
		"drop",
		"paste",
		"cut"
	];

	/**
	 * Enumeration of all so called "pseudo events", a useful classification
	 * of standard browser events as implied by SAP product standards.
	 *
	 * Whenever a browser event is recognized as one or more pseudo events, then this
	 * classification is attached to the original {@link jQuery.Event} object and thereby
	 * delivered to any jQuery-style listeners registered for that browser event.
	 *
	 * Pure JavaScript listeners can evaluate the classification information using
	 * the {@link jQuery.Event#isPseudoType} method.
	 *
	 * Instead of using the procedure as described above, the SAPUI5 controls and elements
	 * should simply implement an <code>on<i>pseudo-event</i>(oEvent)</code> method. It will
	 * be invoked only when that specific pseudo event has been recognized. This simplifies event
	 * dispatching even further.
	 *
	 * @namespace
	 * @public
	 */
	jQuery.sap.PseudoEvents = { // IMPORTANT: update the public documentation when extending this list

		/* Pseudo keyboard events */

		/**
		 * Pseudo event for keyboard arrow down without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdown: {sName: "sapdown", aTypes: ["keydown"], fnCheck: function (oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard arrow down with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdownmodifiers: {sName: "sapdownmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'show' event (F4, Alt + down-Arrow)
		 * @public
		 */
		sapshow: {sName: "sapshow", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return (oEvent.keyCode == jQuery.sap.KeyCodes.F4 && !hasModifierKeys(oEvent)) ||
				(oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/true, /*Shift*/false));
		}},

		/**
		 * Pseudo event for keyboard arrow up without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapup: {sName: "sapup", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard arrow up with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapupmodifiers: {sName: "sapupmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'hide' event (Alt + up-Arrow)
		 * @public
		 */
		saphide: {sName: "saphide", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/true, /*Shift*/false);
		}},

		/**
		 * Pseudo event for keyboard arrow left without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapleft: {sName: "sapleft", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_LEFT && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard arrow left with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapleftmodifiers: {sName: "sapleftmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_LEFT && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard arrow right without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapright: {sName: "sapright", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_RIGHT && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard arrow right with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		saprightmodifiers: {sName: "saprightmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_RIGHT && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard Home/Pos1 with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		saphome: {sName: "saphome", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.HOME && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard Home/Pos1 without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		saphomemodifiers: {sName: "saphomemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.HOME && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for  pseudo top event
		 * @public
		 */
		saptop: {sName: "saptop", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.HOME && checkModifierKeys(oEvent, /*Ctrl*/true, /*Alt*/false, /*Shift*/false);
		}},

		/**
		 * Pseudo event for keyboard End without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapend: {sName: "sapend", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.END && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard End with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapendmodifiers: {sName: "sapendmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.END && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo bottom event
		 * @public
		 */
		sapbottom: {sName: "sapbottom", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.END && checkModifierKeys(oEvent, /*Ctrl*/true, /*Alt*/false, /*Shift*/false);
		}},

		/**
		 * Pseudo event for keyboard page up without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappageup: {sName: "sappageup", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.PAGE_UP && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard page up with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappageupmodifiers: {sName: "sappageupmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.PAGE_UP && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard page down without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappagedown: {sName: "sappagedown", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.PAGE_DOWN && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard page down with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappagedownmodifiers: {sName: "sappagedownmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.PAGE_DOWN && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'select' event... space, enter, ... without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapselect: {sName: "sapselect", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return (oEvent.keyCode == jQuery.sap.KeyCodes.ENTER || oEvent.keyCode == jQuery.sap.KeyCodes.SPACE) && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'select' event... space, enter, ... with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapselectmodifiers: {sName: "sapselectmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return (oEvent.keyCode == jQuery.sap.KeyCodes.ENTER || oEvent.keyCode == jQuery.sap.KeyCodes.SPACE) && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard space without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapspace: {sName: "sapspace", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.SPACE && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard space with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapspacemodifiers: {sName: "sapspacemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.SPACE && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard enter without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapenter: {sName: "sapenter", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ENTER && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard enter with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapentermodifiers: {sName: "sapentermodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ENTER && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard backspace without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapbackspace: {sName: "sapbackspace", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.BACKSPACE && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard backspace with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapbackspacemodifiers: {sName: "sapbackspacemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.BACKSPACE && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard delete without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdelete: {sName: "sapdelete", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.DELETE && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard delete with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdeletemodifiers: {sName: "sapdeletemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.DELETE && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo expand event (keyboard numpad +) without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapexpand: {sName: "sapexpand", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_PLUS && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo expand event (keyboard numpad +) with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapexpandmodifiers: {sName: "sapexpandmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_PLUS && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo collapse event (keyboard numpad -) without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapcollapse: {sName: "sapcollapse", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_MINUS && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo collapse event (keyboard numpad -) with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapcollapsemodifiers: {sName: "sapcollapsemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_MINUS && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo collapse event (keyboard numpad *)
		 * @public
		 */
		sapcollapseall: {sName: "sapcollapseall", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.NUMPAD_ASTERISK && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard escape
		 * @public
		 */
		sapescape: {sName: "sapescape", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.ESCAPE && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard tab (TAB + no modifier)
		 * @public
		 */
		saptabnext: {sName: "saptabnext", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.TAB && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for keyboard tab (TAB + shift modifier)
		 * @public
		 */
		saptabprevious: {sName: "saptabprevious", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.TAB && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/false, /*Shift*/true);
		}},

		/**
		 * Pseudo event for pseudo skip forward (F6 + no modifier)
		 * @public
		 */
		sapskipforward: {sName: "sapskipforward", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.F6 && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo skip back (F6 + shift modifier)
		 * @public
		 */
		sapskipback: {sName: "sapskipback", aTypes: ["keydown"], fnCheck: function(oEvent) {
			return oEvent.keyCode == jQuery.sap.KeyCodes.F6 && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/false, /*Shift*/true);
		}},

		//// contextmenu Shift-F10 hack
		//{sName: "sapcontextmenu", aTypes: ["keydown"], fnCheck: function(oEvent) {
		//	return oEvent.keyCode == jQuery.sap.KeyCodes.F10 && checkModifierKeys(oEvent, /*Ctrl*/false, /*Alt*/false, /*Shift*/true);
		//}},

		/**
		 * Pseudo event for pseudo 'decrease' event without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdecrease: {sName: "sapdecrease", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iPreviousKey = bRtl ? jQuery.sap.KeyCodes.ARROW_RIGHT : jQuery.sap.KeyCodes.ARROW_LEFT;
			return (oEvent.keyCode == iPreviousKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'decrease' event with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapdecreasemodifiers: {sName: "sapdecreasemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iPreviousKey = bRtl ? jQuery.sap.KeyCodes.ARROW_RIGHT : jQuery.sap.KeyCodes.ARROW_LEFT;
			return (oEvent.keyCode == iPreviousKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'increase' event without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapincrease: {sName: "sapincrease", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iNextKey = bRtl ? jQuery.sap.KeyCodes.ARROW_LEFT : jQuery.sap.KeyCodes.ARROW_RIGHT;
			return (oEvent.keyCode == iNextKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'increase' event with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapincreasemodifiers: {sName: "sapincreasemodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iNextKey = bRtl ? jQuery.sap.KeyCodes.ARROW_LEFT : jQuery.sap.KeyCodes.ARROW_RIGHT;
			return (oEvent.keyCode == iNextKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'previous' event without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapprevious: {sName: "sapprevious", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iPreviousKey = bRtl ? jQuery.sap.KeyCodes.ARROW_RIGHT : jQuery.sap.KeyCodes.ARROW_LEFT;
			return (oEvent.keyCode == iPreviousKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'previous' event with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sappreviousmodifiers: {sName: "sappreviousmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iPreviousKey = bRtl ? jQuery.sap.KeyCodes.ARROW_RIGHT : jQuery.sap.KeyCodes.ARROW_LEFT;
			return (oEvent.keyCode == iPreviousKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) && hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'next' event without modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapnext: {sName: "sapnext", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iNextKey = bRtl ? jQuery.sap.KeyCodes.ARROW_LEFT : jQuery.sap.KeyCodes.ARROW_RIGHT;
			return (oEvent.keyCode == iNextKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) && !hasModifierKeys(oEvent);
		}},

		/**
		 * Pseudo event for pseudo 'next' event with modifiers (Ctrl, Alt or Shift)
		 * @public
		 */
		sapnextmodifiers: {sName: "sapnextmodifiers", aTypes: ["keydown"], fnCheck: function(oEvent) {
			var bRtl = sap.ui.getCore().getConfiguration().getRTL();
			var iNextKey = bRtl ? jQuery.sap.KeyCodes.ARROW_LEFT : jQuery.sap.KeyCodes.ARROW_RIGHT;
			return (oEvent.keyCode == iNextKey || oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) && hasModifierKeys(oEvent);
		}},

		//// pseudo hotkey event
		//{sName: "saphotkey", aTypes: ["keydown"], fnCheck: function(oEvent) {
		//  return false;
		//}},
		/* TODO: hotkeys: all other events could be hotkeys
		if(UCF_KeyboardHelper.bIsValidHotkey(iKey, bCtrl, bAlt, bShift)) {

			if (iKey == jQuery.sap.KeyCodes.F1 && bNoModifiers) {
				//special handling for FF - in IE the help is handeled by onHelp
				if (UCF_System.sDevice == "ff1") {
					this.fireSapEvent(this.E_SAP_EVENTS.hotkey, oEvent);
				}
			}
			else if (bCtrlOnly && iKey == jQuery.sap.KeyCodes.C && document.selection) {
				//handle ctrl+c centrally if text is selected to allow to copy it instead of firing the hotkey
				var oTextRange = document.selection.createRange();
				if (!oTextRange || oTextRange.text.length <= 0) {
					this.fireSapEvent(this.E_SAP_EVENTS.hotkey, oEvent);
				}
			}
			else {
				this.fireSapEvent(this.E_SAP_EVENTS.hotkey, oEvent);
			}
		}
		*/

		/*
		 * Other pseudo events
		 * @public
		 */

		/**
		 * Pseudo event indicating delayed double click (e.g. for inline edit)
		 * @public
		 */
		sapdelayeddoubleclick: {sName: "sapdelayeddoubleclick", aTypes: ["click"], fnCheck: function(oEvent) {
			var element = jQuery(oEvent.target);
			var currentTimestamp = oEvent.timeStamp;
			var data = element.data("sapdelayeddoubleclick_lastClickTimestamp");
			var lastTimestamp = data || 0;
			element.data("sapdelayeddoubleclick_lastClickTimestamp", currentTimestamp);
			var diff = currentTimestamp - lastTimestamp;
			return (diff >= 300 && diff <= 1300);
		}}
	};

	/**
	 * Ordered array of the {@link jQuery.sap.PseudoEvents}.
	 *
	 * Order is significant as some check methods rely on the fact that they are tested before other methods.
	 * The array is processed during event analysis (when classifying browser events as pseudo events).
	 * @private
	 */
	var PSEUDO_EVENTS = ["sapdown", "sapdownmodifiers", "sapshow", "sapup", "sapupmodifiers", "saphide", "sapleft", "sapleftmodifiers", "sapright", "saprightmodifiers", "saphome", "saphomemodifiers", "saptop", "sapend", "sapendmodifiers", "sapbottom", "sappageup", "sappageupmodifiers", "sappagedown", "sappagedownmodifiers", "sapselect", "sapselectmodifiers", "sapspace", "sapspacemodifiers", "sapenter", "sapentermodifiers", "sapexpand", "sapbackspace", "sapbackspacemodifiers", "sapdelete", "sapdeletemodifiers", "sapexpandmodifiers", "sapcollapse", "sapcollapsemodifiers", "sapcollapseall", "sapescape", "saptabnext", "saptabprevious", "sapskipforward", "sapskipback", "sapprevious", "sappreviousmodifiers", "sapnext", "sapnextmodifiers", "sapdecrease", "sapdecreasemodifiers", "sapincrease", "sapincreasemodifiers", "sapdelayeddoubleclick"];

	//Add mobile touch events if touch is supported or we run in special dev test mode
	(function initTouchEventSupport() {

		function simulateMobileTouchEventSupport() {
			var oCfgData = window["sap-ui-config"] || {},
				sLibs = oCfgData.libs || "";

			// TODO: should be replaced by some function in jQuery.sap.global (e.g. jQuery.sap.config(sKey))
			function hasConfig(sKey) {
				return document.location.search.indexOf("sap-ui-"+sKey) > -1 || // URL 
					!!oCfgData[sKey.toLowerCase()]; // currently, properties of oCfgData are converted to lower case (DOM attributes)
			}

			return hasConfig("xx-test-mobile") || //see sap.ui.core.Configuration -> M_SETTINGS
				// also simulate touch events when sap-ui-xx-fakeOS is set (independently of the value and the current browser)
				hasConfig("xx-fakeOS") || 
				// always simulate touch events when the mobile lib is involved (FIXME: hack for Kelley, this does currently not work with dynamic library loading)
				sLibs.match(/sap.m\b/);
		}

		jQuery.sap.touchEventMode = "OFF";

		var aAdditionalControlEvents = [];
		var aAdditionalPseudoEvents = [];

		if(sap.ui.Device.support.touch){ //Touch events natively supported
			jQuery.sap.touchEventMode = "ON";

			//ensure that "oEvent.touches", ... works (and not only "oEvent.originalEvent.touches", ...)
			jQuery.event.props.push("touches", "targetTouches", "changedTouches");

			//Define additional native events to be added to the event list
			//TODO maybe add "gesturestart", "gesturechange", "gestureend" later ?
			// IMPORTANT: update the public documentation when extending this list
			aAdditionalControlEvents.push("touchstart", "touchend", "touchmove", "touchcancel");

		}else if(simulateMobileTouchEventSupport()){ //Touch Simulation mode
			jQuery.sap.touchEventMode = "SIM";
			jQuery.sap.log.warning("MOBILE TOUCH EVENT TEST MODE ACTIVE", "", "jQuery.sap.events");

			var createSimulatedTouch = function(sName, aOrigEvents) {
				var sHandlerKey = "__"+sName+"Handler";
				var sSapName = "sap"+sName;
				aAdditionalControlEvents.push(sSapName);
				aAdditionalPseudoEvents.push({sName: sName, aTypes: [sSapName], fnCheck: function (oEvent) { return true; }});

				jQuery.event.special[sSapName] = {
					add: function(oHandle) {
						var that = this,
						$this = jQuery(this);
						var fHandler = function(oEvent) {
							if(!(oEvent.type != "mouseout" || (oEvent.type === "mouseout" && jQuery.sap.checkMouseEnterOrLeave(oEvent, that)))){
								var bSkip = true;
								var sControlId = $this.data("__touchstart_control");
								if(sControlId){
									var oCtrlDom = jQuery.sap.domById(sControlId);
									if(oCtrlDom && jQuery.sap.checkMouseEnterOrLeave(oEvent, oCtrlDom)){
										bSkip = false;
									}
								}
								if(bSkip){
									return;
								}
							}
							var oNewEvent = jQuery.event.fix(oEvent.originalEvent);
							oNewEvent.type = sSapName;
							//reset the _sapui_handledByUIArea flag
							if (oNewEvent.originalEvent._sapui_firstUIArea) {
								oNewEvent.originalEvent._sapui_handledByUIArea = false;
							}

							var aTouches = [{
								identifier: 1,
								pageX: oNewEvent.pageX,
								pageY: oNewEvent.pageY,
								clientX: oNewEvent.clientX,
								clientY: oNewEvent.clientY,
								screenX: oNewEvent.screenX,
								screenY: oNewEvent.screenY,
								target: oNewEvent.target,
								radiusX: 1,
								radiusY: 1,
								rotationAngle: 0
							}];

							switch (sName) {
								case "touchstart":
								case "touchmove":
									oNewEvent.touches = oNewEvent.changedTouches = oNewEvent.targetTouches = aTouches;
									break;
	
								case "touchend":
									oNewEvent.changedTouches = aTouches;
									oNewEvent.touches = oNewEvent.targetTouches = [];
									break;

								// no default
							}

							if(sName === "touchstart" || $this.data("__touch_in_progress")){
								$this.data("__touch_in_progress", "X");
								var oControl = jQuery.fn.control ? jQuery(oEvent.target).control(0) : null;
								if(oControl){
									$this.data("__touchstart_control", oControl.getId());
								}
								oHandle.handler.call(that, oNewEvent);
								if(sName === "touchend"){
									$this.removeData("__touch_in_progress");
									$this.removeData("__touchstart_control");
								}
							}
						};
						$this.data(sHandlerKey + oHandle.guid, fHandler);
						for(var i=0; i<aOrigEvents.length; i++){
							$this.bind(aOrigEvents[i], fHandler);
						}
					},
					remove: function(oHandle) {
						var $this = jQuery(this);
						var fHandler = $this.data(sHandlerKey + oHandle.guid);
						$this.removeData(sHandlerKey + oHandle.guid);
						for(var i=0; i<aOrigEvents.length; i++){
							jQuery.event.remove(this, aOrigEvents[i], fHandler);
						}
					}
				};
			};

			createSimulatedTouch("touchstart", ["mousedown"]);
			createSimulatedTouch("touchend", ["mouseup", "mouseout"]);
			createSimulatedTouch("touchmove", ["mousemove"]);
		}

		if(jQuery.sap.touchEventMode != "OFF"){
			jQuery.sap.require("sap.ui.thirdparty.jquery-mobile-custom");

			//Define additional jQuery Mobile events to be added to the event list
			//TODO taphold cannot be used (does not bubble / has no target property) -> Maybe provide own solution
			// IMPORTANT: update the public documentation when extending this list
			aAdditionalControlEvents.push("swipe", "tap", "swipeleft", "swiperight", "scrollstart", "scrollstop");

			//Define additional pseudo events to be added to the event list
			aAdditionalPseudoEvents.push({sName: "swipebegin", aTypes: ["swipeleft", "swiperight"], fnCheck: function (oEvent) {
				var bRtl = sap.ui.getCore().getConfiguration().getRTL();
				return (bRtl && oEvent.type === "swiperight") || (!bRtl && oEvent.type === "swipeleft");
			}});
			aAdditionalPseudoEvents.push({sName: "swipeend", aTypes: ["swipeleft", "swiperight"], fnCheck: function (oEvent) {
				var bRtl = sap.ui.getCore().getConfiguration().getRTL();
				return (!bRtl && oEvent.type === "swiperight") || (bRtl && oEvent.type === "swipeleft");
			}});

			//Add all defined events to the event infrastructure
			jQuery.sap.ControlEvents = jQuery.sap.ControlEvents.concat(aAdditionalControlEvents);

			for(var i=0; i<aAdditionalPseudoEvents.length; i++){
				jQuery.sap.PseudoEvents[aAdditionalPseudoEvents[i].sName] = aAdditionalPseudoEvents[i];
				PSEUDO_EVENTS.push(aAdditionalPseudoEvents[i].sName);
			}
		}
	}());

	/**
	 * Function for initialization of an Array containing all basic event types of the available pseudo events.
	 * @private
	 */
	function initPseudoEventBasicTypes(){
		var mEvents = jQuery.sap.PseudoEvents,
			aResult = [];

		for (var sName in mEvents) {
			if (mEvents[sName].aTypes) {
				for (var j = 0, js = mEvents[sName].aTypes.length; j < js; j++) {
					var sType = mEvents[sName].aTypes[j];
					if (jQuery.inArray(sType, aResult) == -1) {
						aResult.push(sType);
					}
				}
			}
		}

		return aResult;
	}

	/**
	 * Array containing all basic event types of the available pseudo events.
	 * @private
	 */
	var PSEUDO_EVENTS_BASIC_TYPES = initPseudoEventBasicTypes();

	/**
	 * Convenience method to check an event for a certain combination of modifier keys
	 *
	 * @private
	 */
	function checkModifierKeys(oEvent, bCtrlKey, bAltKey, bShiftKey) {
		return oEvent.shiftKey == bShiftKey && oEvent.altKey == bAltKey && getCtrlKey(oEvent) == bCtrlKey;
	}

	/**
	 * Convenience method to check an event for any modifier key
	 *
	 * @private
	 */
	function hasModifierKeys(oEvent) {
		return oEvent.shiftKey || oEvent.altKey || getCtrlKey(oEvent);
	}

	/**
	 * Convenience method for handling of Ctrl key, meta key etc.
	 *
	 * @private
	 */
	function getCtrlKey(oEvent) {
		return !!(oEvent.metaKey || oEvent.ctrlKey); // double negation doesn't have effect on boolean but ensures null and undefined are equivalent to false.
	}

	/**
	 * Returns an array of names (as strings) identifying {@link jQuery.sap.PseudoEvents} that are fulfilled by this very Event instance.
	 *
	 * @returns {String[]} Array of names identifying {@link jQuery.sap.PseudoEvents} that are fulfilled by this very Event instance.
	 * @public
	 */
	jQuery.Event.prototype.getPseudoTypes = function() {
		var aPseudoTypes = [];

		if (jQuery.inArray(this.type, PSEUDO_EVENTS_BASIC_TYPES) != -1) {
			var aPseudoEvents = PSEUDO_EVENTS;
			var ilength = aPseudoEvents.length;
			var oPseudo = null;

			for(var i=0; i<ilength; i++){
				oPseudo = jQuery.sap.PseudoEvents[aPseudoEvents[i]];
				if(oPseudo.aTypes
						&& jQuery.inArray(this.type, oPseudo.aTypes) > -1
						&& oPseudo.fnCheck
						&& oPseudo.fnCheck(this)){
					aPseudoTypes.push(oPseudo.sName);
				}
			}
		}

		this.getPseudoTypes = function(){return aPseudoTypes.slice();};

		return aPseudoTypes.slice();
	};

	/**
	 * Checks whether this instance of {@link jQuery.Event} is of the given <code>sType</code> pseudo type.
	 *
	 * @param {string} sType The name of the pseudo type this event should be checked for.
	 * @returns {boolean} <code>true</code> if this instance of jQuery.Event is of the given sType, <code>false</code> otherwise.
	 * @public
	 */
	jQuery.Event.prototype.isPseudoType = function(sType) {
		var aPseudoTypes = this.getPseudoTypes();

		if (sType) {
			return jQuery.inArray(sType, aPseudoTypes) > -1;
		} else {
			return aPseudoTypes.length > 0;
		}
	};


	/*
	 * store reference to original preventDefault method
	 */
	var _preventDefault = jQuery.Event.prototype.preventDefault;
	/*
	 * and introduce some keyCode fixing for IE...
	 * this e.g. suppresses the address-field drop down opening in case of sapshow (i.e. F4) in ComboBoxes
	 */
	jQuery.Event.prototype.preventDefault = function() {
		_preventDefault.apply(this, arguments);

		var e = this.originalEvent;

		if ( !e ) {
			return;
		}

		if ( e.keyCode != 0 ) {
			try { // Sometimes setting keycode results in "Access Denied"
				if(!!!sap.ui.Device.browser.firefox) {
					e.keyCode = 0;
				}
			} catch(ex) {}
		}

	};

	/**
	 * Binds all events for listening with the given callback function.
	 *
	 * @param {function} fnCallback Callback function
	 * @public
	 */
	jQuery.sap.bindAnyEvent = function bindAnyEvent(fnCallback) {
		if (fnCallback) {
			jQuery(document).bind(jQuery.sap.ControlEvents.join(" "), fnCallback);
		}
	};

	/**
	 * Unbinds all events for listening with the given callback function.
	 *
	 * @param {function} fnCallback Callback function
	 * @public
	 */
	jQuery.sap.unbindAnyEvent = function unbindAnyEvent(fnCallback) {
		if (fnCallback) {
			jQuery(document).unbind(jQuery.sap.ControlEvents.join(" "), fnCallback);
		}
	};

	/**
	 * Checks a given mouseover or mouseout event whether it is
	 * equivalent to a mouseenter or mousleave event regarding the given DOM reference.
	 *
	 * @param {jQuery.Event} oEvent
	 * @param {element} oDomRef
	 * @public
	 */
	jQuery.sap.checkMouseEnterOrLeave = function checkMouseEnterOrLeave(oEvent, oDomRef) {
		if(oEvent.type != "mouseover" && oEvent.type != "mouseout") {
			return false;
		}

		var isMouseEnterLeave = false;
		var element = oDomRef;
		var parent = oEvent.relatedTarget;

		try {
			while ( parent && parent !== element ) {
				parent = parent.parentNode;
			}

			if ( parent !== element ) {
				isMouseEnterLeave = true;
			}
		} catch(e) { }

		return isMouseEnterLeave;
	};

	/**
	 * Constructor for a jQuery.Event object.<br/>
	 * @see "http://www.jquery.com" and "http://api.jquery.com/category/events/event-object/".
	 *
	 * @class Check the jQuery.Event class documentation available under "http://www.jquery.com"<br/>
	 * and "http://api.jquery.com/category/events/event-object/" for details.
	 *
	 * @name jQuery.Event
	 * @public
	 */

	/**
	 * Returns OffsetX of Event. In jQuery there is a bug. In IE the value is in offsetX, in FF in layerX
	 *
	 * @returns offsetX
	 * @public
	 */
	jQuery.Event.prototype.getOffsetX = function() {

		if (this.type == 'click'){
			if (this.offsetX){
				return this.offsetX;
			}
			if (this.layerX){
				return this.layerX;
			}
			if (this.originalEvent.layerX){
				return this.originalEvent.layerX;
			}
		}
		// nothing defined -> offset = 0
		return 0;
	};

	/**
	 * Returns OffsetY of Event. In jQuery there is a bug. in IE the value is in offsetY, in FF in layerY.
	 *
	 * @returns offsetY
	 * @public
	 */
	jQuery.Event.prototype.getOffsetY = function() {

		if (this.type == 'click'){
			if (this.offsetY){
				return this.offsetY;
			}
			if (this.layerY){
				return this.layerY;
			}
			if (this.originalEvent.layerY){
				return this.originalEvent.layerY;
			}
		}
		// nothing defined -> offset = 0
		return 0;
	};

	// we still call the original stopImmediatePropagation
	var fnStopImmediatePropagation = jQuery.Event.prototype.stopImmediatePropagation;
	
	/**
	 * PRIVATE EXTENSION: allows to immediately stop the propagation of events in
	 * the event handler execution - means that "before" delegates can stop the
	 * propagation of the event to other delegates or the element and so on.
	 *
	 * @see sap.ui.core.Element.prototype._callEventHandles
	 * @param {boolean} bStopDelegate
	 */
	jQuery.Event.prototype.stopImmediatePropagation = function(bStopHandlers) {

		// execute the original function
		fnStopImmediatePropagation.apply(this, arguments);

		// only set the stop handlers flag if it is wished...
		if (bStopHandlers) {
			this._bIsStopHandlers = true;
		}
		
	};

	/**
	 * PRIVATE EXTENSION: check if the handler propagation has been stopped.
	 *
	 * @see sap.ui.core.Element.prototype._callEventHandles 
	 */
	jQuery.Event.prototype.isImmediateHandlerPropagationStopped = function() {
		return !!this._bIsStopHandlers;
	};
	
	/**
	 * PRIVATE EXTENSION: jQuery.Event
	 *
	 * Mark the event for components that needs to know if the event was handled by the control
	 * @param {String} [sKey=handledByControl]
	 */
	jQuery.Event.prototype.setMarked = function(sKey) {
		sKey = sKey || "handledByControl";
		(this.originalEvent || {})["_sapui_" + sKey] = true;
	};
	
	/**
	 * PRIVATE EXTENSION: jQuery.Event
	 *
	 * Check the event whether is marked by the child control or not
	 * @param {String} [sKey=handledByControl]
	 * @returns {Boolean}
	 */
	jQuery.Event.prototype.isMarked = function(sKey) {
		sKey = sKey || "handledByControl";
		return !!(this.originalEvent || {})["_sapui_" + sKey];
	};

}());

}; // end of jquery.sap.events.js
if ( !jQuery.sap.isDeclared('jquery.sap.history') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("jquery.sap.history", false);



(function($, window){
		//suffix of virtual hash 
	var skipSuffix = "_skip",
	
		//the regular expression for matching the unique id in the hash
		rIdRegex = /\|id-[0-9]+-[0-9]+/,
		
		//the regular expression for matching the suffix in the hash
		skipRegex = new RegExp(skipSuffix + "[0-9]*$"),
		
		//array of routes
		routes = [],
		
		//array represents the current history stack
		hashHistory = [],
		
		//mark if the change of the hash is from the code or from pressing the back or forward button
		mSkipHandler = {},
		
		//index of the skip suffix
		skipIndex = 0,
		
		//the current hash of the history handling
		currentHash = undefined,
		
		//the hash format separator
		sIdSeperator = "|",
		
		//array that buffers the changed to the hash in order to make them handled one by one
		aHashChangeBuffer = [],
		
		//marker if the handling hash change is in processing
		bInProcessing = false,
		
		//default handler which will be called when url contains an empty hash
		defaultHandler,
		
		//avoid calling the history initialization twice
		bInitialized = false;
	
	
	/** 
	 * Initialize the history handling and set the routes and default handler.
	 * This should be only called once with the mSettings set in the right format. If the mSettings is not an object,
	 * you have another chance to call this function again to initialize the history handling. But once the mSettings
	 * is set with an object, you can only call the addRoute and setDefaultHandler to set the data.
	 *
	 * @param {object} mSettings The map that contains data in format:
	 * <pre>
	 * {
	 *	routes: [{
	 * 		path: string //identifier for one kind of hash
	 *		handler: function	//function what will be called when the changed hash is matched against the path.
	 *							//first parameter: the json data passed in when calling the addHistory
	 *							//second parameter: the type of the navigation {@link jQuery.sap.history.NavType}
	 *		}],
	 *		defaultHandler: function	//this function will be called when empty hash is matched
	 *									//first parameter: the type of the navigation {@link jQuery.sap.history.NavType}
	 * }
	 * </pre>
	 * @public
	 * @name jQuery.sap.history
	 * @class Enables the back and forward buttons in browser to navigate back or forth through the browser history stack.<br/><br/>
	 * 
	 * It also supports adding virtual history which used only to mark some intermediate state in order to navigate back to the previous state. 
	 * And this state will be skipped from the browser history stack immediately after a new history state is added to the history stack after this state <br/><br/>
	 * 
	 * By providing the hash saved from the return value of calling jQuery.sap.history.addHistory, jQuery.sap.history.backToHash will navigate back directly to the
	 * history state with the same hash. <br/><br/>
	 * 
	 * Please use jQuery.sap.history.back() to go one step back in the history stack instead of using window.history.back(), because it handles the empty history stack
	 * situation and will call the defaultHandler for this case. <br/><br/>
	 * 
	 *
	 * Example for the usage of history handling:
	 * <pre>
	 *	//Initialization
	 *	jQuery.sap.history({
	 *		routes: [], //please refer to the jQuery.sap.history function comment for the format. 
	 *		defaultHandler: function(){
	 *			//code here
	 *		}
	 *	});
	 *   
	 *	//add history
	 *	var hash = jQuery.sap.history.addHistory("IDENTIFIER", jsonData);
	 *   
	 *	//add virtual history
	 *	jQuery.sap.history.addVirtualHistory();
	 *   
	 *	//back to hash
	 *	jQuery.sap.history.backToHash(hash);
	 *   
	 *	//back one step along the history stack
	 *	jQuery.sap.history.back();
	 * </pre>
	 * 
	 */
	$.sap.history = function(mSettings){
		//if mSetting is not a object map, return
		if(!jQuery.isPlainObject(mSettings)){
			return;
		}
		
		
		if(!bInitialized){
			var jWindowDom = $(window),
				//using href instead of hash to avoid the escape problem in firefox
				sHash = (window.location.href.split("#")[1] || "");
			
			jWindowDom.bind('hashchange', detectHashChange);
			
			if($.isArray(mSettings.routes)){
				var i, route;
				for(i = 0 ; i < mSettings.routes.length ; i++){
					route = mSettings.routes[i];
					if(route.path && route.handler){
						$.sap.history.addRoute(route.path, route.handler);
					}
				}
			}
	
			if(jQuery.isFunction(mSettings.defaultHandler)){
				defaultHandler = mSettings.defaultHandler;
			}
			
			//push the current hash to the history stack
			hashHistory.push(sHash);
			
			//goes in from bookmark
			if(sHash.length > 1){
				jWindowDom.trigger("hashchange", [true]);
			}else{
				currentHash = sHash;
			}
			
			bInitialized = true;
		}
	};
	
	/**
	 * This function adds a history record. It will not trigger the related handler of the routes, the changes have to be done by the
	 * developer. Normally, a history record should be added when changes are done already. 
	 * 
	 * @param {string} sIdf The identifier defined in the routes which will be matched in order to call the corresponding handler
 	 * @param {object} oStateData The object passed to the corresponding handler when the identifier is matched with the url hash
	 * @param {boolean} bBookmarkable Default value is set to true. If this is set to false, the default handler will be called when this identifier and data are matched
	 * @param {boolean} [bVirtual] This states if the history is a virtual history that should be skipped when going forward or backward in the history stack.
	 * @returns sHash The complete hash string which contains the identifier, stringified data, optional uid, and bookmarkable digit. This hash can be passed into 
	 * 			the backToHash function when navigating back to this state is intended.
	 * @type {string}
	 * 
	 * @function
	 * @public
	 * @name jQuery.sap.history#addHistory
	 */
	$.sap.history.addHistory = function(sIdf, oStateData, bBookmarkable, bVirtual){
		var uid, sHash;
		if(bBookmarkable === undefined){
			bBookmarkable = true;
		}
		
		if(!bVirtual){
			sHash = preGenHash(sIdf, oStateData);
			uid = getAppendId(sHash);
			if(uid){
				sHash += (sIdSeperator + uid);
			}
			sHash += (sIdSeperator + (bBookmarkable ? "1" : "0"));
			
		}else{
			sHash = getNextSuffix(currentHash);
		}
		aHashChangeBuffer.push(sHash);
		mSkipHandler[sHash] = true;
		window.location.hash = sHash;
		
		return sHash;
	};
	
	
	/**
	 * This function adds a virtual history record based on the current hash. A virtual record is only for marking the current state of the application, 
	 * and when the back button clicked it will return to the previous state. It is used when the marked state shouldn't be seen by the user when user click
	 * the back or forward button of the browser. For example, when showing a context menu a virtual history record should be added and this record will be skipped
	 * when user navigates back and it will return directly to the previous history record. If you avoid adding the virtual history record, it will return to one
	 * history record before the one your virtual record is based on. That's why virtual record is necessary.
	 * 
	 * @function
	 * @public
	 * @name jQuery.sap.history#addVirtualHistory
	 */
	$.sap.history.addVirtualHistory = function(){
		$.sap.history.addHistory("", undefined, false, true);
	};
	
	
	/**
	 * Adds a route to the history handling.
	 * 
	 * @param {string} sIdf The identifier that is matched with the hash in the url in order to call the corresponding handler.
	 * @param {function} fn The function that will be called when the identifier is matched with the hash.
	 * @param {object} [oThis] If oThis is provided, the fn function's this keyword will be bound to this object.
	 * 
	 * @returns It returns the this object to enable chaining.
	 * @type {object}
	 * 
	 * @function
	 * @public
	 * @name jQuery.sap.history#addRoute
	 */
	$.sap.history.addRoute = function(sIdf, fn, oThis){
		if(oThis){
			fn = jQuery.proxy(fn, oThis);
		}
		
		var oRoute = {};
		oRoute.sIdentifier = sIdf;
		oRoute['action'] = fn;
		
		routes.push(oRoute);
		return this;
	};
	
	/**
	 * Set the default handler which will be called when there's an empty hash in the url.
	 * 
	 * @param {function} fn The function that will be set as the default handler
	 * @public
	 * 
	 * @function
	 * @name jQuery.sap.history#setDefaultHandler
	 */
	$.sap.history.setDefaultHandler = function(fn){
		defaultHandler = fn;
	};
	
	$.sap.history.getDefaultHandler = function(){
		return defaultHandler;
	};
	
	
	
	/**
	 * This function calculate the number of back steps to the specific sHash passed as parameter,
	 * and then go back to the history state with this hash.
	 * 
	 * @param {string} sHash The hash string needs to be navigated. This is normally returned when you call the addhistory method.
	 * @public
	 * 
	 * @function
	 * @name jQuery.sap.history#backToHash
	 */
	$.sap.history.backToHash = function(sHash){
		sHash = sHash || "";
		var iSteps;
		
		//back is called directly after restoring the bookmark. Since there's no history stored, call the default handler.
		if(hashHistory.length === 1){
			if($.isFunction(defaultHandler)){
				defaultHandler();
			}
		}else{
			iSteps = calculateStepsToHash(currentHash, sHash);
			if(iSteps < 0){
				window.history.go(iSteps);
			}else{
				jQuery.sap.log.error("jQuery.sap.history.backToHash: " + sHash + "is not in the history stack or it's after the current hash");
			}
		}
	};
	
	/**
	 * This function will navigate back to the recent history state which has the sPath identifier. It is usually used to navigate back along one
	 * specific route and jump over the intermediate history state if there are any.
	 * 
	 * @param {string} sPath The route identifier to which the history navigates back.
	 * @public
	 * 
	 * @function
	 * @name jQuery.sap.history#backThroughPath
	 */
	$.sap.history.backThroughPath = function(sPath){
		sPath = sPath || "";
		sPath = window.encodeURIComponent(sPath);
		var iSteps;
		
		//back is called directly after restoring the bookmark. Since there's no history stored, call the default handler.
		if(hashHistory.length === 1){
			if($.isFunction(defaultHandler)){
				defaultHandler();
			}
		}else{
			iSteps = calculateStepsToHash(currentHash, sPath, true);
			if(iSteps < 0){
				window.history.go(iSteps);
			}else{
				jQuery.sap.log.error("jQuery.sap.history.backThroughPath: there's no history state which has the " + sPath + " identifier in the history stack before the current hash");
			}
		}
	};
	
	/**
	 * This function navigates back through the history stack. The number of steps is set by the parameter iSteps. It also handles the situation when it's called while there's nothing in the history stack.
	 * Normally this happens when the application is restored from the bookmark. If there's nothing in the history stack, the default handler will be called with NavType jQuery.sap.history.NavType.Back.
	 * 
	 * @param {int} [iSteps] how many steps you want to go back, by default the value is 1.
	 * @public
	 * 
	 * @function
	 * @name jQuery.sap.history#back
	 */
	$.sap.history.back = function(iSteps){
		
		//back is called directly after restoring the bookmark. Since there's no history stored, call the default handler.
		if(hashHistory.length === 1){
			if($.isFunction(defaultHandler)){
				defaultHandler($.sap.history.NavType.Back);
			}
		}else{
			if(!iSteps){
				iSteps = 1;
			}
			window.history.go(-1*iSteps);
		}
	};
	
	/**
	 * @public
	 * @name jQuery.sap.history.NavType
	 * @namespace
	 * @static
	 */
	$.sap.history.NavType = {};
	
	/**
	 * This indicates that the new hash is achieved by pressing the back button.
	 * @type {string}
	 * @public
	 * @constant
	 * @name jQuery.sap.history.NavType.Back
	 */
	$.sap.history.NavType.Back = "_back";
	
	/**
	 * This indicates that the new hash is achieved by pressing the forward button.
	 * @type {string}
	 * @public
	 * @constant
	 * @name jQuery.sap.history.NavType.Forward
	 */
	$.sap.history.NavType.Forward = "_forward";
	
	/**
	 * This indicates that the new hash is restored from the bookmark.
	 * @type {string}
	 * @public
	 * @constant
	 * @name jQuery.sap.history.NavType.Bookmark
	 */
	$.sap.history.NavType.Bookmark = "_bookmark";
	
	/**
	 * This indicates that the new hash is achieved by some unknown direction.
	 * This happens when the user navigates out of the application and then click on the forward button
	 * in the browser to navigate back to the application.
	 * @type {string}
	 * @public
	 * @constant
	 * @name jQuery.sap.history.NavType.Unknown
	 */
	$.sap.history.NavType.Unknown = "_unknown";
	
	/**
	 * This function calculates the number of steps from the sCurrentHash to sToHash. If the sCurrentHash or the sToHash is not in the history stack, it returns 0.
	 * 
	 * @private
	 */
	function calculateStepsToHash(sCurrentHash, sToHash, bPrefix){
		var iCurrentIndex = $.inArray(sCurrentHash, hashHistory),
			iToIndex,
			i,
			tempHash;
		if(iCurrentIndex > 0){
			if(bPrefix){
				for(i = iCurrentIndex - 1; i >= 0 ; i--){
					tempHash = hashHistory[i];
					if(tempHash.indexOf(sToHash) === 0 && !isVirtualHash(tempHash)){
						return i - iCurrentIndex;
					}
				}
			}else{
				iToIndex = $.inArray(sToHash, hashHistory);
				
				//When back to home is needed, and application is started with nonempty hash but it's nonbookmarkable
				if((iToIndex === -1) && sToHash.length === 0){
					return -1 * iCurrentIndex;
				}
				
				if((iToIndex > -1) && (iToIndex < iCurrentIndex)){
					return iToIndex - iCurrentIndex;
				}
			}
		}
		
		return 0;
	}
	
	
	
	/**
	 * This function is bound to the window's hashchange event, and it detects the change of the hash.
	 * When history is added by calling the addHistory or addVirtualHistory function, it will not call the real onHashChange function
	 * because changes are already done. Only when a hash is navigated by clicking the back or forward buttons in the browser,
	 * the onHashChange will be called.
	 * 
	 * @private
	 */
	function detectHashChange(oEvent, bManual){
		//Firefox will decode the hash when it's set to the window.location.hash,
		//so we need to parse the href instead of reading the window.location.hash
		var sHash = (window.location.href.split("#")[1] || "");
		sHash = formatHash(sHash);
		
		if(bManual || !mSkipHandler[sHash]){
			aHashChangeBuffer.push(sHash);
		}
		
		if(!bInProcessing){
			bInProcessing = true;
			if(aHashChangeBuffer.length > 0){
				var newHash = aHashChangeBuffer.shift();
			
				if(mSkipHandler[newHash]){
					reorganizeHistoryArray(newHash);
					delete mSkipHandler[newHash];
				}else{
					onHashChange(newHash);
				}
				currentHash = newHash;
			}
			bInProcessing = false;
		}
	}
	
	
	function parseHashFromUrl(sUrl){
		var iSharpIndex = sUrl.indexOf("#");
		if(iSharpIndex === -1){
			return "";
		}else if(iSharpIndex > 0 && iSharpIndex !== sUrl.length - 1){
			return sUrl.slice(iSharpIndex + 1);
		}
	}

	/**
	 * This function removes the leading # sign if there's any. If the bRemoveId is set to true, it will also remove the unique
	 * id inside the hash.
	 * 
	 * @private
	 */
	function formatHash(hash, bRemoveId){
		var sRes = hash, iSharpIndex = hash ? hash.indexOf("#") : -1,
			iSepIndex, iSuffixIndex;
		
		if(iSharpIndex === 0){
			sRes = sRes.slice(iSharpIndex+1);
		}
		
		if(bRemoveId){
			sRes = sRes.replace(rIdRegex, "");
		}
		
		return sRes;
	}
	
	/**
	 * This function returns a hash with suffix added to the end based on the sHash parameter. It handles as well when the current
	 * hash is already with suffix. It returns a new suffix with an unique number in the end.
	 * 
	 * @private
	 */
	function getNextSuffix(sHash){
		var sPath = sHash ? sHash : "";
		
		if(isVirtualHash(sPath)){
			var iIndex = sPath.lastIndexOf(skipSuffix);
			sPath = sPath.slice(0, iIndex);
		}
		
		return sPath + skipSuffix + skipIndex++;
	}
	
	/**
	 * This function encode the identifier and data into a string.
	 * 
	 * @private
	 */
	function preGenHash(sIdf, oStateData){
		var sEncodedIdf = window.encodeURIComponent(sIdf);
		var sEncodedData = window.encodeURIComponent(window.JSON.stringify(oStateData));
		return sEncodedIdf + sIdSeperator + sEncodedData;
	}
	
	/**
	 * This function checks if the combination of the identifier and data is unique in the current history stack.
	 * If yes, it returns an empty string. Otherwise it returns an unique id.
	 * 
	 * @private
	 */
	function getAppendId(sHash){
		var iIndex = $.inArray(currentHash, hashHistory),
			aTemp, i, sHistory;
		if(iIndex > -1){
			for(i = 0 ; i < iIndex + 1 ; i++){
				sHistory = hashHistory[i];
				if(sHistory.slice(0, sHistory.length-2) === sHash){
					return jQuery.sap.uid();
				}
			}
		}
		
		return "";
	}
	
	/**
	 * This function manages the internal array of history records.
	 * 
	 * @private 
	 */
	function reorganizeHistoryArray(sHash){
		var iIndex = $.inArray(currentHash, hashHistory);
			
		if( !(iIndex === -1 || iIndex === hashHistory.length - 1) ){
			hashHistory.splice(iIndex + 1, hashHistory.length - 1 - iIndex);
		}
		hashHistory.push(sHash);
	}

	/**
	 * This method judges if a hash is a virtual hash that needs to be skipped.
	 * 
	 * @private
	 */
	function isVirtualHash(sHash){
		return skipRegex.test(sHash);
	}
	
	/**
	 * This function calculates the steps forward or backward that need to skip the virtual history states.  
	 * 
	 * @private
	 */
	function calcStepsToRealHistory(sCurrentHash, bForward){
		var iIndex = $.inArray(sCurrentHash, hashHistory),
			i;
		
		if(iIndex !== -1){
			if(bForward){
				for(i = iIndex ; i < hashHistory.length ; i++){
					if(!isVirtualHash(hashHistory[i])){
						return i - iIndex;
					}
				}
			}else{
				for(i = iIndex ; i >= 0 ; i--){
					if(!isVirtualHash(hashHistory[i])){
						return i - iIndex;
					}
				}
				return -1*(iIndex + 1);
			}
		}
	}
	
	
	/**
	 * This is the main function that handles the hash change event.
	 * 
	 * @private
	 */
	function onHashChange(sHash){
		var oRoute, iStep, i, sPath = sHash, sPureHash, oParsedHash, iNewHashIndex, sNavType;
		
		//handle the nonbookmarkable hash
		if(currentHash === undefined){
			//url with hash opened from bookmark
			oParsedHash = parseHashToObject(sHash);
			
			if(!oParsedHash || !oParsedHash.bBookmarkable){
				if(jQuery.isFunction(defaultHandler)){
					defaultHandler($.sap.history.NavType.Bookmark);
				}
				return;
			}
		}
		
		if(sHash.length === 0){
			if(jQuery.isFunction(defaultHandler)){
				defaultHandler($.sap.history.NavType.Back);
			}
		}else{
			//application restored from bookmark with non-empty hash, and later navigates back to the first hash token
			//the defaultHandler should be triggered
			iNewHashIndex = jQuery.inArray(sHash, hashHistory);
			if(iNewHashIndex === 0){
				oParsedHash = parseHashToObject(sHash);
				if(!oParsedHash || !oParsedHash.bBookmarkable){
					if(jQuery.isFunction(defaultHandler)){
						defaultHandler($.sap.history.NavType.Back);
					}
					return;
				}
			}
			
			//need to handle when iNewHashIndex equals -1.
			//This happens when user navigates out the current application, and later navigates back.
			//In this case, the hashHistory is an empty array.
			
			
			if(isVirtualHash(sHash)){
				//this is a virtual history, should do the skipping calculation
				if(isVirtualHash(currentHash)){
					//go back to the first one that is not virtual
					iStep = calcStepsToRealHistory(sHash, false);
					window.history.go(iStep);
				}else{
					var sameFamilyRegex = new RegExp(jQuery.sap.escapeRegExp(currentHash + skipSuffix) + "[0-9]*$");
					if(sameFamilyRegex.test(sHash)){
						//going forward
						//search forward in history for the first non-virtual hash
						//if there is, change to that one window.history.go
						//if not, stay and return false
						iStep = calcStepsToRealHistory(sHash, true);
						if(iStep){
							window.history.go(iStep);
						}else{
							window.history.back();
						}
						
					}else{
						//going backward
						//search backward for the first non-virtual hash and there must be one
						iStep = calcStepsToRealHistory(sHash, false);
						window.history.go(iStep);
					}
				}
			}else{
				if(iNewHashIndex === -1){
					sNavType = $.sap.history.NavType.Unknown;
					hashHistory.push(sHash);
				}else{
					if(jQuery.inArray(currentHash, hashHistory, iNewHashIndex+1) === -1){
						sNavType = $.sap.history.NavType.Forward;
					}else{
						sNavType = $.sap.history.NavType.Back;
					}
				}
				
				
				oParsedHash = parseHashToObject(sHash);
				if(oParsedHash){
					oRoute = findRouteByIdentifier(oParsedHash.sIdentifier);
					
					if(oRoute){
						oRoute.action.apply(null, [oParsedHash.oStateData, sNavType]);
					}
				}else{
					jQuery.sap.log.error("hash format error! The current Hash: " + sHash);
				}
				
			}
		}
	}

	/**
	 * This function returns the route object matched by the identifier passed as parameter.
	 * @private
	 */
	function findRouteByIdentifier(sIdf){
		var i;
		for(i = 0 ; i < routes.length ; i++){
			if(routes[i].sIdentifier === sIdf){
				return routes[i];
			}
		}
	}

	/**
	 * This function parses the hash from the url to a concrete project in the format:
	 * {
	 * 		sIdentifier: string,
	 * 		oStateData: object,
	 * 		uid: string (optional),
	 * 		bBookmarkable: boolean
	 * 		
	 * }
	 * @private
	 */
	function parseHashToObject(sHash){
		if(isVirtualHash(sHash)){
			var i = sHash.lastIndexOf(skipSuffix);
			sHash = sHash.slice(0, i);
		}
		
		
		var aParts = sHash.split(sIdSeperator), oReturn = {};
		if(aParts.length === 4 || aParts.length === 3){
			oReturn.sIdentifier = window.decodeURIComponent(aParts[0]);
			oReturn.oStateData = window.JSON.parse(window.decodeURIComponent(aParts[1]));
			if(aParts.length === 4){
				oReturn.uid = aParts[2];
			}
			
			oReturn.bBookmarkable = aParts[aParts.length-1] === "0" ? false : true;
			
			return oReturn;
		}else{
			//here can be empty hash only with a skipable suffix
			return null;
		}
	}
	
})(jQuery, this);
}; // end of jquery.sap.history.js
if ( !jQuery.sap.isDeclared('jquery.sap.mobile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

//Provides common helper functions for the mobile version of UI5 
jQuery.sap.declare("jquery.sap.mobile", false);




(function($) {
	var FAKE_OS_PATTERN = /(?:\?|&)sap-ui-xx-fakeOS=([^&]+)/,
		mFakeFonts = undefined;

	$.sap.simulateMobileOnDesktop = false;

	// OS overriding mechanism
	if ((jQuery.browser.webkit || (jQuery.browser.msie && parseInt(jQuery.browser.version, 10) >= 10)) && !jQuery.support.touch) { // on non-touch webkit browsers and IE10 we are interested in overriding

		var result = document.location.search.match(FAKE_OS_PATTERN);
		var resultUA = result && result[1] || jQuery.sap.byId("sap-ui-bootstrap").attr("data-sap-ui-xx-fakeOS");

		if (resultUA) {

			$.sap.simulateMobileOnDesktop = true;

			var ua = { // for "ios"/"android"/"blackberry" we have defined fake user-agents; these will affect all other browser/platform detection mechanisms
					ios: "Mozilla/5.0 (iPhone; CPU iPhone OS 5_0_1 like Mac OS X) AppleWebKit/534.48 (KHTML, like Gecko) Version/5.1 Mobile/9A406 Safari/7534.48.3",
					iphone: "Mozilla/5.0 (iPhone; CPU iPhone OS 5_0_1 like Mac OS X) AppleWebKit/534.48 (KHTML, like Gecko) Version/5.1 Mobile/9A406 Safari/7534.48.3",
					ipad: "Mozilla/5.0 (iPad; CPU OS 5_1_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/9B206",
					android: "Mozilla/5.0 (Linux; U; Android 4.0.3; en-us; GT-I9100 Build/IML74K) AppleWebKit/534.46 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.46",
					android_phone: "Mozilla/5.0 (Linux; U; Android 4.0.3; en-us; GT-I9100 Build/IML74K) AppleWebKit/534.46 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.46",
					android_tablet: "Mozilla/5.0 (Linux; Android 4.1.2; Nexus 7 Build/JZ054K) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19",
					blackberry: "Mozilla/5.0 (BB10; Touch) AppleWebKit/537.10+ (KHTML, like Gecko) Version/10.0.9.2372 Mobile Safari/537.10+",
					winphone: "Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 920)"
			}[resultUA];

			if (ua &&
					(jQuery.browser.webkit && resultUA !== "winphone" || jQuery.browser.msie && resultUA === "winphone")) { // only for the working combinations

				mFakeFonts = {
					ios: "'Helvetica Neue'",
					android: "Roboto,'Droid Sans'",
					blackberry: "'BBGlobal Sans','DejaVu Sans'",
					winphone: "'Segoe WP', 'Segoe UI'"
				};

				// code for modifying the real user-agent
				if (jQuery.browser.safari) {
					var __originalNavigator = window.navigator;
					window.navigator = new Object();
					window.navigator.__proto__ = __originalNavigator;
					window.navigator.__defineGetter__('userAgent', function(){ return ua; });
				} else { // Chrome, IE10
					Object.defineProperty(navigator, "userAgent", {
						get: function() {
							return ua;
						}
					});
				}

				if (jQuery.browser.webkit) {

					// all downstream checks will be fine with the faked user-agent.
					// But now we also need to adjust the wrong upstream settings in jQuery:
					jQuery.browser.msie = jQuery.browser.opera = jQuery.browser.mozilla = false;
					jQuery.browser.webkit = true;
					jQuery.browser.version = "534.46"; // this is not exactly true for all UAs, but there are much bigger shortcomings of this approach than a minor version of the browser, so giving the exact value is not worth the effort
				} else {

					// in IE10 with winphone emulation, jQuery.browser has already the correct information
				}

				sap.ui.Device._update($.sap.simulateMobileOnDesktop);
			}
		}
	}

	// OS detection
	function getOS(userAgent) {
		userAgent = userAgent || navigator.userAgent;
		var platform = /\(([a-zA-Z ]+);\s(?:[U]?[;]?)([\D]+)((?:[\d._]*))(?:.*[\)][^\d]*)([\d.]*)\s/,
			result = userAgent.match(platform);

		if (result) {
			var appleDevices = /iPhone|iPad|iPod/;
			var bbDevices = /PlayBook|BlackBerry/;

			if (result[0].match(appleDevices)) {
				result[3] = result[3].replace(/_/g, ".");
				//result[1] contains info of devices
				return({os:"ios", version:result[3]});
			} else if (result[2].match(/Android/)) {
				result[2] = result[2].replace(/\s/g, "");
				return({os:"android", version:result[3]});
			} else if (result[0].match(bbDevices)) {
				return({os:"blackberry", version:result[4]});
			} else {

				// currently we only support iOS, Android, BlackBerry 10.0+ , everything else will be ignored, if more platforms should be supported, logic can be placed here
				return;
			}

		} else if (userAgent.indexOf("(BB10;") > 0) {

			// BlackBery 10 has a different structure...
			platform = /\sVersion\/([\d.]+)\s/;
			result = userAgent.match(platform);
			if (result){
				return {os: "blackberry", version:result[1]};
			} else {
				return {os: "blackberry", version:10};
			}

		} else {

			// Windows phone has a different structure, so we need to check with another regExp.
			platform = /Windows Phone (?:OS )?([\d.]*)/;
			result = userAgent.match(platform);
			if (result){
				return {os: "winphone", version:result[1]};
			} else {
				return;
			}
		}
	}

	var os = getOS() || {},
		oHtml = window.document.documentElement,
		iDocumentWidth = 0,
		iDocumentHeight = 0;

	//save the window size values when viewport meta tag is inserted
	function saveWindowSize(){
		iDocumentWidth = oHtml.clientWidth;
		iDocumentHeight = oHtml.clientHeight;
	}

	if (os.os) {
		var f = parseFloat(os.version);

		/**
		 * Holds information about the current operating system
		 * 
		 * @name jQuery.os
		 * @namespace
		 * @public
		 */
		$.os = $.extend(/** @lends jQuery.os */ {

			/**
			 * The name of the operating system; currently supported are: "ios", "android", "blackberry"
			 * @type {string}
			 * @public
			 */
			os: os.os,

			/**
			 * The version of the operating system as a string (including minor versions)
			 * @type {string}
			 * @public
			 */
			version: os.version,

			/**
			 * The version of the operating system parsed as a float (major and first minor version)
			 * @type {float}
			 * @public
			 */
			fVersion: f
		}, $.os);

		$.os[os.os] = true;

		/**
		 * Whether the current operating system is Android
		 * @type {boolean}
		 * @public
		 * @name jQuery.os.android
		 */

		/**
		 * Whether the current operating system is BlackBerry
		 * @type {boolean}
		 * @public
		 * @name jQuery.os.blackberry
		 */

		/**
		 * Whether the current operating system is Apple iOS
		 * @type {boolean}
		 * @public
		 * @name jQuery.os.ios
		 */
	} else {
		if (!$.os) $.os = {};
	}

	// if fakeOS is set, the first installed font of the list of fonts for the various platforms will win, but we should only use appropriate ones for the simulated platform
	if (mFakeFonts) { // this is only defined if we are in a valid fakeOS situation
		//var sFont = mFakeFonts[$.os.os];
		// this is only relevant for demo purposes in MVI theme. Disabling it for the moment.   $("head").append("<style>.sapUiBody{font-family:" + sFont + ",Helvetica,Arial !important;</style>");
	}

	// feature and state detection
	$.extend( $.support, {

		/**
		 * Whether the device has a retina display (window.devicePixelRatio >= 2)
		 * @type {boolean}
		 * @public
		 */
		retina: window.devicePixelRatio >= 2
	});

	var sAvoidRepeatTimer = null;

	function isLandscape() {

		if (jQuery.support.touch) {
			if(sAvoidRepeatTimer) {
				return $.device.is.landscape;
			}

			sAvoidRepeatTimer = window.setTimeout(function(){
				sAvoidRepeatTimer = null;
			}, 50);
		}

		var iWidth = oHtml.clientWidth,
			iHeight = oHtml.clientHeight,
			bKeyboardOpen = false;

		if ($.support.touch) {

			//if runs in real device, landscape/portrait detection is skipped when keyboard opens
			//when keyboard opens, only height changes.
			//we can't simply compare the width and height on window because when keyboard is open in android, it makes the window smaller which can turn a device from portrait to landscape, for example in Nexus 7
			//because the height may get smaller than the width when keyboard opens.
			if((iWidth === iDocumentWidth) && (iHeight !== iDocumentHeight)){
				bKeyboardOpen = true;
			}

			//return window.orientation === undefined || window.orientation === 90 || window.orientation === -90;
		}
		
		iDocumentWidth = iWidth;
		iDocumentHeight = iHeight;

		//if keyboard opens, landscape value doesn't change. otherwise, compare width with height.
		return bKeyboardOpen ? $.device.is.landscape : iWidth > iHeight;
	}

	var landscape = oHtml.clientWidth > oHtml.clientHeight;
	var android_phone = (/(?=android)(?=.*mobile)/i.test(navigator.userAgent));

	/**
	 * @name jQuery.device
	 * @namespace
	 * @public
	 */
	$.device = $.extend({}, $.device);

	/**
	 * Holds information about the current device and its state
	 * 
	 * @name jQuery.device.is
	 * @namespace
	 * @public
	 */
	$.device.is = $.extend( /** @lends jQuery.device.is */ {

		/**
		 * Whether the application runs in standalone mode without browser UI (launched from the iOS home screen)
		 * @type {boolean}
		 * @public
		 */
		standalone: window.navigator.standalone,

		/**
		 * Whether the device is in "landscape" orientation (also "true" when the device does not know about the orientation)
		 * @type {boolean}
		 * @public
		 */
		landscape: landscape,

		/**
		 * Whether the device is in portrait orientation
		 * @type {boolean}
		 * @public
		 */
		portrait: !landscape,

		/**
		 * Whether the application runs on an iPhone
		 * @type {boolean}
		 * @public
		 */
		iphone: /iphone/i.test(navigator.userAgent),

		/**
		 * Whether the application runs on an iPad
		 * @type {boolean}
		 * @public
		 */
		ipad: /ipad/i.test(navigator.userAgent),

		/**
		 * Whether the application runs on an Android phone - based not on screen size but user-agent (so this is not guaranteed to be equal to jQuery.device.is.phone on Android)
		 * https://developers.google.com/chrome/mobile/docs/user-agent
		 * Some device vendors however do not follow this rule
		 * @deprecated since 1.17.0: use sap.ui.Device.system.phone &amp;&amp; sap.ui.Device.os.android  instead
		 * @type {boolean}
		 * @public
		 */
		android_phone: android_phone,

		/**
		 * Whether the application runs on an Android tablet - based not on screen size but user-agent (so this is not guaranteed to be equal to jQuery.device.is.tablet on Android)
		 * https://developers.google.com/chrome/mobile/docs/user-agent
		 * Some device vendors however do not follow this rule
		 * @type {boolean}
		 * @deprecated since 1.17.0: use sap.ui.Device.system.tablet &amp;&amp; sap.ui.Device.os.android  instead
		 * @public
		 */
		android_tablet: (!!$.os.android && !android_phone),

		/**
		 * Whether the running device is a tablet.
		 * If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-fakeOS or sap-ui-xx-test-mobile), 
		 * this property will also be set according to the simulated platform.
		 * This property will be false when runs in desktop browser.
		 * @type {boolean}
		 * @deprecated since 1.17.0: use sap.ui.Device.system.tablet instead
		 * @public
		 */
		tablet: sap.ui.Device.system.tablet,

		/**
		 * Whether the running device is a phone.
		 * If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-fakeOS or sap-ui-xx-test-mobile), 
		 * this property will also be set according to the simulated platform.
		 * This property will be false when runs in desktop browser.
		 * @type {boolean}
		 * @deprecated since 1.17.0: use sap.ui.Device.system.phone instead
		 * @public
		 */
		phone: sap.ui.Device.system.phone,

		/**
		 * Whether the running device is a desktop browser.
		 * If a desktop browser runs in mobile device simulation mode (with URL parameter sap-ui-xx-fakeOS or sap-ui-xx-test-mobile), 
		 * this property will be false.
		 * @type {boolean}
		 * @deprecated since 1.17.0: use sap.ui.Device.system.desktop instead
		 * @public
		 */
		desktop: sap.ui.Device.system.desktop
	},$.device.is);

	$(window).bind("resize", function(){
		var landscape = isLandscape(); 
		$.device.is.landscape = landscape;
		$.device.is.portrait = !landscape;
	});

	var _bInitMobileTriggered = false;

	/**
	 * Does some basic modifications to the HTML page that make it more suitable for mobile apps.
	 * Only the first call to this method is executed, subsequent calls are ignored. Note that this method is also called by the constructor of toplevel controls like sap.m.App, sap.m.SplitApp and sap.m.Shell.
	 * Exception: if no homeIcon was set, subsequent calls have the chance to set it.
	 *
	 * The "options" parameter configures what exactly should be done.
	 *
	 * It can have the following properties:
	 * <ul>
	 * <li>viewport: whether to set the viewport in a way that disables zooming (default: true)</li>
	 * <li>statusBar: the iOS status bar color, "default", "black" or "black-translucent" (default: "default")</li>
	 * <li>hideBrowser: whether the browser UI should be hidden as far as possible to make the app feel more native (default: true)</li>
	 * <li>preventScroll: whether native scrolling should be disabled in order to prevent the "rubber-band" effect where the whole window is moved (default: true)</li>
	 * <li>preventPhoneNumberDetection: whether Safari Mobile should be prevented from transforming any numbers that look like phone numbers into clickable links; this should be left as "true", otherwise it might break controls because Safari actually changes the DOM. This only affects all page content which is created after initMobile is called.</li>
	 * <li>rootId: the ID of the root element that should be made fullscreen; only used when hideBrowser is set (default: the document.body)</li>
	 * <li>useFullScreenHeight: a boolean that defines whether the height of the html root element should be set to 100%, which is required for other elements to cover the full height (default: true)</li>
	 * <li>homeIcon: deprecated since 1.12, use jQuery.sap.setIcons instead.
	 * </ul>
	 *
	 * @param {object}  [options] configures what exactly should be done
	 * @param {boolean} [options.viewport=true] whether to set the viewport in a way that disables zooming
	 * @param {string}  [options.statusBar='default'] the iOS status bar color, "default", "black" or "black-translucent"
	 * @param {boolean} [options.hideBrowser=true] whether the browser UI should be hidden as far as possible to make the app feel more native
	 * @param {boolean} [options.preventScroll=true] whether native scrolling should be disabled in order to prevent the "rubber-band" effect where the whole window is moved
	 * @param {boolean} [options.preventPhoneNumberDetection=true] whether Safari mobile should be prevented from transforming any numbers that look like phone numbers into clickable links
	 * @param {string}  [options.rootId] the ID of the root element that should be made fullscreen; only used when hideBrowser is set. If not set, the body is used
	 * @param {boolean} [options.useFullScreenHeight=true] whether the height of the html root element should be set to 100%, which is required for other elements to cover the full height
	 * @param {string}  [options.homeIcon=undefined] deprecated since 1.12, use jQuery.sap.setIcons instead.
	 * @param {boolean} [options.homeIconPrecomposed=false] deprecated since 1.12, use jQuery.sap.setIcons instead.
	 *
	 * @name jQuery.sap.initMobile
	 * @function
	 * @public
	 */
	$.sap.initMobile = function(options) {
		var $head = $("head");

		if (!_bInitMobileTriggered) { // only one initialization per HTML page
			_bInitMobileTriggered = true;

			options = $.extend({}, { // merge in the default values
				viewport: true,
				statusBar: "default",
				hideBrowser: true,
				preventScroll: true,
				preventPhoneNumberDetection: true,
				useFullScreenHeight: true,
				homeIconPrecomposed: false
			}, options);

			// en-/disable automatic link generation for phone numbers
			if ($.os.ios && options.preventPhoneNumberDetection) {
				$head.append($('<meta name="format-detection" content="telephone=no">')); // this only works for all DOM created afterwards
			} else if ($.browser.msie) {
				$head.append($('<meta http-equiv="cleartype" content="on">'));
				$head.append($('<meta name="msapplication-tap-highlight" content="no"/>'));
			}

			var bIsIOS7Safari = sap.ui.Device.os.ios && sap.ui.Device.os.version >= 7 && sap.ui.Device.os.version < 8 && sap.ui.Device.browser.name === "sf";
			// initialize viewport
			if (options.viewport) {
				var sMeta;
				if (bIsIOS7Safari && sap.ui.Device.system.phone) {
					//if the softkeyboard is open in orientation change, we have to do this to solve the zoom bug on the phone -
					//the phone zooms into the view although it shouldn't so these two lines will zoom out again see orientation change below
					//the important part seems to be setting the device height.
					sMeta = 'minimal-ui, initial-scale=1.0, maximum-scale=1.0, user-scalable=0';
				} else if ($.device.is.iphone && (Math.max(window.screen.height, window.screen.width) === 568)) {
					// iPhone 5
					sMeta = "user-scalable=0, initial-scale=1.0";
				} else if ($.os.android && $.os.fVersion < 3){
					sMeta = "width=device-width, height=device-height, initial-scale=1.0, maximum-scale=1.0, user-scalable=no";
				} else if ($.os.winphone){
					sMeta = "width=320, user-scalable=no";
				} else {

					// all other devices
					sMeta = "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no";
				}
				$head.append($('<meta name="viewport" content="' + sMeta + '">'));
			}

			if ($.os.ios) {

				// enable fullscreen when possible
				$head.append($('<meta name="apple-mobile-web-app-capable" content="yes">')); // since iOS 2.1

				// set the status bar style on Apple devices
				$head.append($('<meta name="apple-mobile-web-app-status-bar-style" content="' + options.statusBar + '">')); // "default" or "black" or "black-translucent", since iOS 2.1

				// splash screen
				//<link rel="apple-touch-startup-image" href="/startup.png">
			}

			if (options.preventScroll) {
				$(window).bind("touchmove", function sapInitMobileTouchMoveHandle(oEvent) {
					if (!oEvent.isMarked()) {
						oEvent.preventDefault(); // prevent the rubber-band effect
					}
				});
			}

			if (options.useFullScreenHeight) {
				$(function() {
					document.documentElement.style.height = "100%"; // set html root tag to 100% height
				});
			}

			//save the size of window object for detecting if keyboard is open on non-ios devices.
			saveWindowSize();
		}

		if (options.homeIcon) {

			var oIcons;

			if (typeof options.homeIcon === "string") {
				oIcons = { phone: options.homeIcon };
			} else {
				oIcons = $.extend({}, options.homeIcon);
			}

			oIcons.precomposed = options.homeIconPrecomposed || oIcons.precomposed;
			oIcons.favicon = options.homeIcon.icon || oIcons.favicon;
			oIcons.icon = undefined;
			$.sap.setIcons(oIcons);
		}
	};

	

	

	/**
	 * Sets the bookmark icon for desktop browsers and the icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
	 *
	 * Only call this method once and call it early when the page is loading: browsers behave differently when the favicon is modified while the page is alive.
	 * Some update the displayed icon inside the browser but use an old icon for bookmarks.
	 * When a favicon is given, any other existing favicon in the document will be removed.
	 * When at least one home icon is given, all existing home icons will be removed and new home icon tags for all four resolutions will be created.
	 *
	 * The home icons must be in PNG format and given in different sizes for iPad/iPhone with and without retina display.
	 * The favicon is used in the browser and for desktop shortcuts and should optimally be in ICO format:
	 * PNG does not seem to be supported by Internet Explorer and ICO files can contain different image sizes for different usage locations. E.g. a 16x16px version
	 * is used inside browsers.
	 *
	 * All icons are given in an an object holding icon URLs and other settings. The properties of this object are:
	 * <ul>
	 * <li>phone: a 57x57 pixel version for non-retina iPhones</li>
	 * <li>tablet: a 72x72 pixel version for non-retina iPads</li>
	 * <li>phone@2: a 114x114 pixel version for retina iPhones</li>
	 * <li>tablet@2: a 144x144 pixel version for retina iPads</li>
	 * <li>precomposed: whether the home icons already have some glare effect (otherwise iOS will add it) (default: false)</li>
	 * <li>favicon: the ICO file to be used inside the browser and for desktop shortcuts</li>
	 * </ul>
	 *
	 * One example is:
	 * <pre>
	 * {
	 *    'phone':'phone-icon_57x57.png',
	 *    'phone@2':'phone-retina_117x117.png',
	 *    'tablet':'tablet-icon_72x72.png',
	 *    'tablet@2':'tablet-retina_144x144.png',
	 *    'precomposed':true,
	 *    'favicon':'desktop.ico'
	 * }
	 * </pre>
	 * If one of the sizes is not given, the largest available alternative image will be used instead for this size.
	 * On Android these icons may or may not be used by the device. Apparently chances can be improved by using icons with glare effect, so the "precomposed" property can be set to "true". Some Android devices may also use the favicon for bookmarks instead of the home icons.</li>
	 * 
	 * @name jQuery.sap.setIcons
	 * @function
	 * @public
	 */
	$.sap.setIcons = function(oIcons) {

		if (!oIcons || (typeof oIcons !== "object")) {
			$.sap.log.warning("Call to jQuery.sap.setIcons() has been ignored because there were no icons given or the argument was not an object.");
			return;
		}

		var $head = $("head"),
			precomposed = oIcons.precomposed ? "-precomposed" : "",
			getBestFallback = function(res) {
				return oIcons[res] || oIcons['tablet@2'] || oIcons['phone@2'] || oIcons['phone'] || oIcons['tablet']; // fallback logic
			},
			mSizes = {
				"phone": "",
				"tablet": "72x72",
				"phone@2": "114x114",
				"tablet@2": "144x144"
			};

		// desktop icon
		if (oIcons["favicon"]) {

			// remove any other favicons
			var $fav = $head.find("[rel^=shortcut]"); // cannot search for "shortcut icon"

			$fav.each(function(){
				if (this.rel === "shortcut icon") {
					$(this).remove();
				}
			});

			// create favicon
			$head.append($('<link rel="shortcut icon" href="' + oIcons["favicon"] + '" />'));
		}

		// mobile home screen icons
		if (getBestFallback("phone")) {

			// if any home icon is given remove old ones
			$head.find("[rel=apple-touch-icon]").remove();
			$head.find("[rel=apple-touch-icon-precomposed]").remove();
		}

		for (var platform in mSizes) {
			oIcons[platform] = oIcons[platform] || getBestFallback(platform);
			if (oIcons[platform]) {
				var size = mSizes[platform];
				$head.append($('<link rel="apple-touch-icon' + precomposed + '" ' + (size ? 'sizes="' + size + '"' : "") + ' href="' + oIcons[platform] + '" />'));
			}
		}
	};

})(jQuery);

}; // end of jquery.sap.mobile.js
if ( !jQuery.sap.isDeclared('jquery.sap.properties') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides access to Java-like properties files
jQuery.sap.declare("jquery.sap.properties", false);


(function() {

	// Javadoc for private inner class "Properties" - this list of comments is intentional!
	/**
	 * @interface  Represents a list of properties (key/value pairs).
	 *
	 * Each key and its corresponding value in the property list is a string.
	 * Values are unicode escaped \ue0012.
	 * Keys are case-sensitive and only alpha-numeric characters with a leading character are allowed.
	 *
	 * Use {@link jQuery.sap.properties} to create an instance of jQuery.sap.util.Properties.
	 *
	 * The getProperty method is used to retrieve a value from the list.
	 * The setProperty method is used to store or change a property in the list.
	 * Additionally, the getKeys method can be used to retrieve an array of all keys that are
	 * currently in the list.
	 *
	 * @author SAP AG
	 * @version 1.18.9
	 * @since 0.9.0
	 * @name jQuery.sap.util.Properties
	 * @public
	 */
	/**
	 * Returns the value of a given key. Optionally, a given default value is returned if the requested key is not in the list.
	 * @param {string} sKey The key of the property
	 * @param {string} [sDefaultValue] Optional, the default value if the requested key is not in the list.
	 * @return {string} The value of a given key. The default value (if given) is returned if the requested key is not in the list.
	 *
	 * @function
	 * @name jQuery.sap.util.Properties.prototype.getProperty
	 */
	/**
	 * Returns an array of all keys in the property list.
	 * @return {array} All keys in the property list.
	 *
	 * @function
	 * @name jQuery.sap.util.Properties.prototype.getKeys
	 */
	/**
	 * Adds or changes a given key to/in the list.
	 * @param {string} sKey The key of the property
	 * @param {string} sValue The value for the key with unicode encoding.
	 *
	 * @function
	 * @name jQuery.sap.util.Properties.prototype.setProperty
	 */
	/**
	 * Creates and returns a clone of the property list.
	 * @return {jQuery.sap.util.Properties} A clone of the property list
	 *
	 * @function
	 * @name jQuery.sap.util.Properties.prototype.clone
	 */

	/*
	 * Implements jQuery.sap.util.Properties
	 */
	var Properties = function() {
		this.mProperties = {};
		this.aKeys = [];
	};

	/*
	 * Implements jQuery.sap.util.Properties.prototype.getProperty
	 */
	Properties.prototype.getProperty = function(sKey, sDefaultValue) {
		var sValue = this.mProperties[sKey];
		if (typeof(sValue)=="string") {
			return sValue;
		}
		else if(sDefaultValue) {
			return sDefaultValue;
		}
		return null;
	};

	/*
	 * Implements jQuery.sap.util.Properties.prototype.getKeys
	 */
	Properties.prototype.getKeys = function() {
		return this.aKeys;
	};

	/*
	 * Implements jQuery.sap.util.Properties.prototype.setProperty
	 */
	Properties.prototype.setProperty = function(sKey, sValue) {
		if (typeof(sValue) != "string") {
			return;
		}		
		if (typeof(this.mProperties[sKey])!="string") {
			this.aKeys.push(sKey);
		}
		this.mProperties[sKey] = sValue;
	};

	/*
	 * Implements jQuery.sap.util.Properties.prototype.clone
	 */
	Properties.prototype.clone = function() {
		var oClone = new Properties();
		oClone.mProperties = jQuery.extend({}, this.mProperties);
		oClone.aKeys = jQuery.merge([], this.aKeys);
		return oClone;
	};

	/*
	 * Saves the property list to a given URL using a POST request.
	 */
	//sap.ui.resource.Properties.prototype.save = function(sUrl) {
	//	return jQuery.sap.syncPost(sUrl, this.mProperties);
	//};

	/**
	 * RegExp used to split file into lines, also removes leading whitespace.
	 * Note: group must be non-capturing, otherwise the line feeds will be part of the split result.
	 */
	var rLines = /(?:^|\r\n|\r|\n)[ \t\f]*/;

	/**
	 * RegExp that handles escapes, continuation line markers and key/value separators
	 * 
	 *              [---unicode escape--] [esc] [cnt] [---key/value separator---]
	 */
	var rEscapes = /(\\u[0-9a-fA-F]{0,4})|(\\.)|(\\$)|([ \t\f]*[ \t\f:=][ \t\f]*)/g;
	
	/**
	 * Special escape characters as supported by properties format
	 * @see JDK API doc for java.util.Properties
	 */
	var mEscapes = {
		'\\f' : '\f',
		'\\n' : '\n',
		'\\r' : '\r',
		'\\t' : '\t'
	};

	/*
	 * Parses the given text sText and sets the properties
	 * in the properties object oProp accordingly.
	 * @param {string} sText the text to parse
	 * @param oProp the properties object to fill
	 * @private
	 */
	function parse(sText, oProp) {
		
		var aLines = sText.split(rLines), // split file into lines
			sLine,sKey,sValue,bKey,i,m,iLastIndex;
		
		oProp.mProperties = {};
		oProp.aKeys = [];

		for (i=0; i<aLines.length; i++) {
			sLine = aLines[i];
			// ignore empty lines
			if (sLine === "" || sLine.charAt(0) === "#" || sLine.charAt(0) === "!" ) {
				continue;
			}

			rEscapes.lastIndex = iLastIndex = 0;
			sValue = ""; 
			bKey = true;

			while ( m = rEscapes.exec(sLine) ) {
				// handle any raw, unmatched input
				if ( iLastIndex < m.index ) {
					sValue += sLine.slice(iLastIndex, m.index);
				}
				iLastIndex = rEscapes.lastIndex;
				if ( m[1] ) { 
					// unicode escape
					if ( m[1].length !== 6 ) {
						throw new Error("Incomplete Unicode Escape '" + m[1] + "'");
					}
					sValue += String.fromCharCode(parseInt(m[1].slice(2), 16));
				} else if ( m[2] ) { 
					// special or simple escape
					sValue += mEscapes[m[2]] || m[2].slice(1);
				} else if ( m[3] ) { 
					// continuation line marker
					sLine = aLines[++i];
					rEscapes.lastIndex = iLastIndex = 0;
				} else if ( m[4] ) { 
					// key/value separator					
					if ( bKey ) {
						bKey = false;
						sKey = sValue;
						sValue = "";
					} else {
						sValue += m[4];
					}
				}
			}
			if ( iLastIndex < sLine.length ) {
				sValue += sLine.slice(iLastIndex);
			}
			if ( bKey ) {
				sKey = sValue;
				sValue = "";
			}
			oProp.aKeys.push(sKey);
			oProp.mProperties[sKey] = sValue;
		}
		
		// remove duplicates from keyset (sideeffect:sort)
		jQuery.sap.unique(oProp.aKeys);
	}

	/**
	 * Creates and returns a new instance of {@link jQuery.sap.util.Properties}.
	 *
	 * If option 'url' is passed, immediately a load request for the given target is triggered.
	 * A property file that is loaded can contain comments with a leading ! or #.
	 * The loaded property list does not contain any comments.
	 *
	 * <b>Example for loading a property file:</b>
	 * <pre>
	 *  jQuery.sap.properties({url : "../myProperty.properties"});
	 * </pre>
	 *
	 * <b>Example for creating an empty properties instance:</b>
	 * <pre>
	 *  jQuery.sap.properties();
	 * </pre>
	 *
	 * <b>Examples for getting and setting properties:</b>
	 * <pre>
	 *	var oProperties = jQuery.sap.properties();
	 *	oProperties.setProperty("KEY_1","Test Key");
	 *	var sValue1 = oProperties.getProperty("KEY_1");
	 *	var sValue2 = oProperties.getProperty("KEY_2","Default");
	 * </pre>
	 *
	 * @public
	 * @param {object} [mParams] Parameters used to initialize the property list
	 * @param {string} [mParams.url] The URL to the .properties file which should be loaded.
	 * @param {object} [mParams.headers] A map of additional header key/value pairs to send along with the request (see headers option of jQuery.ajax). 
	 * @return {jQuery.sap.util.Properties} A new property list instance
	 * @SecSink {0|PATH} Parameter is used for future HTTP requests
	 */
	jQuery.sap.properties = function properties(mParams) {
		var oProp = new Properties();
		mParams = jQuery.extend({url: undefined, headers: {}}, mParams);
		if (typeof(mParams.url) == "string"){
			var sText = jQuery.sap.sjax({
				url: mParams.url,
				type: 'GET',
				dataType: 'text',
				complexResult: false,
				fallback: undefined,
				headers: mParams.headers
			});
			
			if (typeof(sText) == "string") {
				parse(sText, oProp);
			}
		}
		return oProp;
	};

}());


}; // end of jquery.sap.properties.js
if ( !jQuery.sap.isDeclared('jquery.sap.resources') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides access to Java-like resource bundles in properties file format
jQuery.sap.declare("jquery.sap.resources", false);



(function() {

	// Javadoc for private inner class "Bundle" - this list of comments is intentional!
	/**
	 * @interface  Contains locale-specific texts.
	 *
	 * If you need a locale-specific text within your application, you can use the
	 * resource bundle to load the locale-specific file from the server and access
	 * the texts of it.
	 *
	 * Use {@link jQuery.sap.resources} to create an instance of jQuery.sap.util.ResourceBundle.
	 * There you have to specify the URL to the base .properties file of a bundle
	 * (.properties without any locale information, e.g. "mybundle.properties"), and optionally
	 * a locale. The locale is defined as a string of the language and an optional country code
	 * separated by underscore (e.g. "en_GB" or "fr"). If no locale is passed, the default
	 * locale is "en" if the SAPUI5 framework is not available. Otherwise the default locale is taken from
	 * the SAPUI5 configuration.
	 *
	 * With the getText() method of the resource bundle, a locale-specific string value
	 * for a given key will be returned.
	 *
	 * With the given locale, the ResourceBundle requests the locale-specific properties file
	 * (e.g. "mybundle_fr_FR.properties"). If no file is found for the requested locale or if the file
	 * does not contain a text for the given key, a sequence of fall back locales is tried one by one. 
	 * First, if the locale contains a region information (fr_FR), then the locale without the region is
	 * tried (fr). If that also can't be found or doesn't contain the requested text, the english file 
	 * is used (en - assuming that most development projects contain at least english texts).    
	 * If that also fails, the file without locale (base URL of the bundle) is tried.
	 * 
	 * If none of the requested files can be found or none of them contains a text for the given key,
	 * then the key itself is returned as text. 
	 *
	 * Exception: Fallback for "zh_HK" is "zh_TW" before zh.
	 *
	 * @author SAP AG
	 * @version 1.18.9
	 * @since 0.9.0
	 * @name jQuery.sap.util.ResourceBundle
	 * @public
	 */
	
	/**
	 * Returns a locale-specific string value for the given key sKey. 
	 * 
	 * The text is searched in this resource bundle according to the fallback chain described in 
	 * {@link jQuery.sap.util.ResourceBundle}. If no text could be found, the key itself is used as text.
	 * 
	 * If text parameters are given, then any occurrences of the pattern "{<i>n</i>}" with <i>n</i> being an integer 
	 * are replaced by the parameter value with index <i>n</i>.  Note: This replacement is also applied if no text had been found (key).
	 * For more details on this replacement mechanism refer also:
	 * @see jQuery.sap#formatMessage
	 * 
	 * @param {string} sKey
	 * @param {string[]} [aArgs] List of parameters which should replace the place holders "{n}" (n is the index) in the found locale-specific string value.
	 * @return {string} The value belonging to the key, if found; otherwise the key itself.
	 *
	 * @function
	 * @name jQuery.sap.util.ResourceBundle.prototype.getText
	 * @public
	 */

	/**
	 * Enhances the resource bundle with a custom resource bundle. The bundle
	 * can be enhanced with multiple resource bundles. The last enhanced resource
	 * bundle wins against the previous ones and the original ones. This function
	 * can be called several times.
	 *
	 * @param {jQuery.sap.util.ResourceBundle} oBundle an instance of a <code>jQuery.sap.util.ResourceBundle</code>
	 * @since 1.16.5
	 * @private
	 * 
	 * @function
	 * @name jQuery.sap.util.ResourceBundle.prototype._enhance
	 */
	
	/**
	 * A regular expression that describes language tags according to BCP-47.
	 * @see BCP47 "Tags for Identifying Languages" (http://www.ietf.org/rfc/bcp/bcp47.txt)
	 *
	 * The matching groups are
	 *  0=all
	 *  1=language (shortest ISO639 code + ext. language sub tags | 4digits (reserved) | registered language sub tags)
	 *  2=script (4 letters)
	 *  3=region (2letter language or 3 digits)
	 *  4=variants (separated by '-', Note: capturing group contains leading '-' to shorten the regex!)
	 *  5=extensions (including leading singleton, multiple extensions separated by '-')
	 *  6=private use section (including leading 'x', multiple sections separated by '-')
	 *  
	 *            [-------------------- language ----------------------][--- script ---][------- region --------][------------ variants --------------][--------- extensions --------------][------ private use -------]
	 */
	var rlocale=/^((?:[A-Z]{2,3}(?:-[A-Z]{3}){0,3})|[A-Z]{4}|[A-Z]{5,8})(?:-([A-Z]{4}))?(?:-([A-Z]{2}|[0-9]{3}))?(-[0-9A-Z]{5,8}|(?:[0-9][0-9A-Z]{3}))*(?:-([0-9A-WYZ](?:-[0-9A-Z]{2,8})+))*(?:-(X(?:-[0-9A-Z]{1,8})+))?$/i;

	/**
	 * Resource bundles are stored according to the Java Development Kit conventions.
	 * JDK uses old language names for a few ISO639 codes ("iw" for "he", "ji" for "yi", "in" for "id" and "sh" for "sr").
	 * Make sure to convert newer codes to older ones before creating file names.
	 */
	var M_ISO639_NEW_TO_OLD = {
		"he" : "iw",
		"yi" : "ji",
		"id" : "in", 
		"sr" : "sh" 
	};

	var M_ISO639_OLD_TO_NEW = {
		"iw" : "he",
		"ji" : "yi",
		"in" : "id",
		"sn" : "sr"
	};

	var rSAPSupportabilityLocales = /-(saptrc|sappsd)(?:-|$)/i;

	/**
	 * Helper to normalize the given locale (in BCP-47 syntax) to the java.util.Locale format.
	 * @return {string} Normalized locale or undefined if the locale can't be normalized
	 */
	function normalize(sLocale) {
		var m;
		if ( typeof sLocale === 'string' && (m = rlocale.exec(sLocale.replace(/_/g, '-'))) ) {
			var sLanguage = m[1].toLowerCase();
			sLanguage = M_ISO639_NEW_TO_OLD[sLanguage] || sLanguage;
			var sScript = m[2] ? m[2].toLowerCase() : undefined;
			var sRegion = m[3] ? m[3].toUpperCase() : undefined;
			var sVariants = m[4];
			var sPrivate = m[6];
			// recognize and convert special SAP supportability locales (overwrites m[]!)
			if ( (sPrivate && (m = rSAPSupportabilityLocales.exec(sPrivate)))
					 || (sVariants && (m = rSAPSupportabilityLocales.exec(sVariants))) ) {
				return "en_US_" + m[1].toLowerCase(); // for now enforce en_US (agreed with SAP SLS)
			}
			// Chinese: when no region but a script is specified, use default region for each script 
			if ( sLanguage === "zh" && !sRegion ) {
				if ( sScript === "hans" ) {
					sRegion = "CN"; 
				} else if ( sScript === "hant" ) {
					sRegion = "TW";
				}
			}
			return sLanguage + (sRegion ? "_" + sRegion + (sVariants ? "_" + sVariants.slice(1).replace("-","_") : "") : "");
		}
	}
	
	/**
	 * Returns the default locale (the locale defined in UI5 configuration if available, else "en")
	 * @return {string} The default locale
	 */
	function defaultLocale() {
		var sLocale;
		if(window.sap && sap.ui && sap.ui.getCore){
			sLocale = sap.ui.getCore().getConfiguration().getLanguage();
			sLocale = normalize(sLocale);
		}
		return sLocale || "en";
	}
	
	/**
	 * Helper to normalize the given locale (java.util.Locale format) to the BCP-47 syntax.
	 * @return {string} Normalized locale or undefined if the locale can't be normalized
	 */
	function convertLocaleToBCP47(sLocale) {
		var m;
		if ( typeof sLocale === 'string' && (m = rlocale.exec(sLocale.replace(/_/g, '-'))) ) {
			var sLanguage = m[1].toLowerCase();
			sLanguage = M_ISO639_OLD_TO_NEW[sLanguage] || sLanguage;
			return sLanguage + (m[3] ? "-" + m[3].toUpperCase() + (m[4] ? "-" + m[4].slice(1).replace("_","-") : "") : "");
		}
	}

    /**
     * A regular expression to split a URL into
     * <ol> 
     * <li>a part before the file extension 
     * <li>the file extension itself
     * <li>any remaining part after the file extension (query, hash - optional)
     * </ol>.
     * 
     * Won't match for URLs without a file extension.
     *
     *           [------- prefix ------][----ext----][-------suffix--------]
     *                                               ?[--query--]#[--hash--]
     */
	var rUrl = /^((?:[^?#]*\/)?[^\/?#]*)(\.[^.\/?#]+)((?:\?([^#]*))?(?:#(.*))?)$/;

    /**
     * List of supported file extensions. 
     *
     * Could be enriched in future or even could be made
     * extensible to support other formats as well.
     */
	var aValidFileTypes = [ ".properties", ".hdbtextbundle"]; 

    /**
     * Helper to split a URL with the above regex.
     * Either returns an object with the parts or undefined.
     */
	function splitUrl(sUrl) {
		var m = rUrl.exec(sUrl);
		return m && { url : sUrl, prefix : m[1], ext : m[2], query: m[4], hash: (m[5] || ""), suffix : m[2] + (m[3] || "") };
	}

	/*
	 * Implements jQuery.sap.util.ResourceBundle
	 */
	var Bundle = function(sUrl, sLocale, bIncludeInfo){
		//last fallback is english if no or no valid locale is given
		//TODO: If the browsers allow to access the users language preference this should be the fallback
		this.sLocale = normalize(sLocale) || defaultLocale();
		this.oUrlInfo = splitUrl(sUrl);
		if ( !this.oUrlInfo || jQuery.inArray(this.oUrlInfo.ext, aValidFileTypes) < 0 ) {
			throw new Error("resource URL '" + sUrl + "' has unknown type (should be one of " + aValidFileTypes.join(",") + ")");
		}
		this.bIncludeInfo = bIncludeInfo;
		// list of custom bundles
		this.aCustomBundles = [];
		//declare list of property files that are loaded
		this.aPropertyFiles = [];
		this.aLocales = [];
		//load the most specific property file
		load(this, this.sLocale);
	};

	Bundle.prototype = {};

	/*
	 * Implements jQuery.sap.util.ResourceBundle.prototype._enhance
	 */
	Bundle.prototype._enhance = function(oCustomBundle) {
		if (oCustomBundle && oCustomBundle instanceof Bundle) {
			this.aCustomBundles.push(oCustomBundle);
		} else {
			// we report the error but do not break the execution
			jQuery.sap.log.error("Custom ResourceBundle is either undefined or not an instanceof jQuery.sap.util.ResourceBundle. Therefore this custom ResourceBundle will be ignored!");
		}
	};
	
	/*
	 * Implements jQuery.sap.util.ResourceBundle.prototype.getText
	 */
	Bundle.prototype.getText = function(sKey, aArgs){
		var sValue = null;
		
		// loop over the custom bundles before resolving this one
		// lookup the custom resource bundles (last one first!)
		for (var i = this.aCustomBundles.length - 1; i >= 0; i--) {
			sValue = this.aCustomBundles[i].getText(sKey, aArgs);
			// make sure that not the key is returned!
			if (sValue && sValue.toString() !== sKey) {
				return sValue; // found!
			} else {
				sValue = null;
			}
		}
		
		//loop over all loaded property files and return the value for the key if any
		for(var i=0; i<this.aPropertyFiles.length; i++){
			sValue = this.aPropertyFiles[i].getProperty(sKey);
			if(typeof(sValue)==="string") {
				break;
			}
		}

		//value for this key was not found in the currently loaded property files,
		//load the fallback locales
		if(typeof(sValue)!=="string"){
			var sTempLocale = this.aLocales[0];
			while(sTempLocale.length > 0){
				// TODO: validate why, maybe remove? Introduced by Martin S.
				// keep in sync with fallback mechanism in Java, ABAP (MIME & BSP)
				// resource handler (Java: Peter M., MIME: Sebastian A., BSP: Silke A.)
				if(sTempLocale == "zh_HK"){
					sTempLocale = "zh_TW";
				}else{
					var p = sTempLocale.lastIndexOf('_');
					if(p >= 0){
						sTempLocale = sTempLocale.substring(0,p);
					}else if(sTempLocale != "en"){
						sTempLocale = "en";
					}else{
						sTempLocale = "";
					}
				}

				var oProperties = load(this, sTempLocale);
				if(oProperties == null) {
					continue;
				}

				//check whether the key is included in the newly loaded property file
				sValue = oProperties.getProperty(sKey);
				if (typeof(sValue)==="string") {
					break;
				}
			}
		}

		if(typeof(sValue)!=="string"){
			sValue = sKey;
		}

		if(aArgs){
			sValue = jQuery.sap.formatMessage(sValue, aArgs);
		}

		if (this.bIncludeInfo) {
			sValue = new String(sValue);
			sValue.originInfo = {
				source: "Resource Bundle",
				url: this.oUrlInfo.url,
				locale: this.sLocale,
				key: sKey
			};
		}

		return sValue;
	};

	/*
	 * If a .properties file for the given locale is not loaded yet
	 * in the given bundle, this method loads the .properties file and
	 * adds it to the bundle.
	 * @param {string} sLocale the text to parse
	 * @param oBundle the resource bundle to extend
	 * @return The newly loaded properties or <code>null</code>
	 *         when the properties for the given locale already loaded.
	 * @private
	 */
	function load(oBundle, sLocale) {
		var oUrl = oBundle.oUrlInfo,
			oRequest,
			oProperties; 

		if( jQuery.inArray(sLocale, oBundle.aLocales) == -1 ){
			if ( shouldRequest(sLocale) ) {
				switch (oUrl.ext) {
					case '.hdbtextbundle':
						oRequest = {
							url: oUrl.url,
							// Alternative: add locale as query:
							// url: oUrl.prefix + oUrl.suffix + '?' + (oUrl.query ? oUrl.query + "&" : "") + "locale=" + sLocale + (oUrl.hash ? "#" + oUrl.hash : ""),
							headers : {
								"Accept-Language": convertLocaleToBCP47(sLocale) || ""
							}
						};
						break;
					default:
						oRequest = {
							url: oUrl.prefix + (sLocale ? "_" + sLocale : "") + oUrl.suffix
						};
						break;
				}
				oProperties = jQuery.sap.properties(oRequest);
			} else {
				// dummy result (empty)
				oProperties = {
						getProperty : function() { return undefined; }
				}
			}
			
			// remember result and locales that have been loaded so far (to avoid repeated roundtrips) 
			oBundle.aPropertyFiles.push(oProperties);
			oBundle.aLocales.push(sLocale);
			
			return oProperties;
		}
		return null;
	}

	function shouldRequest(sLocale) {
		var aLanguages = window.sap && sap.ui && sap.ui.getCore && sap.ui.getCore().getConfiguration().getSupportedLanguages();
		if ( aLanguages && aLanguages.length > 0 ) {
			return jQuery.inArray(sLocale, aLanguages) >= 0;
		}
		return true;
	}
	
	/**
	 * Creates and returns a new instance of {@link jQuery.sap.util.ResourceBundle}
	 * using the given URL and locale to determine what to load.
	 *
	 * @public
	 * @param {object} [mParams] Parameters used to initialize the resource bundle
	 * @param {string} [mParams.url=""] The URL to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
	 * @param {string} [mParams.locale="en"] Optional string of the language and an optional country code separated by underscore (e.g. "en_GB" or "fr")
	 * @param {boolean} [mParams.includeInfo=false] Optional boolean whether to include origin information into the returned property values
	 * @return {jQuery.sap.util.ResourceBundle} A new resource bundle instance
	 * @SecSink {0|PATH} Parameter is used for future HTTP requests
	 */
	jQuery.sap.resources = function resources(mParams) {
		mParams = jQuery.extend({url: "", locale: undefined, includeInfo: false}, mParams);
		var oBundle = new Bundle(mParams.url, mParams.locale, mParams.includeInfo);
		return oBundle;
	};

}());

}; // end of jquery.sap.resources.js
if ( !jQuery.sap.isDeclared('sap.ui.Global') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * @overview Initialization for the SAP UI Library
 *
 * This module creates the main SAP namespaces {@link sap} and automatically
 * registers it to the OpenAjax hub if that exists.
 *
 * This class provides method {@link #namespace} to register namespaces to the
 * SAP UI Library.
 *
 * @sample
 * Ensures a control can be used afterwards but does not load immediately
 * sap.ui.lazyRequire("sap.ui.core/Control");
 * sap.ui.lazyRequire("sap.ui.commons/Button");
 *
 * @version 1.18.9
 * @author  Martin Schaus, Daniel Brinkmann
 * @public
 */

/*global OpenAjax */// declare unusual global vars for JSLint/SAPUI5 validation

// Register to the OpenAjax Hub if it exists
if (window.OpenAjax && window.OpenAjax.hub) {
	OpenAjax.hub.registerLibrary("sap", "http://www.sap.com/", "0.1", {});
}

jQuery.sap.declare("sap.ui.Global");


/**
 * Root namespace for JavaScript functionality provided by SAP AG.
 *
 * The <code>sap</code> namespace is automatically registered with the
 * OpenAjax hub if it exists.
 *
 * @version 1.18.9
 * @namespace
 * @public
 * @name sap
 */
if ( typeof window.sap !== "object" && typeof window.sap !== "function"  ) {
  window.sap = {};
}

/**
 * The <code>sap.ui</code> namespace is the central OpenAjax compliant entry
 * point for UI related JavaScript functionality provided by SAP.
 *
 * @version 1.18.9
 * @namespace
 * @name sap.ui
 * @public
 */
if ( typeof window.sap.ui !== "object") {
	window.sap.ui = {};
}
sap.ui = jQuery.extend(sap.ui, {
		/**
		 * The version of the SAP UI Library
		 * @type string
		 */
		version: "1.18.9",
		buildinfo : { lastchange : "${ldi.scm.revision}", buildtime : "201403031318" }
	});

/**
 * Ensures that a given a namespace or hierarchy of nested namespaces exists in the
 * current <code>window</code>.
 *
 * @return {object} the innermost namespace of the hierarchy
 * @public
 * @static
 * @deprecated Use jQuery.sap.declare or jQuery.sap.getObject(...,0) instead
 */
sap.ui.namespace = function(sNamespace){

	jQuery.sap.assert(false, "sap.ui.namespace is long time deprecated and shouldn't be used");

	return jQuery.sap.getObject(sNamespace, 0);
};

/**
 * Creates a lazy loading stub for a given class <code>sClassName</code>.
 *
 * If the class has been loaded already, nothing is done. Otherwise a stub object
 * or constructor and - optionally - a set of stub methods are created.
 * All created stubs will load the corresponding module on execution
 * and then delegate to their counterpart in the loaded module.
 *
 * When no methods are given or when the list of methods contains the special name
 * "new" (which is an operator can't be used as method name in JavaScript), then a
 * stub <b>constructor</b> for class <code>sClassName</code> is created.
 * Otherwise, a plain object is created.
 *
 * <b>Note</b>: Accessing any stub as a plain object without executing it (no matter
 * whether it is a function or an object) won't load the module and therefore most like
 * won't work as expected. This is a fundamental restriction of the lazy loader approach.
 * It could only be fixed with JavaScript 1.5 features that are not available in all
 * UI5 target browsers (e.g. not in IE8).
 *
 * <b>Note</b>: As a side effect of this method, the namespace containing the given
 * class is created <b>immediately</b>.
 *
 * @param {string} sClassName Fully qualified name (dot notation) of the class that should be prepared
 * @param {string} [sMethods='new'] space separated list of additional (static) methods that should be created as stubs
 * @param {string} [sModuleName] name of the module to load, defaults to the class name
 * @public
 * @static
 */
sap.ui.lazyRequire = function(sClassName, sMethods, sModuleName) {

	jQuery.sap.assert(typeof sClassName === "string" && sClassName, "lazyRequire: sClassName must be a non-empty string");
	jQuery.sap.assert(!sMethods || typeof sMethods === "string", "lazyRequire: sMethods must be empty or a string");

	var sFullClass = sClassName.replace(/\//gi,"\."),
		iLastDotPos = sFullClass.lastIndexOf("."),
		sPackage = sFullClass.substr(0, iLastDotPos),
		sClass = sFullClass.substr(iLastDotPos + 1),
		oPackage = jQuery.sap.getObject(sPackage, 0),
		oClass = oPackage[sClass],
		aMethods = (sMethods || "new").split(" "),
		iConstructor = jQuery.inArray("new", aMethods);

	sModuleName = sModuleName || sFullClass;

	if (!oClass) {

		if ( iConstructor >= 0 ) {

			// Create dummy constructor which loads the class on demand
			oClass = function() {
				jQuery.sap.log.debug("lazy stub for '" + sFullClass + "' (constructor) called.");
				jQuery.sap.require(sModuleName);
				var oRealClass = oPackage[sClass];
				jQuery.sap.assert(typeof oRealClass === "function", "lazyRequire: oRealClass must be a function after loading");
				if ( oRealClass._sapUiLazyLoader ) {
					throw new Error("lazyRequire: stub '" + sFullClass + "'has not been replaced by module '" + sModuleName + "'");
				}

				// create a new instance and invoke the constructor
				var oInstance = jQuery.sap.newObject(oRealClass.prototype);
				var oResult = oRealClass.apply(oInstance, arguments);
				if (oResult && (typeof oResult === "function" || typeof oResult === "object")) {
					oInstance = oResult;
				}
				return oInstance;
			};
			// mark the stub as lazy loader
			oClass._sapUiLazyLoader = true;

			aMethods.splice(iConstructor,1);

		} else {

			// Create dummy object
			oClass = {};

		}

		// remember the stub
		oPackage[sClass] = oClass;

	}


	// add stub methods to it
	jQuery.each(aMethods, function (i,sMethod) {
		// check whether method is already available
		if (!oClass[sMethod]) {
			oClass[sMethod] = function() {
				jQuery.sap.log.debug("lazy stub for '" + sFullClass + "." + sMethod + "' called.");
				jQuery.sap.require(sModuleName);
				var oRealClass = oPackage[sClass];
				jQuery.sap.assert(typeof oRealClass === "function" || typeof oRealClass === "object", "lazyRequire: oRealClass must be a function or object after loading");
				jQuery.sap.assert(typeof oRealClass[sMethod] === "function", "lazyRequire: method must be a function");
				if (oRealClass[sMethod]._sapUiLazyLoader ) {
					throw new Error("lazyRequire: stub '" + sFullClass + "." + sMethod + "' has not been replaced by loaded module '" + sModuleName + "'");
				}
				return oRealClass[sMethod].apply(oRealClass, arguments);
			};
			oClass[sMethod]._sapUiLazyLoader = true;
		}
	});

};

/**
 * Returns the URL of a resource that belongs to the given library and has the given relative location within the library.
 * This is mainly meant for static resources like images that are inside the library.
 * It is NOT meant for access to JavaScript modules or anything for which a different URL has been registered with jQuery.sap.registerModulePath(). For
 * these cases use jQuery.sap.getModulePath().
 * It DOES work, however, when the given sResourcePath starts with "themes/" (= when it is a theme-dependent resource). Even when for this theme a different
 * location outside the normal library location is configured.
 *
 * @param sLibraryName the name of a library, like "sap.ui.commons"
 * @param sResourcePath the relative path of a resource inside this library, like "img/mypic.png" or "themes/my_theme/img/mypic.png"
 * @returns the URL of the requested resource
 *
 * @static
 * @public
 */
sap.ui.resource = function(sLibraryName, sResourcePath) {
	jQuery.sap.assert(typeof sLibraryName === "string", "sLibraryName must be a string");
	jQuery.sap.assert(typeof sResourcePath === "string", "sResourcePath must be a string");

	// special handling for theme-dependent resources: move theme folder into module name
	var match = sResourcePath.match(/^themes\/([^\/]+)\//);
	if (match) {
		sLibraryName += ".themes." + match[1];
		sResourcePath = sResourcePath.substr(match[0].length);
	}

	return jQuery.sap.getModulePath(sLibraryName, '/') + sResourcePath;
};

/**
 * Redirects access to resources that are part of the given namespace to a location
 * relative to the assumed <b>application root folder</b>.
 *
 * Any UI5 managed resource (view, controller, control, JavaScript module, CSS file, etc.)
 * whose resource name starts with <code>sNamespace</code>, will be loaded from an
 * equally named subfolder of the <b>application root folder</b>.
 * If the resource name consists of multiple segments (separated by a dot), each segment
 * is assumed to represent an individual folder. In other words: when a resource name is
 * converted to an URL, any dots ('.') are converted to slashes ('/').
 *
 * <b>Limitation:</b> For the time being, the <b>application root folder</b> is assumed to be
 * the same as the folder where the current page resides in.
 *
 * Usage sample:
 * <pre>
 *   // Let UI5 know that resources, whose name starts with "com.mycompany.myapp"
 *   // should be loaded from the URL location "./com/mycompany/myapp"
 *   sap.ui.localResources("com.mycompany.myapp");
 *
 *   // The following call implicitly will use the mapping done by the previous line
 *   // It will load a view from ./com/mycompany/myapp/views/Main.view.xml
 *   sap.ui.view({ view : "com.mycompany.myapp.views.Main", type : sap.ui.core.mvc.ViewType.XML});
 * </pre>
 *
 * When applications need a more flexible mapping between resource names and their location,
 * they can use {@link jQuery.sap.registerModulePath}.
 *
 * It is intended to make this configuration obsolete in future releases, but for the time
 * being, applications must call this method when they want to store resources relative to
 * the assumed application root folder.
 *
 * @param {String} sNamespace Namespace prefix for which to load resources relative to the application root folder
 * @public
 * @static
 * @see jQuery.sap.registerModulePath
 */
sap.ui.localResources = function(sNamespace) {
	jQuery.sap.assert(sNamespace, "sNamespace must not be empty");
	jQuery.sap.registerModulePath(sNamespace, "./" + sNamespace.replace(/\./g, "/"));
};

}; // end of sap/ui/Global.js
if ( !jQuery.sap.isDeclared('sap.ui.base.Event') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.base.Event
jQuery.sap.declare("sap.ui.base.Event");


/**
 * Creates an event with the given sId, linked to the provided oSource and enriched with the mParameters.
 *
 * @param {string} sId The id of the event
 * @param {sap.ui.base.EventProvider} oSource The source of the event
 * @param {object} mParameters A map of parameters for this event
 *
 * @class An Event object consisting of an id, a source and a map of parameters
 * @extends sap.ui.base.Object
 * @implements sap.ui.base.Poolable
 * @author Malte Wedel, Daniel Brinkmann
 * @version 1.18.9
 * @name sap.ui.base.Event
 * @public
 */
sap.ui.base.Object.extend("sap.ui.base.Event", /** @lends sap.ui.base.Event */ {
	constructor : function(sId, oSource, mParameters) {
	
		sap.ui.base.Object.apply(this);
	
		if (arguments.length > 0) {
			this.init(sId, oSource, mParameters);
		}
	
	}
});

/**
 * Init this event with its data.
 *
 * The <code>init</code> method is called by an object pool when the
 * object is (re-)activated for a new caller.
 *
 * When no <code>mParameters</code> are given, an empty object is used instead.
 *
 * @param {string} sId The id of the event
 * @param {sap.ui.base.EventProvider} oSource The source of the event
 * @param {object} [mParameters] the event parameters
 *
 * @see sap.ui.base.Poolable.prototype#init
 */
sap.ui.base.Event.prototype.init = function(sId, oSource, mParameters) {
	jQuery.sap.assert(typeof sId === "string", "Event.init: sId must be a string");
	jQuery.sap.assert(oSource instanceof sap.ui.base.EventProvider, "Event.init: oSource must be an EventProvider");

	this.sId = sId;
	this.oSource = oSource;
	this.mParameters = mParameters || {};
	this.bCancelBubble = false;
	this.bPreventDefault = false;
};

/**
 * Reset event data, needed for pooling
 * @see sap.ui.base.Poolable.prototype#reset
 */
sap.ui.base.Event.prototype.reset = function() {
	this.sId = "";
	this.oSource = null;
	this.mParameters = null;
	this.bCancelBubble = false;
	this.bPreventDefault = false;
};

/**
 * Returns the id of the event
 * @return {string} The id of the event
 * @public
 */
sap.ui.base.Event.prototype.getId = function() {

	return this.sId;

};

/**
 * Returns the source of the event
 * @return {sap.ui.base.EventProvider} The source of the event
 * @public
 */
sap.ui.base.Event.prototype.getSource = function() {

	return this.oSource;

};

/**
 * Returns all parameter values of the event keyed by their names.
 * @return {map} All parameters of the event keyed by name
 * @public
 */
sap.ui.base.Event.prototype.getParameters = function() {

	return this.mParameters;

};

/**
 * Returns the value of the parameter with the given sName.
 *
 * @param {string} sName the name of the parameter to return
 * @return {any} the value for the named parameter
 * @public
 */
sap.ui.base.Event.prototype.getParameter = function(sName) {

	jQuery.sap.assert(typeof sName === "string" && sName, "Event.getParameter: sName must be a non-empty string");

	return this.mParameters[sName];

};

/**
 * Cancel bubbling of the event.
 * @public
 */
sap.ui.base.Event.prototype.cancelBubble = function() {

	this.bCancelBubble = true;

};

/**
 * Prevent the default action of this event.
 * @public
 */
sap.ui.base.Event.prototype.preventDefault = function() {

	this.bPreventDefault = true;

};


}; // end of sap/ui/base/Event.js
if ( !jQuery.sap.isDeclared('sap.ui.base.EventProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.base.EventProvider
jQuery.sap.declare("sap.ui.base.EventProvider");




/**
 * Creates an instance of EventProvider.
 * @class Provides internal eventing facilities for objects, so other objects can attach
 * and detach events, and are notified, when events are fired
 *
 * @abstract
 * @extends sap.ui.base.Object
 * @author Malte Wedel, Daniel Brinkmann
 * @version 1.18.9
 * @constructor
 * @public
 * @name sap.ui.base.EventProvider
 */
sap.ui.base.Object.extend("sap.ui.base.EventProvider", /* @lends sap.ui.base.EventProvider */ {

	constructor : function() {

		sap.ui.base.Object.apply(this);

		/**
		 * A map of arrays of event registrations keyed by the event names
		 * @private
		 */
		this.mEventRegistry = {};

	}

});

/**
 * Map of event names and ids, that are provided by this class
 * @private
 * @static
 */
sap.ui.base.EventProvider.M_EVENTS = {EventHandlerChange:"EventHandlerChange"};

/**
 * Pool is defined on the prototype to be shared among all EventProviders
 * @private
 */
sap.ui.base.EventProvider.prototype.oEventPool = new sap.ui.base.ObjectPool(sap.ui.base.Event);

/**
 * Adds an event registration for the given object and given event name
 *
 * @param {string}
 *            sEventId The identifier of the event to listen for
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the event provider-instance
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.base.EventProvider.prototype.attachEvent = function(sEventId, oData, fnFunction, oListener) {
	jQuery.sap.assert(typeof(sEventId) === "string" && sEventId, "EventProvider.attachEvent: sEventId must be a non-empty string");
	if(typeof(oData) === "function") {
	//one could also increase the check in the line above
	//if(typeof(oData) === "function" && oListener === undefined) {
		oListener = fnFunction;
		fnFunction = oData;
		oData = undefined;
	}
	jQuery.sap.assert(typeof(fnFunction) === "function", "EventProvider.attachEvent: fnFunction must be a function");
	jQuery.sap.assert(!oListener || typeof(oListener) === "object", "EventProvider.attachEvent: oListener must be empty or an object");

	if (!this.mEventRegistry[sEventId]) {
		this.mEventRegistry[sEventId] = [];
	}
	this.mEventRegistry[sEventId].push({oListener:oListener, fFunction:fnFunction, oData: oData});

	// Inform interested parties about changed EventHandlers
	this.fireEvent(sap.ui.base.EventProvider.M_EVENTS.EventHandlerChange, {EventId: sEventId, type: 'listenerAttached'});

	return this;
};

/**
 * Adds a one time event registration for the given object and given event name. When the event occurs, the handler function is called and removed
 * from registration.
 *
 * @param {string}
 *            sEventId The identifier of the event to listen for
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the event provider-instance
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.base.EventProvider.prototype.attachEventOnce = function(sEventId, oData, fnFunction, oListener) {
	if(typeof(oData) === "function") {
		oListener = fnFunction;
		fnFunction = oData;
		oData = undefined;
	}
	function fnOnce() { 
		this.detachEvent(sEventId, fnOnce);  // ‘this’ is always the control, due to the context ‘undefined’ in the attach call below
		fnFunction.apply(oListener || this, arguments);  // needs to do the same resolution as in fireEvent
	}
	this.attachEvent(sEventId, oData, fnOnce, undefined);  // a listener of ‘undefined’ enforce a context of ‘this’ even after clone
	return this;
};

/**
 * Removes an event registration for the given object and given event name.
 *
 * The passed parameters must match those used for registration with {@link #attachEvent } beforehand!
 *
 * @param {string}
 *            sEventId The identifier of the event to detach from
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.base.EventProvider} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.base.EventProvider.prototype.detachEvent = function(sEventId, fnFunction, oListener) {
	jQuery.sap.assert(typeof(sEventId) === "string" && sEventId, "EventProvider.detachEvent: sEventId must be a non-empty string" );
	jQuery.sap.assert(typeof(fnFunction) === "function", "EventProvider.detachEvent: fnFunction must be a function");
	jQuery.sap.assert(!oListener || typeof(oListener) === "object", "EventProvider.detachEvent: oListener must be empty or an object");

	var aEventListeners = this.mEventRegistry[sEventId];
	if (!aEventListeners) {
		return this;
	}
	
	var bListenerDetached = false;
	
	//PERFOPT use array. remember length to not re-calculate over and over again
	for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
		//PERFOPT check for identity instead of equality... avoid type conversion
		if (aEventListeners[i].fFunction === fnFunction && aEventListeners[i].oListener === oListener) {
			//delete aEventListeners[i];
			aEventListeners.splice(i,1);
			bListenerDetached = true;
			break;
		}
	}
	// If we just deleted the last registered EventHandler, remove the whole entry from our map.
	if(aEventListeners.length == 0) {
		delete this.mEventRegistry[sEventId];
	}

	if(bListenerDetached){
		// Inform interested parties about changed EventHandlers
		this.fireEvent(sap.ui.base.EventProvider.M_EVENTS.EventHandlerChange, {EventId: sEventId, type: 'listenerDetached' });
	}

	return this;
};

/**
 * Fires the given event and notifies all listeners. Listeners must not change
 * the content of the event.
 *
 * @param {string} sEventId the event id
 * @param {object} [mParameters] the parameter map
 * @param {boolean} [bAllowPreventDefault] whether prevent default is allowed
 * @param {boolean} [bEnableEventBubbling] whether event bubbling is enabled
 * @return {sap.ui.base.EventProvider|boolean} Returns <code>this</code> to allow method chaining or
 *		   whether the default action should be executed, when bAllowPreventDefault has been set to true
 * @protected
 */
sap.ui.base.EventProvider.prototype.fireEvent = function(sEventId, mParameters, bAllowPreventDefault, bEnableEventBubbling) {
	// at least in BrowserEventManager when firing events of its E_EVENTS enumeration, the type will be an integer... thus avoid this check
	//	jQuery.sap.assert(typeof (sEventId) == "string");

	// get optional parameters right
	if (typeof mParameters == "boolean") {
		bEnableEventBubbling = bAllowPreventDefault;
		bAllowPreventDefault = mParameters;
	}

	var aEventListeners = this.mEventRegistry[sEventId],
		bPreventDefault = false,
		oEvent, oParent, oInfo;

	if (bEnableEventBubbling || (aEventListeners && jQuery.isArray(aEventListeners))) {

		// this ensures no 'concurrent modification exception' occurs (e.g. an event listener deregisters itself).
		aEventListeners = aEventListeners ? aEventListeners.slice() : [];

		oEvent = this.oEventPool.borrowObject(sEventId, this, mParameters);

		//PERFOPT use array. remember length to not re-calculate over and over again
		for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
			oInfo = aEventListeners[i];
			oInfo.fFunction.call(oInfo.oListener || this, oEvent, oInfo.oData);
		}

		// In case this is a bubbling event and object has a getParent method, also fire on parents
		if (bEnableEventBubbling) {
			oParent = this.getEventingParent();
			while (oParent && !oEvent.bCancelBubble) {
				aEventListeners = oParent.mEventRegistry[sEventId];
				if (aEventListeners && aEventListeners instanceof Array) {
					aEventListeners = aEventListeners.slice();
					for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
						oInfo = aEventListeners[i];
						oInfo.fFunction.call(oInfo.oListener || oParent, oEvent, oInfo.oData);
					}
				}
				oParent = oParent.getEventingParent();
			}
		}

		// Store prevent default state, before returning event to the pool
		bPreventDefault = oEvent.bPreventDefault;

		this.oEventPool.returnObject(oEvent);
	}

	// Only return prevent default result in case it has been enabled, for compatibility
	if (bAllowPreventDefault) {
		return !bPreventDefault;
	}
	else {
		return this;
	}
};

/**
 * Returns whether there are any listeners for the given event ID.
 *
 * @param {string} sEventId the ID of the event
 * @return {boolean} whether there are any listeners
 * @private
 */
sap.ui.base.EventProvider.prototype.hasListeners = function(sEventId) {
	return !!this.mEventRegistry[sEventId];
};

/**
 * Returns the list of events currently having listeners attached.
 *
 * Introduced for lightspeed support to ensure that only relevant events are attached to the LS-world.
 *
 * This is a static method to avoid the pollution of the Element/Control namespace.
 * As the callers are limited and known and for performance reasons the internal event registry
 * is returned. It contains more information than necessary, but needs no expensive conversion.
 *
 * @return {object} the list of events currently having listeners attached
 * @private
 * @static
 */
sap.ui.base.EventProvider.getEventList = function(oEventProvider) {
	return oEventProvider.mEventRegistry;
};

/**
 * Returns the parent in the eventing hierarchy of this object.
 *
 * Per default this returns null, but if eventing is used in objects, which are hierarchically
 * structured, this can be overwritten to make the object hierarchy visible to the eventing and
 * enables the use of event bubbling within this object hierarchy.
 *
 * @return {sap.ui.base.EventProvider} the parent event provider
 * @protected
 */
sap.ui.base.EventProvider.prototype.getEventingParent = function() {
	return null;
};

/**
 * Returns a string representation of this object.
 *
 * In case there is no class or id information, a simple static string is returned.
 * Subclasses should override this method.
 *
 * @return {string} a string description of this eventProvider
 * @public
 */
sap.ui.base.EventProvider.prototype.toString = function() {
	if ( this.getMetadata ) {
		return "EventProvider " + this.getMetadata().getName();
	}
	else {
		return "EventProvider";
	}
};


/**
 * @see sap.ui.base.Object.prototype.destroy
 * @public
 */
sap.ui.base.EventProvider.prototype.destroy = function() {
	this.mEventRegistry = {};
	sap.ui.base.Object.prototype.destroy.apply(this, arguments);
};

}; // end of sap/ui/base/EventProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.base.ManagedObjectMetadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.base.ManagedObjectMetadata
jQuery.sap.declare("sap.ui.base.ManagedObjectMetadata");



/**
 * Creates a new metadata object for a Element subclass.
 *
 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
 * @param {object} oStaticInfo static info to construct the metadata from
 *
 * @class
 * @author Frank Weigel
 * @version 1.18.9
 * @since 0.8.6
 */
sap.ui.base.ManagedObjectMetadata = function(sClassName, oClassInfo) {

	// call super constructor
	sap.ui.base.Metadata.apply(this, arguments);

};

//chain the prototypes
sap.ui.base.ManagedObjectMetadata.prototype = jQuery.sap.newObject(sap.ui.base.Metadata.prototype);

/**
 * @private
 */
sap.ui.base.ManagedObjectMetadata.prototype.applySettings = function(oClassInfo) {

	var oStaticInfo = oClassInfo.metadata;

	sap.ui.base.Metadata.prototype.applySettings.call(this, oClassInfo);

	var rPlural = /(children|ies|ves|oes|ses|ches|shes|xes|s)$/i;
	var mSingular = {'children' : -3, 'ies' : 'y', 'ves' : 'f', 'oes' : -2, 'ses' : -2, 'ches' : -2, 'shes' : -2, 'xes' : -2, 's' : -1 };

	function normalize(mInfoMap, sDefaultName, oDefaultValues) {
		var sName,oInfo;
		mInfoMap = mInfoMap || {};
		for(sName in mInfoMap) {
			oInfo = mInfoMap[sName];
			// if settings are not an object literal and if there is a default setting, set it
			if ( sDefaultName && typeof oInfo !== "object" ) {
				oInfo = {};
				oInfo[sDefaultName] = mInfoMap[sName];
			}
			oInfo = jQuery.extend({}, oDefaultValues, oInfo);
			oInfo.name = sName;
			// if info contains a multiple flag but no singular name, calculate one
			if ( oInfo.multiple === true && !oInfo.singularName) {
				oInfo.singularName = sName.replace(rPlural, function($,sPlural) {
					var vRepl = mSingular[sPlural.toLowerCase()];
					return typeof vRepl === "string" ? vRepl : sPlural.slice(0,vRepl);
				});
			}
			mInfoMap[sName] = oInfo;
		}
		return mInfoMap;
	}

	function filter(mInfoMap, bPublic) {
		var mResult={},sName;
		for(sName in mInfoMap) {
			if ( bPublic === (mInfoMap[sName].visibility === 'public') ) {
				mResult[sName] = mInfoMap[sName];
			}
		}
		return mResult;
	}
	
	var rLibName = /([a-z][^.]*(?:\.[a-z][^.]*)*)\./;

	function defaultLibName(sName) {
	  var m = rLibName.exec(sName);
	  return (m && m[1]) || "";
	}

	// init basic metadata from static infos and fallback to defaults
	this._sLibraryName = oStaticInfo.library || defaultLibName(this.getName());
	this._mProperties = normalize(oStaticInfo.properties, "type", { type : "string", group : "Misc" });
	var mAllAggregations = normalize(oStaticInfo.aggregations, "type", { type : "sap.ui.core.Control", multiple : true, visibility : 'public' });
	this._mAggregations = filter(mAllAggregations, true);
	this._mPrivateAggregations = filter(mAllAggregations, false);
	this._sDefaultAggregation = oStaticInfo.defaultAggregation || null;
	this._mAssociations = normalize(oStaticInfo.associations, "type", { type : "sap.ui.core.Control", multiple : false});
	this._mEvents = normalize(oStaticInfo.events, /* no default setting */ null, { allowPreventDefault : false });

	this._bEnriched = false;

	if ( oClassInfo.metadata.__version > 1.0 ) {
		this.generateAccessors();
	}

};

/**
 * @private
 */
sap.ui.base.ManagedObjectMetadata.prototype.afterApplySettings = function() {

	sap.ui.base.Metadata.prototype.afterApplySettings.call(this);

	// if there is a parent class, produce the flattened "all" views for the element specific metadata
	// PERFOPT: this could be done lazily
	var oParent = this.getParent();
	if ( oParent && oParent instanceof sap.ui.base.ManagedObjectMetadata ) {
		this._mAllEvents = jQuery.extend({},oParent._mAllEvents, this._mEvents);
		this._mAllProperties = jQuery.extend({},oParent._mAllProperties, this._mProperties);
		this._mAllPrivateAggregations = jQuery.extend({},oParent._mAllPrivateAggregations, this._mPrivateAggregations);
		this._mAllAggregations = jQuery.extend({},oParent._mAllAggregations, this._mAggregations);
		this._mAllAssociations = jQuery.extend({},oParent._mAllAssociations, this._mAssociations);
		this._sDefaultAggregation = this._sDefaultAggregation || oParent._sDefaultAggregation;
		if ( oParent._mHiddenAggregations ) {
		  this._mHiddenAggregations = jQuery.extend({},oParent._mHiddenAggregations);
		}
	} else {
		this._mAllEvents = this._mEvents;
		this._mAllProperties = this._mProperties;
		this._mAllPrivateAggregations = this._mPrivateAggregations;
		this._mAllAggregations = this._mAggregations;
		this._mAllAssociations = this._mAssociations;
	}

};

sap.ui.base.ManagedObjectMetadata.Kind = {
  PROPERTY :0, SINGLE_AGGREGATION : 1, MULTIPLE_AGGREGATION : 2, SINGLE_ASSOCIATION : 3, MULTIPLE_ASSOCIATION : 4, EVENT : 5
};


/**
 * Returns the name of the library that contains the described UIElement.
 * @return {string} the name of the library
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getLibraryName = function() {
	return this._sLibraryName;
};

/**
 * Returns whether the class/control is abstract
 * @return {boolean} whether the class/control is abstract
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.isAbstract = function() {
	return this._bAbstract;
};

/**
 * Declares an additional property for the UIElement class described by this metadata.
 *
 * Any property declaration via this method must happen before the described class
 * is subclassed, or the added property will not be visible in the subclass.
 *
 * Typically used to enrich UIElement classes in an aspect oriented manner.
 * @public
 * @see sap.ui.core.EnabledPropagator
 */
sap.ui.base.ManagedObjectMetadata.prototype.addProperty = function(sName, oInfo) {
	oInfo.name = sName;
	this._mProperties[sName] = oInfo;
	if(!this._mAllProperties[sName]) {// ensure extended AllProperties meta-data is also enriched
		this._mAllProperties[sName] = oInfo;
	}

	if ( this._bEnriched ) { // does not seem right! this is the 'drop out' condition for _enrichChildInfos() -> senseless
		this._enrichChildInfos();
	}
	// TODO notify listeners (subclasses) about change
};

/**
 * Checks the existance of the given property by its name
 * @param {string} sName name of the property
 * @return {boolean} true, if the property exists
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.hasProperty = function(sName) {
	return !!this._mAllProperties[sName];
};

/**
 * Returns infos about the properties declared by the UIElement class
 * described by this metadata object. Properties from ancestor classes
 * are not returned.
 *
 * The returned map contains property info objects keyed by the property name.
 *
 * @return {map} Map of property infos keyed by property names
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getProperties = function() {
	return this._mProperties;
};

/**
 * Returns infos about all properties declared by the UIElement class
 * described by this metadata object as well as properties from base classes.
 *
 * The returned map contains property info objects keyed by the property name.
 *
 * @return {map} Map of property infos keyed by property names
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllProperties = function() {
	return this._mAllProperties;
};

/**
 * Returns infos about the public aggregations declared by the UIElement class
 * described by this metadata object. Aggregations from ancestor classes
 * are not returned.
 *
 * The returned map contains aggregation info objects keyed by the aggregation name.
 * In case of 0..1 aggregations this is the singular name, otherwise it is the plural
 * name.
 *
 * @return {map} Map of aggregation infos keyed by aggregation names
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAggregations = function() {
	return this._mAggregations;
};

/**
 * Checks the existance of the given aggregation by its name
 * @param {string} sName name of the aggregation
 * @return {boolean} true, if the aggregation exists
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.hasAggregation = function(sName) {
	return !!this._mAllAggregations[sName];
};

/**
 * Returns infos about all public aggregations declared by the UIElement class
 * described by this metadata object as well as public aggregations from base classes.
 *
 * The returned map contains aggregation info objects keyed by the aggregation name.
 * In case of 0..1 aggregations this is the singular name, otherwise it is the plural
 * name.
 *
 * @return {map} Map of aggregation infos keyed by aggregation names
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllAggregations = function() {
	return this._mAllAggregations;
};

/**
 * Returns infos about all private (hidden) aggregations declared by the UIElement class
 * described by this metadata object as well as private aggregations from base classes.
 *
 * The returned map contains aggregation info objects keyed by the aggregation name.
 * In case of 0..1 aggregations this is the singular name, otherwise it is the plural
 * name.
 *
 * @return {map} Map of aggregation infos keyed by aggregation names
 * @protected
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllPrivateAggregations = function() {
	return this._mAllPrivateAggregations;
};

/**
 * Returns the info object for a public or private aggregation declared by the described 
 * ManagedObject class or by any of its ancestors.
 *
 * @return {object} aggregation info or null
 * @protected
 */
sap.ui.base.ManagedObjectMetadata.prototype.getManagedAggregation = function(sAggregationName) {
	return this._mAllAggregations[sAggregationName] || this._mAllPrivateAggregations[sAggregationName] 
};

/**
 * Returns the name of the default aggregation of this control.
 * If the control itself does not define a default aggregation, then the
 * default aggregation of the parent is returned. If no control in the
 * hierarchy defines a default aggregation, null is returned.
 *
 * @return {string} Name of the default aggregation for this class
 */
sap.ui.base.ManagedObjectMetadata.prototype.getDefaultAggregationName = function() {
	return this._sDefaultAggregation;
};

/**
 * Returns the name of the default aggregation of this control.
 * If the control itself does not define a default aggregation, then the
 * default aggregation of the parent is returned.
 *
 * @return {string} Name of the default aggregation for this class
 */
sap.ui.base.ManagedObjectMetadata.prototype.getDefaultAggregation = function() {
	return this._sDefaultAggregation && this.getAllAggregations()[this._sDefaultAggregation];
};

/**
 * Returns infos about the associations declared by the UIElement class
 * described by this metadata object. Associations from ancestor classes
 * are not returned.
 *
 * The returned map contains association info objects keyed by the association name.
 * In case of 0..1 associations this is the singular name, otherwise it is the plural
 * name.
 *
 * @return {map} Map of association infos keyed by association names
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAssociations = function() {
	return this._mAssociations;
};

/**
 * Checks the existance of the given association by its name
 * @param {string} sName name of the association
 * @return {boolean} true, if the association exists
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.hasAssociation = function(sName) {
	return !!this._mAllAssociations[sName];
};

/**
 * Returns infos about all associations declared by the UIElement class
 * described by this metadata object as well as associations from base classes.
 *
 * The returned map contains association info objects keyed by the association name.
 * In case of 0..1 associations this is the singular name, otherwise it is the plural
 * name.
 *
 * @return {map} Map of association infos keyed by association names
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllAssociations = function() {
	return this._mAllAssociations;
};

/**
 * Returns infos about the events declared by the UIElement class
 * described by this metadata object. Events from ancestor classes
 * are not returned.
 *
 * The returned map contains events info objects keyed by the events name.
 *
 * @return {map} Map of event infos keyed by event names
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getEvents = function() {
	return this._mEvents;
};

/**
 * Checks the existance of the given event by its name
 * @param {string} sName name of the event
 * @return {boolean} true, if the event exists
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.hasEvent = function(sName) {
	return !!this._mAllEvents[sName];
};

/**
 * Returns infos about all events declared by the UIElement class
 * described by this metadata object as well as events from base classes.
 *
 * The returned map contains event info objects keyed by the event name.
 *
 * @return {map} Map of event infos keyed by event names
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getAllEvents = function() {
	return this._mAllEvents;
};

/**
 * Returns a map of default values for all properties declared by the
 * described class and its ancestors, keyed by the property name.
 *
 * @return {map} Map of default values keyed by property names
 * @public
 */
sap.ui.base.ManagedObjectMetadata.prototype.getPropertyDefaults = function() {

	var mDefaults = this._mDefaults,
		oType;
	if ( mDefaults ) {
		return mDefaults;
	}

	if ( this.getParent() instanceof sap.ui.base.ManagedObjectMetadata ) {
		mDefaults = jQuery.sap.newObject(this.getParent().getPropertyDefaults());
	} else {
		mDefaults = {};
	}

	for(var s in this._mProperties) {
		if ( this._mProperties[s].defaultValue !== null ) {
			mDefaults[s] = this._mProperties[s].defaultValue;
		} else {
			oType = sap.ui.base.DataType.getType(this._mProperties[s].type);
			if (oType instanceof sap.ui.base.DataType) {
				mDefaults[s] = oType.getDefaultValue();
			} else { // Enumeration
				for (var i in oType) {
					mDefaults[s] = oType[i];
					break;
				}
			}
		}
	}
	return (this._mDefaults = mDefaults);
};


sap.ui.base.ManagedObjectMetadata.prototype.createPropertyBag = function() {
	if ( !this._fnPropertyBagFactory ) {
		this._fnPropertyBagFactory = jQuery.sap.factory(this.getPropertyDefaults());
	}
	return new (this._fnPropertyBagFactory)();
};

/**
 * Helper method that enriches the (generated) information objects for children
 * (e.g. properties, aggregations, ...) of this Element.
 *
 * Also ensures that the parent metadata is enriched.
 *
 * @private
 */
sap.ui.base.ManagedObjectMetadata.prototype._enrichChildInfos = function() {

	if ( this._bEnriched ) {
		return;
	}

	if ( this.getParent() instanceof sap.ui.base.ManagedObjectMetadata ) {
		this.getParent()._enrichChildInfos();
	}

	var m,sName,oInfo;
	function method(sPrefix, sName) {
		return sPrefix + sName.substring(0,1).toUpperCase() + sName.substring(1);
	}

	// adapt properties
	m=this._mProperties;
	for(sName in m) {
		oInfo = m[sName];
		oInfo._sName = sName;
		oInfo._sUID = sName;
		oInfo._oParent = this;
		oInfo._iKind = sap.ui.base.ManagedObjectMetadata.Kind.PROPERTY;
		oInfo._sMutator = method("set", sName);
		oInfo._sGetter = method("get", sName);
	}

	// adapt aggregations
	m=this._mAggregations;
	for(sName in m) {
		oInfo = m[sName];
		oInfo._sName = sName;
		oInfo._sUID = "aggregation:" + sName;
		oInfo._oParent = this;
		oInfo._sDestructor = method("destroy", sName);
		oInfo._sGetter = method("get", sName);
		if ( oInfo.multiple ) {
			oInfo._iKind = sap.ui.base.ManagedObjectMetadata.Kind.MULTIPLE_AGGREGATION;
			oInfo._sMutator = method("add", oInfo.singularName);
			oInfo._sRemoveMutator = method("remove", oInfo.singularName);
			oInfo._sRemoveAllMutator = method("removeAll", sName);
		} else {
			oInfo._iKind = sap.ui.base.ManagedObjectMetadata.Kind.SINGLE_AGGREGATION;
			oInfo._sMutator = method("set", sName);
		}
	}

	// adapt associations
	m=this._mAssociations;
	for(sName in m) {
		oInfo = m[sName];
		oInfo._sName = sName;
		oInfo._sUID = "association:" + sName;
		oInfo._oParent = this;
		oInfo._sGetter = method("get", sName);
		if ( oInfo.multiple ) {
			oInfo._iKind = sap.ui.base.ManagedObjectMetadata.Kind.MULTIPLE_ASSOCIATION;
			oInfo._sMutator = method("add", oInfo.singularName);
		} else {
			oInfo._iKind = sap.ui.base.ManagedObjectMetadata.Kind.SINGLE_ASSOCIATION;
			oInfo._sMutator = method("set", sName);
		}
	}

	// adapt events
	m=this._mEvents;
	for(sName in m) {
		oInfo = m[sName];
		oInfo._sName = sName;
		oInfo._sUID = "event:" + sName;
		oInfo._oParent = this;
		oInfo._iKind = sap.ui.base.ManagedObjectMetadata.Kind.EVENT;
		oInfo._sMutator = method("attach", sName);
	}

	this._bEnriched = true;
};

/**
 * Builds a "reflection like" map of setters/type infos keyed by the possible JSON names.
 * Mainly used for the {@link sap.ui.core.Element.applySettings} method.
 *
 * @see sap.ui.core.Element.prototype.applySettings
 * @private
 */
sap.ui.base.ManagedObjectMetadata.prototype.getJSONKeys = function() {

	if ( this._mJSONKeys ) {
		return this._mJSONKeys;
	}

	this._enrichChildInfos();

	var mJSONKeys = {};
	function addKeys(m) {
		var sName, oInfo;
		for(sName in m) {
			oInfo = m[sName];
			if ( !mJSONKeys[sName] || oInfo._iKind < mJSONKeys[sName]._iKind ) {
				mJSONKeys[sName] = oInfo;
			};
			mJSONKeys[oInfo._sUID] = oInfo;
		};
	}

	addKeys(this.getAllProperties());
	addKeys(this.getAllAggregations());
	addKeys(this.getAllAssociations());
	addKeys(this.getAllEvents());

	return (this._mJSONKeys = mJSONKeys);
};

sap.ui.base.ManagedObjectMetadata.prototype.generateAccessors = function() {

	var meta=this;
	var proto = this.getClass().prototype;
	function method(sPrefix, sName, fn, bDeprecated) {
		var sName = sPrefix + sName.substring(0,1).toUpperCase() + sName.substring(1);
		if ( !proto[sName] ) {
			proto[sName] = bDeprecated ? function() {
				jQuery.sap.log.warning("Usage of deprecated feature: " + meta.getName() + "." + sName);
				return fn.apply(this, arguments);
			} : fn; 
			meta._aPublicMethods.push(sName);
		}
	}

	jQuery.each(this._mProperties, function(n,info) {
		method("get", n, function() { return this.getProperty(n); });
		method("set", n, function(v) { this.setProperty(n,v); return this; }, info.deprecated);
		if ( info.bindable ) {
			method("bind", n, function(p,fn,m) { this.bindProperty(n,p,fn,m); return this; }, info.deprecated);
			method("unbind", n, function(p) { this.unbindProperty(n,p); return this; });
		}
	});
	jQuery.each(this._mAggregations, function(n,info) {
		if ( !info.multiple ) {
			method("get", n, function() { return this.getAggregation(n); });
			method("set", n, function(v) { this.setAggregation(n,v); return this; }, info.deprecated);
		} else {
			var n1 = info.singularName;
			method("get", n, function() { return this.getAggregation(n,[]); });
			method("add", n1, function(a) { this.addAggregation(n,a); return this; }, info.deprecated);
			method("insert", n1, function(i,a) { this.insertAggregation(n,i,a); return this; }, info.deprecated);
			method("remove", n1, function(a) { return this.removeAggregation(n,a); });
			method("removeAll", n, function() { return this.removeAllAggregation(n); });
			method("indexOf", n1, function(a) { return this.indexOfAggregation(n,a); });
		}
		method("destroy", n, function() { this.destroyAggregation(n); return this; });
		if ( info.bindable ) {
			method("bind", n, function(p,t,s,f) { this.bindAggregation(n,p,t,s,f); return this; }, info.deprecated);
			method("unbind", n, function(p) { this.unbindAggregation(n,p); return this; });
		}
	});
	jQuery.each(this._mAssociations, function(n,info) {
		if ( !info.multiple ) {
			method("get", n, function() { return this.getAssociation(n); });
			method("set", n, function(v) { this.setAssociation(n,v); return this; }, info.deprecated);
		} else {
			var n1 = info.singularName;
			method("get", n, function() { return this.getAssociation(n,[]); });
			method("add", n1, function(a) { this.addAssociation(n,a); return this; }, info.deprecated);
			method("remove", n1, function(a) { return this.removeAssociation(n,a); });
			method("removeAll", n, function() { return this.removeAllAssociation(n); });
		}
	});
	jQuery.each(this._mEvents, function(n,info) {
		method("attach", n, function(d,f,o) { this.attachEvent(n,d,f,o); return this; }, info.deprecated);
		method("detach", n, function(f,o) { this.detachEvent(n,f,o); return this; });
		var n1 = !!info.allowPreventDefault;
		var n2 = !!info.enableEventBubbling;
		method("fire", n, function(p) { return this.fireEvent(n,p, n1, n2); });
	});

};

(function() {

	/**
	 * Usage counters for the different UID tokens
	 */
	var mUIDCounts = {};

	function uid(sId) {
		jQuery.sap.assert(!/[0-9]+$/.exec(sId), "AutoId Prefixes must not end with numbers");

		sId = sap.ui.getCore().getConfiguration().getUIDPrefix() + sId;

		// initialize counter
		mUIDCounts[sId] = mUIDCounts[sId] || 0;

		// combine prefix + counter
		// concatenating sId and a counter is only safe because we don't allow trailing numbers in sId!
		return (sId + mUIDCounts[sId]++);
	}

	/**
	 * Calculates a new id based on a prefix.
	 *
	 * @return {string} A (hopefully unique) control id
	 * @public
	 * @function
	 */
	sap.ui.base.ManagedObjectMetadata.uid = uid;

	/**
	 * Calculates a new id for an instance of this class.
	 *
	 * Note that the calculated short name part is usually not unique across
	 * all classes, but doesn't have to be. It might even be empty when the
	 * class name consists of invalid characters only.
	 *
	 * @return {string} A (hopefully unique) control id
	 * @public
	 */
	sap.ui.base.ManagedObjectMetadata.prototype.uid = function() {

		var sId = this._sUIDToken;
		if ( typeof sId !== "string" ) {
			// start with qualified class name
			sId  = this.getName();
			// reduce to unqualified name
			sId = sId.slice(sId.lastIndexOf('.')+1);
			// reduce a camel case, multi word name to the last word
			sId = sId.replace(/([a-z])([A-Z])/g, "$1 $2").split(" ").slice(-1)[0];
			// remove unwanted chars (and no trailing digits!) and convert to lower case
			sId = this._sUIDToken = sId.replace(/([^A-Za-z0-9-_.:])|([0-9]+$)/g,"").toLowerCase();
		}

		return uid(sId);
	};

}());
}; // end of sap/ui/base/ManagedObjectMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ComponentMetadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.ComponentMetadata
jQuery.sap.declare("sap.ui.core.ComponentMetadata");


	
/**
 * Creates a new metadata object for a Component subclass.
 *
 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
 * @param {object} oStaticInfo static info to construct the metadata from
 *
 * @experimental Since 1.9.2. The Component concept is still under construction, so some implementation details can be changed in future.
 * @class
 * @author SAP
 * @version 1.18.9
 * @since 1.9.2
 */
sap.ui.core.ComponentMetadata = function(sClassName, oClassInfo) {
	
	// call super constructor
	sap.ui.base.ManagedObjectMetadata.apply(this, arguments);
	
};

//chain the prototypes
sap.ui.core.ComponentMetadata.prototype = jQuery.sap.newObject(sap.ui.base.ManagedObjectMetadata.prototype);

sap.ui.core.ComponentMetadata.preprocessClassInfo = function(oClassInfo) {
	// if the component is a string we convert this into a "_src" metadata entry
	// the specific metadata object can decide to support this or gracefully ignore it
	// basically the ComponentMetadata makes use of this feature
	if (oClassInfo && typeof oClassInfo.metadata === "string") {
		oClassInfo.metadata = {
			_src: oClassInfo.metadata
		};
	}
	return oClassInfo;
};

sap.ui.core.ComponentMetadata.prototype.applySettings = function(oClassInfo) {

	var oStaticInfo = oClassInfo.metadata;

	sap.ui.base.ManagedObjectMetadata.prototype.applySettings.call(this, oClassInfo);

	// if the component specifies the metadata property: loadFromFile then
	// the component metadata will be loaded from the specified file 
	// which needs to be located next to the Component.js file.
	var sName = this.getName(),
	    sPackage = sName.replace(/\.\w+?$/, "");
	if (oStaticInfo._src) {
		jQuery.sap.log.warning("The metadata of the component " + sName + " is loaded from file " + oStaticInfo._src + ". This is a design time feature and not for productive usage!");
		var sUrl = jQuery.sap.getModulePath(sPackage, "/" + oStaticInfo._src);
		var oResponse = jQuery.sap.syncGetJSON(sUrl);
		if (oResponse.success) {
			jQuery.extend(oStaticInfo, oResponse.data);
		} else {
			jQuery.sap.log.error("Failed to load component metadata from \"" + oStaticInfo._src + "\"! Reason: " + oResponse.error);
		}
	}
	
	// keep the infor about the component name (for customizing)
	this._sComponentName = sPackage;
	
	// static initialization flag & instance count
	this._bInitialized = false;
	this._iInstanceCount = 0;
	
	// extract the custom component data from the static info 
	this._sVersion = oStaticInfo.version;
	this._mDependencies = oStaticInfo.dependencies;
	this._aIncludes = oStaticInfo.includes;
	this._mConfig = oStaticInfo.config;
	this._mCustomizing = oStaticInfo.customizing;

	// extract the models and services custom component data
	// (as models and services are experimental the default value is applied here
	//  to avoid mentioning those options in the component metadata section!) 
	this._mModels = oStaticInfo.models || {}; 
	this._mServices = oStaticInfo.services || {};
	
	// some metadata needs to be merged with the metadata for the parent component
	// except of the version, dependencies and includes => they are handled by the
	// specific component metadata implementation and no merge is required here!
	var oParent = this.getParent();
	if (oParent instanceof sap.ui.core.ComponentMetadata) {
		this._mConfig = jQuery.extend(true, {}, oParent._mConfig, this._mConfig);
		this._mCustomizing = jQuery.extend(true, {}, oParent._mCustomizing, this._mCustomizing);
		this._mModels = jQuery.extend(true, {}, oParent._mModels, this._mModels);
		this._mServices = jQuery.extend(true, {}, oParent._mServices, this._mServices);
	}
	
};

/**
 * Static initialization of components. This function will be called by the 
 * component and the metadata decides whether to execute the static init code
 * or not. It will be called the first time a component is initialized.
 * @private
 */
sap.ui.core.ComponentMetadata.prototype.init = function() {
	if (!this._bInitialized) {

		// first we load the dependencies of the parent
		var oParent = this.getParent();
		if (oParent instanceof sap.ui.core.ComponentMetadata) {
			oParent.init();
		}
		
		// first the dependencies have to be loaded (other UI5 libraries)
		this._loadDependencies();
		
		// then load the custom scripts and CSS files
		this._loadIncludes();
		
		this._bInitialized = true;
		
	}
};

/**
 * Static termination of components.
 *  
 * TODO: Right now it is unclear when this function should be called. Just to
 *       make sure that we do not forget this in future. 
 * @private
 */
sap.ui.core.ComponentMetadata.prototype.exit = function() {
	if (this._bInitialized) {
		var oParent = this.getParent();
		if (oParent instanceof sap.ui.core.ComponentMetadata) {
			oParent.exit();
		}
		// TODO: implement unload of CSS, ...
		this._bInitialized = false;
	}
};

/**
 * Component instances need to register themselves in this method to enable 
 * the customizing for this component. This will only be done for the first
 * instance and only if a customizing configuration is available.
 * @private
 */
sap.ui.core.ComponentMetadata.prototype.onInitComponent = function() {
	if (this._iInstanceCount === 0 && !jQuery.isEmptyObject(this._mCustomizing)) {
		jQuery.sap.require("sap.ui.core.CustomizingConfiguration");
		sap.ui.core.CustomizingConfiguration.activateForComponent(this._sComponentName);
	}
	this._iInstanceCount++;
};

/**
 * Component instances need to unregister themselves in this method to disable 
 * the customizing for this component. This will only be done for the last
 * instance and only if a customizing configuration is available.
 * @private
 */
sap.ui.core.ComponentMetadata.prototype.onExitComponent = function() {
	this._iInstanceCount--;
	if (this._iInstanceCount === 0 && !jQuery.isEmptyObject(this._mCustomizing)) {
		if (sap.ui.core.CustomizingConfiguration) {
			sap.ui.core.CustomizingConfiguration.deactivateForComponent(this._sComponentName);
		}
	}
};

/**
 * Returns the dependencies defined in the metadata of the component. If not specified, the return value is null.
 * @return {Object} Component dependencies. 
 * @public
 */
sap.ui.core.ComponentMetadata.prototype.getDependencies = function() {
	return this._mDependencies;
};

/**
 * Returns the array of the included files that the Component requires such as css and js. If not specified or the array is empty, the return value is null.
 * @return {string[]} Included files.
 * @public
 */
sap.ui.core.ComponentMetadata.prototype.getIncludes = function() {
	return (this._aIncludes && this._aIncludes.length > 0) ? this._aIncludes : null;
};

/**
 * Returns the required version of SAP UI5 defined in the metadata of the Component. If returned value is null, then no special UI5 version is required.
 * @return {string} Required version of UI5 or if not specified then null.
 * @public
 */
sap.ui.core.ComponentMetadata.prototype.getUI5Version = function() {
	return this._mDependencies ? this._mDependencies.ui5version : null;
};   

/**
 * Returns array of components specified in the metadata of the Component. If not specified or the array is empty, the return value is null.
 * @return {string[]} Required Components.
 * @public
 */
sap.ui.core.ComponentMetadata.prototype.getComponents = function() {
	var aComponents = null;
	if (this._mDependencies) {
		if (this._mDependencies.components && (this._mDependencies.components.length > 0) ) {
			aComponents = this._mDependencies.components;
		}
	} 
	return aComponents;
};

/**
 * Returns array of libraries specified in metadata of the Component, that are automatically loaded when an instance of the component is created.
 * If not specified or the array is empty, the return value is null.
 * @return {string[]} Required libraries.
 * @public
 */
sap.ui.core.ComponentMetadata.prototype.getLibs = function() {
	var aLibs = null;
	if (this._mDependencies) {
		if (this._mDependencies.libs && (this._mDependencies.libs.length > 0) ) {
			aLibs = this._mDependencies.libs;
		}
	} 
	return aLibs;
};

/**
 * Returns the version of the component. If not specified, the return value is null.
 * @return {string} The version of the component.
 * @public
 */
sap.ui.core.ComponentMetadata.prototype.getVersion = function() {
	return this._sVersion;
};


/**
 * Returns a copy of the configuration property to disallow modifications. If no 
 * key is specified it returns the complete configuration property.
 * @param {string} [sKey] the key of the configuration property
 * @return {object} the value of the configuration property
 * @public
 * @since 1.15.1
 */
sap.ui.core.ComponentMetadata.prototype.getConfig = function(sKey) {
	return this._mConfig ? jQuery.extend({}, sKey ? this._mConfig[sKey] : this._mConfig) : undefined;
};


/**
 * Returns a copy of the customizing property
 * @return {object} the value of the customizing property
 * @private
 * @since 1.15.1
 * @experimental Since 1.15.1. Implementation might change. 
 */
sap.ui.core.ComponentMetadata.prototype.getCustomizing = function() {
	return this._mCustomizing ? jQuery.extend({}, this._mCustomizing) : undefined;
};


/**
 * Returns the models configuration which defines the available models of the
 * component. 
 * @return {object} models configuration
 * @private
 * @since 1.15.1 
 * @experimental Since 1.15.1. Implementation might change. 
 */
sap.ui.core.ComponentMetadata.prototype.getModels = function() {
	return this._mModels;
};

/**
 * Returns the services configuration which defines the available services of the
 * component. 
 * @return {object} services configuration
 * @private
 * @since 1.15.1 
 * @experimental Since 1.15.1. Implementation might change. 
 */
sap.ui.core.ComponentMetadata.prototype.getServices = function() {
	return this._mServices;
};

/**
 * Loads the included CSS and JavaScript resources. The resources will be 
 * resoloved relative to the component location. 
 * 
 * @private
 */
sap.ui.core.ComponentMetadata.prototype._loadIncludes = function() {

	// afterwards we load our includes!
	var aIncludes = this.getIncludes();
	if (aIncludes && aIncludes.length > 0) {
		var that = this;
		var sLibName = this.getLibraryName();
		jQuery.each(aIncludes, function(i, sFile) {
			if (sFile.match(/\.css$/i)) { 
				var sCssUrl = sap.ui.resource(sLibName, sFile);
				jQuery.sap.log.info("Component \"" + that.getName() + "\" is loading CSS: \"" + sCssUrl + "\"");
				jQuery.sap.includeStyleSheet(sCssUrl /* TODO: , sId (do we have a good idea how to create the id?!) */ );
			} else {
				// load javascript file
				var m = sFile.match(/\.js$/i);
				if (m) {
					// prepend lib name to path, remove extension
					var sPath = sLibName.replace(/\./g, '/') + (sFile.slice(0, 1) === '/' ? '' : '/') + sFile.slice(0, m.index);
					jQuery.sap.log.info("Component \"" + that.getName() + "\" is loading JS: \"" + sPath + "\"");
					// call internal require variant that accepts a requireJS path
					jQuery.sap._requirePath(sPath);
				}
			}
		});
	}
	
};

/**
 * Load external dependencies (like libraries and components)
 * 
 * @private
 */
sap.ui.core.ComponentMetadata.prototype._loadDependencies = function() {

	// afterwards we load our dependencies!
	var that = this,
	    oDep = this.getDependencies();
	if (oDep) {
		
		// load the libraries
		var aLibraries = oDep.libs;
		if (aLibraries) {
			jQuery.each(aLibraries, function(i, sLib) {
				jQuery.sap.log.info("Component \"" + that.getName() + "\" is loading library: \"" + sLib + "\"");
				sap.ui.getCore().loadLibrary(sLib);
			});
		}
		
		// load the components
		var aComponents = oDep.components;
		if (aComponents){
			jQuery.each(aComponents, function(i, sName){
				jQuery.sap.log.info("Component \"" + that.getName() + "\" is loading component: \"" + sName + ".Component\"");
				sap.ui.component.load({
					name: sName
				});
			});
		}
		
	}
	
};

}; // end of sap/ui/core/ComponentMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Configuration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

//Provides class sap.ui.core.Configuration
jQuery.sap.declare("sap.ui.core.Configuration");




/*global URI *///declare unusual global vars for JSLint/SAPUI5 validation

(function() {

	/**
	 * Creates a new Configuration object.
	 *
	 * @class Collects and stores the configuration of the current environment.
	 *
	 * The Configuration is initialized once when the {@link sap.ui.core.Core} is created.
	 * There are different ways to set the environment configuration (in ascending priority):
	 * <ol>
	 * <li>System defined defaults
	 * <li>Server wide defaults, read from /sap-ui-config.json
	 * <li>Properties of the global configuration object window["sap-ui-config"]
	 * <li>A configuration string in the data-sap-ui-config attribute of the bootstrap tag
	 * <li>Individual data-sap-ui-xyz attributes of the bootstrap tag
	 * <li>Using URL parameters
	 * <li>Setters in this Configuration object (only for some parameters)
	 * </ol>
	 *
	 * That is, attributes of the DOM reference override the system defaults, URL parameters
	 * override the DOM attributes (where empty URL parameters set the parameter back to its
	 * system default). Calling setters at runtime will override any previous settings
	 * calculated during object creation.
	 *
	 * The naming convention for parameters is:
	 * <ul>
	 * <li>in the URL : sap-ui-<i>PARAMETER-NAME</i>="value"
	 * <li>in the DOM : data-sap-ui-<i>PARAMETER-NAME</i>="value"
	 * </ul>
	 * where <i>PARAMETER-NAME</i> is the name of the parameter in lower case.
	 *
	 * Values of boolean parameters are case insensitive where "true" and "x" are interpreted as true.
	 *
	 * @extends sap.ui.base.Object
	 * @author Frank Weigel (Martin Schaus)
	 * @constructor
	 * @public
	 * @name sap.ui.core.Configuration
	 */
	sap.ui.base.Object.extend("sap.ui.core.Configuration", /** @lends sap.ui.core.Configuration.prototype */ {

		constructor : function(oCore) {
			
			this._oCore = oCore;
			
			function detectLanguage() {
				var match;
				if (!!sap.ui.Device.os.android) {
					// on Android, navigator.language is hardcoded to 'en', so check UserAgent string instead 
					match = navigator.userAgent.match(/\s([a-z]{2}-[a-z]{2})[;)]/i);
					if ( match ) {
						return match[1];
					}
          // okay, we couldn't find a language setting. It might be better to fallback to 'en' instead of having no language 
				} 
				return navigator.language || navigator.userLanguage || navigator.browserLanguage;
			}

			// definition of supported settings
			var M_SETTINGS = {
					"theme"                 : { type : "string",   defaultValue : "base" },
					"language"              : { type : "string",   defaultValue : detectLanguage() },
					"formatLocale"          : { type : "string",   defaultValue : null },
					// "timezone"              : "UTC",
					"accessibility"         : { type : "boolean",  defaultValue : true },
					"animation"             : { type : "boolean",  defaultValue : true },
					"rtl"                   : { type : "boolean",  defaultValue : null },
					"debug"                 : { type : "boolean",  defaultValue : false },
					"inspect"               : { type : "boolean",  defaultValue : false },
					"originInfo"            : { type : "boolean",  defaultValue : false },
					"noConflict"            : { type : "boolean",  defaultValue : false,     noUrl:true },
					"noDuplicateIds"        : { type : "boolean",  defaultValue : true },
					"trace"                 : { type : "boolean",  defaultValue : false,     noUrl:true },
					"modules"               : { type : "string[]", defaultValue : [],        noUrl:true },
					"areas"                 : { type : "string[]", defaultValue : null,      noUrl:true },
					// "libs"                  : { type : "string[]", defaultValue : [],        noUrl:true }, deprecated, handled below
					"onInit"                : { type : "code",     defaultValue : undefined, noUrl:true },
					"uidPrefix"             : { type : "string",   defaultValue : "__",      noUrl:true },
					"ignoreUrlParams"       : { type : "boolean",  defaultValue : false,     noUrl:true },
					"weinreServer"          : { type : "string",   defaultValue : "",        noUrl:true },
					"weinreId"              : { type : "string",   defaultValue : "" },
					"preload"               : { type : "string",   defaultValue : "auto" },
					"rootComponent"         : { type : "string",   defaultValue : "",        noUrl:true },
					"xx-rootComponentNode"  : { type : "string",   defaultValue : "",        noUrl:true },
					"application"           : { type : "string",   defaultValue : "" },
					"appCacheBuster"        : { type : "string[]", defaultValue : [] },
					"xx-appCacheBusterMode" : { type : "string",   defaultValue : "sync" },
					"xx-disableCustomizing" : { type : "boolean",  defaultValue : false,     noUrl:true },
					"xx-loadAllMode"        : { type : "boolean",  defaultValue : false,     noUrl:true },
					"xx-test-mobile"        : { type : "boolean",  defaultValue : false },
					"xx-preloadLibCss"      : { type : "string[]", defaultValue : [] },
					"xx-componentPreload"   : { type : "string",   defaultValue : "" },
					"xx-bindingSyntax"      : { type : "string",   defaultValue : "simple",  noUrl:true }, // simple|complex...
					"xx-designMode"         : { type : "boolean",  defaultValue : false },
					"xx-accessibilityMode"  : { type : "boolean",  defaultValue : false },
					"xx-supportedLanguages" : { type : "string[]", defaultValue : [] }, // *=any, sapui5 or list of locales
					"xx-bootTask"           : { type : "function", defaultValue : undefined, noUrl:true },
					"xx-suppressDeactivationOfControllerCode" : { type : "boolean",  defaultValue : false }, //temporarily to suppress the deactivation of controller code in design mode
					"statistics"            : { type : "boolean",  defaultValue : false }
			};

			var M_COMPAT_FEATURES = {
					"xx-test"               : "1.15", //for testing purposes only
					"flexBoxPolyfill"       : "1.14",
					"sapMeTabContainer"     : "1.14",
					"sapMeProgessIndicator" : "1.14",
					"sapMGrowingList"       : "1.14",
					"sapMListAsTable"       : "1.14",
					"sapMDialogWithPadding" : "1.14"
			};

			this.oFormatSettings = new sap.ui.core.Configuration.FormatSettings(this);

			/* Object that carries the real configuration data */
			var config = this;

			function setValue(sName, sValue) {
				if ( typeof sValue === "undefined" || sValue === null ) {
					return;
				}
				switch(M_SETTINGS[sName].type) {
				case "boolean":
					if ( typeof sValue === "string" ) {
						if (M_SETTINGS[sName].defaultValue) {
							config[sName] = sValue.toLowerCase() != "false";
						} else {
							config[sName] = sValue.toLowerCase() === "true" || sValue.toLowerCase() === "x";
						}
					} else {
						// boolean etc.
						config[sName] = !!sValue;
					}
					break;
				case "string":
					config[sName] = "" + sValue; // enforce string
					break;
				case "code":
					config[sName] = typeof sValue === "function" ? sValue : String(sValue);
					break;
				case "function":
					if ( typeof sValue !== "function" ) {
						throw new Error("unsupported value");
					}
					config[sName] = sValue;
					break;
				case "string[]":
					if ( jQuery.isArray(sValue) ) {
						config[sName] = sValue;
					} else if ( typeof sValue === "string" ) {
						config[sName] = jQuery.map(sValue.split(/[ ,;]/), function($) { return jQuery.trim($); });
					} else {
						throw new Error("unsupported value");
					}
					break;
				default:
					throw new Error("illegal state");
				}
			}

			function validateThemeRoot(sThemeRoot) {
				var oThemeRoot,
					sPath;

				try {
					oThemeRoot = new URI(sThemeRoot, window.location.href).normalize();
					sPath = oThemeRoot.path();
					return sPath + (sPath.slice(-1) === '/' ? '' : '/') + "UI5/";
				} catch (e) {
					// malformed URL are also not accepted 
				}
			}

			// 1. collect the defaults
			for (var n in M_SETTINGS ) {
				config[n] = M_SETTINGS[n].defaultValue;
			}

			// 2. read server wide sapui5 configuration
			/* TODO: RETHINK server wide sapui5 configuration to make it optional
    			 currently it is forcing a request which is annoying customers :
    			   - Think about an option which enables loading of server wide config!
    	var sUrl = "/sap-ui-config.json";
    	var oResponse = jQuery.sap.sjax({url:sUrl});
    	if (oResponse.success) {
    		var oServerCfg = {};
    		if (typeof oResponse.data == "string") {
    			try {
    				oServerCfg = jQuery.parseJSON(oResponse.data);
    			} catch(ex) {
    				jQuery.sap.log.warning("Error when parsing the JSON configuration content from " + sUrl + " : " + ex);
    			}
    		} else {
    			oServerCfg = oResponse.data;
    		}
    		for (var n in M_SETTINGS) {
    			if (oServerCfg[n]) {
    				setValue(n, oServerCfg[n]);
    			}
    		}
    	}
			 */

			// 3.-5. apply settings from global config object (already merged with script tag attributes)
			var oCfg = window["sap-ui-config"] || {};
			oCfg.oninit = oCfg.oninit || oCfg["evt-oninit"];
			for (var n in M_SETTINGS) {
				setValue(n, oCfg[n.toLowerCase()]);
			}
			// if libs are configured, convert them to modules and prepend them to the existing modules list
			if ( oCfg.libs ) {
				config.modules = jQuery.map(oCfg.libs.split(","), function($) { return jQuery.trim($)+".library"; }).concat(config.modules);
			}

			var PARAM_CVERS = "compatversion";
			var DEFAULT_CVERS = oCfg[PARAM_CVERS];
			var BASE_CVERS = jQuery.sap.Version("1.14");
			this._compatversion = {};

			function _getCVers(key){
				var v = !key ? DEFAULT_CVERS || BASE_CVERS.toString()
						: oCfg[PARAM_CVERS+"-"+key.toLowerCase()] || DEFAULT_CVERS || M_COMPAT_FEATURES[key] || BASE_CVERS.toString();
				v = jQuery.sap.Version(v.toLowerCase() === "edge" ? sap.ui.version : v);
				//Only major and minor version are relevant
				return jQuery.sap.Version(v.getMajor(), v.getMinor());
			}

			this._compatversion._default = _getCVers();
			for(var n in M_COMPAT_FEATURES){
				this._compatversion[n] = _getCVers(n);
			}


			// 6. apply the settings from the url (only if not blocked by app configuration)
			if ( !config.ignoreUrlParams ) {
				var sUrlPrefix = "sap-ui-";
				var oUriParams = jQuery.sap.getUriParameters();

				// map SAP parameters (if later as sap-ui parameter set this wins)
				if (oUriParams.mParams['sap-locale'] || oUriParams.mParams['sap-language']) {
					// map sap-locale or sap-language to sap-ui-language
					// if sap-language is used, handle some legacy language codes
					var sValue = oUriParams.get('sap-locale') || M_ABAP_LANGUAGE_TO_LOCALE[oUriParams.get('sap-language').toUpperCase()] || oUriParams.get('sap-language');
					if (sValue === "") {
						//empty URL parameters set the parameter back to its system default
						config['language'] = M_SETTINGS['language'].defaultValue;
					} else {
						//sets the value (null or empty value ignored)
						setValue('language', sValue);
					}
				}

				if (oUriParams.mParams['sap-accessibility']) {
					// "" = false, "X", "x" = true
					var sValue = oUriParams.get('sap-accessibility');
					if (sValue === "X" || sValue === "x") {
						setValue('xx-accessibilityMode', true);
					} else {
						setValue('xx-accessibilityMode', false);
					}
				}

				if (oUriParams.mParams['sap-rtl']) {
					// "" = false, "X", "x" = true
					var sValue = oUriParams.get('sap-rtl');
					if (sValue === "X" || sValue === "x") {
						setValue('rtl', true);
					} else {
						setValue('rtl', false);
					}
				}

				if (oUriParams.mParams['sap-theme']) {
					var sValue = oUriParams.get('sap-theme');
					if (sValue === "") {
						// empty URL parameters set the parameter back to its system default
						config['theme'] = M_SETTINGS['theme'].defaultValue;
					} else {
						setValue('theme', sValue);
					}
				}

				if (oUriParams.mParams['sap-statistics']) {
					var sValue = oUriParams.get('sap-statistics');
					setValue('statistics', sValue);
				}

				// now analyze sap-ui parameters
				for (var n in M_SETTINGS) {
					if ( M_SETTINGS[n].noUrl ) {
						continue;
					}
					var sValue = oUriParams.get(sUrlPrefix + n);
					if (sValue === "") {
						//empty URL parameters set the parameter back to its system default
						config[n] = M_SETTINGS[n].defaultValue;
					} else {
						//sets the value (null or empty value ignored)
						setValue(n, sValue);
					}
				}
			}

		  // calculate RTL mode
			this.derivedRTL = sap.ui.core.Locale._impliesRTL(config.language);
			
			// analyze theme parameter
			var sTheme = config.theme;
			var sThemeRoot;
			var iIndex = sTheme.indexOf("@");
			if (iIndex >= 0) {
				sThemeRoot = validateThemeRoot(sTheme.slice(iIndex+1));
				if ( sThemeRoot ) {
					config.theme = sTheme.slice(0, iIndex);
					config.themeRoot = sThemeRoot;
				} else {
					// fallback to non-URL parameter (if not equal to sTheme)
					config.theme = (oCfg.theme && oCfg.theme !== sTheme) ? oCfg.theme : "base";
					iIndex = -1; // enable theme mapping below 
				}
			}

			config.theme = this._normalizeTheme(config.theme, sThemeRoot); 

			var aLangs = config['xx-supportedLanguages'];
			if ( aLangs.length === 0 || (aLangs.length === 1 && aLangs[0] === '*') ) {
				aLangs = [];
			} else if ( aLangs.length === 1 && aLangs[0] === 'default' ) {
				aLangs = ",ar,bg,ca,cs,da,de,el,en,es,et,fi,fr,hi,hr,hu,it,iw,ja,ko,lt,lv,nl,no,pl,pt,ro,ru,sh,sk,sl,sv,th,tr,uk,vi,zh_CN,zh_TW".split(/,/);
				if ( aLangs.length === 1 && aLangs[0].slice(0,1) === '@' ) {
					aLangs = [];
				}
			}
			config['xx-supportedLanguages'] = aLangs; 
			
			// log  all non default value
			for (var n in M_SETTINGS) {
				if ( config[n] !== M_SETTINGS[n].defaultValue ) {
					jQuery.sap.log.info("  " + n + " = " + config[n]);
				}
			}
		},
		
		/**
		 * Returns the version of the framework.
		 * 
		 * Similar to <code>sap.ui.version</code>.
		 * 
		 * @return {jQuery.sap.Version} the version
		 * @public
		 */
		getVersion : function () {
			if(this._version){
				return this._version;
			}
			
			this._version = new jQuery.sap.Version(sap.ui.version);
			return this._version;
		},
		
		/**
		 * Returns the used compatibility version for the given feature.
		 * 
		 * @param {string} sFeature the key of desired feature
		 * @return {jQuery.sap.Version} the used compatibility version
		 * @public
		 */
		getCompatibilityVersion : function (sFeature) {
			if(typeof(sFeature) === "string" && this._compatversion[sFeature]){
				return this._compatversion[sFeature];
			}
			
			return this._compatversion._default;
		},

		/**
		 * Returns the theme name
		 * @return {string} the theme name
		 * @public
		 */
		getTheme : function () {
			return this.theme;
		},

		/**
		 * Allows setting the theme name
		 * @param {string} sTheme the theme name
		 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
		 * @private
		 */
		_setTheme : function (sTheme) {
			this.theme = sTheme;
			return this;
		},

		/**
		 * Normalize the given theme, resolve known aliases
		 * @private
		 */
		_normalizeTheme : function (sTheme, sThemeBaseUrl) {
			if ( sTheme && sThemeBaseUrl == null && sTheme.match(/^sap_corbu$/i) ) 
				return "sap_goldreflection";
			return sTheme;
		},

		/**
		 * Returns the language string with language and country code
		 * @return {string} the language string with language and country code
		 * @public
		 */
		getLanguage : function () {
			return this.language;
		},

		/**
		 * Sets a new language tag to be used from now on for language/region dependent 
		 * functionality (e.g. formatting, data types, translated texts, ...). 
		 * 
		 * When the language has changed, the Core will fire its 
		 * {@link sap.ui.core.Core#event:localizationChanged localizationChanged} event.
		 * 
		 * The framework <strong>does not</strong> guarantee that already created, language 
		 * dependent objects will be updated by this call. It therefore remains best practice 
		 * for applications to switch the language early, e.g. before any language dependent 
		 * objects are created. Applications that need to support more dynamic changes of 
		 * the language should listen to the <code>localizationChanged</code> event and adapt 
		 * all language dependent objects that they use (e.g. by rebuilding their UI).
		 * 
		 * Currently, the framework notifies the following objects about a change of the
		 * localization settings before it fires the <code>localizationChanged</code> event:
		 * 
		 * <ul>
		 * <li>date and number data types that are used in property bindings or composite 
		 *     bindings in existing Elements, Controls, UIAreas or Components</li>
		 * <li>ResourceModels currently assigned to the Core, an UIArea, Component, 
		 *     Element or Control</li>
		 * <li>Elements or Controls that implement the <code>onLocalizationChanged</code> hook. 
		 * </ul>
		 * 
		 * It furthermore derives the RTL mode from the new language, if no explicit RTL
		 * mode has been set. If the RTL mode changes, the following additional actions will be taken:
		 * 
		 * <ul>
		 * <li>the URLs of already loaded library theme files will be changed</li>
		 * <li>the <code>dir</code> attribute of the page will be changed to reflect the new mode.</li> 
		 * <li>all UIAreas will be invalidated (which results in a rendering of the whole UI5 UI)</li> 
		 * </ul>
		 * 
		 * @param {string} sLanguage the new language as a BCP47 compliant language tag; case doesn't matter
		 *   and underscores can be used instead of a dashes to separate components (compatibility with Java Locale Ids)
		 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
		 * 
		 * @experimental Since 1.11.1 - See method documentation for restrictions.
		 * @public
		 */
		setLanguage : function (sLanguage) {
			check(typeof sLanguage === "string" && sLanguage, "sLanguage must be a BCP47 language tag or Java Locale id or null"); // TODO delegate to Locale?
			var bOldRTL = this.getRTL(),
				mChanges;
			
			if ( sLanguage != this.language ) {
				mChanges = this._collect();
				this.language = mChanges.language = sLanguage;
				this.derivedRTL = sap.ui.core.Locale._impliesRTL(sLanguage);
				if ( bOldRTL != this.getRTL() ) {
					mChanges.rtl = this.getRTL();
				}
				this._endCollect();
			}
			return this;
		},

		/**
		 * Returns the active locale for the current session. 
		 * The locale is derived from the {@link #getLanguage language} property.
		 * @return {sap.ui.core.Locale} the locale
		 * @public
		 */
		getLocale : function () {
			return new sap.ui.core.Locale(this.language);
		},

		/**
		 * Returns the format locale string with language and region code. Falls back to 
		 * language configuration, in case it has not been explicitly defined.
		 * 
		 * @return {string} the format locale string with language and country code
		 * @public
		 */
		getFormatLocale : function () {
			return this.formatLocale || this.language;
		},

		/**
		 * Sets a new formatLocale to be used from now on for retrieving locale
		 * specific formatters. Modifying this setting does not have an impact on 
		 * the retrieval of translated texts!
		 * 
		 * Can either be set to a concrete value (a BCP-47 or Java locale compliant 
		 * language tag) or to <code>null</code>. When set to <code>null</code> (default 
		 * value) then locale specific formatters are retrieved for the current language.
		 * 
		 * After changing the formatLocale, the framework tries  to update localization 
		 * specific parts of the UI. See the documentation of {@link #setLanguage} for 
		 * details and restrictions.
		 * 
		 * @param {string|null} sFormatLocale the new format locale as a BCP47 compliant language tag; 
		 *   case doesn't matter and underscores can be used instead of a dashes to separate 
		 *   components (compatibility with Java Locale Ids)
		 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
		 * 
		 * @experimental Since 1.11.1 - See documentation of {@link #setLanguage} for restrictions.
		 */
		setFormatLocale : function(sFormatLocale) {
			check(sFormatLocale === null || typeof sFormatLocale === "string" && sFormatLocale, "sFormatLocale must be a BCP47 language tag or Java Locale id or null");
			var mChanges;
			if ( sFormatLocale != this.formatLocale ) {
				mChanges = this._collect();
				this.formatLocale = mChanges.formatLocale = sFormatLocale;
				this._endCollect();
			}
			return this;
		},

		/**
		 * @experimental 
		 */
		getSupportedLanguages : function() {
			return this["xx-supportedLanguages"];
		},
		
		/**
		 * Returns whether the accessibility mode is used or not
		 * @return {boolean} whether the accessibility mode is used or not
		 * @public
		 */
		getAccessibility : function () {
			return this.accessibility;
		},

		/**
		 * Returns whether the animations are globally used
		 * @return {boolean} whether the animations are globally used
		 * @public
		 */
		getAnimation : function () {
			return this.animation;
		},

		/**
		 * Returns whether the page uses the RTL text direction.
		 * 
		 * If no mode has been explicitly set (neither true nor false),
		 * the mode is derived from the current language setting.
		 * 
		 * @return {boolean} whether the page uses the RTL text direction
		 * @public
		 */
		getRTL : function () {
			// if rtl has not been set (still null), return the rtl mode derived from the language 
			return this.rtl === null ? this.derivedRTL : this.rtl;
		},

		/**
		 * Sets the character orientation mode to be used from now on.
		 * 
		 * Can either be set to a concrete value (true meaning right-to-left,
		 * false meaning left-to-right) or to <code>null</code> which means that 
		 * the character orientation mode should be derived from the current 
		 * language (incl. region) setting.
		 * 
		 * After changing the character orientation mode, the framework tries  
		 * to update localization specific parts of the UI. See the documentation of 
		 * {@link #setLanguage} for details and restrictions.
		 * 
		 * @param {boolean|null} bRTL new character orientation mode or <code>null</code>
		 * @return {sap.ui.core.Configuration} <code>this</code> to allow method chaining
		 * 
		 * @experimental Since 1.11.1 - See documentation of {@link #setLanguage} for restrictions.
		 */
		setRTL : function(bRTL) {
			check(bRTL === null || typeof bRTL === "boolean", "bRTL must be null or a boolean");
			var mChanges;
			if ( bRTL != this.rtl ) {
				mChanges = this._collect();
				this.rtl = mChanges.rtl = this.getRTL();
				this._endCollect();
			}
			return this;
		},

		/**
		 * Returns whether the page runs in debug mode
		 * @return {boolean} whether the page runs in debug mode
		 * @public
		 */
		getDebug : function () {
			return this.debug;
		},

		/**
		 * Returns whether the UI5 control inspector is displayed
		 * Has only an effect when the sap-ui-debug module has been loaded
		 * @return {boolean} whether the UI5 control inspector is displayed
		 * @public
		 */
		getInspect : function () {
			return this.inspect;
		},

		/**
		 * Returns whether the text origin information is collected
		 * @return {boolean} whether the text info is collected
		 * @public
		 */
		getOriginInfo : function () {
			return this.originInfo;
		},

		/**
		 * Returns whether there should be an exception on any duplicate element IDs
		 * @return {boolean} whether there should be an exception on any duplicate element IDs
		 * @public
		 */
		getNoDuplicateIds : function () {
			return this.noDuplicateIds;
		},

		/**
		 * Whether a trace view should be shown or not.
		 * Has only an effect when the sap-ui-debug module has been loaded
		 * either by explicitly loading it or by setting the 'debug' option to true.
		 * @return {boolean} whether a trace view should be shown
		 */
		getTrace : function () {
			return this.trace;
		},

		/**
		 * Prefix to be used for automatically generated control IDs.
		 * Default is a double underscore "__".
		 *
		 * @returns {string} the prefix to be used
		 * @public
		 */
		getUIDPrefix : function() {
			return this.uidPrefix;
		},


		/**
		 * Return whether the design mode is active or not.
		 *
		 * @returns {boolean} whether the design mode is active or not.
		 * @since 1.13.2
		 * @experimental Since 1.13.2 
		 * @public
		 */
		getDesignMode : function() {
			return this["xx-designMode"];
		},

		/**
		 * Return whether the activation of the controller code is suppressed
		 *
		 * @returns {boolean} whether the activation of the controller code is suppressed or not
		 * @since 1.13.2
		 * @experimental Since 1.13.2
		 * @public
		 */
		getSuppressDeactivationOfControllerCode : function() {
			return this["xx-suppressDeactivationOfControllerCode"];
		},

		/**
		 * WEINRE server URL
		 *
		 * @returns {string} the base URL of the WEINRE server
		 * @public
		 */
		getWeinreServer : function() {
			var sWeinreServer = this.weinreServer;
			if (!sWeinreServer) {
				// if not weinre server is configured - we expect that the weinre server
				// is installed on the same machine with port no of the app + 1
				sWeinreServer = window.location.protocol + "//" + window.location.hostname + ":";
				sWeinreServer += (parseInt(window.location.port, 10) || 8080) + 1;
			}
			return sWeinreServer;
		},

		/**
		 * WEINRE session ID
		 *
		 * @returns {string} the ID to use for the WEINRE server
		 * @public
		 */
		getWeinreId : function() {
			return this.weinreId;
		},

		/**
		 * The name of the application to start or empty
		 *
		 * @returns {string} name of the application
		 * @public
		 * @experimental Since 1.13.2
		 * @deprecated Since 1.15.1. Please use the rootComponent configuration option {@link sap.ui.core.Configuration#getRootComponent}.
		 */
		getApplication : function() {
			return this.application;
		},

		/**
		 * The name of the root component to start or empty
		 *
		 * @returns {string} name of the root component
		 * @public
		 * @experimental Since 1.15.1
		 */
		getRootComponent : function() {
			return this.rootComponent;
		},

		/**
		 * Base URLs to AppCacheBuster Etag-Index files
		 *
		 * @returns {string[]} array of base URLs
		 * @public
		 */
		getAppCacheBuster : function() {
			return this.appCacheBuster;
		},

		/**
		 * The loading mode (sync|async|batch) of the AppCacheBuster (sync is default)
		 *
		 * @returns {string} sync | async
		 * @public
		 * @experimental Since 1.12.5
		 */
		getAppCacheBusterMode : function() {
			return this["xx-appCacheBusterMode"];
		},

		/**
		 * Flag, whether the customizing is disabled or not
		 *
		 * @returns {boolean} true if customizing is disabled
		 * @private
		 * @experimental Since 1.15.1
		 */
		getDisableCustomizing : function() {
			return this["xx-disableCustomizing"];
		},

		/**
		 * Currently active preload mode for libraries or falsy value
		 *
		 * @returns {string} preload mode
		 * @private
		 * @since 1.16.3
		 */
		getPreload : function() {
			return this.preload;
		},

		/**
		 * Currently active preload mode for components or falsy value
		 *
		 * @returns {string} component preload mode
		 * @private
		 * @experimental Since 1.16.3, might change completely.
		 */
		getComponentPreload : function() {
			return this['xx-componentPreload'] || this.preload;
		},

		/**
		 * Returns a configuration object that bundles the format settings of UI5.
		 *
		 * @return {sap.ui.core.Configuration.FormatSettings} A FormatSettings object.
		 * @public
		 */
		getFormatSettings : function() {
			return this.oFormatSettings;
		},

		_collect : function() {
			var mChanges = this.mChanges || (this.mChanges = { __count : 0});
			mChanges.__count++;
			return mChanges;
		},

		_endCollect : function() {
			var mChanges = this.mChanges;
			if ( mChanges && (--mChanges.__count) === 0 ) {
				delete mChanges.__count;
				this._oCore && this._oCore.fireLocalizationChanged(mChanges);
				delete this.mChanges;
			}
		},

		/**
		 * Flag if statistics are requested
		 *
		 * Flag set by TechnicalInfo Popup will also be checked
		 * So its active if set by ULP parameter or by TechnicalInfo property
		 *
		 * @returns {boolean} statistics flag
		 * @private
		 * @since 1.20.0
		 */
		getStatistics : function() {
			return this.statistics || window.localStorage.getItem("sap-ui-statistics") == "X";
		}

	});

	var M_ABAP_LANGUAGE_TO_LOCALE = {
		"ZH" : "zh-Hans",
		"ZF" : "zh-Hant",
		"1Q" : "en-US-x-saptrc",
		"2Q" : "en-US-x-sappsd"
	};

	var M_ABAP_DATE_FORMAT_PATTERN = {
		"" : {pattern: null},
		"1": {pattern: "dd.MM.yyyy"},
		"2": {pattern: "MM/dd/yyyy"},
		"3": {pattern: "MM-dd-yyyy"},
		"4": {pattern: "yyyy.MM.dd"},
		"5": {pattern: "yyyy/MM/dd"},
		"6": {pattern: "yyyy-MM-dd"},
		"7": {pattern: "Gyy.MM.dd", ignore:true},
		"8": {pattern: "Gyy/MM/dd", ignore:true},
		"9": {pattern: "Gyy-MM-dd", ignore:true},
		"A": {pattern: "yyyy/MM/dd", ignore:true},
		"B": {pattern: "yyyy/MM/dd", ignore:true},
		"C": {pattern: "yyyy/MM/dd", ignore:true}
	};

	var M_ABAP_TIME_FORMAT_PATTERN = {
		"" : {"short": null,      medium:  null,        dayPeriods: null},
		"0": {"short": "HH:mm",   medium: "HH:mm:ss",   dayPeriods: null},
		"1": {"short": "hh:mm a", medium: "hh:mm:ss a", dayPeriods: ["AM", "PM"]},
		"2": {"short": "hh:mm a", medium: "hh:mm:ss a", dayPeriods: ["am", "pm"]},
		"3": {"short": "KK:mm a", medium: "KK:mm:ss a", dayPeriods: ["AM", "PM"]},
		"4": {"short": "KK:mm a", medium: "KK:mm:ss a", dayPeriods: ["am", "pm"]}
	};

	var M_ABAP_NUMBER_FORMAT_SYMBOLS = {
		"" : {groupingSeparator: null, decimalSeparator: null},
		" ": {groupingSeparator: ".", decimalSeparator: ","},
		"X": {groupingSeparator: ",", decimalSeparator: "."},
		"Y": {groupingSeparator: " ", decimalSeparator: ","}
	};

	function check(bCondition, sMessage) {
		if ( !bCondition ) {
			throw new Error(sMessage);
		}
	}

	/**
	 * @class Encapsulates configuration settings that are related to data formatting/parsing.
	 * 
	 * <b>Note:</b> When format configuration settings are modified through this class, 
	 * UI5 only ensures that formatter objects created after that point in time will honor
	 * the modifications. To be on the safe side, applications should do any modifications 
	 * early in their lifecycle or recreate any model/UI that is locale dependent. 
	 * 
	 * @name sap.ui.core.Configuration.FormatSettings
	 * @extends sap.ui.base.Object
	 * @public
	 */
	sap.ui.base.Object.extend("sap.ui.core.Configuration.FormatSettings", /** @lends sap.ui.core.Configuration.FormatSettings.prototype */ {
		constructor : function(oConfiguration) {
			this.oConfiguration = oConfiguration;
			this.mSettings = {};
			this.sLegacyDateFormat = undefined;
			this.sLegacyTimeFormat = undefined;
			this.sLegacyNumberFormatSymbolSet = undefined;
		},

		/**
		 * Returns the locale to be used for formatting. 
		 * 
		 * If no such locale has been defined, this method falls back to the language,
		 * see {@link sap.ui.core.Configuration#getLanguage Configuration.getLanguage()}.
		 * 
		 * If any user preferences for date, time or number formatting have been set,
		 * and if no format locale has been specified, then a special private use subtag
		 * is added to the locale, indicating to the framework that these user preferences 
		 * should be applied. 
		 *  
		 * @return {sap.ui.core.Locale} the format locale 
		 * @public
		 */
		getFormatLocale : function() {
			function fallback(that) {
				var l=that.oConfiguration.language;
				// if any user settings have been defined, add the private use subtag "sapufmt"    
				if ( !jQuery.isEmptyObject(that.mSettings) ) {
					// TODO move to Locale/LocaleData
					if ( l.indexOf("-x-") < 0 ) {
						l = l + "-x-sapufmt";
					} else if ( l.indexOf("-sapufmt") <= l.indexOf("-x-") ) {
						l = l + "-sapufmt";
					}
				}
				return l;
			}
			return new sap.ui.core.Locale(this.oConfiguration.formatLocale || fallback(this));
		},

		_set : function(sKey, oValue) {
			var oOldValue = this.mSettings[sKey];
			if ( oValue != null ) {
				this.mSettings[sKey] = oValue;
			} else {
				delete this.mSettings[sKey];
			}
			if ( (oOldValue == null != oValue == null) || !jQuery.sap.equal(oOldValue, oValue) ) {
				var mChanges = this.oConfiguration._collect();
				mChanges[sKey] = oValue;
				this.oConfiguration._endCollect();
			}
		},

		/**
		 * Returns the currently set date pattern or undefined if no pattern has been defined. 
		 * @public
		 */
		getDatePattern : function(sStyle) {
			jQuery.sap.assert(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
			return this.mSettings["dateFormat-" + sStyle];
		},

		/**
		 * Defines the preferred format pattern for the given date format style. 
		 * Calling this method with a null or undefined pattern removes a previously set pattern. 
		 * 
		 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
		 * 
		 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
		 *  
		 * After changing the date pattern, the framework tries to update localization 
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
		 * for details and restrictions.
		 * 
		 * @param {string} sStyle must be one of short, medium, long or full.
		 * @param {string} sPattern the format pattern to be used in LDML syntax.
		 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
		 * @public   
		 */
		setDatePattern : function(sStyle, sPattern) {
			check(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
			this._set("dateFormat-" + sStyle, sPattern);
			return this;
		},

		/**
		 * Returns the currently set time pattern or undefined if no pattern has been defined.
		 * @public
		 */
		getTimePattern : function(sStyle) {
			jQuery.sap.assert(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
			return this.mSettings["timeFormat-" + sStyle];
		},

		/**
		 * Defines the preferred format pattern for the given time format style.
		 * Calling this method with a null or undefined pattern removes a previously set pattern. 
		 *  
		 * If a pattern is defined, it will be preferred over patterns derived from the current locale.
		 * 
		 * See class {@link sap.ui.core.format.DateFormat} for details about the pattern syntax.
		 *  
		 * After changing the time pattern, the framework tries to update localization 
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
		 * for details and restrictions.
		 * 
		 * @param {string} sStyle must be one of short, medium, long or full.
		 * @param {string} sPattern the format pattern to be used in LDML syntax.
		 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
		 * @public
		 */
		setTimePattern : function(sStyle, sPattern) {
			check(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
			this._set("timeFormat-" + sStyle, sPattern);
			return this;
		},

		/**
		 * Returns the currently set number symbol of the given type or undefined if no symbol has been defined.
		 * @public
		 */
		getNumberSymbol : function(sType) {
			jQuery.sap.assert(sType == "decimal" || sType == "group" || sType == "plusSign" || sType == "minusSign", "sType must be decimal, group, plusSign or minusSign");
			return this.mSettings["symbols-latn-" + sType];
		},

		/**
		 * Defines the string to be used for the given number symbol.
		 * Calling this method with a null or undefined symbol removes a previously set symbol string.
		 * Note that an empty string is explicitly allowed.  
		 * 
		 * If a symbol is defined, it will be preferred over symbols derived from the current locale.
		 * 
		 * See class {@link sap.ui.core.format.NumberFormat} for details about the symbols.
		 *  
		 * After changing the number symbol, the framework tries to update localization 
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
		 * for details and restrictions.
		 * 
		 * @param {string} sStyle must be one of decimal, group, plusSign, minusSign.
		 * @param {string} sSymbol will be used to represent the given symbol type
		 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
		 * @public   
		 */
		setNumberSymbol : function(sType, sSymbol) {
			check(sType == "decimal" || sType == "group" || sType == "plusSign" || sType == "minusSign", "sType must be decimal, group, plusSign or minusSign");
			this._set("symbols-latn-" + sType, sSymbol);
			return this;
		},

		_setDayPeriods : function(sWidth, aTexts) {
			jQuery.sap.assert(sWidth == "narrow" || sWidth == "abbreviated" || sWidth == "wide", "sWidth must be narrow, abbreviated or wide");
			this._set("dayPeriods-format-" + sWidth, aTexts);
			return this;
		},

		/**
		 * Returns the currently set legacy ABAP date format (its id) or undefined if none has been set.
		 *  
		 * @public
		 */
		getLegacyDateFormat : function() {
			return this.sLegacyDateFormat || undefined;
		},

		/**
		 * Allows to specify one of the legacy ABAP date formats. 
		 * 
		 * This method modifies the date patterns for 'short' and 'medium' style with the corresponding ABAP 
		 * format. When called with a null or undefined format id, any previously applied format will be removed.
		 * 
		 * After changing the legacy date format, the framework tries to update localization 
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
		 * for details and restrictions.
		 * 
		 * Note: those date formats that are not based on the Gregorian calendar (Japanese date formats '7', '8' and '9', 
		 * Islamic date formats 'A' and 'B' and Iranian date format 'C') are not yet supported by UI5. They are accepted 
		 * by this method for convenience (user settings from ABAP system can be used without filtering), but they are 
		 * ignored. Instead, the formats from the current format locale will be used and a warning will be logged.
		 *   
		 * @param {string} sFormatId id of the ABAP data format (one of '1','2','3','4','5','6','7','8','9','A','B','C')
		 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
		 * @public
		 */
		setLegacyDateFormat : function(sFormatId) {
			sFormatId = sFormatId ? String(sFormatId).toUpperCase() : "";
			check(!sFormatId || M_ABAP_DATE_FORMAT_PATTERN.hasOwnProperty(sFormatId), "sFormatId must be one of ['1','2','3','4','5','6','7','8','9','A','B','C'] or empty");
			if ( M_ABAP_DATE_FORMAT_PATTERN[sFormatId].ignore ) {
				jQuery.sap.log.warning("The ABAP date format '" + sFormatId + "' (" + M_ABAP_DATE_FORMAT_PATTERN[sFormatId].pattern + ") is not supported yet. Falling back to locale specific date formats.");
				sFormatId = "";
			} 
			var mChanges = this.oConfiguration._collect();
			this.sLegacyDateFormat = mChanges.legacyDateFormat = sFormatId;
			this.setDatePattern("short", M_ABAP_DATE_FORMAT_PATTERN[sFormatId].pattern);
			this.setDatePattern("medium", M_ABAP_DATE_FORMAT_PATTERN[sFormatId].pattern);
			this.oConfiguration._endCollect();
			return this;
		},

		/**
		 * Returns the currently set legacy ABAP time format (its id) or undefined if none has been set.
		 *  
		 * @public
		 */
		getLegacyTimeFormat : function() {
			return this.sLegacyTimeFormat || undefined;
		},

		/**
		 * Allows to specify one of the legacy ABAP time formats.
		 * 
		 * This method sets the time patterns for 'short' and 'medium' style to the corresponding ABAP 
		 * formats and sets the day period texts to "AM"/"PM" or "am"/"pm" respectively. When called 
		 * with a null or undefined format id, any previously applied format will be removed.
		 * 
		 * After changing the legacy time format, the framework tries to update localization 
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
		 * for details and restrictions.
		 * 
		 * @param {string} sFormatId id of the ABAP time format (one of '0','1','2','3','4')
		 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
		 * @public
		 */
		setLegacyTimeFormat : function(sFormatId) {
			check(!sFormatId || M_ABAP_TIME_FORMAT_PATTERN.hasOwnProperty(sFormatId), "sFormatId must be one of ['0','1','2','3','4'] or empty");
			var mChanges = this.oConfiguration._collect();
			this.sLegacyTimeFormat = mChanges.legacyTimeFormat = sFormatId = sFormatId || "";
			this.setTimePattern("short", M_ABAP_TIME_FORMAT_PATTERN[sFormatId]["short"]);
			this.setTimePattern("medium", M_ABAP_TIME_FORMAT_PATTERN[sFormatId]["medium"]);
			this._setDayPeriods("abbreviated", M_ABAP_TIME_FORMAT_PATTERN[sFormatId].dayPeriods);
			this.oConfiguration._endCollect();
			return this;
		},

		/**
		 * Returns the currently set legacy ABAP number format (its id) or undefined if none has been set.
		 *  
		 * @public
		 */
		getLegacyNumberFormat : function() {
			return this.sLegacyNumberFormat || undefined;
		},

		/**
		 * Allows to specify one of the legacy ABAP number format.
		 * 
		 * This method will modify the 'group' and 'decimal' symbols. When called with a null 
		 * or undefined format id, any previously applied format will be removed.
		 * 
		 * After changing the legacy number format, the framework tries to update localization 
		 * specific parts of the UI. See the documentation of {@link sap.ui.core.Configuration#setLanguage} 
		 * for details and restrictions.
		 * 
		 * @param {string} sFormatId id of the ABAP number format set (one of ' ','X','Y')
		 * @return {sap.ui.core.Configuration.FormatSettings} Returns <code>this</code> to allow method chaining
		 * @public
		 */
		setLegacyNumberFormat : function(sFormatId) {
			sFormatId = sFormatId ? sFormatId.toUpperCase() : "";
			check(!sFormatId || M_ABAP_NUMBER_FORMAT_SYMBOLS.hasOwnProperty(sFormatId), "sFormatId must be one of [' ','X','Y'] or empty");
			var mChanges = this.oConfiguration._collect();
			this.sLegacyNumberFormat = mChanges.legacyNumberFormat = sFormatId;
			this.setNumberSymbol("group", M_ABAP_NUMBER_FORMAT_SYMBOLS[sFormatId].groupingSeparator);
			this.setNumberSymbol("decimal", M_ABAP_NUMBER_FORMAT_SYMBOLS[sFormatId].decimalSeparator);
			this.oConfiguration._endCollect();
		},

		/*
		 * Returns a live object with the current settings
		 * TODO this method is part of the facade to be accessible from LocaleData, but it shouldn't be
		 * @private
		 */
		getCustomLocaleData : function() {
			return this.mSettings;
		}
	});

}());

}; // end of sap/ui/core/Configuration.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ElementMetadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.ElementMetadata
jQuery.sap.declare("sap.ui.core.ElementMetadata");


/**
 * Creates a new metadata object for a UIElement subclass.
 *
 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
 * @param {object} oStaticInfo static info to construct the metadata from
 *
 * @class
 * @author SAP
 * @version 1.18.9
 * @since 0.8.6
 */
sap.ui.core.ElementMetadata = function(sClassName, oClassInfo) {

	// call super constructor
	sap.ui.base.ManagedObjectMetadata.apply(this, arguments);
};

//chain the prototypes
sap.ui.core.ElementMetadata.prototype = jQuery.sap.newObject(sap.ui.base.ManagedObjectMetadata.prototype);

/**
 * Calculates a new id based on a prefix.
 *
 * @return {string} A (hopefully unique) control id
 * @public
 * @function
 */
sap.ui.core.ElementMetadata.uid = sap.ui.base.ManagedObjectMetadata.uid;

/**
 * By default, the element name is equal to the class name
 * @return {string} the qualified name of the UIElement class
 * @public
 */
sap.ui.core.ElementMetadata.prototype.getElementName = function() {
	return this._sClassName;
};

/**
 * Determines the class name of the renderer for the described control class.
 */
sap.ui.core.ElementMetadata.prototype.getRendererName = function() {
	return this._sRendererName;
};

/**
 * Retrieves the renderer for the described control class
 */
sap.ui.core.ElementMetadata.prototype.getRenderer = function() {

	// determine name via function for those legacy controls that override getRendererName()
	var sRendererName = this.getRendererName();

	if ( !sRendererName ) {
		return;
	}

	// check if renderer class exists already
	var fnRendererClass = jQuery.sap.getObject(sRendererName);
	if(fnRendererClass) {
		return fnRendererClass;
	}

	// if not, try to load a module with the same name
	jQuery.sap.require(sRendererName);
	return jQuery.sap.getObject(sRendererName);
};

sap.ui.core.ElementMetadata.prototype.applySettings = function(oClassInfo) {

	var oStaticInfo = oClassInfo.metadata;

	this._sVisibility = oStaticInfo["visibility"] || "public";

	// remove renderer stuff before calling super.
	var vRenderer = oClassInfo.hasOwnProperty("renderer") ? (oClassInfo.renderer || "") : undefined;
	delete oClassInfo.renderer;

	sap.ui.base.ManagedObjectMetadata.prototype.applySettings.call(this, oClassInfo);

	this._sRendererName = this.getName() + "Renderer";

	if ( typeof vRenderer !== "undefined" ) {

		if ( typeof vRenderer === "string" ) {
			this._sRendererName = vRenderer || undefined;
			return;
		}
		if ( typeof vRenderer === "function" ) {
			vRenderer = { render : vRenderer };
		}

		var oParent = this.getParent();
		var oBaseRenderer;
		if ( oParent && oParent instanceof sap.ui.core.ElementMetadata ) {
			oBaseRenderer = oParent.getRenderer();
		}
		if ( !oBaseRenderer ) {
			jQuery.sap.require("sap.ui.core.Renderer");
			oBaseRenderer = sap.ui.core.Renderer;
		}
		var oRenderer = jQuery.sap.newObject(oBaseRenderer);
		jQuery.extend(oRenderer, vRenderer);
		jQuery.sap.setObject(this.getRendererName(), oRenderer);
	}
};

sap.ui.core.ElementMetadata.prototype.afterApplySettings = function() {
	sap.ui.base.ManagedObjectMetadata.prototype.afterApplySettings.apply(this, arguments);
	this.register && this.register(this);
};

sap.ui.core.ElementMetadata.prototype.isHidden = function() {
	return this._sVisibility === "hidden";
};

}; // end of sap/ui/core/ElementMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.core.EventBus') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.EventBus
jQuery.sap.declare("sap.ui.core.EventBus");


(function(){

/**
 * Creates an instance of EventBus.
 * @class Provides eventing facilities, so subscribe, unsubscribe and publish events.
 *
 * @extends sap.ui.base.Object
 * @author SAP AG
 * @version 1.18.9
 * @constructor
 * @public
 * @since 1.8.0
 * @name sap.ui.core.EventBus
 */
sap.ui.base.Object.extend("sap.ui.core.EventBus", {
	
	constructor : function() {
		sap.ui.base.Object.apply(this);
		this._mChannels = {};
		this._defaultChannel = new sap.ui.base.EventProvider();
	}

});

/**
 * Adds an event registration for the given object and given event name.
 * 
 * The channel "sap.ui" is reserved by th UI5 framework. An application might listen to events on this channel but is not allowed to publish own events there.
 *
 * @param {string}
 *            [sChannelId] The channel of the event to subscribe for. If not given the default channel is used.
 * @param {string}
 *            sEventId The identifier of the event to subscribe for
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or on the event bus-instance. This functions might have the following parameters: sChannelId, sEventId, oData.
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.EventBus} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.EventBus.prototype.subscribe = function(sChannelId, sEventId, fnFunction, oListener) {
	if(typeof(sEventId) === "function") {
		oListener = fnFunction;
		fnFunction = sEventId;
		sEventId = sChannelId;
		sChannelId = null;
	}
	
	jQuery.sap.assert(!sChannelId || typeof(sChannelId) === "string", "EventBus.subscribe: sChannelId must be empty or a non-empty string");
	jQuery.sap.assert(typeof(sEventId) === "string" && sEventId, "EventBus.subscribe: sEventId must be a non-empty string");
	jQuery.sap.assert(typeof(fnFunction) === "function", "EventBus.subscribe: fnFunction must be a function");
	jQuery.sap.assert(!oListener || typeof(oListener) === "object", "EventBus.subscribe: oListener must be empty or an object");
	
	var oChannel = getOrCreateChannel(this, sChannelId);
	oChannel.attachEvent(sEventId, fnFunction, oListener);
	return this;
};

/**
 * Removes an event registration for the given object and given event name.
 *
 * The passed parameters must match those used for registration with {@link #subscribe } beforehand!
 *
 * @param {string}
 *            [sChannelId] The channel of the event to unsubscribe from. If not given the default channel is used.
 * @param {string}
 *            sEventId The identifier of the event to unsubscribe from
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.EventBus} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.EventBus.prototype.unsubscribe = function(sChannelId, sEventId, fnFunction, oListener) {
	if(typeof(sEventId) === "function") {
		oListener = fnFunction;
		fnFunction = sEventId;
		sEventId = sChannelId;
		sChannelId = null;
	}
	
	jQuery.sap.assert(!sChannelId || typeof(sChannelId) === "string", "EventBus.unsubscribe: sChannelId must be empty or a non-empty string");
	jQuery.sap.assert(typeof(sEventId) === "string" && sEventId, "EventBus.unsubscribe: sEventId must be a non-empty string");
	jQuery.sap.assert(typeof(fnFunction) === "function", "EventBus.unsubscribe: fnFunction must be a function");
	jQuery.sap.assert(!oListener || typeof(oListener) === "object", "EventBus.unsubscribe: oListener must be empty or an object");
	
	var oChannel = getChannel(this, sChannelId);
	if(!oChannel){
		return this;
	}
	
	oChannel.detachEvent(sEventId, fnFunction, oListener);
	if(oChannel != this._defaultChannel){ // Check whether Channel is unused
		var mEvents = sap.ui.base.EventProvider.getEventList(oChannel);
		var bIsEmpty = true;
		for(var sId in mEvents){
			if(oChannel.hasListeners(sId)){
				bIsEmpty = false;
				break;
			}
		}
		if(bIsEmpty){
			delete this._mChannels[sChannelId];
		}
	}
	
	return this;
};

/**
 * Fires the given event and notifies all listeners. Listeners must not change the content of the event.
 * 
 * The channel "sap.ui" is reserved by the UI5 framework. An application might listen to events 
 * on this channel but is not allowed to publish own events there.
 *
 * @param {string}
 *            [sChannelId] The channel of the event; if not given the default channel is used
 * @param {string}
 *            sEventId The identifier of the event
 * @param {object}
 * 			  [oData] the parameter map
 * @public
 */
sap.ui.core.EventBus.prototype.publish = function(sChannelId, sEventId, oData) {
	
	if(arguments.length == 1){ //sEventId
		oData = null;
		sEventId = sChannelId;
		sChannelId = null;
	}else if(arguments.length == 2){ //sChannelId + sEventId || sEventId + oData
		if(typeof(sEventId) != "string") {
			oData = sEventId;
			sEventId = sChannelId;
			sChannelId = null;
		}
	}
	
	oData = oData ? oData : {};
	
	jQuery.sap.assert(!sChannelId || typeof(sChannelId) === "string", "EventBus.publish: sChannelId must be empty or a non-empty string");
	jQuery.sap.assert(typeof(sEventId) === "string" && sEventId, "EventBus.publish: sEventId must be a non-empty string");
	jQuery.sap.assert(typeof(oData) === "object", "EventBus.publish: oData must be an object");
	
	var oChannel = getChannel(this, sChannelId);
	if(!oChannel){
		return;
	}
	
	//see sap.ui.base.EventProvider.prototype.fireEvent
	var aEventListeners = sap.ui.base.EventProvider.getEventList(oChannel)[sEventId];
	if (aEventListeners && jQuery.isArray(aEventListeners)) {
		// this ensures no 'concurrent modification exception' occurs (e.g. an event listener deregisters itself).
		aEventListeners = aEventListeners.slice();
		var oInfo;
		for (var i = 0, iL = aEventListeners.length; i < iL; i++) {
			oInfo = aEventListeners[i];
			oInfo.fFunction.call(oInfo.oListener || this, sChannelId, sEventId, oData);
		}
	}
};

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 */
sap.ui.core.EventBus.prototype.getInterface = function() {
	return this;
};


function getChannel(oEventBus, sChannelId){
	if(!sChannelId){
		return oEventBus._defaultChannel;
	}
	return oEventBus._mChannels[sChannelId];
};

function getOrCreateChannel(oEventBus, sChannelId){
	var oChannel = getChannel(oEventBus, sChannelId);
	if(!oChannel && sChannelId){
		oEventBus._mChannels[sChannelId] = new sap.ui.base.EventProvider();
		oChannel = oEventBus._mChannels[sChannelId];
	}
	return oChannel;
};

}());

}; // end of sap/ui/core/EventBus.js
if ( !jQuery.sap.isDeclared('sap.ui.core.FocusHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.FocusHandler
jQuery.sap.declare("sap.ui.core.FocusHandler");





(function(){

	/**
	 * Constructs an instance of a sap.ui.core.FocusHandler.
	 * Keeps track of the focused element.
	 *
	 * @class Keeps track of the focused element.
	 * @param {DOMElement} oRootRef e.g. document.body
	 * @param {sap.ui.core.Core} oCore Reference to the Core implementation
	 * @name sap.ui.core.FocusHandler
	 */
	sap.ui.base.Object.extend("sap.ui.core.FocusHandler", /** @lends sap.ui.core.FocusHandler */ {
		constructor : function(oRootRef, oCore) {
			sap.ui.base.Object.apply(this);
	
			this.oCore = oCore;
	
			// keep track of element currently in focus
			this.oCurrent = null;
			// keep track of the element previously had the focus
			this.oLast = null;
			// buffer the focus/blur events for correct order
			this.aEventQueue = [];
	
			this.fEventHandler = jQuery.proxy(this.onEvent, this);
			this.fDestroyHandler = jQuery.proxy(this.destroy, this);
	
			// initialize event handling
			if(oRootRef.addEventListener && !!!sap.ui.Device.browser.internet_explorer){ //FF, Safari
				oRootRef.addEventListener("focus", this.fEventHandler, true);
				oRootRef.addEventListener("blur", this.fEventHandler, true);
			}else{ //IE
				jQuery(oRootRef).bind("activate", this.fEventHandler);
				jQuery(oRootRef).bind("deactivate", this.fEventHandler);
			}
			jQuery.sap.log.debug("FocusHandler setup on Root " + oRootRef.type + (oRootRef.id?": " + oRootRef.id:""), null, "sap.ui.core.FocusHandler");
	
			// TODO: Or should we be destroyed by the Core?
			jQuery(window).bind("unload", {"oRootRef": oRootRef}, this.fDestroyHandler);
		}
	});

	/**
	 * Returns the Id of the control/element currently in focus.
	 * @return {string} the Id of the control/element currently in focus.
	 * @public
	 */
	sap.ui.core.FocusHandler.prototype.getCurrentFocusedControlId = function(){
		var aCtrls = null;
		try{
			var $Act = jQuery(document.activeElement);
			if($Act.is(":focus") || (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version == 8 && document.hasFocus())){
				aCtrls = $Act.control();
			}
		}catch(err){}
		return aCtrls && aCtrls.length > 0 ? aCtrls[0].getId() : null;
	};

	/**
	 * Destroy method of the Focus Handler.
	 * It unregisters the event handlers.
	 *
	 * @param {jQuery.Event} event the event that initiated the destruction of the FocusHandler
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.destroy = function(event) {
		var oRootRef = event.data.oRootRef;
		if(oRootRef){
			if(oRootRef.removeEventListener && !!!sap.ui.Device.browser.internet_explorer){ //FF, Safari
				oRootRef.removeEventListener("focus", this.fEventHandler, true);
				oRootRef.removeEventListener("blur", this.fEventHandler, true);
			}else{ //IE
				jQuery(oRootRef).unbind("activate", this.fEventHandler);
				jQuery(oRootRef).unbind("deactivate", this.fEventHandler);
			}
		}
		jQuery(window).unbind("unload", this.fDestroyHandler);
		this.oCore = null;
	};

	/**
	 * Handles the focus/blur events.
	 *
	 * @param oRootRef e.g. document.body
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.onEvent = function(oBrowserEvent){
		var oEvent = jQuery.event.fix(oBrowserEvent);

		jQuery.sap.log.debug("Event "+oEvent.type+" reached Focus Handler (target: "+oEvent.target+(oEvent.target ? oEvent.target.id : "")+")", null, "sap.ui.core.FocusHandler");

		var type = (oEvent.type == "focus" || oEvent.type == "focusin" || oEvent.type == "activate") ? "focus" : "blur";
		this.aEventQueue.push({type:type, controlId: getControlIdForDOM(oEvent.target)});
		if(this.aEventQueue.length == 1) {
			this.processEvent();
		}
	};

	/**
	 * Processes the focus/blur events in the event queue.
	 *
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.processEvent = function(){
		var oEvent = this.aEventQueue[0];
		if(!oEvent) {
			return;
		}
		if(oEvent.type == "focus"){
			this.onfocusEvent(oEvent.controlId);
		}else if(oEvent.type == "blur"){
			this.onblurEvent(oEvent.controlId);
		}
		this.aEventQueue.shift();
		if(this.aEventQueue.length > 0) {
			this.processEvent();
		}
	};

	/**
	 * Processes the focus event taken from the event queue.
	 *
	 * @param sControlId Id of the event related control
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.onfocusEvent = function(sControlId){
		this.oCurrent = sControlId;
		if (!this.oLast) {
			// No last active element to be left... 
			return;
		}
		
		triggerFocusleave(this.oLast, sControlId, this.oCore);
		this.oLast = null;
	};

	/**
	 * Processes the blur event taken from the event queue.
	 *
	 * @param sControlId Id of the event related control
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.onblurEvent = function(sControlId){
		if (!this.oCurrent) {
			// No current Item, so nothing to lose focus...
			return;
		}
		this.oLast = sControlId;
			
		this.oCurrent = null;
		jQuery.sap.delayedCall(0, this, "checkForLostFocus");
	};

	/**
	 * Checks for lost focus and provides events in case of losing the focus.
	 * Called in delayed manner from {@link sap.ui.core.FocusHandler#onblurEvent}.
	 *
	 * @private
	 */
	sap.ui.core.FocusHandler.prototype.checkForLostFocus = function(){
		if(this.oCurrent == null && this.oLast != null){
			triggerFocusleave(this.oLast, null, this.oCore);
		}
		this.oLast = null;
	};


	//***********************************************************
	// Utility / convenience
	//***********************************************************

	/**
	 * Returns the id of the control/element to which the given DOM
	 * reference belongs to or <code>null</code> if no such
	 * control/element exists.
	 *
	 * @param {DOMObject} oDOM the DOM reference
	 * @private
	 */
	var getControlIdForDOM = function(oDOM){
		var sId = jQuery(oDOM).closest("[data-sap-ui]").attr("id");
		if(sId) {
			return sId;
		}
		return null;
	};

	/**
	 * Calls the onsapfocusleave function on the control with id sControlId
	 * with the information about the given related control.
	 *
	 * @param {string} sControlId
	 * @param {string} sRelatedControlId
	 * @private
	 */
	var triggerFocusleave = function(sControlId, sRelatedControlId, oCore){
		var oControl = sControlId ? sap.ui.getCore().byId(sControlId) : null;
		if(oControl){
			var oRelatedControl = sRelatedControlId ? sap.ui.getCore().byId(sRelatedControlId) : null;
			var oEvent = jQuery.Event("sapfocusleave");
			oEvent.target = oControl.getDomRef();
			oEvent.relatedControlId = oRelatedControl ? oRelatedControl.getId() : null;
			oEvent.relatedControlFocusInfo = oRelatedControl ? oRelatedControl.getFocusInfo() : null;
			//TODO: Cleanup the popup! The following is shit
			var oControlUIArea = oControl.getUIArea();
			var oUiArea = null;
			if(oControlUIArea){
				oUiArea = oCore.getUIArea(oControlUIArea.getId());
			}else{
				var oPopupUIAreaDomRef = sap.ui.getCore().getStaticAreaRef();
				if(jQuery.sap.containsOrEquals(oPopupUIAreaDomRef, oEvent.target)){
					oUiArea = oCore.getUIArea(oPopupUIAreaDomRef.id);
				}
			}
			if(oUiArea) {
				oUiArea._handleEvent(oEvent);
			}
		}
	};

	/**
	 * Checks if the passed DOM reference is nested in the active DOM of the document
	 * @param {DOMNode} oDomRef The new active element
	 * @private
	 * @type boolean
	 * @returns whether the passed DOM reference is nested in the active DOM of the document
	 */
	/*function isInActiveDom(oDomRef) {
		jQuery.sap.assert(oDomRef != null);
		var oCurrDomRef = oDomRef;
		while(oCurrDomRef) {
			if(oCurrDomRef === document) return true;
			oCurrDomRef = oCurrDomRef.parentNode;
		}
		return false;
	};*/

}());
}; // end of sap/ui/core/FocusHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.core.IntervalTrigger') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.core.IntervalTrigger");


(function() {

	var _EVENT_ID = "sapUiIntervalTrigger-event";

	/**
	 * Creates an instance of EventBus.
	 * 
	 * @class Provides a trigger that triggers in a set interval and calls all
	 *        registered listeners. If the interval is <= 0 the trigger is
	 *        switched off and won't trigger at all.
	 * @param {int}
	 *            iInterval is the interval the trigger should be used. If the
	 *            trigger is >0 triggering starts/runs and if the interval is
	 *            set to <=0 triggering stops.
	 * 
	 * @extends sap.ui.base.Object
	 * @author SAP AG
	 * @version 1.18.9
	 * @constructor
	 * @public
	 * @since 1.11.0
	 * @name sap.ui.core.IntervalTrigger
	 */
	sap.ui.base.Object.extend("sap.ui.core.IntervalTrigger", {
		constructor : function(iInterval) {
			sap.ui.base.Object.apply(this);

			this._oEventBus = new sap.ui.core.EventBus();

			this._delayedCallId = null;
			this._triggerProxy = jQuery.proxy(trigger, this);

			this._iInterval = 0;
			if (iInterval) {
				this.setInterval(iInterval);
			}
		}
	});

	/**
	 * This is the function that will be used for triggering. This function is
	 * called by a proxy call.
	 * 
	 * @private
	 */
	var trigger = function() {
		jQuery.sap.clearDelayedCall(this._delayedCallId);

		// if interval is active and there are registered listeners
		var bHasListeners = this._oEventBus._defaultChannel.hasListeners(_EVENT_ID);
		if (this._iInterval > 0 && bHasListeners) {
			this._oEventBus.publish(_EVENT_ID);

			this._delayedCallId = jQuery.sap.delayedCall(this._iInterval, this, this._triggerProxy);
		}
	};

	/**
	 * Destructor method for objects.
	 * 
	 * @public
	 */
	sap.ui.core.IntervalTrigger.prototype.destroy = function() {
		sap.ui.base.Object.prototype.destroy.apply(this, arguments);

		delete this._triggerProxy;

		this._oEventBus.destroy();
		delete this._oEventBus;
	};

	/**
	 * Sets the trigger interval. If the value is >0 triggering will start if
	 * there are any registered listeners. If the interval is set to <=0
	 * triggering will stop.
	 * 
	 * @public
	 * @param {int}
	 *            iInterval sets the interval in milliseconds when a new
	 *            triggering should occur.
	 */
	sap.ui.core.IntervalTrigger.prototype.setInterval = function(iInterval) {
		jQuery.sap.assert((typeof iInterval === "number"), "Interval must be an integer value");

		// only change and (re)trigger if the interval is different
		if (this._iInterval !== iInterval) {
			this._iInterval = iInterval;
			this._triggerProxy();
		}
	};

	/**
	 * Adds a listener to the list that should be triggered.
	 * 
	 * @public
	 * @param {function}
	 *            fnFunction is the called function that should be called when
	 *            the trigger want to trigger the listener.
	 * @param {object}
	 *            [oListener] that should be triggered.
	 */
	sap.ui.core.IntervalTrigger.prototype.addListener = function(fnFunction, oListener) {
		this._oEventBus.subscribe(_EVENT_ID, fnFunction, oListener);

		this._triggerProxy();
	};

	/**
	 * Removes corresponding listener from list.
	 * 
	 * @public
	 * @param {function}
	 *            fnFunction is the previously registered function
	 * @param {object}
	 *            [oListener] that should be removed
	 */
	sap.ui.core.IntervalTrigger.prototype.removeListener = function(fnFunction, oListener) {
		this._oEventBus.unsubscribe(_EVENT_ID, fnFunction, oListener);
	};

	/**
	 * @see sap.ui.base.Object#getInterface
	 * @public
	 */
	sap.ui.core.IntervalTrigger.prototype.getInterface = function() {
		return this;
	};
}());
}; // end of sap/ui/core/IntervalTrigger.js
if ( !jQuery.sap.isDeclared('sap.ui.core.LocaleData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

//Provides the locale object sap.ui.core.LocaleData
jQuery.sap.declare("sap.ui.core.LocaleData");




(function() {

	/**
	 * Creates an instance of the Data.
	 *
	 * @class Data provides access to locale-specific data, like date formats, number formats, currencies, etc.
	 *
	 * @param {sap.ui.core.Locale} oLocale the locale
	 *
	 * @extends sap.ui.base.Object
	 * @author SAP AG
	 * @version 1.18.9
	 * @constructor
	 * @public
	 * @name sap.ui.core.LocaleData
	 */
	sap.ui.base.Object.extend("sap.ui.core.LocaleData", /** @lends sap.ui.core.LocaleData.prototype */ {

		constructor : function(oLocale) {
			sap.ui.base.Object.apply(this);
			this.mData = getData(oLocale);
		},

		_get : function(sKey) {
			return this.mData[sKey];
		},

		/**
		 * Get orientation (left-to-right or right-to-left)
		 *
		 * @returns {string} character orientation for this locale
		 * @public
		 */
		getOrientation : function() {
			return this._get("orientation");
		},

		/**
		 * Get locale specific language names
		 *
		 * @returns {object} map of locale specific language names
		 * @public
		 */
		getLanguages : function() {
			return this._get("languages");
		},

		/**
		 * Get locale specific script names
		 *
		 * @returns {object} map of locale specific script names
		 * @public
		 */
		getScripts : function() {
			return this._get("scripts");
		},

		/**
		 * Get locale specific territory names
		 *
		 * @returns {object} map of locale specific territory names
		 * @public
		 */
		getTerritories : function() {
			return this._get("territories");
		},

		/**
		 * Get month names in width "narrow", "abbreviated" or "wide"
		 *
		 * @param {string} sWidth the required width for the month names
		 * @returns {array} array of month names (starting with January)
		 * @public
		 */
		getMonths : function(sWidth) {
			jQuery.sap.assert(sWidth == "narrow" || sWidth == "abbreviated" || sWidth == "wide", "sWidth must be narrow, abbreviated or wide");
			return this._get("months-format-" + sWidth);
		},

		/**
		 * Get stand alone month names in width "narrow", "abbreviated" or "wide"
		 *
		 * @param {string} sWidth the required width for the month names
		 * @returns {array} array of month names (starting with January)
		 * @public
		 */
		getMonthsStandAlone : function(sWidth) {
			jQuery.sap.assert(sWidth == "narrow" || sWidth == "abbreviated" || sWidth == "wide", "sWidth must be narrow, abbreviated or wide");
			return this._get("months-standAlone-" + sWidth);
		},

		/**
		 * Get day names in width "narrow", "abbreviated" or "wide"
		 *
		 * @param {string} sWidth the required width for the day names
		 * @returns {array} array of day names (starting with Sunday)
		 * @public
		 */
		getDays : function(sWidth) {
			jQuery.sap.assert(sWidth == "narrow" || sWidth == "abbreviated" || sWidth == "wide", "sWidth must be narrow, abbreviated or wide");
			return this._get("days-format-" + sWidth);
		},

		/**
		 * Get stand alone day names in width "narrow", "abbreviated" or "wide"
		 *
		 * @param {string} sWidth the required width for the day names
		 * @returns {array} array of day names (starting with Sunday)
		 * @public
		 */
		getDaysStandAlone : function(sWidth) {
			jQuery.sap.assert(sWidth == "narrow" || sWidth == "abbreviated" || sWidth == "wide", "sWidth must be narrow, abbreviated or wide");
			return this._get("days-standAlone-" + sWidth);
		},

		/**
		 * Get quarter names in width "narrow", "abbreviated" or "wide"
		 *
		 * @param {string} sWidth the required width for the quarter names
		 * @returns {array} array of quarters
		 * @public
		 */
		getQuarters : function(sWidth) {
			jQuery.sap.assert(sWidth == "narrow" || sWidth == "abbreviated" || sWidth == "wide", "sWidth must be narrow, abbreviated or wide");
			return this._get("quarters-format-" + sWidth);
		},

		/**
		 * Get day periods in width "narrow", "abbreviated" or "wide"
		 *
		 * @param {string} sWidth the required width for the day period names
		 * @returns {array} array of day periods (AM, PM)
		 * @public
		 */
		getDayPeriods : function(sWidth) {
			jQuery.sap.assert(sWidth == "narrow" || sWidth == "abbreviated" || sWidth == "wide", "sWidth must be narrow, abbreviated or wide");
			return this._get("dayPeriods-format-" + sWidth);
		},

		/**
		 * Get date pattern in style "short", "medium", "long" or "full"
		 *
		 * @param {string} sStyle the required style for the date pattern
		 * @returns {string} the selected date pattern
		 * @public
		 */
		getDatePattern : function(sStyle) {
			jQuery.sap.assert(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
			return this._get("dateFormat-" + sStyle);
		},

		/**
		 * Get time pattern in style "short", "medium", "long" or "full"
		 *
		 * @param {string} sStyle the required style for the date pattern
		 * @returns {string} the selected time pattern
		 * @public
		 */
		getTimePattern : function(sStyle) {
			jQuery.sap.assert(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
			return this._get("timeFormat-" + sStyle);
		},

		/**
		 * Get datetime pattern in style "short", "medium", "long" or "full"
		 *
		 * @param {string} sStyle the required style for the datetime pattern
		 * @returns {string} the selected datetime pattern
		 * @public
		 */
		getDateTimePattern : function(sStyle) {
			jQuery.sap.assert(sStyle == "short" || sStyle == "medium" || sStyle == "long" || sStyle == "full", "sStyle must be short, medium, long or full");
			return this._get("dateTimeFormat-" + sStyle);
		},

		/**
		 * Get number symbol "decimal", "group", "plusSign", "minusSign"
		 *
		 * @param {string} sType the required type of symbol
		 * @returns {string} the selected number symbol
		 * @public
		 */
		getNumberSymbol : function(sType) {
			jQuery.sap.assert(sType == "decimal" || sType == "group" || sType == "plusSign" || sType == "minusSign", "sType must be decimal, group, plusSign or minusSign");
			return this._get("symbols-latn-" + sType);
		},

		/**
		 * Returns the day that usually is regarded as the first day 
		 * of a week in the current locale. Days are encoded as integer
		 * where sunday=0, monday=1 etc.
		 *
		 * 
		 * All week data information in the CLDR is provides for territories (countries).
		 * If the locale of this LocaleData doesn't contain country information (e.g. if it 
		 * contains only a language), then the "likelySubtag" information of the CLDR  
		 * is taken into account to guess the "most likely" territory for the locale. 
		 * 
		 * @returns {int} first day of week
		 * @public
		 */
		getFirstDayOfWeek : function() {
			return this._get("weekData-firstDay");
		},

		/**
		 * Returns the first day of a weekend for the given locale. 
		 * 
		 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
		 * 
		 * All week data information in the CLDR is provides for territories (countries).
		 * If the locale of this LocaleData doesn't contain country information (e.g. if it 
		 * contains only a language), then the "likelySubtag" information of the CLDR  
		 * is taken into account to guess the "most likely" territory for the locale. 
		 * 
		 * @returns {int} first day of weekend
		 * @public
		 */
		getWeekendStart : function() {
			return this._get("weekData-weekendStart");
		},

		/**
		 * Returns the last day of a weekend for the given locale. 
		 * 
		 * Days are encoded in the same way as for {@link #getFirstDayOfWeek}.
		 * 
		 * All week data information in the CLDR is provides for territories (countries).
		 * If the locale of this LocaleData doesn't contain country information (e.g. if it 
		 * contains only a language), then the "likelySubtag" information of the CLDR  
		 * is taken into account to guess the "most likely" territory for the locale. 
		 * 
		 * @returns {int} last day of weekend
		 * @public
		 */
		getWeekendEnd : function() {
			return this._get("weekData-weekendEnd");
		},

		/**
		 * Returns the interval format with the given Id (see CLDR documentation for valid Ids)
		 * or the fallback format if no interval format with that Id is known.
		 * 
		 * The empty Id ("") might be used to retrieve the interval format fallback. 
		 *
		 * @param {string} sId Id of the interval format, e.g. "d-d"
		 * @returns {string} interval format string with placeholders {0} and {1}
		 * @public
		 * @since 1.17.0 
		 */
		getIntervalPattern : function(sId) {
			return (sId && this._get("intervalFormat-" + sId)) || this._get("intervalFormatFallback"); 
		}
		
	});

	/**
	 * Default data, in case neither the region specific, nor the language specific fallback can be found
	 *
	 * @private
	 */
	var M_DEFAULT_DATA = {
			"orientation":"left-to-right",
			"languages":{},
			"scripts":{},
			"territories":{},
			"dateFormat-full":"EEEE, MMMM d, y",
			"dateFormat-long":"MMMM d, y",
			"dateFormat-medium":"MMM d, y",
			"dateFormat-short":"M/d/yy",
			"timeFormat-full":"h:mm:ss a zzzz",
			"timeFormat-long":"h:mm:ss a z",
			"timeFormat-medium":"h:mm:ss a",
			"timeFormat-short":"h:mm a",
			"dateTimeFormat-full":"{1} {0}",
			"dateTimeFormat-long":"{1} {0}",
			"dateTimeFormat-medium":"{1} {0}",
			"dateTimeFormat-short":"{1} {0}",
			"months-format-abbreviated":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],
			"months-format-wide":["January","February","March","April","May","June","July","August","September","October","November","December"],
			"months-format-narrow":["1","2","3","4","5","6","7","8","9","10","11","12"],
			"months-standAlone-abbreviated":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],
			"months-standAlone-wide":["January","February","March","April","May","June","July","August","September","October","November","December"],
			"months-standAlone-narrow":["1","2","3","4","5","6","7","8","9","10","11","12"],
			"days-format-abbreviated":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],
			"days-format-wide":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
			"days-format-narrow":["S","M","T","W","T","F","S"],
			"days-standAlone-abbreviated":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],
			"days-standAlone-wide":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
			"days-standAlone-narrow":["S","M","T","W","T","F","S"],
			"quarters-format-narrow":["1","2","3","4"],
			"quarters-format-abbreviated":["Q1","Q2","Q3","Q4"],
			"quarters-format-wide":["1st quarter","2nd quarter","3rd quarter","4th quarter"],
			"quarters-standAlone-narrow":["1","2","3","4"],
			"symbols-latn-decimal":".",
			"symbols-latn-group":",",
			"symbols-latn-plusSign":"+",
			"symbols-latn-minusSign":"-",
			"dayPeriods-format-narrow":["AM","PM"],
			"dayPeriods-format-wide":["AM","PM"],
			"dayPeriods-format-abbreviated":["AM","PM"],
			"weekData-minDays":4,
			"weekData-firstDay":1,
			"weekData-weekendStart":6,
			"weekData-weekendEnd":0,
			"intervalFormatFallback":"{0} – {1}"
	};

	var M_ISO639_OLD_TO_NEW = {
			"iw" : "he",
			"ji" : "yi",
			"in" : "id", 
			"sh" : "sr"
	};

	/**
	 * A set of locales for which the UI5 runtime contains a CLDR JSON file. 
	 * 
	 * Helps to avoid unsatisfiable backend calls.
	 * 
	 * The string literal below is substituted during the build.
	 * The value is determined from the names of the CLDR JSON files which 
	 * are bundled with the UI5 runtime.
	 * @private
	 */
	var M_SUPPORTED_LOCALES = (function() {
		var LOCALES = "ar,ar_AE,ar_EG,ar_SA,bg,bg_BG,br,ca_ES,cs,cs_CZ,da,da_DK,de,de_AT,de_BE,de_CH,de_DE,de_LU,el,el_CY,el_GR,en,en_AU,en_CA,en_GB,en_HK,en_IE,en_IN,en_NZ,en_SG,en_US,en_ZA,es,es_AR,es_BO,es_CL,es_CO,es_ES,es_MX,es_PE,es_UY,es_VE,et,et_EE,fa,fa_IR,fi,fi_FI,fr,fr_BE,fr_CA,fr_CH,fr_FR,fr_LU,he,he_IL,hi,hi_IN,hr,hr_HR,hu,hu_HU,id,id_ID,it,it_CH,it_IT,ja,ja_JP,ko,ko_KR,lt,lt_LT,lv,lv_LV,nb,nb_NO,nl,nl_BE,nl_NL,nn,nn_NO,pl,pl_PL,pt,pt_BR,pt_PT,ro,ro_RO,ru,ru_RU,ru_UA,sk_SK,sl,sl_SI,sr,sv,sv_SE,th,th_TH,tr,tr_TR,uk,uk_UA,vi,vi_VN,zh_CN,zh_HK,zh_SG,zh_TW".split(","), 
			i,result;
		
		if ( LOCALES.length != 1 || LOCALES[0].indexOf("@") < 0) { // check that list has been substituted 
			result = {};
			for(i=0; i<LOCALES.length; i++) {
				result[LOCALES[i]] = true;
			}
		}
		
		return result;
	}());
	
	/**
	 * Locale data cache
	 *
	 * @private
	 */
	var mLocaleDatas = {};

	/**
	 * Load LocaleData data from the CLDR generated files
	 */
	function getData(oLocale) {

		var sLanguage = oLocale.getLanguage() || "",
		sScript = oLocale.getScript() || "",
		sRegion = oLocale.getRegion() || "",
		mData;

		function getOrLoad(sId) {
			var sUrl, oResponse;
			if ( !mLocaleDatas[sId] && (!M_SUPPORTED_LOCALES || M_SUPPORTED_LOCALES[sId] === true) ) {
				sUrl = sap.ui.resource("sap.ui.core.cldr", sId + ".json");
				oResponse = jQuery.sap.sjax({url: sUrl, dataType:"json"});
				if (oResponse.success) {
					mLocaleDatas[sId] = oResponse.data;
				} // else: fallback chain is processed, in the end a result is identified and stored in mDatas under the originally requested ID
			}
			return mLocaleDatas[sId];
		}

		sLanguage = (sLanguage && M_ISO639_OLD_TO_NEW[sLanguage]) || sLanguage;
		if ( sLanguage === "zh" && !sRegion ) {
			if ( sScript === "Hans" ) {
				sRegion = "CN"; 
			} else if ( sScript === "Hant" ) {
				sRegion = "TW";
			}
		}

		var sId = sLanguage + "_" + sRegion; // the originally requested locale; this is the key under which the result (even a fallback one) will be stored in the end 
		if ( sLanguage && sRegion ) {
			mData = getOrLoad(sId);
		}
		if ( !mData && sLanguage ) {
			mData = getOrLoad(sLanguage);
		}

		mLocaleDatas[sId] = mData || M_DEFAULT_DATA;
		return mLocaleDatas[sId];
	};


	/**
	 * A specialized subclass of LocaleData that merges custom settings.
	 * @private
	 */
	sap.ui.core.LocaleData.extend("sap.ui.core.CustomLocaleData", {
		constructor : function(oLocale) {
			sap.ui.core.LocaleData.apply(this, arguments);
			this.mCustomData = sap.ui.getCore().getConfiguration().getFormatSettings().getCustomLocaleData();
		},
		_get : function(sId) {
			return this.mCustomData[sId] || this.mData[sId];
		}
	});

	/**
	 * 
	 */
	sap.ui.core.LocaleData.getInstance = function(oLocale) {
		return oLocale.hasPrivateUseSubtag("sapufmt") ? new sap.ui.core.CustomLocaleData(oLocale) : new sap.ui.core.LocaleData(oLocale);
	};

}());

}; // end of sap/ui/core/LocaleData.js
if ( !jQuery.sap.isDeclared('sap.ui.core.RenderManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the render manager sap.ui.core.RenderManager
jQuery.sap.declare("sap.ui.core.RenderManager");






(function() {

	var aCommonMethods = ["renderControl", "write", "writeEscaped", "translate", "writeAcceleratorKey", "writeControlData",
						  "writeElementData", "writeAttribute", "writeAttributeEscaped", "addClass", "writeClasses",
						  "addStyle", "writeStyles", "writeAccessibilityState", "writeIcon",
						  "getConfiguration", "getHTML"];
	var aNonRendererMethods = ["render", "flush", "destroy"];
	
	/**
	 * Creates an instance of the RenderManager.
	 *
	 * @class RenderManager that will take care for rendering Controls.
	 *
	 * The RenderManager will be available from the sap.ui.core.Core instance (available via <code>sap.ui.getCore()</code>).<br/>It
	 * can be used to render Controls and Control-Trees.
	 *
	 * The convention for renderers belonging to some controls is the following:
	 * <ul>
	 * <li>for a Control e.g. <code>sap.ui.controls.InputField</code> there shall be </li>
	 * <li>a renderer named <code>sap.ui.controls.InputFieldRenderer</code></li>
	 * <ul>
	 *
	 * @see sap.ui.core.Core
	 * @see sap.ui.getCore()
	 *
	 * @extends sap.ui.base.Object
	 * @author Jens Pflueger
	 * @version 1.18.9
	 * @constructor
	 * @name sap.ui.core.RenderManager
	 * @public
	 */
	sap.ui.base.Object.extend("sap.ui.core.RenderManager", /** @lends sap.ui.core.RenderManager */ {

		constructor : function() {
			sap.ui.base.Object.apply(this, arguments);
			this.aBuffer = [];
			this.aRenderedControls = [];
			this.aStyleStack = [{}];
		},

		metadata : {
			publicMethods : aCommonMethods.concat(aNonRendererMethods)
		}

	});

	/**
	 * Returns the public interface of the RenderManager which can be used by Renderers.
	 *
	 * @return {sap.ui.base.Interface} the interface
	 * @private
	 */
	sap.ui.core.RenderManager.prototype.getRendererInterface = function() {
		// see sap.ui.base.Object.getInterface for reference
		var oInterface = new sap.ui.base.Interface(this, aCommonMethods);
		this.getRendererInterface = jQuery.sap.getter(oInterface);
		return oInterface;
	};

}());


/**
 * Cleans up the resources associated with this instance.
 * After the instance has been destroyed, it must not be used anymore.
 * Applications should call this function if they don't need the instance any longer.
 *
 * @public
 */
sap.ui.core.RenderManager.prototype.destroy = function() {
	this.aBuffer = [];
	this.aRenderedControls = [];
	this.aStyleStack = [{}];
};

/**
 * Returns the configuration object
 * Shortcut for <code>sap.ui.getCore().getConfiguration()</code>
 * @return {sap.ui.core.Configuration} the configuration object
 * @public
 */
sap.ui.core.RenderManager.prototype.getConfiguration = function() {
	return sap.ui.getCore().getConfiguration();
};

/**
 * Returns the renderer class for a given control instance
 *
 * @param {sap.ui.core.Control} oControl the control that should be rendered
 * @return the renderer class for a given control instance
 * @public
 */
sap.ui.core.RenderManager.prototype.getRenderer = function(oControl) {
	jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a sap.ui.core.Control");
	return sap.ui.core.RenderManager.getRenderer(oControl);
};

/**
 * Turns the given control into its HTML representation and appends it to the
 * rendering buffer.
 *
 * If the given control is undefined or null, then nothing is rendered.
 *
 * @param {sap.ui.core.Control} oControl the control that should be rendered
 * @public
 */
sap.ui.core.RenderManager.prototype.renderControl = function(oControl) {
	jQuery.sap.assert(!oControl || oControl instanceof sap.ui.core.Control, "oControl must be a sap.ui.core.Control or empty");
	// don't render a NOTHING
	if (!oControl) {
		return;
	}

	// create stack to determine rendered parent
	if (!this.aRenderStack) {
		this.aRenderStack = new Array();
	}
	// stop the measurement of parent
	if (this.aRenderStack && this.aRenderStack.length > 0) {
		jQuery.sap.measure.pause(this.aRenderStack[0]+"---renderControl");
	}else if(oControl.getParent() && oControl.getParent().getMetadata().getName() == "sap.ui.core.UIArea"){
		jQuery.sap.measure.pause(oControl.getParent().getId()+"---rerender");
	}
	this.aRenderStack.unshift(oControl.getId());
	// start performance measurement
	jQuery.sap.measure.start(oControl.getId()+"---renderControl","Rendering of "+oControl.getMetadata().getName());

	//Remember the current buffer size to check later whether the control produced output
	var iBufferLength = this.aBuffer.length;

	var oControlStyles = {};
	if (oControl.aCustomStyleClasses && oControl.aCustomStyleClasses.length > 0) {
		oControlStyles.aCustomStyleClasses = oControl.aCustomStyleClasses; //cleared again in the writeClasses function
	}

	this.aStyleStack.push(oControlStyles);

	jQuery.sap.measure.pause(oControl.getId()+"---renderControl"); 
	// don't measure getRenderer because if Load needed its measured in Ajax call
	// but start measurement before is to see general rendering time including loading time
	var oRenderer = this.getRenderer(oControl);
	jQuery.sap.measure.resume(oControl.getId()+"---renderControl");

	// notify the control that it will be rendered soon (e.g. detached from DOM)
	this._bLocked = true;
	try {
		var oEvent = jQuery.Event("BeforeRendering");
		// store the element on the event (aligned with jQuery syntax)
		oEvent.srcControl = oControl;
		oControl._handleEvent(oEvent);
	} finally {
		this._bLocked = false;
	}
	// unbind any generically bound browser event handlers
	var aBindings = oControl.aBindParameters;
	if (aBindings && aBindings.length > 0) { // if we have stored bind calls...
		var jDomRef = jQuery(oControl.getDomRef());
		if (jDomRef && jDomRef[0]) { // ...and we have a DomRef
			for (var i = 0; i < aBindings.length; i++) {
				var oParams = aBindings[i];
				jDomRef.unbind(oParams.sEventType, oParams.fnProxy);
			}
		}
	}

	//Render the control using the RenderManager interface
	oRenderer.render(this.getRendererInterface(), oControl);

	this.aStyleStack.pop();

	//Remember the rendered control
	this.aRenderedControls.push(oControl);

	//Check whether the control has produced HTML
	oControl.bOutput = this.aBuffer.length != iBufferLength;

	// end performance measurement
	jQuery.sap.measure.end(oControl.getId()+"---renderControl");
	this.aRenderStack.shift();
	// resume the measurement of parent
	if (this.aRenderStack && this.aRenderStack.length > 0) {
		jQuery.sap.measure.resume(this.aRenderStack[0]+"---renderControl");
	}else if(oControl.getParent() && oControl.getParent().getMetadata().getName() == "sap.ui.core.UIArea"){
		jQuery.sap.measure.resume(oControl.getParent().getId()+"---rerender");
	}
};

/**
 * Renders the given {@link sap.ui.core.Control} and finally returns
 * the content of the rendering buffer.
 * Ensures the buffer is restored to the state before calling this method.
 *
 * @param {sap.ui.core.Control}
 *            oControl the Control whose HTML should be returned.
 * @return {string} the resulting HTML of the provided control
 * @deprecated Since version 0.15.0. Use <code>flush()</code> instead render content outside the rendering phase.
 * @public
 */
sap.ui.core.RenderManager.prototype.getHTML = function(oControl) {
	jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a sap.ui.core.Control");

	var tmp = this.aBuffer;
	var aResult = this.aBuffer = [];
	this.renderControl(oControl);
	this.aBuffer = tmp;
	return aResult.join("");
};

(function() {

	//Returns the information of the current focus
	var storeCurrentFocus = function(){
		var oCore = sap.ui.getCore();

		// Store current focus
		var sFocusedControlId = oCore.getCurrentFocusedControlId(),
			oFocusInfo = null,
			oFocusedDomRef = null;

		if(sFocusedControlId){
			var oFocusedControl = oCore.getElementById(sFocusedControlId);
			if(oFocusedControl){
				oFocusInfo = oFocusedControl.getFocusInfo();
				oFocusedDomRef = oFocusedControl.getFocusDomRef();
			}
		}

		return {focusedControlId: sFocusedControlId, focusInfo: oFocusInfo, focusDomRef: oFocusedDomRef};
	};

	//Does everything needed after the rendering (restore focus, calling "onAfterRendering", initialize event binding)
	var finalizeRendering = function(oRM, aRenderedControls, oStoredFocusInfo){
		// Notify the behavior object that the controls will be attached to DOM
		for (var i = 0, size = aRenderedControls.length; i < size; i++) {
			var oControl = aRenderedControls[i];
			if (oControl.bOutput) {
				oRM._bLocked = true;
				try {
					var oEvent = jQuery.Event("AfterRendering");
					// store the element on the event (aligned with jQuery syntax)
					oEvent.srcControl = oControl;
					// start performance measurement
					jQuery.sap.measure.start(oControl.getId()+"---AfterRendering","AfterRendering of "+oControl.getMetadata().getName());
					oControl._handleEvent(oEvent);
					// end performance measurement
					jQuery.sap.measure.end(oControl.getId()+"---AfterRendering");
				} finally {
					oRM._bLocked = false;
				} 
			}
		}

		//finally restore focus
		try{
			if (oStoredFocusInfo && oStoredFocusInfo.focusedControlId) {
				var oFocusedControl = sap.ui.getCore().getElementById(oStoredFocusInfo.focusedControlId);
				if (oFocusedControl && oFocusedControl.getFocusDomRef() != oStoredFocusInfo.focusDomRef ) {
					oFocusedControl.applyFocusInfo(oStoredFocusInfo.focusInfo);
				}
			}
		}catch(e){
			jQuery.sap.log.warning("Problems while restore focus after rendering: " + e, null, oRM);
		}

		// Re-bind any generically bound browser event handlers (must happen after restoring focus to avoid focus event)
		for (var i = 0, size = aRenderedControls.length; i < size; i++) {
			var oControl = aRenderedControls[i],
				aBindings = oControl.aBindParameters;

			if (aBindings && aBindings.length > 0) { // if we have stored bind calls...
				var jDomRef = jQuery(oControl.getDomRef());
				if (jDomRef && jDomRef[0]) { // ...and we have a DomRef - TODO: this check should not be required right after rendering...
					for (var j = 0; j < aBindings.length; j++) {
						var oParams = aBindings[j];
						jDomRef.bind(oParams.sEventType, oParams.fnProxy);
					}
				}
			}
		}
	};

	/**
	 * Renders the content of the rendering buffer into the provided DOMNode.
	 *
	 * This function must not be called within control renderers.
	 *
	 * Usage:
	 * <pre>
	 * // Create a new instance of the RenderManager
	 * var rm = sap.ui.getCore().createRenderManager();
	 * // Use the writer API to fill the buffers
	 * rm.write(...);
	 * rm.renderControl(oControl);
	 * rm.write(...);
	 * ...
	 * // Finally flush the buffer into the provided DOM node (The current content is removed)
	 * rm.flush(oDomNode);
	 * // If the instance is not needed anymore, destroy it
	 * rm.destroy();
	 * </pre>
	 *
	 * @param {DOMNode} oTargetDomNode The node in the dom where the buffer should be flushed into.
	 * @param {boolean} bDoNotPreserve flag, whether to not preserve (true) the content or to preserve it (false).
	 * @param {boolean|int} vInsert flag, whether to append (true) or replace (false) the buffer of the target dom node or to insert at a certain position (int)
	 * @public
	 */
	sap.ui.core.RenderManager.prototype.flush = function(oTargetDomNode, bDoNotPreserve, vInsert) {
		jQuery.sap.assert((typeof oTargetDomNode === "object") && (oTargetDomNode.ownerDocument == document), "oTargetDomNode must be a DOM element");
		if(this.bRendererMode){
			jQuery.sap.log.info("Flush must not be called from control renderers. Call ignored.", null, this);
			return;
		}
		
		var RenderManager = sap.ui.core.RenderManager;

		// preserve HTML content before flushing HTML into target DOM node
		if (!bDoNotPreserve && (typeof vInsert !== "number") && !vInsert) { // expression mimics the conditions used below
			RenderManager.preserveContent(oTargetDomNode);
		}

		var oStoredFocusInfo = storeCurrentFocus();

		var vHTML = RenderManager.prepareHTML5(this.aBuffer.join("")); // Note: string might have been converted to a node list!

		if(this._fPutIntoDom){
			//Case when render function was called
			this._fPutIntoDom(oTargetDomNode, vHTML);
		}else{
			for(var i=0; i<this.aRenderedControls.length; i++){
				//TODO It would be enough to loop over the controls for which renderControl was initially called but for this
				//we have to manage an additional array. Rethink about later.
				var oldDomNode = this.aRenderedControls[i].getDomRef();
				if(oldDomNode && !RenderManager.isPreservedContent(oldDomNode)) {
					if (RenderManager.isInlineTemplate(oldDomNode)) {
						jQuery(oldDomNode).empty();
					} else {
						jQuery(oldDomNode).remove();
					}
				}
			}
			if (typeof vInsert === "number") {
				if (vInsert <= 0) { // new HTML should be inserted at the beginning
					jQuery(oTargetDomNode).prepend(vHTML);
				} else { // new element should be inserted at a certain position > 0
					var $predecessor = jQuery(oTargetDomNode).children().eq(vInsert - 1); // find the element which should be directly before the new one
					if ($predecessor.length === 1) { 
						// element found - put the HTML in after this element
						$predecessor.after(vHTML);
					} else { 
						// element not found (this should not happen when properly used), append the new HTML
						jQuery(oTargetDomNode).append(vHTML);
					}
				}
			} else if (!vInsert) {
				jQuery(oTargetDomNode).html(vHTML); // Put the HTML into the given DOM Node
			} else {
				jQuery(oTargetDomNode).append(vHTML); // Append the HTML into the given DOM Node
			}
		}
		
		finalizeRendering(this, this.aRenderedControls, oStoredFocusInfo);

		this.aRenderedControls = [];
		this.aBuffer = [];
		this.aStyleStack = [{}];
		
		jQuery.sap.act.refresh();
	};

	/**
	 * Renders the given control to the provided DOMNode.
	 *
	 * If to control is already rendered in the provided DOMNode the DOM of the control is replaced. If the control
	 * is already rendered somewhere else the current DOM of the control is removed and the new DOM is appended
	 * to the provided DOMNode.
	 *
	 * This function must not be called within control renderers.
	 *
	 * @param {sap.ui.core.Control} oControl the Control that should be rendered.
	 * @param {DOMNode} oTargetDomNode The node in the dom where the result of the rendering should be inserted.
	 * @public
	 */
	sap.ui.core.RenderManager.prototype.render = function(oControl, oTargetDomNode) {
		jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a control");
		jQuery.sap.assert(typeof oTargetDomNode === "object" && oTargetDomNode.ownerDocument == document, "oTargetDomNode must be a DOM element");
		if(this.bRendererMode){
			jQuery.sap.log.info("Render must not be called from control renderers. Call ignored.", null, this);
			return;
		}
		if(this._bLocked){
			jQuery.sap.log.error("Render must not be called within Before or After Rendering Phase. Call ignored.", null, this);
			return;
		}

		// Reset the buffer before rendering
		this.aBuffer = [];

		// Retrieve the markup (the rendering phase)
		this.renderControl(oControl);

		// FIXME: MULTIPLE ROOTS
		// The implementation of this method doesn't support multiple roots for a control.
		// Affects all places where 'oldDomNode' is used
		this._fPutIntoDom = function(oTarget, vHTML){

			var RenderManager = sap.ui.core.RenderManager;
			
			if(oControl && oTargetDomNode){

				var oldDomNode = oControl.getDomRef();
				if ( RenderManager.isPreservedContent(oldDomNode) ) {
					// use placeholder instead
					oldDomNode = jQuery.sap.byId("sap-ui-dummy-" + oControl.getId())[0] || oldDomNode;
				}
				var bNewTarget = oldDomNode && oldDomNode.parentNode != oTargetDomNode;

				var fAppend = function(){
					var jTarget = jQuery(oTargetDomNode);
					if(oTargetDomNode.innerHTML == ""){
						jTarget.html(vHTML);
					}else{
						jTarget.append(vHTML);
					}
				};

				if(bNewTarget){ //Control was rendered already and is now moved to different location

					if(!RenderManager.isPreservedContent(oldDomNode)) {
						if (RenderManager.isInlineTemplate(oldDomNode)) {
							jQuery(oldDomNode).empty();
						} else {
							jQuery(oldDomNode).remove();
						}
					}

					if(vHTML) {
						fAppend();
					}

				}else{ //Control either rendered initially or rerendered at the same location

					if(vHTML){
						if(oldDomNode){
							if (RenderManager.isInlineTemplate(oldDomNode)) {
								jQuery(oldDomNode).html(vHTML);
							} else {
								jQuery(oldDomNode).replaceWith(vHTML);
							}
						}else{
							fAppend();
						}
					}else{
						if (RenderManager.isInlineTemplate(oldDomNode)) {
							jQuery(oldDomNode).empty();
						} else {
							jQuery(oldDomNode).remove();
						}
					}

				}

			}

		};

		this.flush(oTargetDomNode, true);

		this._fPutIntoDom = null;
	};

}());


//#################################################################################################
// Static Methods
//#################################################################################################

/**
 * Returns the renderer class for a given control instance
 *
 * @param {sap.ui.core.Control}
 *            oControl the control that should be rendered
 * @type function
 * @return the renderer class for a given control instance
 * @static
 * @public
 */
sap.ui.core.RenderManager.getRenderer = function(oControl) {
	jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a sap.ui.core.Control");

	return oControl.getMetadata().getRenderer();
};

/**
 * Makes the HTML5 tags known to older IE browsers; to be called once before rendering happens.
 *
 * Applies two workarounds
 * <ol>
 * <li>1. "SHIV": create each HTML5 tag once in the window document to make IE8 aware of it
 * <li>2. "INNERSHIV": IE8 fails when using innerHTML in conjunction with HTML5 tags for a DOM element __not__ part of the document.
 *        prepareHTML5 uses a dummy DOM element to convert the innerHTML to a set of DOM nodes first.
 * </ol>
 * @static
 * @private
 */
//Called once by the Core during initialization
sap.ui.core.RenderManager.initHTML5Support = function() {
	if(!!sap.ui.Device.browser.internet_explorer && (sap.ui.Device.browser.version === 8 || sap.ui.Device.browser.version === 7)){ // IE8 is recognized as "7.0"!!

		var aTags = [ "article", "aside", "audio", "canvas", "command", "datalist", "details",
				"figcaption", "figure", "footer", "header", "hgroup", "keygen", "mark", "meter", "nav",
				"output", "progress", "rp", "rt", "ruby", "section", "source", "summary", "template", "time", "video", "wbr" ];

		// 1. SHIV, create each HTML5 element once to make IE8 recognize it
		// see http://paulirish.com/2011/the-history-of-the-html5-shiv/ for an explanation
		for (var i = 0; i < aTags.length; i++) {
			document.createElement(aTags[i]);
		}

		// 2. INNERSHIV, converts string with HTML5 tags to DOM nodes before using them with jQuery
		// see http://jdbartlett.com/innershiv/ for an explanation of the matter
		var rhtmltags = new RegExp("<(" + aTags.join("|") + ")(\\s|>)", "i");
		var d = null;
		sap.ui.core.RenderManager.prepareHTML5 = function(sHTML) {
			if ( sHTML && sHTML.match(rhtmltags) ) {
				if(!d){
					d = document.createElement('div');
					d.style.display = 'none';
				}

				var e = d.cloneNode(true);
				document.body.appendChild(e);
				e.innerHTML = sHTML.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
				document.body.removeChild(e);

				return e.childNodes;
			}
			return sHTML;
		};

		jQuery.sap.log.info("IE8 HTML5 support activated");

	}else{

		jQuery.sap.log.info("no IE8 HTML5 support required");

		sap.ui.core.RenderManager.prepareHTML5 = function(sHTML) {
			return sHTML;
		};
	}
};

/**
 * Helper to enforce a repaint for a given dom node.
 * 
 * Introduced to fix repaint issues in Webkit browsers, esp. Chrome.
 * @param {DOMNode} vDomNode a DOM node or ID of a DOM node
 * 
 * @private
 */
sap.ui.core.RenderManager.forceRepaint = function(vDomNode) {
	var oDomNode = typeof vDomNode == "string" ? jQuery.sap.domById(vDomNode) : vDomNode;
	if ( oDomNode ) {
		jQuery.sap.log.debug("forcing a repaint for " + (oDomNode.id || String(oDomNode)));
		var sOriginalDisplay = oDomNode.style.display;
		var oActiveElement = document.activeElement;
		oDomNode.style.display = "none";
		oDomNode.offsetHeight;
		oDomNode.style.display = sOriginalDisplay;
		if (document.activeElement !== oActiveElement) {
			jQuery.sap.focus(oActiveElement);
		}
	}
};

//#################################################################################################
// Methods for preserving HTML content
//#################################################################################################

(function() {

	var ID_PRESERVE_AREA = "sap-ui-preserve";
	var ATTR_PRESERVE_MARKER = "data-sap-ui-preserve";

	function getPreserveArea() {
		var $preserve = jQuery("#"+ID_PRESERVE_AREA);
		if ($preserve.length === 0){
			$preserve = jQuery("<DIV/>",{role:"application",id:ID_PRESERVE_AREA}).
				addClass("sapUiHidden").css("width", "0").css("height", "0").css("overflow", "hidden").
				appendTo(document.body);
		}
		return $preserve;
	}

	/**
	 * Collects descendants of the given root node that need to be preserved before the root node
	 * is wiped out. The "to-be-preserved" nodes are moved to a special, hidden 'preserve' area.
	 *
	 * A node is declared "to-be-preserved" when it has the <code>data-sap-ui-preserve</code>
	 * attribute set. When the optional parameter <code>bPreserveNodesWithId</code> is set to true,
	 * then nodes with an id are preserved as well and their <code>data-sap-ui-preserve</code> attribute
	 * is set automatically. This option is used by UIAreas when they render for the first time and
	 * simplifies the handling of predefined HTML content in a web page.
	 *
	 * The "to-be-preserved" nodes are searched with a depth first search and moved to the 'preserve'
	 * area in the order that they are found. So for direct siblings the order should be stable.
	 *
	 * @param {DOMNode} oRootNode to search for "to-be-preserved" nodes
	 * @param {boolean} [bPreserveRoot=false] whether to preserve the root itself
	 * @param {boolean} [bPreserveNodesWithId=false] whether to preserve nodes with an id as well
	 * @public
	 * @static
	 */
	sap.ui.core.RenderManager.preserveContent = function(oRootNode, bPreserveRoot, bPreserveNodesWithId) {
		jQuery.sap.assert(typeof oRootNode === "object" && oRootNode.ownerDocument == document, "oRootNode must be a DOM element");

		sap.ui.getCore().getEventBus().publish("sap.ui","__preserveContent", { domNode : oRootNode});

		var $preserve = getPreserveArea();

		function check($candidates) {

			$candidates.each(function(i,candidate) {

				// don't process the preserve area or the static area
				if ( candidate.id === ID_PRESERVE_AREA || sap.ui.getCore().isStaticAreaRef(candidate)) {
					return;
				}

				var $candidate = jQuery(candidate);

				if ( $candidate.attr(ATTR_PRESERVE_MARKER) )  { // node is marked with the preserve marker
					// when the current node is the root node then we're doing a single control rerendering
					if ( candidate === oRootNode ) {
						var $placeholder = jQuery("<DIV/>", { id: "sap-ui-dummy-" + candidate.id}).addClass("sapUiHidden");
						$placeholder.insertBefore($candidate);
					}
					$preserve.append($candidate);
				} else if ( bPreserveNodesWithId && candidate.id ) {
					sap.ui.core.RenderManager.markPreservableContent($candidate, candidate.id);
					$preserve.append($candidate);
					return;
				}

				// don't dive into nested UIAreas. They are preserved together with any preserved parent (e.g. HTML control)
				if ( !$candidate.attr("data-sap-ui-area") ) {
					check($candidate.children());
				}
			});
		}

		jQuery.sap.measure.start(oRootNode.id+"---preserveContent","preserveContent for "+oRootNode.id);
		check(bPreserveRoot? jQuery(oRootNode) : jQuery(oRootNode).children());
		jQuery.sap.measure.end(oRootNode.id+"---preserveContent");
	};

	/**
	 * Searches "to-be-preserved" nodes for the given control id.
	 *
	 * @param {string} sId control id to search content for.
	 * @return {jQuery} a jQuery collection representing the found content
	 * @public
	 * @static
	 */
	sap.ui.core.RenderManager.findPreservedContent = function(sId) {
		jQuery.sap.assert(typeof sId === "string", "sId must be a string");
		var $preserve = getPreserveArea(),
			$content = $preserve.children("[" + ATTR_PRESERVE_MARKER + "='" + sId.replace(/(:|\.)/g,'\\$1') + "']");
		return $content;
	};

	/**
	 * Marks the given content as "to-be-preserved" for a control with the given id.
	 * When later on the content has been preserved, it can be found by giving the same id.
	 *
	 * @param {jQuery} $content a jQuery collection of DOM objects to be marked
	 * @param {string} sId id of the control to associate the content with
	 * @static
	 */
	sap.ui.core.RenderManager.markPreservableContent = function($content, sId) {
		$content.attr(ATTR_PRESERVE_MARKER, sId);
	};

	/**
	 * Checks whether the given DOM node is part of the 'preserve' area.
	 *
	 * @param {DOMNode} oDomNode
	 * @return {boolean} whether node is part of 'preserve' area
	 * @private
	 * @static
	 */
	sap.ui.core.RenderManager.isPreservedContent = function(oDomNode) {
		return ( oDomNode && oDomNode.getAttribute(ATTR_PRESERVE_MARKER) && oDomNode.parentNode && oDomNode.parentNode.id == ID_PRESERVE_AREA );
	};

	/**
	 * Returns the hidden area reference belonging to this window instance.
	 *
	 * @return {DOMNode}the hidden area reference belonging to this core instance.
	 * @public
	 * @static
	 */
	sap.ui.core.RenderManager.getPreserveAreaRef = function() {
		return getPreserveArea()[0];
	};

	var ATTR_INLINE_TEMPLATE_MARKER = "data-sap-ui-template";

	/**
	 * Marks the given content as "inline template".
	 *
	 * @param {jQuery} $content a jQuery collection of DOM objects to be marked
	 * @private
	 * @static
	 */
	sap.ui.core.RenderManager.markInlineTemplate = function($content) {
		$content.attr(ATTR_INLINE_TEMPLATE_MARKER, "");
	};

	/**
	 * Checks whether the given DOM node is an 'inline template' area.
	 *
	 * @param {DOMNode} oDomNode
	 * @return {boolean} whether node is an 'inline template' area
	 * @private
	 * @static
	 */
	sap.ui.core.RenderManager.isInlineTemplate = function(oDomNode) {
		return ( oDomNode && oDomNode.hasAttribute(ATTR_INLINE_TEMPLATE_MARKER) );
	};

}());


//#################################################################################################
// Methods for 'Buffered writer' functionality... (all public)
// i.e. used methods in render-method of Renderers
//#################################################################################################

/**
 * Write the given texts to the buffer
 * @param {string|number ...} sText (can be a number too)
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {*|XSS}
 */
sap.ui.core.RenderManager.prototype.write = function(/** string|number */ sText /* ... */) {
	jQuery.sap.assert(( typeof sText === "string") || ( typeof sText === "number"), "sText must be a string or number");
	this.aBuffer.push.apply(this.aBuffer, arguments);
	return this;
};

/**
 * Escape text for HTML and write it to the buffer
 * @param {string} sText
 * @param {boolean} bLineBreaks Whether to convert linebreaks into <br> tags
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeEscaped = function(/** string */ sText, bLineBreaks) {
	jQuery.sap.assert( typeof sText === "string", "sText must be a string");
	if (bLineBreaks) {
		var aLines = sText.split("\n");
		for (var i = 0; i < aLines.length; i++) {
			aLines[i] = jQuery.sap.encodeHTML(aLines[i]);
		}
		sText = aLines.join("<br>");
	} else {
		sText = jQuery.sap.encodeHTML(sText);
	}
	this.aBuffer.push(sText);
	return this;
};


/**
 * @deprecated Not implemented - DO NOT USE
 * @public
 */
sap.ui.core.RenderManager.prototype.translate = function(/** string */ sKey) {
	// TODO
};

/**
 * @deprecated Not implemented - DO NOT USE
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeAcceleratorKey = function() {
	/*
	if (bAlt && !bCtrl && !bArrowKey) {
		// Keyboard helper provides means for visualizing access keys.
		// keydown modifies some CSS rule for showing underlines
		// <span><u class="sapUiAccessKey">H</u>elp me</span>
		UCF_KeyboardHelper.showAccessKeys();
	}
	*/
	return this;
};

/**
 * Adds a style property to the style collection if the value is not empty or null
 * The style collection is flushed if it is written to the buffer using {@link #writeStyle}
 *
 * @param {string} sName name of the CSS property to write
 * @param {string|float|int} value value to write
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {0 1|XSS} Styles are written to HTML without validation
 */
sap.ui.core.RenderManager.prototype.addStyle = function(sName, value) {
	jQuery.sap.assert(typeof sName === "string", "sName must be a string");
	if (value !== undefined && value !== null) {
		jQuery.sap.assert((typeof value === "string" || typeof value === "number"), "value must be a string or number");
		var oStyle = this.aStyleStack[this.aStyleStack.length-1];
		if (!oStyle.aStyle) {
			oStyle.aStyle = [];
		}
		oStyle.aStyle.push(sName + ":" + value);
	}
	return this;
};

/**
 * Writes and flushes the style collection
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeStyles = function() {
	var oStyle = this.aStyleStack[this.aStyleStack.length-1];
	if (oStyle.aStyle) {
		this.write(" style=\"" +oStyle.aStyle.join(";") +"\" ");
	}
	oStyle.aStyle = null;
	return this;
};

/**
 * Adds a class to the class collection if the name is not empty or null.
 * The class collection is flushed if it is written to the buffer using {@link #writeClasses}
 *
 * @param {string} sName name of the class to be added; null values are ignored
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {0|XSS} Classes are written to HTML without validation
 */
sap.ui.core.RenderManager.prototype.addClass = function(sName) {
	if (sName) {
		jQuery.sap.assert(typeof sName === "string", "sName must be a string");
		var oStyle = this.aStyleStack[this.aStyleStack.length-1];
		if (!oStyle.aClasses) {
			oStyle.aClasses = [];
		}
		oStyle.aClasses.push(sName);
	}
	return this;
};

/**
 * Writes and flushes the class collection (all CSS classes added by "addClass()" since the last flush).
 * Also writes the custom style classes added by the application with "addStyleClass(...)". Custom classes are
 * added by default from the currently rendered control. If an oElement is given, this Element's custom style
 * classes are added instead. If oElement === false, no custom style classes are added.
 *
 * @param {sap.ui.core.Element | boolean} [oElement] an Element from which to add custom style classes (instead of adding from the control itself)
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeClasses = function(oElement) {
	jQuery.sap.assert(!oElement || typeof oElement === "boolean" || oElement instanceof sap.ui.core.Element, "oElement must be empty, a boolean, or a sap.ui.core.Element");
	var oStyle = this.aStyleStack[this.aStyleStack.length-1];

	// Custom classes are added by default from the currently rendered control. If an oElement is given, this Element's custom style
	// classes are added instead. If oElement === false, no custom style classes are added.
	var aCustomClasses = oElement ? oElement.aCustomStyleClasses : ((oElement === false) ? [] : oStyle.aCustomStyleClasses);

	if (oStyle.aClasses || aCustomClasses) {
		var aClasses = [].concat(oStyle.aClasses || [], aCustomClasses || []);
		aClasses.sort();
		aClasses = jQuery.map(aClasses, function(n, i){
			return (i==0 || n != aClasses[i-1]) ? n : null;
		});
		this.write(" class=\"", aClasses.join(" "), "\" "); 
	}
	
	if (!oElement) {
		oStyle.aCustomStyleClasses = null;
	}
	oStyle.aClasses = null;
	return this;
};

/**
 * Writes the controls data into the HTML.
 * Control Data consists at least of the id of a control
 * @param {sap.ui.core.Control} oControl the control whose identifying information should be written to the buffer
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeControlData = function(oControl) {
	jQuery.sap.assert(oControl && oControl instanceof sap.ui.core.Control, "oControl must be a sap.ui.core.Control");
	this.writeElementData(oControl);
	return this;
};

/**
 * Writes the elements data into the HTML.
 * Element Data consists at least of the id of a element
 * @param {sap.ui.core.Element} oElement the element whose identifying information should be written to the buffer
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeElementData = function(oElement) {
	jQuery.sap.assert(oElement && oElement instanceof sap.ui.core.Element, "oElement must be a sap.ui.core.Element");
	var sId = oElement.getId();
	if(sId) {
		this.writeAttribute("id", sId).writeAttribute("data-sap-ui", sId);
	}
	var aData = oElement.getCustomData();
	var l = aData.length;
	for (var i = 0; i < l; i++) {
		var oData = aData[i];
		if (oData.getWriteToDom()) { // application wants this to be written to the DOM, but there are some conditions for this to work
			var key = oData.getKey();
			if (typeof oData.getValue() === "string") {
				if ((sap.ui.core.ID.isValid(key)) && (key.indexOf(":") == -1) && (key.indexOf("sap-ui") !== 0)) {
					this.writeAttributeEscaped("data-" + key, oData.getValue());
				} else { // error case
					jQuery.sap.log.error("CustomData with key " + key + " should be written to HTML of " + this + " but the key is not valid (must be a valid sap.ui.core.ID without any colon and may not start with 'sap-ui').");
				}
			} else { // error case: non-string value
				jQuery.sap.log.error("CustomData with key " + key + " should be written to HTML of " + this + " but the value is not a string.");
			}
		}
	}
	return this;
};

/**
 * Writes the attribute and its value into the HTML
 * @param {string} sName the name of the attribute
 * @param {string | number | boolean} value the value of the attribute
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {0 1|XSS} Attributes are written to HTML without validation
 */
sap.ui.core.RenderManager.prototype.writeAttribute = function(sName, value) {
	jQuery.sap.assert(typeof sName === "string", "sName must be a string");
	jQuery.sap.assert(typeof value === "string" || typeof value === "number" || typeof value === "boolean", "value must be a string, number or boolean");
	this.write(" ", sName, "=\"", value, "\"");
	return this;
};

/**
 * Writes the attribute and its value into the HTML
 * 
 * The value is properly escaped to avoid XSS attacks.
 * 
 * @param sName the name of the attribute
 * @param vValue the value of the attribute
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 * @SecSink {0|XSS}
 */
sap.ui.core.RenderManager.prototype.writeAttributeEscaped = function(sName, vValue) {
	// writeAttribute asserts
	this.writeAttribute(sName, jQuery.sap.escapeHTML(String(vValue)));
	return this;
};

/**
 * Writes the accessibility state (see WAI-ARIA specification) of the provided element into the HTML
 * based on the element's properties and associations.
 *
 * The ARIA properties are only written when the accessibility feature is activated in the UI5 configuration.
 *
 * The following properties/values to ARIA attribute mappings are done (if the element does have such properties):
 * <code>editable===false</code> => <code>aria-readonly="true"</code>
 * <code>enabled===false</code> => <code>aria-disabled="true"</code>
 * <code>visible===false</code> => <code>aria-hidden="true"</code>
 * <code>required===true</code> => <code>aria-required="true"</code>
 * <code>selected===true</code> => <code>aria-selected="true"</code>
 * <code>checked===true</code> => <code>aria-checked="true"</code>
 *
 * Additionally the association <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code> are used to write
 * the id lists of the ARIA attributes <code>aria-describedby</code> and <code>aria-labelledby</code>.
 *
 * Note: This function is only a heuristic of a control property to ARIA attribute mapping. Control developers
 * have to check whether it fullfills their requirements. In case of problems (for example the RadioButton has a
 * <code>selected</code> property but must provide an <code>aria-checked</code> attribute) the auto-generated
 * result of this function can be influenced via the parameter <code>mProps</code> as described below.
 *
 * The parameter <code>mProps</code> can be used to either provide additional attributes which should be added and/or
 * to avoid the automatic generation of single ARIA attributes. The 'aria-' prefix will be prepended automatically to the keys
 * (Exception: Attribute 'role' does not get the prefix 'aria-').
 *
 * Examples:
 * <code>{hidden : true}</code> results in <code>aria-hidden="true"</code> independent of the precense or absence of
 * the visibility property.
 * <code>{hidden : null}</code> ensures that no <code>aria-hidden</code> attribute is written independent of the precense
 * or absence of the visibility property.
 * The function behaves in the same way for the associations <code>ariaDescribedBy</code> and <code>ariaLabelledBy</code>.
 * To append additional values to the auto-generated <code>aria-describedby</code> and <code>aria-labelledby</code> attributes
 * the following format can be used:
 * <code>{describedby : {value: "id1 id2", append: true}}</code> => <code>aria-describedby="ida idb id1 id2"</code> (assuming that "ida idb"
 * is the auto-generated part based on the association <code>ariaDescribedBy</code>).
 *
 * @param {sap.ui.core.Element}
 *            [oElement] the element whose accessibility state should be rendered
 * @param {Object}
 *            [mProps] a map of properties that should be added additionally or changed.
 * @return {sap.ui.core.RenderManager} this render manager instance to allow chaining
 * @public
 */
sap.ui.core.RenderManager.prototype.writeAccessibilityState = function(oElement, mProps) {
	if(!sap.ui.getCore().getConfiguration().getAccessibility()){
		return this;
	}

	if(arguments.length == 1 && !(oElement instanceof sap.ui.core.Element)) {
		mProps = oElement;
		oElement = null;
	}

	var mAriaProps = {};

	if(oElement != null) {
		var oMetadata = oElement.getMetadata();
		oMetadata._enrichChildInfos();

		var addACCForProp = function(sElemProp, sACCProp, oVal){
			var oProp = oMetadata.getAllProperties()[sElemProp];
			if(oProp && oElement[oProp._sGetter]() === oVal){
				mAriaProps[sACCProp] = "true";
			}
		}

		var addACCForAssoc= function(sElemAssoc, sACCProp){
			var oAssoc = oMetadata.getAllAssociations()[sElemAssoc];
			if(oAssoc && oAssoc.multiple){
				var aIds = oElement[oAssoc._sGetter]();
				if(aIds.length > 0){
					mAriaProps[sACCProp] = aIds.join(" ");
				}
			}
		}

		addACCForProp("editable", "readonly", false);
		addACCForProp("enabled", "disabled", false);
		addACCForProp("visible", "hidden", false);
		addACCForProp("required", "required", true);
		addACCForProp("selected", "selected", true);
		addACCForProp("checked", "checked", true);
		addACCForAssoc("ariaDescribedBy", "describedby");
		addACCForAssoc("ariaLabelledBy", "labelledby");
	}

	if(mProps){
		var checkValue = function(v){
			var type = typeof(v);
			return v === null || v === "" || type === "number" || type === "string" || type === "boolean";
		}
		
		var prop = {};
		var x, val, type, autoVal;
		
		for(x in mProps){
			val = mProps[x];
			if(checkValue(val)){
				prop[x] = val;
			}else if(typeof(val) === "object" && checkValue(val.value)){
				autoVal = "";
				if(val.append && (x === "describedby" || x === "labelledby")){
					autoVal = mAriaProps[x] ? mAriaProps[x]+" " : "";
				}
				prop[x] = autoVal + val.value;
			}
		}
		
		//The auto-generated values above can be overridden or reset (via null)
		jQuery.extend(mAriaProps, prop);
	}

	// allow parent (e.g. FormElement) to overwrite or enhance aria attributes
	if (oElement instanceof sap.ui.core.Element && oElement.getParent() && oElement.getParent().enhanceAccessibilityState) {
		oElement.getParent().enhanceAccessibilityState(oElement, mAriaProps);
	}

	for(var p in mAriaProps) {
		if(mAriaProps[p] != null && mAriaProps[p] !== ""){ //allow 0 and false but no null, undefined or empty string
			this.writeAttributeEscaped(p === "role" ? p : "aria-"+p, mAriaProps[p]);
		}
	}

	return this;
};


/**
 * Writes either an img tag for normal URI or an span tag with needed properties for icon URI.
 * 
 * Additional classes and attributes can be added to the tag by given the second and third parameter.
 * All of the given attributes are escaped for security consideration.
 * 
 * when img tag is rendered, the following two attributes are added by default which can be overwritten by the provided mAttributes parameter:
 * 1. role: presentation
 * 2. alt: ""
 * 
 * @param {sap.ui.core.URI} sURI is the URI of an image or an icon registered in sap.ui.core.IconPool.
 * @param {array|string} aClasses are additional classes that are added to the rendered tag.
 * @param {object} mAttributes are additional attributes that are added to the rendered tag.
 * @returns {sap.ui.core.RenderManager} this render manager instance to allow chaining
 */
sap.ui.core.RenderManager.prototype.writeIcon = function(sURI, aClasses, mAttributes){
	jQuery.sap.require("sap.ui.core.IconPool");

	var bIconURI = sap.ui.core.IconPool.isIconURI(sURI),
		sStartTag = bIconURI ? "<span " : "<img ",
		bTextNeeded = (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 9),
		sClasses, sProp, oIconInfo;

	if(typeof aClasses === "string"){
		aClasses = [aClasses];	
	}

	if(bIconURI){
		oIconInfo = sap.ui.core.IconPool.getIconInfo(sURI);

		if(!oIconInfo){
			jQuery.sap.log.error("An unregistered icon: " + sURI + " is used in sap.ui.core.RenderManager's writeIcon method.");
			return;
		}

		if(!aClasses){
			aClasses = [];
		}
		aClasses.push("sapUiIcon");
		if(!oIconInfo.suppressMirroring){
			aClasses.push("sapUiIconMirrorInRTL")
		}
	}

	this.write(sStartTag);

	if(jQuery.isArray(aClasses) && aClasses.length){
		sClasses = aClasses.join(" ");
		this.write("class=\"" + sClasses + "\" ");
	}

	if(bIconURI){
		if(!mAttributes){
			mAttributes = {};
		}
		if(!bTextNeeded){
			mAttributes["data-sap-ui-icon-content"] = oIconInfo.content;
		}
		this.write("style=\"font-family: " + oIconInfo.fontFamily +";\" ");
	} else {
		mAttributes = jQuery.extend({
			role: "presentation",
			alt: "",
			src: sURI
		}, mAttributes);
	}

	if(typeof mAttributes === "object"){
		for(sProp in mAttributes){
			if(mAttributes.hasOwnProperty(sProp)){
				this.writeAttributeEscaped(sProp, mAttributes[sProp]);
			}
		}
	}

	this.write(bIconURI ? ">" : "/>");

	if(bIconURI){
		bTextNeeded && this.write(oIconInfo.content);
		this.write("</span>");
	}
};

}; // end of sap/ui/core/RenderManager.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ResizeHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.ResizeHandler
jQuery.sap.declare("sap.ui.core.ResizeHandler");





(function(){

	// local logger, by default only logging errors
	var log = jQuery.sap.log.getLogger("sap.ui.core.ResizeHandler", jQuery.sap.log.Level.ERROR);

	/**
	 * Reference to the Core (implementation view, not facade)
	 * @type {sap.ui.core.Core} 
	 */
	var oCoreRef = null;

	/** 
	 * API for resize handling on registered DOM elements and controls.
	 * 
	 * This API provides firing of resize events on all browsers by regularly 
	 * checking width and height of registered DOM elements and controls and firing events accordingly.
	 * 
	 * @namespace
	 * @name sap.ui.core.ResizeHandler
	 * @public
	 */
	
	sap.ui.base.Object.extend("sap.ui.core.ResizeHandler", /** @lends sap.ui.core.ResizeHandler */ {

		constructor : function(oCore) {
			sap.ui.base.Object.apply(this);

			oCoreRef = oCore;

			this.aResizeListeners = [];
			this.bRegistered = false;

			this.iIdCounter = 0;

			this.fDestroyHandler = jQuery.proxy(this.destroy, this);

			jQuery(window).bind("unload", this.fDestroyHandler);
			
			jQuery.sap.act.attachActivate(initListener, this);
		}

	});
	
	function clearListener(){
		if(this.bRegistered){
			this.bRegistered = false;
			sap.ui.getCore().detachIntervalTimer(this.checkSizes, this);
		}
	};
	
	function initListener(){
		if(!this.bRegistered && this.aResizeListeners.length > 0){
			this.bRegistered = true;
			sap.ui.getCore().attachIntervalTimer(this.checkSizes, this);
		}
	};

	/**
	 * Destroy method of the Resize Handler.
	 * It unregisters the event handlers.
	 *
	 * @param {jQuery.Event} oEvent the event that initiated the destruction of the ResizeHandler
	 * @private
	 */
	sap.ui.core.ResizeHandler.prototype.destroy = function(oEvent) {
		jQuery.sap.act.detachActivate(initListener, this);
		jQuery(window).unbind("unload", this.fDestroyHandler);
		oCoreRef = null;
		this.aResizeListeners = [];
		clearListener.apply(this);
	};

	/**
	 * Attaches listener to resize event.
	 *
	 * @param {DOMElement|Control} oRef the DOM reference or a control
	 * @param {function} fHandler the event handler function
	 * @return {string} Registration-ID for later detaching.
	 * @private
	 */
	sap.ui.core.ResizeHandler.prototype.attachListener = function(oRef, fHandler){
		var bIsControl = oRef instanceof sap.ui.core.Control,
			oDom = bIsControl ? oRef.getDomRef() : oRef,
			iWidth = oDom ? oDom.offsetWidth : 0,
			iHeight = oDom ? oDom.offsetHeight : 0,
			sId = "rs-" + new Date().valueOf() + "-" + this.iIdCounter++,
			dbg = (bIsControl ? ("Control " + oRef.getId()) : (oRef.id ? oRef.id : String(oRef)));

		this.aResizeListeners.push({sId: sId, oDomRef: bIsControl ? null : oRef, oControl: bIsControl ? oRef : null, fHandler: fHandler, iWidth: iWidth, iHeight: iHeight, dbg: dbg});
		log.debug("registered " + dbg);

		initListener.apply(this);
		
		return sId;
	};

	/**
	 * Detaches listener from resize event.
	 *
	 * @param {string} Registration-ID returned from attachListener
	 * @private
	 */
	sap.ui.core.ResizeHandler.prototype.detachListener = function(sId){
		var that = this;
		jQuery.each(this.aResizeListeners, function(index, oResizeListener){
			if(oResizeListener.sId == sId){
				that.aResizeListeners.splice(index,1);
				log.debug("deregistered " + sId);
				return false; //break the loop
			};
		});

		// if list is empty now, stop interval
		if(this.aResizeListeners.length == 0){
			clearListener.apply(this);
		}
	};


	/**
	 * Check sizes of resize elements.
	 * @private
	 */
	sap.ui.core.ResizeHandler.prototype.checkSizes = function() {
		var bDebug = log.isLoggable();
		if ( bDebug ) { 
			log.debug("checkSizes:"); 
		} 
		jQuery.each(this.aResizeListeners, function(index, oResizeListener){
			if(oResizeListener){
				var bCtrl = !!oResizeListener.oControl,
					oDomRef = bCtrl ? oResizeListener.oControl.getDomRef() : oResizeListener.oDomRef;
					
				if ( oDomRef && jQuery.contains(document.documentElement, oDomRef)) { //check that domref is still active 
					
					var iOldWidth = oResizeListener.iWidth,
						iOldHeight = oResizeListener.iHeight,
						iNewWidth = oDomRef.offsetWidth,
						iNewHeight = oDomRef.offsetHeight;
				
					if(iOldWidth != iNewWidth || iOldHeight != iNewHeight){
						oResizeListener.iWidth = iNewWidth;
						oResizeListener.iHeight = iNewHeight;
						
						var oEvent = jQuery.Event("resize");
						oEvent.target = oDomRef;
						oEvent.currentTarget = oDomRef;
						oEvent.size = {width: iNewWidth, height: iNewHeight};
						oEvent.oldSize = {width: iOldWidth, height: iOldHeight};
						oEvent.control = bCtrl ? oResizeListener.oControl : null;
						
						if ( bDebug ) { 
							log.debug("resize detected for '" + oResizeListener.dbg + "': " + oEvent.oldSize.width + "x" + oEvent.oldSize.height + " -> " + oEvent.size.width + "x" + oEvent.size.height); 
						}
						
						oResizeListener.fHandler(oEvent);
					}

				}
			}
		});
		
		if(sap.ui.core.ResizeHandler._keepActive != true && sap.ui.core.ResizeHandler._keepActive != false){
			//initialize default
			sap.ui.core.ResizeHandler._keepActive = false;
		}
		
		if(!jQuery.sap.act.isActive() && !sap.ui.core.ResizeHandler._keepActive){
			clearListener.apply(this);
		}
	};

	/**
	 * Registers the given handler for resize events on the given
	 * DOM reference or Control.
	 *
	 * @param {DOMElement|Control} oRef the Control or the DOM reference for which the given handler should be registered (beside the window)
	 * @param {function} fHandler the handler which should be called on a resize event
	 * @return {string} Registration ID which can be used for deregistering
	 * @name sap.ui.core.ResizeHandler#register
	 * @function
	 * @public
	 */
	sap.ui.core.ResizeHandler.register = function(oRef, fHandler) {
		if(!oCoreRef || !oCoreRef.oResizeHandler) {
			return null;
		}
		return oCoreRef.oResizeHandler.attachListener(oRef, fHandler);
	};

	/**
	 * Deregisters the registered handler for resize events with the given ID.
	 *
	 * @param {string} Registration ID
	 * @name sap.ui.core.ResizeHandler#deregister
	 * @function
	 * @public
	 */
	sap.ui.core.ResizeHandler.deregister = function(sId) {
		if(!oCoreRef || !oCoreRef.oResizeHandler) {
			return;
		}
		oCoreRef.oResizeHandler.detachListener(sId);
	};
	
	/**
	 * Deregisters all registered handler for resize events for the given control.
	 *
	 * @param {string} sControlId the control Id
	 * @name sap.ui.core.ResizeHandler#deregisterAllForControl
	 * @function
	 * @private
	 */
	sap.ui.core.ResizeHandler.deregisterAllForControl = function(sControlId) {
		if(!oCoreRef || !oCoreRef.oResizeHandler) {
			return;
		}
		
		var aIds = [];
		jQuery.each(oCoreRef.oResizeHandler.aResizeListeners, function(index, oResizeListener){
			if(oResizeListener && oResizeListener.oControl && oResizeListener.oControl.getId() === sControlId){
				aIds.push(oResizeListener.sId);
			};
		});
		jQuery.each(aIds, function(index, sId){
			sap.ui.core.ResizeHandler.deregister(sId);
		});
	};

}());
}; // end of sap/ui/core/ResizeHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.core.UIComponentMetadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.ComponentMetadata
jQuery.sap.declare("sap.ui.core.UIComponentMetadata");



/**
 * Creates a new metadata object for a UIComponent subclass.
 *
 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
 * @param {object} oStaticInfo static info to construct the metadata from
 *
 * @experimental Since 1.15.1. The Component concept is still under construction, so some implementation details can be changed in future.
 * @class
 * @author SAP
 * @version 1.18.9
 * @since 1.15.1
 */
sap.ui.core.UIComponentMetadata = function(sClassName, oClassInfo) {
	
	// call super constructor
	sap.ui.core.ComponentMetadata.apply(this, arguments);
	
};

//chain the prototypes
sap.ui.core.UIComponentMetadata.prototype = jQuery.sap.newObject(sap.ui.core.ComponentMetadata.prototype);

sap.ui.core.UIComponentMetadata.preprocessClassInfo = function(oClassInfo) {
	// if the component is a string we convert this into a "_src" metadata entry
	// the specific metadata object can decide to support this or gracefully ignore it
	// basically the ComponentMetadata makes use of this feature
	if (oClassInfo && typeof oClassInfo.metadata === "string") {
		oClassInfo.metadata = {
			_src: oClassInfo.metadata
		};
	}
	return oClassInfo;
};

sap.ui.core.UIComponentMetadata.prototype.applySettings = function(oClassInfo) {

	sap.ui.core.ComponentMetadata.prototype.applySettings.call(this, oClassInfo);

	var oStaticInfo = oClassInfo.metadata;

	// if the root view is a string we convert it into a view 
	// configuration object and assume that it is a XML view
	this._mRootView = oStaticInfo.rootView;
	if (typeof this._mRootView === "string") {
		this._mRootView = {
				viewName: this._mRootView,
				type: sap.ui.core.mvc.ViewType.XML
		};
	}
	this._mRouting = oStaticInfo.routing;

	// some metadata needs to be merged with the metadata for the parent component
	var oParent = this.getParent();
	if (oParent instanceof sap.ui.core.UIComponentMetadata) {
		if (oParent._mRootView) {
			this._mRootView = jQuery.extend(true, {}, oParent._mRootView, this._mRootView);
		}
		this._mRouting = jQuery.extend(true, {}, oParent._mRouting, this._mRouting);
	}
	
};


/**
 * Returns the root view of the component.
 * @return {string|object} root view as string or as configuration object ({@link sap.ui.view})
 * @protected
 * @since 1.15.1
 * @experimental Since 1.15.1. Implementation might change. 
 */
sap.ui.core.UIComponentMetadata.prototype.getRootView = function() {
	return this._mRootView;
};

/**
 * Returns the routing configuration. 
 * @return {object} routing configuration
 * @private
 * @since 1.16.1 
 * @experimental Since 1.16.1. Implementation might change. 
 */
sap.ui.core.UIComponentMetadata.prototype.getRoutingConfig = function() {
	return this._mRouting && this._mRouting.config;
};

/**
 * Returns the array of routes. If not defined the array is undefined. 
 * @return {array} routes
 * @private
 * @since 1.16.1 
 * @experimental Since 1.16.1. Implementation might change. 
 */
sap.ui.core.UIComponentMetadata.prototype.getRoutes = function() {
	return this._mRouting && this._mRouting.routes;
};

}; // end of sap/ui/core/UIComponentMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.core.delegate.ItemNavigation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * @namespace
 * @name sap.ui.core.delegate
 * @public
 */

// Provides class sap.ui.core.delegate.ItemNavigation
jQuery.sap.declare("sap.ui.core.delegate.ItemNavigation");



/**
 * Creates an ItemNavigation delegate that can be attached to Controls requiring
 * capabilities for keyboard navigation between items.
 *
 * @class Delegate for the ItemNavigation with the keyboard.
 *
 * @author SAP
 *
 * Delegate for the ItemNavigation with
 * arrow keys over a one dimensional list of items.
 *
 * The ItemNavigation gets a main DOM reference and
 * an array of DOM references that represent the
 * DOM nodes that should be focused.
 *
 * If there are disabled nodes or not focusable nodes like separators that should be used
 * (e.g. for paging issues) in the ItemNavigation they
 * can be added to the DOM reference array as empty (false) entries. These nodes are
 * not focused by keyboard navigation but are useful because the index of the nodes in the
 * ItemNavigation is the same like in the calling control.
 *
 * If the DOM references are submitted to the ItemNavigation the TabIndexes of the
 * nodes are adjusted regarding to the Focused Index.
 *
 * If the ItemNavigation is nested in an other ItemNavigation (e.g. SegmentedButton in Toolbar)
 * the RootDomRef will always have TabIndex -1.
 *
 * Per default the ItemNavigation cycles over the items.
 * It starts again on the top if arrow down is pressed while
 * the last item has the focus. It starts at the end if arrow up or
 * left is pressed while the first item has the focus.
 * If you like to stop the navigation at the first and last item,
 * call the <code>setCycling</code> method with a value of <code>false</code>.
 *
 * It is possible to have multiple columns in the item navigation. If multiple columns
 * are used the keyboard navigation changes. Right and left will get to the next or previous
 * node. but up and down will navigate the same way but in vertical direction.
 *
 * The ItemNavigation helper also allows to set a selected index that is used
 * if the user initially enters the navigated control (for a radio group there
 * is one selected).
 *
 * This class listens to mousedown event and if it occurs on an item in the
 * list aItemDomRefs, it sets the focus to it.
 *
 * Remembering the focused item after a server roundtrip or after re-rendering is
 * up to the control that uses this delegate.
 *
 * When the <code>setPageSize</code> method is called with a value &gt; 0,
 * then page up and down events will be handled.
 *
 * The <code>BeforeFocus</code> event is fired before the actual item is focused.
 * The control can register to this event and e.g. make the item visible
 * if it is not currently visible.
 * The index of the focused Item and the triggering event are returned.
 * !!! But this is not usable in the moment because not visible items are not reached
 * !!! by keyboard navigation. It is to late to make them visible on this event or it
 * !!! is fired to late.
 * !!! This must be redesigned if the feature is really needed. (e.g. in TabStrip for
 * !!! tabs that are not visible in the moment...)
 *
 * The <code>AfterFocus</code> event is fired after the actual item is focused.
 * The control can register to this event and react on the focus change.
 * The index of the focused Item and the triggering event are returned.
 *
 * @extends sap.ui.base.EventProvider
 *
 * @param {Element} oDomRef the DOM element that is focused if the item navigation is started
 * @param {Element[]} aItemDomRefs Array of DOM elements representing the items for the navigation
 * @param {boolean} [bNotInTabChain=false] Whether the selected element should be in the tab chain or not
 *
 * @version 1.18.9
 * @constructor
 * @name sap.ui.core.delegate.ItemNavigation
 * @public
 */
sap.ui.base.EventProvider.extend("sap.ui.core.delegate.ItemNavigation", /** @lends sap.ui.core.delegate.ItemNavigation */ {
	constructor: function(oDomRef, aItemDomRefs, bNotInTabChain) {

		sap.ui.base.EventProvider.apply(this);

		// the surrounding dom ref that is focused initially
		this.oDomRef = null;

		if (oDomRef) {
			this.setRootDomRef(oDomRef);
		}

		// the array of dom refs representing the items
		this.aItemDomRefs = [];
		if (aItemDomRefs) {
			this.setItemDomRefs(aItemDomRefs);
		}

		// initialize Tabindex
		this.iTabIndex = -1;

		// whether the active element should get a tabindex of 0 or -1
		this.iActiveTabIndex = !!bNotInTabChain ? -1 : 0;
	
		// the initial focusedindex
		this.iFocusedIndex = -1;

		// the initial selected index (if any)
		this.iSelectedIndex = -1;

		// default for cycling
		this.bCycling = true;

		// default for table mode
		this.bTableMode = false;

		// the pagesize for pageup and down events
		this.iPageSize = -1;

		// a marker to enable focusin to decide HOW the focus arrived
		this._bMouseDownHappened = false;
		
		// default disabled modifiers these modifiers will not be handled by ItemNavigation
		this.oDisabledModifiers = {
			sapend : ["alt", "shift"],
			saphome : ["alt", "shift"]
		};
	}
});

sap.ui.core.delegate.ItemNavigation.Events = {
	BeforeFocus: "BeforeFocus",
	AfterFocus: "AfterFocus"
};

/**
 * Sets the disabled modifiers 
 * These modifiers will not be handled by ItemNavigation
 * 
 * <pre>
 * Example: Disable shift + up handling of ItemNavigation
 * 
 * oItemNavigation.setDisabledModifiers({
 *     sapnext : ["shift"]
 * });
 * 
 * Possible keys are : "shift", "alt", "ctrl", "meta" 
 * Possible events are : "sapnext", "sapprevious", "saphome", "sapend"
 * </pre>
 * 
 * @param {Object} oDisabledModifiers Object that includes event type with disabled keys as an array
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setDisabledModifiers = function(oDisabledModifiers) {
	this.oDisabledModifiers = oDisabledModifiers;
	return this;
};

/**
 * Returns disabled modifiers 
 * These modifiers will not be handled by ItemNavigation
 * 
 * @return {Object} 
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.getDisabledModifiers = function(oDisabledModifiers) {
	return this.oDisabledModifiers;
};

/**
 * Check whether given event has disabled modifier or not
 * 
 * @param {jQuery.Event} oEvent jQuery event
 * @return {Boolean} 
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.hasDisabledModifier = function(oEvent) {
	var aDisabledKeys = this.oDisabledModifiers[oEvent.type.replace("modifiers", "")];
	if (jQuery.isArray(aDisabledKeys)) {
		for (var i = 0; i < aDisabledKeys.length; i++) {
			if (oEvent[aDisabledKeys[i] + "Key"]) {
				return true;
			}
		}
	}
	
	return false;
};

/**
 * Sets the root reference surrounding the items
 *
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setRootDomRef = function(oDomRef) {
	this.oDomRef = oDomRef;

	// in nested ItemNavigation the tabindex must only be set at the root DOM from the parent ItemNavigation
	if (!jQuery(this.oDomRef).data("sap.INItem")) {
		if (this.iFocusedIndex >= 0) {
			jQuery(this.oDomRef).attr("tabIndex", this.iTabIndex);
		} else {
			jQuery(this.oDomRef).attr("tabIndex", this.iActiveTabIndex);
		}
	}

	jQuery(this.oDomRef).data("sap.INRoot", this);

	return this;
};

/**
 * returns the root dom reference surrounding the items
 *
 * @return {Element} root dom reference surrounding the items
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.getRootDomRef = function() {
	return this.oDomRef;
};

/**
 * returns the array of item dom refs
 *
 * @return {Element[]} array of item dom refs
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.getItemDomRefs = function() {
	return this.aItemDomRefs;
};

/**
 * Sets the item dom refs as an array the items
 *
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setItemDomRefs = function(aItemDomRefs) {
	this.aItemDomRefs = aItemDomRefs;

	// in nested ItemNavigation the tabindex must only be set if it's the focused item of the parent ItemNavigation
	for (var i = 0; i < this.aItemDomRefs.length; i++) {
		if (this.aItemDomRefs[i]) { // separators return null here
			var $Item = jQuery(this.aItemDomRefs[i]);

			// as this code can be executed even if the items are not visible (e.g. Popup is closed)
			// no focusable check can be performed. So only for the currently focused item
			// the tabindex is set to 0. For all items with tabindex 0 the tabindex is set to -1
			// Items without tabindex are checked for focusable on the first focusin on the root.
			if (i == this.iFocusedIndex && !$Item.data("sap.INRoot")) {
				$Item.attr("tabIndex", this.iActiveTabIndex);
			} else if ($Item.attr("tabindex") == "0"){ // set tabindex to -1 only if already set to 0
				$Item.attr("tabIndex", -1);
			}

			$Item.data("sap.INItem", true);
			$Item.data("sap.InNavArea", true); //Item is in navigation area - allow navigation mode and edit mode

			if ($Item.data("sap.INRoot") && i != this.iFocusedIndex) {

				// item is root of an nested ItemNavigation -> set tabindexes from its items to -1
				$Item.data("sap.INRoot").setNestedItemsTabindex();
			}
		}
	}

	return this;
};

/**
 * Sets the tabindex of the items.
 *
 * This can not be done while setting items because at this point of time the items might
 * be invisible (because e.g. popup closed). So the focusable check will fail
 * So the item tabindexes are set if the rootDom ist focused the first time.
 *
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.setItemsTabindex = function() {

	for (var i = 0; i < this.aItemDomRefs.length; i++) {
		if (this.aItemDomRefs[i]) { // separators return null here
			var $Item = jQuery(this.aItemDomRefs[i]);
			if ($Item.is(":sapFocusable")) {

				// not focusable items (like labels) must not get a tabindex attribute
				if (i == this.iFocusedIndex && !$Item.data("sap.INRoot")) {
					$Item.attr("tabIndex", this.iActiveTabIndex);
				}else{
					$Item.attr("tabIndex", -1);
				}
			}
		}
	}

	return this;
};

/**
 * Sets tabindex if item to -1
 * called from parent ItemNavigation if ItemNavigation is nested
 * In the nested case the tabindex is ruled by the parent ItemNavigation,
 * only the top items can have tabindex = 0.
 *
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.setNestedItemsTabindex = function() {
	if (jQuery(this.oDomRef).data("sap.INItem")) {
		for (var i = 0; i < this.aItemDomRefs.length; i++) {
			if (this.aItemDomRefs[i] && jQuery(this.aItemDomRefs[i]).attr("tabindex") == "0") { // separators return null here
				jQuery(this.aItemDomRefs[i]).attr("tabIndex", -1);
			}
		}
	}

	return this;
};

/**
 * Destroys the delegate and releases all dom references.
 *
 */
sap.ui.core.delegate.ItemNavigation.prototype.destroy = function() {

	if (this.oDomRef) {
		jQuery(this.oDomRef).removeData("sap.INRoot");
		this.oDomRef = null;
	}

	if (this.aItemDomRefs) {
		for (var i=0; i<this.aItemDomRefs.length; i++) {
			if (this.aItemDomRefs[i]) { // separators return null here
				jQuery(this.aItemDomRefs[i]).removeData("sap.INItem");
				jQuery(this.aItemDomRefs[i]).removeData("sap.InNavArea");
			}
		}

		this.aItemDomRefs = null;
	}

	this._bItemTabIndex = undefined;
};

/**
 * Sets whether the ItemNavigation should cycle through the items.
 *
 * @param {boolean} bCycling true if cycling should be done, else false
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setCycling = function(bCycling) {
	this.bCycling = bCycling;
	return this;
};

/**
 * Sets whether the ItemNavigation should use the table mode to navigate through
 * the items (navigation in a grid).
 *
 * @param {boolean} bTableMode true if table mode should be done, else false
 * @param {boolean} [bTableList] this sets a different behaviour for table mode.
 * In this mode we keep using table navigation but there are some differences. e.g.
 * 	- Page-up moves focus to the first row, not first cell like in table mode
 * 	- Page-down moves focus to the last row, not last cell like in table mode
 *
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setTableMode = function(bTableMode, bTableList) {
	this.bTableMode = bTableMode;
	this.bTableList = bTableMode ? bTableList : false;
	return this;
};

/**
 * Sets the page size of the item navigation to allow pageup and down keys.
 *
 * @param {int} iPageSize the pagesize, needs to be at least 1
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setPageSize = function(iPageSize) {
	this.iPageSize = iPageSize;
	return this;
};

/**
 * Sets the selected index if the used control supports selection.
 *
 * @param {int} iIndex the index of the first selected item
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setSelectedIndex = function(iIndex) {
	this.iSelectedIndex = iIndex;
	return this;
};

/**
 * Sets whether the items are displayed in columns
 *
 * @param {int} iColumns count of columns for the table mode or cycling mode
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.delegate.ItemNavigation.prototype.setColumns = function(iColumns) {
	this.iColumns = iColumns;
	return this;
};

/**
 * Sets the focus to the item with the given index.
 *
 * @param {int} iIndex the index of the item to focus
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.focusItem = function(iIndex, oEvent) {

	jQuery.sap.log.info("FocusItem: " + iIndex + " iFocusedIndex: " + this.iFocusedIndex, "focusItem", "ItemNavigation");

	if (iIndex == this.iFocusedIndex && this.aItemDomRefs[this.iFocusedIndex] == document.activeElement) {
		return; // item already focused -> nothing to do
	}

	// if there is no item to put the focus on, we don't even try it
	if (!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(":sapFocusable")) {
		return;
	}

	this.fireEvent(sap.ui.core.delegate.ItemNavigation.Events.BeforeFocus, {
		index: iIndex,
		event: oEvent
	});

	this.setFocusedIndex(iIndex);
	this.bISetFocus = true;

	if (jQuery(this.aItemDomRefs[this.iFocusedIndex]).data("sap.INRoot") && oEvent) {

		// store event type for nested ItemNavigations
		var oItemItemNavigation = jQuery(this.aItemDomRefs[this.iFocusedIndex]).data("sap.INRoot");
		oItemItemNavigation._sFocusEvent = oEvent.type;
	}

	jQuery.sap.log.info("Set Focus on ID: " + this.aItemDomRefs[this.iFocusedIndex].id, "focusItem", "ItemNavigation");
	jQuery.sap.focus(this.aItemDomRefs[this.iFocusedIndex]);

	this.fireEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus, {
		index: iIndex,
		event: oEvent
	});
};

/**
 * Sets the focused index to the given index.
 *
 * @param {int} iIndex the index of the item
 * @return {sap.ui.core.delegate.ItemNavigation} <code>this</code> to allow method chaining
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.setFocusedIndex = function(iIndex) {
	var $Item;

	if (iIndex < 0) {
		iIndex = 0;
	}

	if (iIndex > this.aItemDomRefs.length - 1) {
		iIndex = this.aItemDomRefs.length - 1;
	}

	jQuery(this.oDomRef).attr("tabIndex", this.iTabIndex);

	if (this.iFocusedIndex !== -1 && this.aItemDomRefs.length > this.iFocusedIndex) {
		jQuery(this.aItemDomRefs[this.iFocusedIndex]).attr("tabIndex", -1);

		// if focus is in nested ItemNavigation but is moved to an other item, remove tabindex from nested item
		$Item = jQuery(this.aItemDomRefs[this.iFocusedIndex]);
		if ($Item.data("sap.INRoot") && iIndex != this.iFocusedIndex) {
			jQuery($Item.data("sap.INRoot").aItemDomRefs[$Item.data("sap.INRoot").iFocusedIndex]).attr("tabIndex", -1);
		}
	}

	this.iFocusedIndex = iIndex;
	var oFocusItem = this.aItemDomRefs[this.iFocusedIndex];

	$Item = jQuery(this.aItemDomRefs[this.iFocusedIndex]);
	if (!$Item.data("sap.INRoot")) {

		// in nested ItemNavigation the nested item gets the tabindex
		jQuery(oFocusItem).attr("tabIndex", this.iActiveTabIndex);
	}

	return this;
};

/**
 * Returns the focused dom ref.
 *
 * @return {Element} focused dom ref
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.getFocusedDomRef = function() {
	return this.aItemDomRefs[this.iFocusedIndex];
};


/**
 * Returns the focused index.
 *
 * @return {int} focused index
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.getFocusedIndex = function() {
	return this.iFocusedIndex;
};

/**
 * Handles the onfocusin event.
 *
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onfocusin = function(oEvent) {

	var oSource = oEvent.target;

	if (oSource == this.oDomRef) {

		// focus occured on the main dom ref
		// on first focus - set tabindex for items
		if (!this._bItemTabIndex) {
			this.setItemsTabindex();
			this._bItemTabIndex = true;
		}

		// if the focus came by clicking AND it did not target one of the elements, but the root element, do nothing
		// (otherwise clicking the scrollbar re-focuses the previously focused element, which causes the browser to scroll it into view)
		if (this._bMouseDownHappened) {
			return;
		}

		var iIndex;

		if (jQuery(this.oDomRef).data("sap.INItem") && this._sFocusEvent && !jQuery(this.oDomRef).data("sap.InNavArea")) {

			// if nested ItemNavigation need to know if focused by parent ItemNavigation (not in Navigation mode)
			switch (this._sFocusEvent) {
				case "sapnext":
					iIndex = 0;
					break;

				case "sapprevious":
					iIndex = this.aItemDomRefs.length-1;
					break;

				default:
					iIndex = this.iSelectedIndex != -1 ?  this.iSelectedIndex : (this.iFocusedIndex != -1 ? this.iFocusedIndex : 0);
					break;
			}

			this._sFocusEvent = undefined;
		} else {
			iIndex = this.iSelectedIndex != -1 ?  this.iSelectedIndex : (this.iFocusedIndex != -1 ? this.iFocusedIndex : 0);
		}

		this.focusItem(iIndex, oEvent);

		if (this.iFocusedIndex == -1) {

			// no item focused, maybe not focusable -> try the next one
			for (var i = iIndex + 1; i < this.aItemDomRefs.length; i++) {
				this.focusItem(i, oEvent);
				if (this.iFocusedIndex == i) {
					break;
				}
			}

			if (this.iFocusedIndex == -1 && iIndex > 0) {

				// still no item selected, try to find a previous one
				for (var i=iIndex-1; i>=0; i--) {
					this.focusItem(i, oEvent);
					if (this.iFocusedIndex == i) {
						break;
					}
				}
			}
		}

		// cancel the bubbling of event in this case
		oEvent.preventDefault();
		oEvent.stopPropagation();
	} else if (!this.bISetFocus) {

		// check if this is really the already focused item
		// in case of a click on a label this could be an other item
		if (this.aItemDomRefs && oEvent.target != this.aItemDomRefs[this.iFocusedIndex]) {
			for (var i = 0; i < this.aItemDomRefs.length; i++) {
				if (oEvent.target == this.aItemDomRefs[i]) {
					this.focusItem(i, oEvent);
					break;
				}
			}
		} else {

			// give focused item to registered application
			this.fireEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus,{index:this.iFocusedIndex, event:oEvent});
		}
	}

	this.bISetFocus = false;
};

/**
 * Handles the onsapfocusleave event
 *
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapfocusleave = function(oEvent) {
	if (!oEvent.relatedControlId || !jQuery.sap.containsOrEquals(this.oDomRef, sap.ui.getCore().byId(oEvent.relatedControlId).getFocusDomRef())) {

		// entirely leaving the control handled by this ItemNavigation instance
		this.setFocusedIndex(this.iSelectedIndex != -1 ?  this.iSelectedIndex : (this.iFocusedIndex != -1 ? this.iFocusedIndex : 0));

		if (jQuery(this.oDomRef).data("sap.INItem")) {

			// if in nested ItemNavigation and focus moves to item of parent ItemNavigation -> do not set Tabindex
			var oParentDomRef,
				$DomRef = jQuery(this.oDomRef);

			while (!oParentDomRef) {
				$DomRef = $DomRef.parent();
				if ($DomRef.data("sap.INRoot")) {
					oParentDomRef = $DomRef.get(0);
				}
			}

			if (!oEvent.relatedControlId || jQuery.sap.containsOrEquals(oParentDomRef, sap.ui.getCore().byId(oEvent.relatedControlId).getFocusDomRef())) {
				jQuery(this.aItemDomRefs[this.iFocusedIndex]).attr("tabIndex", -1);
			}
		}

		var $DomRef = jQuery(this.oDomRef);
		if ($DomRef.data("sap.InNavArea") === false) { // check for false to avoid undefinded

			// if in action mode switch back to navigation mode
			$DomRef.data("sap.InNavArea", true);
		}
	}
};

/**
 * Handles the onmousedown event
 * Sets the focus to the item if it occured on an item
 *
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onmousedown = function(oEvent) {

	// set the focus to the clicked element or back to the last
	var oSource = oEvent.target;

	if (jQuery.sap.containsOrEquals(this.oDomRef, oSource)) {

		// the mouse down occured inside the main dom ref
		for (var i = 0; i < this.aItemDomRefs.length;i++) {
			var oItem = this.aItemDomRefs[i];
			if (jQuery.sap.containsOrEquals(oItem,oSource)) {
				if (!this.bTableMode) {

					// the mousedown occured inside of an item
					this.focusItem(i, oEvent);

					// no oEvent.preventDefault(); because cursor will not be set in Textfield
					// no oEvent.stopPropagation(); because e.g. DatePicker can not close popup
				} else {

					// only focus the items if the click did not happen on a
					// focusable element!
					if (oItem === oSource || !jQuery(oSource).is(":sapFocusable")) {
						this.focusItem(i, oEvent);

						// the table mode requires not to prevent the default
						// behavior on click since we want to allow text selection
						// click into the control, ...
					}
				}
				return;
			}
		}

		if (oSource == this.oDomRef) {

			// root DomRef of item navigation has been clicked
			// focus will also come in a moment - let it know that it was the mouse who caused the focus
			this._bMouseDownHappened = true;
			var that = this;
			window.setTimeout(
				function(){
					that._bMouseDownHappened = false;
				}, 20
			);
		}
	}
};

/**
 * Handles the onsapnext event
 * Sets the focus to the next item
 *
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapnext = function(oEvent) {

	if (!jQuery.sap.containsOrEquals(this.oDomRef, oEvent.target)) {

		// current element is not part of the navigation content
		return;
	}

	if (jQuery(this.oDomRef).data("sap.InNavArea")) {

		// control is in navigation mode -> no ItemNavigation
		return;
	}

	// in the table mode we only react on events of the domrefs
	if (this.bTableMode && jQuery.inArray(oEvent.target, this.aItemDomRefs) === -1) {
		return;
	}

	// focus the next item
	var iIndex = this.iFocusedIndex,
		bFirstTime = true;

	if (iIndex > -1) {
		if (this.bTableMode) {

			var iRowCount = this.aItemDomRefs.length / this.iColumns,
				iRow = Math.floor(iIndex / this.iColumns),
				iCol = iIndex % this.iColumns;

			if (oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) {
				if (iRow  < iRowCount - 1) {
					iIndex += this.iColumns;
				}
			} else {
				if (iCol < this.iColumns - 1) {
					iIndex += 1;
				}
			}
		} else {
			do {
				if (this.iColumns > 1 && oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN) {
					if ((iIndex + this.iColumns) >= this.aItemDomRefs.length) {

						// on bottom -> begin on top of next column
						if ((iIndex % this.iColumns) < (this.iColumns -1)) {
							iIndex = (iIndex % this.iColumns) + 1;
						} else if(this.bCycling) {
							iIndex = 0;
						}
					} else {
						iIndex = iIndex + this.iColumns;
					}
				} else {
					if (iIndex == this.aItemDomRefs.length - 1) {

						// last item
						if (jQuery(this.oDomRef).data("sap.INItem")) {

							// if nested ItemNavigations leave here to ItemNavigation of parent
							return;
						} else if (this.bCycling) {

							// in cycling case focus first one, if not - don't change
							iIndex = 0;
						} else {

							// last one, no next item, so leave focus on already focused item (to prevent endless loops)
							iIndex = this.iFocusedIndex;
						}
					} else {
						iIndex++;
					}
				}

				if (iIndex === this.iFocusedIndex) {
					if (bFirstTime) {
						bFirstTime = false;
					} else {
						throw new Error("ItemNavigation has no visible/existing items and is hence unable to select the next one");
					}
				}

			// if item is not visible or a dummy item go to the next one
			} while (!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(":visible") || jQuery(this.aItemDomRefs[iIndex]).css("visibility") === "hidden"
				|| !jQuery(this.aItemDomRefs[iIndex]).is(":sapFocusable"));
		}

		this.focusItem(iIndex, oEvent);

		// cancel the event otherwise the browser will scroll
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Ensure the sapnext event with modifiers is also handled
 * 
 * @see #onsapnext
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapnextmodifiers = function(oEvent) {
	if (this.hasDisabledModifier(oEvent)) {
		return;
	}
	
	this.onsapnext(oEvent);
};

/**
 * Handles the onsapprevious event
 * Sets the focus to the previous item
 *
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapprevious = function(oEvent) {

	if (!jQuery.sap.containsOrEquals(this.oDomRef, oEvent.target)) {

		// current element is not part of the navigation content
		return;
	}


	if (jQuery(this.oDomRef).data("sap.InNavArea")) {

		// control is in navigation mode -> no ItemNavigation
		return;
	}

	// in the table mode we only react on events of the domrefs
	if (this.bTableMode && jQuery.inArray(oEvent.target, this.aItemDomRefs) === -1) {
		return;
	}

	// focus the previous item
	var iIndex = this.iFocusedIndex,
		bFirstTime = true;

	if (iIndex > -1) {
		if (this.bTableMode) {
			var iRowCount = this.aItemDomRefs.length / this.iColumns,
				iRow = Math.floor(iIndex / this.iColumns),
				iCol = iIndex % this.iColumns;

			if (oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) {
				if (iRow  > 0) {
					iIndex -= this.iColumns;
				}
			} else {
				if (iCol > 0) {
					iIndex -= 1;
				}
			}
		} else {
			do {
				if (this.iColumns > 1 && oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_UP) {
					if ((iIndex - this.iColumns) < 0) {

						// on top -> begin on end of previous column
						var iCol = 0;

						if ((iIndex % this.iColumns) > 0) {
							iCol = (iIndex % this.iColumns) - 1;
						} else if (this.bCycling) {
							iCol = this.iColumns - 1;
						}

						if (iIndex === 0 && iCol === 0) {
							iIndex = 0;
						} else {
							var iRows = Math.ceil(this.aItemDomRefs.length / this.iColumns);
							iIndex = iCol + ((iRows-1) * this.iColumns);

							if (iIndex >= this.aItemDomRefs.length) {
								iIndex = iIndex - this.iColumns;
							}
						}
					} else {
						iIndex = iIndex - this.iColumns;
					}
				} else {
					if (iIndex == 0) {

						// first item
						if (jQuery(this.oDomRef).data("sap.INItem")) {

							// if nested ItemNavigations leave here to ItemNavigation of parent
							return;
						} else if (this.bCycling) {

							// in cycling case focus last one, if not - don't change
							iIndex = this.aItemDomRefs.length - 1;
						} else {

							// first one, no next item, so leave focus on already focused item (to prevent endless loops)
							iIndex = this.iFocusedIndex;
						}
					} else {
						iIndex--;
					}
				}

				if (iIndex == this.iFocusedIndex) {
					if (bFirstTime) {
						bFirstTime = false;
					} else {
						throw new Error("ItemNavigation has no visible/existing items and is hence unable to select the previous one");
					}
				}

			// if item is not visible or a dummy item go to the next one
			} while(!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(":visible") || jQuery(this.aItemDomRefs[iIndex]).css("visibility") === "hidden"
				|| !jQuery(this.aItemDomRefs[iIndex]).is(":sapFocusable"));
		}

		this.focusItem(iIndex, oEvent);

		// cancel the event otherwise the browser will scroll
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Ensure the sapprevious event with modifiers is also handled
 *
 * @see #onsapprevious
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsappreviousmodifiers = function(oEvent) {
	if (this.hasDisabledModifier(oEvent)) {
		return;
	}
	
	this.onsapprevious(oEvent);
};

/**
 * Handles the onsappageup event
 * Sets the focus to the previous page item of iPageSize>0
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsappageup = function(oEvent) {

	if (!jQuery.sap.containsOrEquals(this.oDomRef, oEvent.target)) {

		// current element is not part of the navigation content
		return;
	}

	// in the table mode we only react on events of the domrefs
	if (this.bTableMode && jQuery.inArray(oEvent.target, this.aItemDomRefs) === -1) {
		return;
	}

	if (this.iPageSize > 0) {
		var iIndex = this.iFocusedIndex;

		if (iIndex > -1) {
			iIndex = iIndex - this.iPageSize;

			while (iIndex > 0 && !jQuery(this.aItemDomRefs[iIndex]).is(":sapFocusable")) {
				iIndex--;
			}

			if (iIndex < 0) {
				iIndex = 0;
			}

			this.focusItem(iIndex, oEvent);
		}
	} else if (this.bTableMode) {
		var iIndex = this.iFocusedIndex % this.iColumns;
		this.focusItem(iIndex, oEvent);
	}

	// cancel the event otherwise the browser will scroll
	oEvent.preventDefault();
	oEvent.stopPropagation();

};

/**
 * Handles the onsappagedown event.
 *
 * Sets the focus to the previous page item of iPageSize>0
 *
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsappagedown = function(oEvent) {

	if (!jQuery.sap.containsOrEquals(this.oDomRef, oEvent.target)) {

		// current element is not part of the navigation content
		return;
	}

	// in the table mode we only react on events of the domrefs
	if (this.bTableMode && jQuery.inArray(oEvent.target, this.aItemDomRefs) === -1) {
		return;
	}

	if (this.iPageSize > 0) {
		var iIndex = this.iFocusedIndex;

		if (iIndex > -1) {
			iIndex = iIndex + this.iPageSize;

			while (iIndex < this.aItemDomRefs.length - 1 && !jQuery(this.aItemDomRefs[iIndex]).is(":sapFocusable")) {
				iIndex++;
			}

			if (iIndex > this.aItemDomRefs.length - 1) {
				iIndex = this.aItemDomRefs.length - 1;
			}

			this.focusItem(iIndex, oEvent);
		}
	} else if (this.bTableMode) {
		var iRowCount = this.aItemDomRefs.length / this.iColumns,
			iCol = this.iFocusedIndex % this.iColumns;

		iIndex = (iRowCount - 1) * this.iColumns + iCol;
		this.focusItem(iIndex, oEvent);
	}

	// cancel the event otherwise the browser will scroll
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Handles the onsaphome event
 *
 * Sets the focus to first visible and focusable item
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsaphome = function(oEvent) {

	if (!jQuery.sap.containsOrEquals(this.oDomRef, oEvent.target)) {

		// current element is not part of the navigation content
		// or shift or alt key is pressed
		return;
	}

	// in the table mode we only react on events of the domrefs
	if (this.bTableMode && jQuery.inArray(oEvent.target, this.aItemDomRefs) === -1) {
		return;
	}

	var iIndex = 0;
	if (this.bTableMode) {

		if (!this.bTableList && !(oEvent.metaKey || oEvent.ctrlKey)) {
			var iRow = Math.floor(this.iFocusedIndex / this.iColumns);
			iIndex = iRow * this.iColumns;
		}
	} else {
		if (!!(oEvent.metaKey || oEvent.ctrlKey)) {

			// do not handle ctrl
			return;
		}

		while(!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(":visible") || jQuery(this.aItemDomRefs[iIndex]).css("visibility") === "hidden"
			|| !jQuery(this.aItemDomRefs[iIndex]).is(":sapFocusable")) {
			iIndex++;

			if (iIndex == this.aItemDomRefs.length) {

				// no visible item -> no new focus
				return;
			}
		}
	}

	this.focusItem(iIndex, oEvent);

	// cancel the event otherwise the browser will scroll
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Ensure the sapprevious event with modifiers is also handled
 *
 * @see #onsaphome
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsaphomemodifiers = function(oEvent) {
	if (this.hasDisabledModifier(oEvent)) {
		return;
	}
	
	this.onsaphome(oEvent);
};

/**
 * Handles the onsapend event
 *
 * Sets the focus to last visible and focusable item
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapend = function(oEvent) {

	if (!jQuery.sap.containsOrEquals(this.oDomRef, oEvent.target)) {

		// current element is not part of the navigation content
		// or shift or alt key is pressed
		return;
	}

	// in the table mode we only react on events of the domrefs
	if (this.bTableMode && jQuery.inArray(oEvent.target, this.aItemDomRefs) === -1) {
		return;
	}

	var iIndex = this.aItemDomRefs.length-1;

	if (this.bTableMode) {
		if (!this.bTableList && !(oEvent.metaKey || oEvent.ctrlKey)) {
			var iRow = Math.floor(this.iFocusedIndex / this.iColumns);
			iIndex = iRow * this.iColumns + this.iColumns - 1;
		}
	} else {

		if (!!(oEvent.metaKey || oEvent.ctrlKey)) {

			// do not handle ctrl
			return;
		}

		while (!this.aItemDomRefs[iIndex] || !jQuery(this.aItemDomRefs[iIndex]).is(":visible") || jQuery(this.aItemDomRefs[iIndex]).css("visibility") == "hidden"
			|| !jQuery(this.aItemDomRefs[iIndex]).is(":sapFocusable")) {
			iIndex--;

			if (iIndex < 0) {

				// no visible item -> no new focus
				return;
			}
		}
	}

	this.focusItem(iIndex, oEvent);

	// cancel the event otherwise the browser will scroll
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Ensure the sapprevious event with modifiers is also handled.
 *
 * @see #onsapend
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onsapendmodifiers = function(oEvent) {
	if (this.hasDisabledModifier(oEvent)) {
		return;
	}
	
	this.onsapend(oEvent);
};


/**
 * Sets tabIndex of the RootElement to 0. Is used, for example in image map for IE browser in order to avoid tabIndex -1 on image with what it would not be tabable at all.
 *
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.setTabIndex0 = function() {
	this.iTabIndex = 0;
	this.iActiveTabIndex = 0;
};

/**
 * toggle navigation/action mode on F2
 *
 * @private
 */
sap.ui.core.delegate.ItemNavigation.prototype.onkeyup = function(oEvent) {

	if (oEvent.keyCode == jQuery.sap.KeyCodes.F2) {

		var $DomRef = jQuery(this.oDomRef);

		if ($DomRef.data("sap.InNavArea")) {
			$DomRef.data("sap.InNavArea", false);
		} else if($DomRef.data("sap.InNavArea") === false) { // check for false to avoid undefined
			$DomRef.data("sap.InNavArea", true);
		}

		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

}; // end of sap/ui/core/delegate/ItemNavigation.js
if ( !jQuery.sap.isDeclared('sap.ui.core.format.DateFormat') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.format.DateFormat
jQuery.sap.declare("sap.ui.core.format.DateFormat");


/**
 * Constructor for DateFormat - must not be used: To get a DateFormat instance, please use getInstance, getDateTimeInstance or getTimeInstance.
 *
 * @class
 * The DateFormat is a static class for formatting and parsing date and time values according
 * to a set of format options.
 *
 * Supported format options are pattern based on Unicode LDML Date Format notation.
 * If no pattern is specified a default pattern according to the locale settings is used.
 *
 * @public
 * @see http://unicode.org/reports/tr35/#Date_Field_Symbol_Table
 */
sap.ui.core.format.DateFormat = function() {
	// Do not use the constructor
	throw new Error();
};

sap.ui.core.format.DateFormat.oDateInfo = {
	oDefaultFormatOptions: {
		style: "medium"
	},
	aFallbackFormatOptions: [
		{style: "short"},
		{style: "medium"},
		{pattern: "yyyy-MM-dd"},
		{pattern: "yyyyMMdd"}
	],
	getPattern: function(oLocaleData, sStyle) {
		return oLocaleData.getDatePattern(sStyle);
	},
	oRequiredParts: {
		"text": true, "year": true, "weekYear": true, "month": true, "day": true
	}
};

sap.ui.core.format.DateFormat.oDateTimeInfo = {
	oDefaultFormatOptions: {
		style: "medium"
	},
	aFallbackFormatOptions: [
      	{style: "short"},
    	{style: "medium"},
    	{pattern: "yyyy-MM-dd'T'hh:mm:ss"},
    	{pattern: "yyyyMMdd hhmmss"}
	],
	getPattern: function(oLocaleData, sStyle) {
		var sDateTimePattern = oLocaleData.getDateTimePattern(sStyle),
			sDatePattern = oLocaleData.getDatePattern(sStyle),
			sTimePattern = oLocaleData.getTimePattern(sStyle);
		return sDateTimePattern.replace("{1}", sDatePattern).replace("{0}", sTimePattern);
	},
	oRequiredParts: {
		"text": true, "year": true, "weekYear": true, "month": true, "day": true, "hour0_23": true,  
		"hour1_24": true, "hour0_11": true, "hour1_12": true
	}

};

sap.ui.core.format.DateFormat.oTimeInfo = {
	oDefaultFormatOptions: {
		style: "medium"
	},
	aFallbackFormatOptions: [
      	{style: "short"},
    	{style: "medium"},
    	{pattern: "hh:mm:ss"},
    	{pattern: "hhmmss"}
	],
	getPattern: function(oLocaleData, sStyle) {
		return oLocaleData.getTimePattern(sStyle);
	},
	oRequiredParts: {
		"text": true, "hour0_23": true, "hour1_24": true, "hour0_11": true, "hour1_12": true
	}
};


/**
 * @see sap.ui.core.format.DateFormat.getDateInstance
 */
sap.ui.core.format.DateFormat.getInstance = function(oFormatOptions, oLocale) {
	return this.getDateInstance(oFormatOptions, oLocale);
};


/**
 * Get a date instance of the DateFormat, which can be used for formatting.
 *
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {string} [oFormatOptions.pattern] a data pattern in LDML format. It is not verified whether the pattern represents only a date.  
 * @param {string} [oFormatOptions.style] either empty or 'short, 'medium' or 'long'. If no pattern is given, a locale dependent default date pattern of that style is used from the LocaleData class.    
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} date instance of the DateFormat
 * @static
 * @public
 */
sap.ui.core.format.DateFormat.getDateInstance = function(oFormatOptions, oLocale) {
	return this.createInstance(oFormatOptions, oLocale, this.oDateInfo);
};

/**
 * Get a datetime instance of the DateFormat, which can be used for formatting.
 *
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {string} [oFormatOptions.pattern] a datetime pattern in LDML format. It is not verified whether the pattern represents a full datetime.  
 * @param {string} [oFormatOptions.style] either empty or 'short, 'medium' or 'long'. If no pattern is given, a locale dependent default datetime pattern of that style is used from the LocaleData class.    
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} datetime instance of the DateFormat
 * @static
 * @public
 */
sap.ui.core.format.DateFormat.getDateTimeInstance = function(oFormatOptions, oLocale) {
	return this.createInstance(oFormatOptions, oLocale, this.oDateTimeInfo);
};

/**
 * Get a time instance of the DateFormat, which can be used for formatting.
 *
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {string} [oFormatOptions.pattern] a time pattern in LDML format. It is not verified whether the pattern only represents a time.  
 * @param {string} [oFormatOptions.style] either empty or 'short, 'medium' or 'long'. If no pattern is given, a locale dependent default time pattern of that style is used from the LocaleData class.    
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} time instance of the DateFormat
 * @static
 * @public
 */
sap.ui.core.format.DateFormat.getTimeInstance = function(oFormatOptions, oLocale) {
	return this.createInstance(oFormatOptions, oLocale, this.oTimeInfo);
};

/**
 * Create instance of the DateFormat.
 *
 * @param {object} [oFormatOptions] Object which defines the format options
 * @param {sap.ui.core.Locale} [oLocale] Locale to ask for locale specific texts/settings
 * @return {sap.ui.core.format.DateFormat} time instance of the DateFormat
 * @static
 * @private
 */
sap.ui.core.format.DateFormat.createInstance = function(oFormatOptions, oLocale, oInfo) {
	// Create an instance of the DateFormat
	var oFormat = jQuery.sap.newObject(this.prototype);
	
	// Handle optional parameters
	if ( oFormatOptions instanceof sap.ui.core.Locale ) {
		oLocale = oFormatOptions;
		oFormatOptions = undefined;
	}
	
	// Get Locale and LocaleData to use
	if (!oLocale) {
		oLocale = sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale();
	}
	oFormat.oLocale = oLocale;
	oFormat.oLocaleData = sap.ui.core.LocaleData.getInstance(oLocale);
	
	// Extend the default format options with custom format options and retrieve the pattern
	// from the LocaleData, in case it is not defined yet
	oFormat.oFormatOptions = jQuery.extend(false, {}, oInfo.oDefaultFormatOptions, oFormatOptions);
	if (!oFormat.oFormatOptions.pattern) {
		oFormat.oFormatOptions.pattern = oInfo.getPattern(oFormat.oLocaleData, oFormat.oFormatOptions.style);
	}

	// If fallback DateFormats have not been created yet, do it now
	if (!oInfo.aFallbackFormats) {
		oInfo.aFallbackFormats = [];
		jQuery.each(oInfo.aFallbackFormatOptions, function(i, oFormatOptions) {
			var oFallbackFormat = sap.ui.core.format.DateFormat.createInstance(oFormatOptions, oLocale, oInfo);
			oFallbackFormat.bIsFallback = true;
			oInfo.aFallbackFormats.push(oFallbackFormat);
		})
	}
	oFormat.aFallbackFormats = oInfo.aFallbackFormats;
	oFormat.oRequiredParts = oInfo.oRequiredParts;
	
	oFormat.init();
	return oFormat;
};

/**
 * Initialize date format
 */
sap.ui.core.format.DateFormat.prototype.init = function() {
	this.aMonthsAbbrev = this.oLocaleData.getMonths("abbreviated");
	this.aMonthsWide = this.oLocaleData.getMonths("wide");
	this.aMonthsAbbrevSt = this.oLocaleData.getMonthsStandAlone("abbreviated");
	this.aMonthsWideSt = this.oLocaleData.getMonthsStandAlone("wide");
	this.aDaysAbbrev = this.oLocaleData.getDays("abbreviated");
	this.aDaysWide = this.oLocaleData.getDays("wide");
	this.aDaysAbbrevSt = this.oLocaleData.getDaysStandAlone("abbreviated");
	this.aDaysWideSt = this.oLocaleData.getDaysStandAlone("wide");
	this.aDayPeriods = this.oLocaleData.getDayPeriods("abbreviated");
	this.aFormatArray = this.parseJavaDateFormat(this.oFormatOptions.pattern);
};

/**
 * Pattern elements
 */
sap.ui.core.format.DateFormat.prototype.oStates = {
	"G": "era",
	"y": "year",
	"Y": "weekYear",
	"M": "month",
	"L": "monthStandalone",
	"w": "weekInYear",
	"W": "weekInMonth",
	"D": "dayInYear",
	"d": "day",
	"F": "dayOfWeekInMonth",
	"E": "dayNameInWeek",
	"c": "dayNameInWeekStandalone",
	"u": "dayNumberOfWeek",
	"a": "amPmMarker",
	"H": "hour0_23",
	"k": "hour1_24",
	"K": "hour0_11",
	"h": "hour1_12",
	"m": "minute",
	"s": "second",
	"S": "millisecond",
	"z": "timezoneGeneral",
	"Z": "timezoneRFC822",
	"X": "timezoneISO8601"
};

/**
 * Format a date according to the given format options.
 *
 * @param {Date} oValue the vale to format
 * @param {boolean} bUTC whether to use UTC
 * @return {string} the formatted output value
 * @public
 */
sap.ui.core.format.DateFormat.prototype.format = function(oDate, bUTC) {
	if (bUTC === undefined) {
		bUTC = this.oFormatOptions.UTC;
	}
	var aBuffer = [],
		oPart,
		iDay = bUTC ? oDate.getUTCDay() : oDate.getDay(),
		iDate = bUTC ? oDate.getUTCDate() : oDate.getDate(),
		iMonth = bUTC ? oDate.getUTCMonth() : oDate.getMonth(),
		iYear = bUTC ? oDate.getUTCFullYear() : oDate.getFullYear(),
		iMilliseconds = bUTC ? oDate.getUTCMilliseconds() : oDate.getMilliseconds(),
		iSeconds = bUTC ? oDate.getUTCSeconds() : oDate.getSeconds(),
		iMinutes = bUTC ? oDate.getUTCMinutes() : oDate.getMinutes(),
		iHours = bUTC ? oDate.getUTCHours() : oDate.getHours(),
		iTZOffset = Math.abs(oDate.getTimezoneOffset()),
		bPositiveOffset = oDate.getTimezoneOffset() > 0,
		iHourOffset = Math.floor(iTZOffset / 60),
		iMinuteOffset = iTZOffset % 60,
		sYear,
		sWeek,
		sHours,
		sResult;

	for (var i = 0; i < this.aFormatArray.length; i++) {
		oPart = this.aFormatArray[i];
		switch (oPart.sType) {
			case "text":
				aBuffer.push(oPart.sValue);
				break;
			case "day":
				aBuffer.push(jQuery.sap.padLeft(String(iDate), "0", oPart.iDigits));
				break;
			case "dayNameInWeek":
				if (oPart.iDigits < 4) {
					aBuffer.push(this.aDaysAbbrev[iDay]);
				} else if (oPart.iDigits >= 4){
					aBuffer.push(this.aDaysWide[iDay]);
				}
				break;
			case "dayNameInWeekStandalone":
				if (oPart.iDigits < 4) {
					aBuffer.push(this.aDaysAbbrevSt[iDay]);
				} else if (oPart.iDigits >= 4){
					aBuffer.push(this.aDaysWideSt[iDay]);
				}
				break;
			case "dayNumberOfWeek":
				aBuffer.push(iDay || 7);
				break;
			case "month":
				if (oPart.iDigits == 3) {
					aBuffer.push(this.aMonthsAbbrev[iMonth]);
				} else if (oPart.iDigits >= 4){
					aBuffer.push(this.aMonthsWide[iMonth]);
				} else {
					aBuffer.push(jQuery.sap.padLeft(String(iMonth + 1), "0", oPart.iDigits));
				}
				break;
			case "monthStandalone":
				if (oPart.iDigits == 3) {
					aBuffer.push(this.aMonthsAbbrevSt[iMonth]);
				} else if (oPart.iDigits >= 4){
					aBuffer.push(this.aMonthsWideSt[iMonth]);
				} else {
					aBuffer.push(jQuery.sap.padLeft(String(iMonth + 1), "0", oPart.iDigits));
				}
				break;
			case "era":
				aBuffer.push("AD");
				break;
			case "year":
			case "weekYear":
				sYear = "" + iYear;
				if (oPart.iDigits == 2 && sYear.length > 2) {
					sYear = sYear.substr(sYear.length - 2);
				}
				aBuffer.push(jQuery.sap.padLeft(sYear, "0", oPart.iDigits));
				break;
			case "weekInYear":
				sWeek = "";
				//TODO getWeek does not exist on Date object
				//-> this is a preparation for a future or custom week support
				if (oDate.getWeek) {
					sWeek += oDate.getWeek();
				}
				aBuffer.push(jQuery.sap.padLeft(sWeek, "0", oPart.iDigits));
				break;
			case "hour0_23":
				aBuffer.push(jQuery.sap.padLeft(String(iHours), "0", oPart.iDigits));
				break;
			case "hour1_24":
				if (iHours == 0) {
					sHours = "24";
				}
				else {
					sHours = String(iHours);
				}
				aBuffer.push(jQuery.sap.padLeft(sHours, "0", oPart.iDigits));
				break;
			case "hour0_11":
				if (iHours > 11) {
					sHours = String(iHours - 12);
				}
				else {
					sHours = String(iHours)
				}
				aBuffer.push(jQuery.sap.padLeft(sHours, "0", oPart.iDigits));
				break;
			case "hour1_12":
				if (iHours > 12) {
					sHours = String(iHours - 12);
				}
				else if (iHours == 0) {
					sHours = "12";
				}
				else {
					sHours = String(iHours)
				}
				aBuffer.push(jQuery.sap.padLeft(sHours, "0", oPart.iDigits));
				break;
			case "minute":
				aBuffer.push(jQuery.sap.padLeft(String(iMinutes), "0", oPart.iDigits));
				break;
			case "second":
				aBuffer.push(jQuery.sap.padLeft(String(iSeconds), "0", oPart.iDigits));
				break;
			case "millisecond":
				aBuffer.push(jQuery.sap.padLeft(String(iMilliseconds), "0", oPart.iDigits));
				break;
			case "amPmMarker":
				var iDayPeriod = iHours < 12 ? 0 : 1;
				aBuffer.push(this.aDayPeriods[iDayPeriod]);
				break;
			case "timezoneGeneral":
				//TODO getTimezoneLong and getTimezoneShort does not exist on Date object
				//-> this is a preparation for a future full timezone support (only used by unit test so far)
				if (oPart.iDigits > 3 && oDate.getTimezoneLong) {
					aBuffer.push(oDate.getTimezoneLong());
					break;
				}
				else if (oDate.getTimezoneShort){
					aBuffer.push(oDate.getTimezoneShort());
					break;
				}
				aBuffer.push("GMT");
			case "timezoneISO8601":
				if (!bUTC && iTZOffset != 0) {
					aBuffer.push(bPositiveOffset ? "-" : "+");
					aBuffer.push(jQuery.sap.padLeft(String(iHourOffset), "0", 2));
					aBuffer.push(":");
					aBuffer.push(jQuery.sap.padLeft(String(iMinuteOffset), "0", 2));
				} else {
					aBuffer.push("Z");
				}
				break;
			case "timezoneRFC822":
				if (!bUTC && iTZOffset != 0) {
					aBuffer.push(bPositiveOffset ? "-" : "+");
					aBuffer.push(jQuery.sap.padLeft(String(iHourOffset), "0", 2));
					aBuffer.push(jQuery.sap.padLeft(String(iMinuteOffset), "0", 2));
				}
				break;

		}
	}

	sResult = aBuffer.join("");
	if (sap.ui.getCore().getConfiguration().getOriginInfo()) {
		sResult = new String(sResult);
		sResult.originInfo = {
			source: "Common Locale Data Repository",
			locale: this.oLocale.toString(),
			style: this.oFormatOptions.style,
			pattern: this.oFormatOptions.pattern
		};
	}

	return sResult;
};

/**
 * Parse a string which is formatted according to the given format options.
 *
 * @param {string} sValue the string containing a formatted date/time value
 * @param {boolean} bUTC whether to use UTC, if no timezone is contained
 * @return {Date} the parsed value
 * @public
 */
sap.ui.core.format.DateFormat.prototype.parse = function(oValue, bUTC) {
	if (bUTC === undefined) {
		bUTC = this.oFormatOptions.UTC;
	}
	var oDate,
		iIndex = 0,
		bError = false,
		iDay = null,
		iMonth = null,
		iYear = null,
		iHours = null,
		iMinutes = null,
		iSeconds = null,
		iMilliseconds = null,
		bPM = false,
		oPart,
		sPart,
		iTZDiff = null,
		bValid = true,
		oRequiredParts = this.oRequiredParts;

	function isNumber(iCharCode) {
		return iCharCode >= 48 && iCharCode <= 57;
	}

	function findNumbers(iMaxLength) {
		var iLength = 0;
		while (iLength < iMaxLength && isNumber(oValue.charCodeAt(iIndex + iLength))) {
			iLength++;
		}
		return oValue.substr(iIndex, iLength);
	}

	function findEntry(aList) {
		var i;
		for (i = 0; i < aList.length; i++) {
			if (oValue.indexOf(aList[i], iIndex) == iIndex) {
				return aList[i];
			}
		}
		return null;
	}

	function findEntryIndex(aList) {
		var i;
		for (i = 0; i < aList.length; i++) {
			if (oValue.indexOf(aList[i], iIndex) == iIndex) {
				return i;
			}
		}
		return null;
	}

	function parseTZ(bISO) {
		var iTZFactor = oValue.charAt(iIndex) == "+" ? -1 : 1;
		iIndex++; //"+" or "-"
		sPart = findNumbers(2);
		var iTZDiffHour = parseInt(sPart, 10);
		iIndex = iIndex+2; //hh: 2 digits for hours
		if(bISO){
			iIndex++; //":"
		}
		sPart = findNumbers(2);
		iIndex = iIndex+2; //mm: 2 digits for minutes
		iTZDiff = parseInt(sPart, 10);
		iTZDiff = (iTZDiff + 60*iTZDiffHour)*iTZFactor;
	}
	
	function checkValid(sType, bPartInvalid) {
		if (sType in oRequiredParts && bPartInvalid) {
			bValid = false;
		}
	} 
	
	oValue = jQuery.trim(oValue);

	for (var i = 0; i < this.aFormatArray.length; i++) {
		oPart = this.aFormatArray[i];
		switch (oPart.sType) {
			case "text":
				if (oValue.indexOf(oPart.sValue, iIndex) == iIndex) {
					iIndex += oPart.sValue.length;
				} else {
					// only require text, if next part is also required
					checkValid(oPart.sType, this.aFormatArray[i+1].sType in oRequiredParts);
				}
				break;
			case "day":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				checkValid(oPart.sType, sPart === "");
				iIndex += sPart.length;
				iDay = parseInt(sPart, 10);
				break;
			case "dayNameInWeek":
			case "dayNameInWeekStandalone":
				sPart = findEntry(this.aDaysWide);
				if (sPart) {
					iIndex += sPart.length;
					break;
				}
				sPart = findEntry(this.aDaysWideSt);
				if (sPart) {
					iIndex += sPart.length;
					break;
				}
				sPart = findEntry(this.aDaysAbbrev);
				if (sPart) {
					iIndex += sPart.length;
					break;
				}
				sPart = findEntry(this.aDaysAbbrevSt);
				if (sPart) {
					iIndex += sPart.length;
					break;
				}
				break;
			case "dayNumberOfWeek":
				sPart = findNumbers(oPart.iDigits);
				iIndex += sPart.length;
				break;
			case "month":
			case "monthStandalone":
				if (oPart.iDigits < 3) {
					sPart = findNumbers(Math.max(oPart.iDigits, 2));
					checkValid(oPart.sType, sPart === "");
					iMonth = parseInt(sPart, 10) - 1;
					iIndex += sPart.length;
				} else {
					iMonth = findEntryIndex(this.aMonthsWide);
					if (iMonth != null) {
						iIndex += this.aMonthsWide[iMonth].length;
						break;
					}
					iMonth = findEntryIndex(this.aMonthsWideSt);
					if (iMonth != null) {
						iIndex += this.aMonthsWideSt[iMonth].length;
						break;
					}
					iMonth = findEntryIndex(this.aMonthsAbbrev);
					if (iMonth != null) {
						iIndex += this.aMonthsAbbrev[iMonth].length;
						break;
					}
					iMonth = findEntryIndex(this.aMonthsAbbrevSt);
					if (iMonth != null) {
						iIndex += this.aMonthsAbbrevSt[iMonth].length;
						break;
					}
					checkValid(oPart.sType, true);
				}
				break;
			case "era":
				// TODO
				break;
			case "year":
			case "weekYear":
				if (oPart.iDigits == 1) {
					sPart = findNumbers(4);
					iIndex += sPart.length;
				}
				else if (oPart.iDigits == 2) {
					sPart = findNumbers(2);
					if (sPart.length == 2) {
						iYear = parseInt(sPart, 10);
						if (iYear < 90) {
							sPart = "20" + sPart;
						} else {
							sPart = "19" + sPart;
						}
						iIndex +=2;
					}
					else {
						iIndex += sPart.length;
					}
				}
				else {
					sPart = findNumbers(oPart.iDigits);
					iIndex += sPart.length;
				}
				checkValid(oPart.sType, sPart === "");
				iYear = parseInt(sPart, 10);
				break;
			case "weekInYear":
				// TODO
				break;
			case "hour0_23":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				checkValid(oPart.sType, sPart === "");
				iIndex += sPart.length;
				iHours = parseInt(sPart, 10);
				break;
			case "hour1_24":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				checkValid(oPart.sType, sPart === "");
				iIndex += sPart.length;
				iHours = parseInt(sPart, 10);
				if (iHours == 24) {
					iHours = 0;
				}
				break;
			case "hour0_11":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				checkValid(oPart.sType, sPart === "");
				iIndex += sPart.length;
				iHours = parseInt(sPart, 10);
				break;
			case "hour1_12":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				checkValid(oPart.sType, sPart === "");
				iIndex += sPart.length;
				iHours = parseInt(sPart, 10);
				if (iHours == 12) {
					iHours = 0;
				}
				break;
			case "minute":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				checkValid(oPart.sType, sPart === "");
				iIndex += sPart.length;
				iMinutes = parseInt(sPart, 10);
				break;
			case "second":
				sPart = findNumbers(Math.max(oPart.iDigits, 2));
				checkValid(oPart.sType, sPart === "");
				iIndex += sPart.length;
				iSeconds = parseInt(sPart, 10);
				break;
			case "millisecond":
				sPart = findNumbers(Math.max(oPart.iDigits, 3));
				sPart = jQuery.sap.padRight(sPart, "0", 3);
				iIndex += sPart.length;
				iMilliseconds = parseInt(sPart, 10);
				break;
			case "amPmMarker":
				var sAM = this.aDayPeriods[0],
					sPM = this.aDayPeriods[1];
				if (oValue.indexOf(sAM, iIndex) == iIndex) {
					bPM = false;
					iIndex += 2;
				}
				else if (oValue.indexOf(sPM, iIndex) == iIndex) {
					bPM = true;
					iIndex += 2;
				}
				break;
			case "timezoneGeneral": //e.g. GMT-02:00 or GMT+02:00
				var oTZ = oValue.substring(iIndex, iIndex+3);
				if(oTZ === "GMT" || oTZ === "UTC"){
					iIndex = iIndex+3;
				}else if(oValue.substring(iIndex, iIndex+2) === "UT"){
					iIndex = iIndex+2;
				}else if(oValue.charAt(iIndex) == "Z"){
					iIndex = iIndex+1;
					iTZDiff = 0;
					break;
				}else{
					jQuery.sap.log.error(oValue + " cannot be parsed correcly by sap.ui.core.format.DateFormat: The given timezone is not supported!");
					break;
				}
			case "timezoneISO8601": //e.g. -02:00 or +02:00 or Z
				if(oValue.charAt(iIndex) == "Z"){
					iIndex = iIndex+1;
					iTZDiff = 0;
					break;
				} 
				parseTZ(true);
				break;
			case "timezoneRFC822": //e.g. -0200 or +0200
				parseTZ(false);
				break;

		}
		if (!bValid) {
			break;
		}
	}
	
	// If input value has not been completely parsed, mark it as invalid
	if (iIndex < oValue.length) {
		bValid = false;
	}
	
	if (bPM) {
		iHours += 12;
	}
	
	if (bValid) {
		if (iTZDiff != null) {
			oDate = new Date(0);
			oDate.setUTCFullYear(iYear || 1970);
			oDate.setUTCMonth(iMonth || 0);
			oDate.setUTCDate(iDay || 1);
			oDate.setUTCHours(iHours || 0);
			oDate.setUTCMinutes((iMinutes || 0) + iTZDiff);
			oDate.setUTCSeconds(iSeconds || 0);
			oDate.setUTCMilliseconds(iMilliseconds || 0);
		} else if (bUTC) {
			oDate = new Date(0);
			oDate.setUTCFullYear(iYear || 1970);
			oDate.setUTCMonth(iMonth || 0);
			oDate.setUTCDate(iDay || 1);
			oDate.setUTCHours(iHours || 0);
			oDate.setUTCMinutes(iMinutes || 0);
			oDate.setUTCSeconds(iSeconds || 0);
			oDate.setUTCMilliseconds(iMilliseconds || 0);
		} else {
			oDate = new Date(1970, 0, 1, 0, 0, 0);
			oDate.setFullYear(iYear || 1970);
			oDate.setMonth(iMonth || 0);
			oDate.setDate(iDay || 1);
			oDate.setHours(iHours || 0);
			oDate.setMinutes(iMinutes || 0);
			oDate.setSeconds(iSeconds || 0);
			oDate.setMilliseconds(iMilliseconds || 0);
		}
		return oDate;
	}
	
	if (!this.bIsFallback) {
		jQuery.each(this.aFallbackFormats, function(i, oFallbackFormat) {
			oDate = oFallbackFormat.parse(oValue);
			if (oDate) {
				return false;
			}
		});
		return oDate;
	}
	
	return null;

};


/**
 * Parse the date format string and create an format array from it, which can be
 * used for parsing and formatting the date
 *
 * @param sFormat the java date format string
 * @returns {Array} format array
 */
sap.ui.core.format.DateFormat.prototype.parseJavaDateFormat = function(sFormat) {
	var aFormatArray = [],
		i,
		bQuoted = false,
		oCurrentObject = null,
		sState = "",
		sNewState = "";


	for (i = 0; i < sFormat.length; i++) {
		var sCurChar = sFormat.charAt(i), sNextChar, sPrevChar, sPrevPrevChar;
		if (bQuoted) {
			if (sCurChar == "'") {
				sPrevChar = sFormat.charAt(i - 1);
				sPrevPrevChar = sFormat.charAt(i - 2);
				sNextChar = sFormat.charAt(i + 1);
				// handle abc''def correctly
				if (sPrevChar == "'" && sPrevPrevChar != "'") {
					bQuoted = false;
				}
				// handle 'abc''def' correctly
				else if (sNextChar == "'") {
					i += 1;
				}
				//  normal quote 'abcdef'
				else {
					bQuoted = false;
					continue;
				}
			}
			if (sState == "text") {
				oCurrentObject.sValue += sCurChar;
			} else {
				oCurrentObject = {
					sType:"text",
					sValue : sCurChar
				};
				aFormatArray.push(oCurrentObject);
				sState = "text";
			}

		} else {
			if (sCurChar == "'") {
				bQuoted = true;
			}
			else if (this.oStates[sCurChar]){
				sNewState = this.oStates[sCurChar];
				if (sState == sNewState) {
					oCurrentObject.iDigits++;
				} else {
					oCurrentObject = {
						sType: sNewState,
						iDigits: 1
					};
					aFormatArray.push(oCurrentObject);
					sState = sNewState;
				}
			}
			else {
				if (sState == "text") {
					oCurrentObject.sValue += sCurChar;
				} else {
					oCurrentObject = {
						sType:"text",
						sValue : sCurChar
					};
					aFormatArray.push(oCurrentObject);
					sState = "text";
				}
			}
		}

	}
	return aFormatArray;
};

}; // end of sap/ui/core/format/DateFormat.js
if ( !jQuery.sap.isDeclared('sap.ui.core.format.NumberFormat') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.format.NumberFormat
jQuery.sap.declare("sap.ui.core.format.NumberFormat");


/**
 * Format classes
 *
 * @namespace
 * @name sap.ui.core.format
 * @public
 */

/**
 * Constructor for NumberFormat - must not be used: To get a NumberFormat instance, please use getInstance, getFloatInstance or getIntegerInstance.
 *
 * @class
 * The NumberFormat is a static class for formatting and parsing numeric values according
 * to a set of format options.
 *
 * Supported format options:
 * <ul>
 * <li>minIntegerDigits: minimal number of non-fraction digits</li>
 * <li>maxIntegerDigits: maximum number of non-fraction digits</li>
 * <li>minFractionDigits: minimal number of fraction digits</li>
 * <li>maxFractionDigits: maximum number of fraction digits</li>
 * <li>groupingEnabled: enable grouping (show the grouping separators</li>
 * <li>groupingSeparator: the used grouping separator</li>
 * <li>decimalSeparator: the used decimal separator</li>
 * <li>plusSign: the used plus symbol</li>
 * <li>minusSign: the used minus symbol</li>
 * </ul>
 * For format options which are not specified default values according to the type and locale settings are used.
 *
 * @public
 * @name sap.ui.core.format.NumberFormat
 */
sap.ui.base.Object.extend("sap.ui.core.format.NumberFormat", /** @lends sap.ui.core.format.NumberFormat */ {
	constructor : function(oFormatOptions) {
		// Do not use the constructor
		throw new Error();
	}
});

/*
 * Default format options for Integer
 */
sap.ui.core.format.NumberFormat.oDefaultIntegerFormat = {
	minIntegerDigits: 1,
	maxIntegerDigits: 99,
	minFractionDigits: 0,
	maxFractionDigits: 0,
	groupingEnabled: false,
	groupingSeparator: ",",
	decimalSeparator: ".",
	plusSign: "+",
	minusSign: "-",
	isInteger: true
};

/*
 * Default format options for Float
 */
sap.ui.core.format.NumberFormat.oDefaultFloatFormat = {
	minIntegerDigits: 1,
	maxIntegerDigits: 99,
	minFractionDigits: 0,
	maxFractionDigits: 99,
	groupingEnabled: true,
	groupingSeparator: ",",
	decimalSeparator: ".",
	plusSign: "+",
	minusSign: "-",
	isInteger: false
};

/**
 * @see sap.ui.core.format.NumberFormat.getFloatInstance
 */
sap.ui.core.format.NumberFormat.getInstance = function(oFormatOptions, oLocale) {
	return this.getFloatInstance(oFormatOptions, oLocale);
};

/**
 * Get a float instance of the NumberFormat, which can be used for formatting.
 *
 * @param {object} [oFormatOptions] Object which defines the format options
 * @return {sap.ui.core.format.NumberFormat} float instance of the NumberFormat
 * @static
 * @public
 */
sap.ui.core.format.NumberFormat.getFloatInstance = function(oFormatOptions, oLocale) {
	var oFormat = this.createInstance(oFormatOptions, oLocale);
	oFormat.oFormatOptions = jQuery.extend(false, {}, this.oDefaultFloatFormat, this.getLocaleFormatOptions(oFormat.oLocaleData), oFormatOptions);
	return oFormat;
};

/**
 * Get an integer instance of the NumberFormat, which can be used for formatting.
 *
 * @param {object} [oFormatOptions] Object which defines the format options
 * @return {sap.ui.core.format.NumberFormat} integer instance of the NumberFormat
 * @static
 * @public
 */
sap.ui.core.format.NumberFormat.getIntegerInstance = function(oFormatOptions, oLocale) {
	var oFormat = this.createInstance(oFormatOptions, oLocale);
	oFormat.oFormatOptions = jQuery.extend(false, {}, this.oDefaultIntegerFormat, this.getLocaleFormatOptions(oFormat.oLocaleData), oFormatOptions);
	return oFormat;
};

/**
 * Create an instance of the NumberFormat.
 *
 * @param {object} [oFormatOptions] Object which defines the format options
 * @return {sap.ui.core.format.NumberFormat} integer instance of the NumberFormat
 * @static
 * @private
 */
sap.ui.core.format.NumberFormat.createInstance = function(oFormatOptions, oLocale) {
	var oFormat = jQuery.sap.newObject(this.prototype);
	if ( oFormatOptions instanceof sap.ui.core.Locale ) {
		oLocale = oFormatOptions;
		oFormatOptions = undefined;
	}
	if (!oLocale) {
		oLocale = sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale();
	}
	oFormat.oLocale = oLocale;
	oFormat.oLocaleData = sap.ui.core.LocaleData.getInstance(oLocale);
	return oFormat;
};


/**
 * Get locale dependent default format options.
 *
 * @static
 */
sap.ui.core.format.NumberFormat.getLocaleFormatOptions = function(oLocaleData) {
	return {
		plusSign: oLocaleData.getNumberSymbol("plusSign"),
		minusSign: oLocaleData.getNumberSymbol("minusSign"),
		decimalSeparator: oLocaleData.getNumberSymbol("decimal"),
		groupingSeparator: oLocaleData.getNumberSymbol("group")
	}
};

/**
 * Format a number according to the given format options.
 *
 * @param {number} oValue the number to format
 * @return {string} the formatted output value
 * @public
 */
sap.ui.core.format.NumberFormat.prototype.format = function(oValue) {
	var sNumber = this.convertToDecimal(oValue),
		sIntegerPart = "",
		sFractionPart = "",
		sGroupedIntegerPart = "",
		sResult = "",
		iPosition = 0,
		iLength = 0,
		bNegative = oValue < 0,
		iDotPos = -1,
		oOptions = this.oFormatOptions;

	if (sNumber == "NaN") {
		return sNumber;
	}	
	
	// if number is negative remove minus
	if (bNegative) {
		sNumber = sNumber.substr(1);
	}

	// if number contains fraction, extract it
	iDotPos = sNumber.indexOf(".");
	if (iDotPos > -1) {
		sIntegerPart = sNumber.substr(0, iDotPos);
		sFractionPart = sNumber.substr(iDotPos + 1);
	}
	else {
		sIntegerPart = sNumber
	}

	// integer part length
	if (sIntegerPart.length < oOptions.minIntegerDigits) {
		sIntegerPart = jQuery.sap.padLeft(sIntegerPart, "0", oOptions.minIntegerDigits);
	}
	else if (sIntegerPart.length > oOptions.maxIntegerDigits) {
		sIntegerPart = jQuery.sap.padLeft("", "?", oOptions.maxIntegerDigits);
	}

	// fraction part length
	if (sFractionPart.length < oOptions.minFractionDigits) {
		sFractionPart = jQuery.sap.padRight(sFractionPart, "0", oOptions.minFractionDigits);
	}
	else if (sFractionPart.length > oOptions.maxFractionDigits) {
		sFractionPart = sFractionPart.substr(0, oOptions.maxFractionDigits);
	}

	// grouping
	iLength = sIntegerPart.length;
	if (oOptions.groupingEnabled && iLength > 3) {
		iPosition = iLength % 3 || 3;
		sGroupedIntegerPart = sIntegerPart.substr(0, iPosition);
		while (iPosition < sIntegerPart.length) {
			sGroupedIntegerPart += oOptions.groupingSeparator;
			sGroupedIntegerPart += sIntegerPart.substr(iPosition, 3);
			iPosition += 3;
		}
		sIntegerPart = sGroupedIntegerPart;
	}

	// combine
	if (bNegative) {
		sResult = oOptions.minusSign;
	}
	sResult += sIntegerPart;
	if (sFractionPart) {
		sResult += oOptions.decimalSeparator + sFractionPart;
	}

	if (sap.ui.getCore().getConfiguration().getOriginInfo()) {
		sResult = new String(sResult);
		sResult.originInfo = {
			source: "Common Locale Data Repository",
			locale: this.oLocale.toString()
		};
	}

	return sResult;

};

/**
 * Parse a string which is formatted according to the given format options.
 *
 * @param {string} sValue the string containing a formatted numeric value
 * @return {number} the parsed value
 * @public
 */
sap.ui.core.format.NumberFormat.prototype.parse = function(sValue) {
	var oOptions = this.oFormatOptions,
		sRegExpFloat = "^\\s*([+-]?(?:[0-9\\" + oOptions.groupingSeparator + "]+|[0-9\\" + oOptions.groupingSeparator + "]*\\" + oOptions.decimalSeparator + "[0-9]+)([eE][+-][0-9]+)?)\\s*$",
		sRegExpInt = "^\\s*([+-]?[0-9\\" + oOptions.groupingSeparator + "]+)\\s*$",
		oGroupingRegExp = new RegExp("\\" + oOptions.groupingSeparator, "g"),
		oDecimalRegExp = new RegExp("\\" + oOptions.decimalSeparator, "g"),
		oRegExp,
		oResult = 0;
	
	// Check for valid syntax
	if (oOptions.isInteger) {
		oRegExp = new RegExp(sRegExpInt);
	} else {
		oRegExp = new RegExp(sRegExpFloat);
	}
	if (!oRegExp.test(sValue)) {
		return NaN;
	}
	
	// Remove grouping separator and replace locale dependant decimal separator, 
	// before calling parseInt/parseFloat
	sValue = sValue.replace(oGroupingRegExp, "");
	if (oOptions.isInteger) {
		oResult = parseInt(sValue, 10);
	}
	else {
		sValue = sValue.replace(oDecimalRegExp, ".");
		oResult = parseFloat(sValue);
	}
	return oResult;
};

/**
 * Convert to decimal representation
 * Floats larger than 1e+20 or smaller than 1e-6 are shown in exponential format,
 * but need to be converted to decimal format for further formatting
 * 
 * @param {float} fValue
 * @private
 */
sap.ui.core.format.NumberFormat.prototype.convertToDecimal = function(fValue) {
	var sValue = "" + fValue, 
		bNegative, sBase, iDecimalLength, iFractionLength, iExponent, iPos;
	if (sValue.indexOf("e") == -1 && sValue.indexOf("E") == -1) {
		return sValue;
	}
	var aResult = sValue.match(/^([+-]?)((\d+)(?:\.(\d+))?)[eE]([+-]?\d+)$/);
	bNegative = aResult[1] == "-";
	sBase = aResult[2].replace(/\./g,"");
	iDecimalLength = aResult[3] ? aResult[3].length : 0;
	iFractionLength = aResult[4] ? aResult[4].length : 0;
	iExponent = parseInt(aResult[5], 10);
	
	if (iExponent > 0) {
		if (iExponent < iFractionLength) {
			iPos = iDecimalLength + iExponent;
			sValue = sBase.substr(0, iPos) + "." + sBase.substr(iPos);
		} else {
			sValue = sBase;
			iExponent -= iFractionLength;
			for (var i = 0; i < iExponent; i++) {
				sValue += "0";
			}
		}
	} else {
		if (-iExponent < iDecimalLength) {
			iPos = iDecimalLength + iExponent;
			sValue = sBase.substr(0, iPos) + "." + sBase.substr(iPos);
		} else {
			sValue = sBase;
			iExponent += iDecimalLength;
			for (var i = 0; i > iExponent; i--) {
				sValue = "0" + sValue;
			}
			sValue = "0." + sValue;
		}
	}
	if (bNegative) {
		sValue = "-" + sValue;
	}
	return sValue;
};

}; // end of sap/ui/core/format/NumberFormat.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.Controller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides base class for controllers (part of MVC concept)
jQuery.sap.declare("sap.ui.core.mvc.Controller");


(function(){
	var mRegistry = {};

	/**
	 * Instantiates a (MVC-style) Controller. Consumers should call the constructor only in the
	 * typed controller scenario. In the generic controller use case, they should use
	 * {@link sap.ui.controller} instead.
	 *
	 * @class A generic controller implementation for the UI5 Model View controller concept.
	 *
	 * Can either be used as a generic controller which is enriched on the fly with methods
	 * and properties (see {@link sap.ui.controller}) or  as a base class for typed controllers.
	 *
	 * @param {string || object[]} sName The name of the Controller to instantiate. If a Controller is defined as real sub-class,
	 *                                   the "arguments" of the sub-class constructor should be given instead.
	 * @public
	 * @name sap.ui.core.mvc.Controller
	 */
	sap.ui.base.EventProvider.extend("sap.ui.core.mvc.Controller", /** @lends sap.ui.core.mvc.Controller */ {
		
		constructor : function(sName) {
			var oToExtend = null;
			if (typeof(sName) == "string") {
				/* TODO the whole if block is unnecessary, if constructor is really private (as documented) */
				if (!mRegistry[sName]) {
					jQuery.sap.require({modName: sName, type: "controller"}); // maybe there is a controller definition, but it has not been loaded yet -> try to load
	
					if (!mRegistry[sName]) {
						throw new Error("Controller type " + sName + " is still undefined after trying to load it.");
					}
				}
				oToExtend = mRegistry[sName];
			}

			sap.ui.base.EventProvider.apply(this,arguments);
	
			if (oToExtend) {
				jQuery.extend(this, mRegistry[sName]);
			}
	
		}

	});

	var mControllerLifecycleMethods = { 
		"onInit": true, 
		"onExit": false,
		"onBeforeRendering": false,
		"onAfterRendering": true 
	};
	
	function extendIfRequired(oController, sName) {
		var oCustomControllerDef;
		
		if (sap.ui.core.CustomizingConfiguration) {
			var controllerExtensionConfig = sap.ui.core.CustomizingConfiguration.getControllerExtension(sName);
			if (controllerExtensionConfig) {
				var sControllerName = controllerExtensionConfig.controllerName;
				jQuery.sap.log.info("Customizing: Controller '" + sName + "' is now extended by '" + sControllerName + "'");
				
				// load controller definition if required; first check whether already available...
				if ( !mRegistry[sControllerName] && !jQuery.sap.getObject(sControllerName) ) {
					// ...if not, try to load an external controller definition module
					jQuery.sap.require({modName: sControllerName, type: "controller"});
				}
				if ( !mRegistry[sControllerName] && !jQuery.sap.getObject(sControllerName) ) {
					// still not defined? this means there was not the correct controller in the file
					jQuery.sap.log.error("Attempt to load Extension Controller " + sControllerName + " was not successful - is the Controller correctly defined in its file?");
				}
				
				if (oCustomControllerDef = mRegistry[sControllerName]) { //variable init, not comparison!

					for (var memberName in oCustomControllerDef) { // TODO: check whether it is a function? This does not happen until now, so rather not.
						
						if (mControllerLifecycleMethods[memberName] !== undefined) {
							// special handling for lifecycle methods
							var fnOri = oController[memberName];
							if (fnOri && typeof fnOri === "function") {
								(function(memberName, fnOri){
									oController[memberName] = function() {
										if (mControllerLifecycleMethods[memberName]) {
											fnOri.apply(oController, arguments);
											oCustomControllerDef[memberName].apply(oController, arguments);
										} else {
											oCustomControllerDef[memberName].apply(oController, arguments);
											fnOri.apply(oController, arguments);
										}
									};
								})(memberName, fnOri);
							} else {
								oController[memberName] = oCustomControllerDef[memberName];
							}
							
						} else {
							// other methods just override the original implementation
							oController[memberName] = oCustomControllerDef[memberName];
						}
					}
					
					return oController;
					
				} else {
					// FIXME: what to do for typed controllers?
				}
			}
		}
		return oController;
	}
	
	/**
	 * Creates a new subclass of class sap.ui.core.mvc.Controller with name <code>sClassName</code> 
	 * and enriches it with the information contained in <code>oClassInfo</code>.
	 * 
	 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
	 * see {@link sap.ui.base.Object.extend Object.extend}.
	 *   
	 * @param {string} sClassName name of the class to be created
	 * @param {object} [oClassInfo] object literal with informations about the class  
	 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
	 * @return {function} the created class / constructor function
	 * @public
	 * @static
	 * @name sap.ui.core.mvc.Controller.extend
	 * @function
	 */

	/**
	 * Defines a controller class or creates an instance of an already defined controller class.
	 *
	 * When a name and a controller implementation object is given, a new controller class
	 * of the given name is created. The members of the implementation object will be copied
	 * into each new instance of that controller class (shallow copy).
	 * <b>Note</b>: as the members are shallow copied, controller instances will share all object values.
	 * This might or might not be what applications expect.
	 *
	 * If only a name is given, a new instance of the named Controller class is returned.
	 *
	 * @param {string} sName The Controller name
	 * @param {object} [oControllerImpl] An object literal defining the methods and properties of the Controller
	 * @return {void | sap.ui.core.mvc.Controller} void or the new controller instance, depending on the use case
	 * @public
	 */
	sap.ui.controller = function(sName, oControllerImpl) {
		if (!sName) {
			throw new Error("Controller name ('sName' parameter) is required");
		}

		if (!oControllerImpl) {
			// controller *instantiation*

			// check if controller is available, either anonymous or typed
			if ( !mRegistry[sName] && !jQuery.sap.getObject(sName) ) {
				// if not, try to load an external controller definition module
				jQuery.sap.require({modName: sName, type: "controller"});
			}

			if ( mRegistry[sName] ) {
				// anonymous controller
				var oController = new sap.ui.core.mvc.Controller(sName);
				oController = extendIfRequired(oController, sName);
				return oController;
				
			} else {
				var CTypedController = jQuery.sap.getObject(sName);
				if ( typeof CTypedController === "function" && CTypedController.prototype instanceof sap.ui.core.mvc.Controller ) {
					// typed controller
					var oController = new CTypedController();
					oController = extendIfRequired(oController, sName);
					return oController;
				}
			}
			throw new Error("Controller " + sName + " couldn't be instantiated");
			
		} else {
			// controller *definition*
			mRegistry[sName] = oControllerImpl;
		}

	};

	/**
	 * Returns the view associated with this controller or undefined.
	 * @return {sap.ui.core.mvc.View} View connected to this controller.
	 * @public
	 */
	sap.ui.core.mvc.Controller.prototype.getView = function() {
		return this.oView;
	};

	/**
	 * Returns an Element of the connected view with the given local Id.
	 *
	 * Views automatically prepend their own id as a prefix to created Elements
	 * to make the ids unique even in the case of multiple view instances.
	 * This method helps to find an element by its local id only.
	 *
	 * If no view is connected or if the view doesn't contain an element with
	 * the given local id, undefined is returned.
	 *
	 * @param {string} sId The view-local id
	 * @return {sap.ui.core.Element} Element by its (view local) id
	 * @public
	 */
	sap.ui.core.mvc.Controller.prototype.byId = function(sId) {
		return this.oView ? this.oView.byId(sId): undefined;
	};


	/**
	 * Converts a view local id to a globally unique one by prepending
	 * the view id.
	 *
	 * If no view is connected, undefined is returned.
	 *
	 * @param {string} sId The view-local id
	 * @return {string} The prefixed id
	 * @public
	 */
	sap.ui.core.mvc.Controller.prototype.createId = function(sId) {
		return this.oView ? this.oView.createId(sId): undefined;
	};


	sap.ui.core.mvc.Controller.prototype.connectToView = function(oView) {
		this.oView = oView;

		if (this.onInit) {
			oView.attachAfterInit(this.onInit, this);
		}
		if (this.onExit) {
			oView.attachBeforeExit(this.onExit, this);
		}
		if (this.onAfterRendering) {
			oView.attachAfterRendering(this.onAfterRendering, this);
		}
		if (this.onBeforeRendering) {
			oView.attachBeforeRendering(this.onBeforeRendering, this);
		}
		//oView.addDelegate(this);
	};

}());
}; // end of sap/ui/core/mvc/Controller.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.HTMLViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for JSView
jQuery.sap.declare("sap.ui.core.mvc.HTMLViewRenderer");


/**
 * @class JSView renderer.
 * @static
 */
sap.ui.core.mvc.HTMLViewRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.core.mvc.HTMLViewRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiView");
	rm.addClass("sapUiHTMLView");
	sap.ui.core.mvc.ViewRenderer.addDisplayClass(rm, oControl);
	if (oControl.getWidth()) {
		rm.addStyle("width", oControl.getWidth());
	}
	if (oControl.getHeight()) {
		rm.addStyle("height", oControl.getHeight());
	}
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");
	
	var sHTML = oControl._oTemplate.innerHTML;

	var content = oControl.getContent();
	var aDeferred = [];
	
	// helper method to render the controls
	var renderControl = function(oControl) {
		var sTemp = sap.ui.core.mvc.HTMLViewRenderer._getHTML(rm, oControl, sHTML);
		if (sTemp) {
			sHTML = sTemp;
		} else {
			aDeferred.push(oControl);
		}
	};

	if (content) {
		if (jQuery.isArray(content)) {
			// looks like an Array
			for (var i = 0; i < content.length; i++) {
				renderControl(content[i]);
			}

		} else if (content) {
			// should be a Control
			renderControl(content);
		}
	}

	rm.write(sHTML);
	
	// all controls that are not found in the template will be added at the end
	for (var i = 0; i < aDeferred.length; i++) {
		rm.renderControl(aDeferred[i]);
	}

	rm.write("</div>");
};


/**
 * Replaces the control placeholder in the given HTML template. Returns the new HTML template if the control was found in the template.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param {string} sHTML the HTML to replace with the control HTML
 * @return {string} the replaced HTML. Empty string "" when the control ID was not found in the given HTML string.
 * @private
 */
sap.ui.core.mvc.HTMLViewRenderer._getHTML = function (oRenderManager, oControl, sHTML) {
	var sId = oControl.getId();
	// First add new lines before any div, so that we can use an easy regexp
	sHTML = sHTML.replace(/(<div)/gi, "\n$1");
	// Simple replace the placeholder with control html
	var regExp = new RegExp('<div.*?data-sap-ui-id="' + sId + '".*?></div>', "gi");
	var aMatches = regExp.exec(sHTML);
	if (aMatches) {
		sHTML = sHTML.replace(aMatches[0], oRenderManager.getHTML(oControl));
		return sHTML;
	} else {
		return "";
	}
};
}; // end of sap/ui/core/mvc/HTMLViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.JSONViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for JSONView
jQuery.sap.declare("sap.ui.core.mvc.JSONViewRenderer");


/**
 * @class JSONView renderer.
 * @static
 */
sap.ui.core.mvc.JSONViewRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.core.mvc.JSONViewRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiView");
	rm.addClass("sapUiJSONView");
	sap.ui.core.mvc.ViewRenderer.addDisplayClass(rm, oControl);
	if (oControl.getWidth()) {
		rm.addStyle("width", oControl.getWidth());
	}
	if (oControl.getHeight()) {
		rm.addStyle("height", oControl.getHeight());
	}
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");

	var content = oControl.getContent();
	if (content) {
		if (content.length && !(content instanceof sap.ui.core.Control)) {
			// looks like an Array
			for (var i = 0; i < content.length; i++) {
				rm.renderControl(content[i]);
			}

		} else {
			// should be a Control
			rm.renderControl(oControl.getContent());
		}
	}

	rm.write("</div>");
};

}; // end of sap/ui/core/mvc/JSONViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.JSViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for JSView
jQuery.sap.declare("sap.ui.core.mvc.JSViewRenderer");


/**
 * @class JSView renderer.
 * @static
 */
sap.ui.core.mvc.JSViewRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.core.mvc.JSViewRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiView");
	rm.addClass("sapUiJSView");
	sap.ui.core.mvc.ViewRenderer.addDisplayClass(rm, oControl);
	if (oControl.getWidth()) {
		rm.addStyle("width", oControl.getWidth());
	}
	if (oControl.getHeight()) {
		rm.addStyle("height", oControl.getHeight());
	}
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");

	var content = oControl.getContent();
	if (content) {
		if (jQuery.isArray(content)) {
			// looks like an Array
			for (var i = 0; i < content.length; i++) {
				rm.renderControl(content[i]);
			}

		} else if (content) {
			// should be a Control
			rm.renderControl(content);
		}
	}

	rm.write("</div>");
};

}; // end of sap/ui/core/mvc/JSViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.TemplateViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for JSView
jQuery.sap.declare("sap.ui.core.mvc.TemplateViewRenderer");


/**
 * @class TemplateView renderer.
 * @static
 */
sap.ui.core.mvc.TemplateViewRenderer = {
};


/**
 * Renders the Template, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.core.mvc.TemplateViewRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;

	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiView");
	rm.addClass("sapUiTmplView");
	sap.ui.core.mvc.ViewRenderer.addDisplayClass(rm, oControl);
	rm.addStyle("width", oControl.getWidth());
	rm.addStyle("height", oControl.getHeight());
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");
	
	rm.renderControl(oControl._oTemplate);

	rm.write("</div>");
};
}; // end of sap/ui/core/mvc/TemplateViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.routing.HashChanger') ) {
// Copyright (c) 2013 SAP AG, All Rights Reserved
/*global hasher */
jQuery.sap.declare("sap.ui.core.routing.HashChanger");

jQuery.sap.require('sap.ui.thirdparty.signals'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.hasher'); // unlisted dependency retained


/**
 * Class for manipulating and receiving changes of the browserhash with the hasher framework.
 * Fires a "hashChanged" event if the browser hash changes.
 *
 * @class
 *
 * @public
 * @name sap.ui.core.routing.HashChanger
 */
sap.ui.base.EventProvider.extend("sap.ui.core.routing.HashChanger", {

	constructor : function() {

		sap.ui.base.EventProvider.apply(this);

	}

});

/**
 * Will start listening to hashChanges with the parseHash function.
 * This will also fire a hashchanged event with the initial hash.
 *
 * @public
 * @return false if it was initialized before, true if it was initialized the first time
 */
sap.ui.core.routing.HashChanger.prototype.init = function() {
	if(this._initialized) {
		jQuery.sap.log.info("this HashChanger instance has already been initialized.");
		return false;
	}

	hasher.changed.add(this.fireHashChanged, this); //parse hash changes

	if(!hasher.isActive()) {
		hasher.initialized.addOnce(this.fireHashChanged, this); //parse initial hash
		hasher.init(); //start listening for history change
	} else {
		this.fireHashChanged(hasher.getHash());
	}

	this._initialized = true
	return this._initialized;
};


/**
 * Fires the hashchanged event, may be extended to modify the hash before fireing the event
 * @param {string} newHash the new hash of the browser
 * @param {string} oldHash - the previous hash
 * @protected
 */
sap.ui.core.routing.HashChanger.prototype.fireHashChanged = function(newHash, oldHash) {
	this.fireEvent("hashChanged",{ newHash : newHash, oldHash : oldHash });
};


/**
 * Sets the hash to a certain value. When using the set function a browser history  entry is written. 
 * If you do not want to have an entry in the browser history, please use set replaceHash function.
 * @param {string} sHash the hash
 * @public
 */
sap.ui.core.routing.HashChanger.prototype.setHash = function(sHash) {
	this.fireEvent("hashSet",{ sHash : sHash });
	hasher.setHash(sHash);
};

/**
 * Replaces the hash to a certain value. When using the replace function no browser history is written. 
 * If you want to have an entry in the browser history, please use set setHash function.
 * @param {string} sHash the hash
 * @public
 */
sap.ui.core.routing.HashChanger.prototype.replaceHash = function(sHash) {
	this.fireEvent("hashReplaced",{ sHash : sHash });
	hasher.replaceHash(sHash);
};


/**
 * Gets the current hash
 * 
 * @return {string} the current hash
 * @public
 */
sap.ui.core.routing.HashChanger.prototype.getHash = function() {
	return hasher.getHash();
};


/**
 * Cleans the event registration
 * @see sap.ui.base.Object.prototype.destroy
 * @protected
 */
sap.ui.core.routing.HashChanger.prototype.destroy = function() {
	hasher.changed.remove(this.fireHashChanged, this);
	sap.ui.base.EventProvider.prototype.destroy.apply(this, arguments);
};

(function() {

	var _oHashChanger;
	
	sap.ui.core.routing.HashChanger.getInstance = function() {
		if (!_oHashChanger) {
			_oHashChanger = new sap.ui.core.routing.HashChanger();
		}
		return _oHashChanger;
	};

	/**
	 * Sets the hashChanger to a new instance, destroys the old one and copies all its event listeners to the new one
	 * @param oHashChanger {sap.ui.core.routing.HashChanger} the new instance for the global singleton
	 * @protected
	 */
	sap.ui.core.routing.HashChanger.replaceHashChanger = function(oHashChanger) {
		if(_oHashChanger) {
			jQuery.extend(oHashChanger.mEventRegistry, _oHashChanger.mEventRegistry);
			_oHashChanger.destroy();
		}
		
		_oHashChanger = oHashChanger;
	};
	
}());

}; // end of sap/ui/core/routing/HashChanger.js
if ( !jQuery.sap.isDeclared('sap.ui.core.routing.History') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.core.routing.History");


/**
 * 
 * Used to determine the {sap.ui.core.HistoryDirection} of the current or a future navigation, done with a 
 * {sap.ui.core.routing.Router} or {sap.ui.core.routing.HashChanger}.
 * ATTENTION: this class will not be accurate if someone does hash-replacement without the named classes above
 * If you are manipulating the hash directly this class is not supported anymore.
 * 
 * @param {sap.ui.core.routing.HashChanger} hashChanger - required without a HashChanger this class cannot work. The class needs to be aware of the hash-changes.
 * @public
 * @class
 * @name sap.ui.core.routing.History
 */
sap.ui.core.routing.History = function(oHashChanger) {
	this._iHistoryLength = window.history.length;
	this._aHistory = [];
	this._bIsInitial = true;

	if (!oHashChanger) {
		jQuery.sap.log.error("sap.ui.core.routing.History constructor was called and it did not get a hashChanger as parameter");
	}

	this._oHashChanger = oHashChanger;
	this._oHashChanger.attachEvent("hashChanged", this._onHashChange, this);
	this._oHashChanger.attachEvent("hashReplaced", this._hashReplaced, this);
	this._oHashChanger.attachEvent("hashSet", this._hashSet, this);

	this._reset();
};


/**
 * Detaches all events and cleans up this instance
 */
sap.ui.core.routing.History.prototype.destroy = function(sNewHash) {
	this._oHashChanger.detachEvent("hashChanged", this._onHashChange, this);
	this._oHashChanger.detachEvent("hashReplaced", this._hashReplaced, this);
	this._oHashChanger.detachEvent("hashSet", this._hashSet, this);

	this._oHashChanger = null;
};

/**
 * Determines what the navigation direction for a newly given hash would be
 * It will say Unknown if there is a history foo - bar (current history) - foo
 * If you now ask for the direction of the hash "foo" you get Unknown because it might be backwards or forwards.
 * For hash replacements, the history stack will be replaced at this position for the history.
 * @param sNewHash {string} - optional, if this parameter is not passed the last hashChange is taken.
 * @public
 * @returns {sap.ui.core.routing.HistoryDirection} or undefined, if no navigation has taken place yet.
 */
sap.ui.core.routing.History.prototype.getDirection = function(sNewHash) {
	//no navigation has taken place and someone asks for a direction
	if (sNewHash !== undefined && this._bIsInitial) {
		return undefined;
	}

	if (sNewHash === undefined) {
		return this._sCurrentDirection;
	}

	return this._getDirection(sNewHash);
};

/**
 * gets the previous hash in the history - if the last direction was Unknown or there was no navigation yet, undefined will be returned
 * @returns {string} or undefined
 */
sap.ui.core.routing.History.prototype.getPreviousHash = function() {
	return this._aHistory[this._iHistoryPosition - 1];
};

/**
 * Empties the history array, and sets the instance back to the unknown state.
 * @private
 */
sap.ui.core.routing.History.prototype._reset = function() {	
	this._aHistory.length = 0;
	this._iHistoryPosition = 0;
	this._bUnknown = true;

	/*
	 * if the history is reset it should always get the current hash since - 
	 * if you go from the Unknown to a defined state and then back is pressed we can be sure that the direction is backwards.
	 * Because the only way from unknown to known state is a new entry in the history.
	 */
	this._aHistory[0] = this._oHashChanger.getHash();
};

/**
 * Determines what the navigation direction for a newly given hash would be
 * @param sNewHash {string} the new hash
 * @private
 * @returns {sap.ui.core.routing.HistoryDirection}
 */
sap.ui.core.routing.History.prototype._getDirection = function(sNewHash, bHistoryLengthIncreased) {	
	var oDirection = sap.ui.core.routing.HistoryDirection;

	//Next hash was set by the router - it has to be a new entry
	if (this._oNextHash && this._oNextHash.sHash === sNewHash) {
		return oDirection.NewEntry;
	}

	//we have not had a direction yet and the application did not trigger navigation + the browser history does not increase
	//the user is navigating in his history but we cannot determine the direction
	if (this._bUnknown) {
		return oDirection.Unknown;
	}

	//increasing the history length will add entries but we cannot rely on this as only criteria, since the history length is capped
	if (bHistoryLengthIncreased) {
		return oDirection.NewEntry;
	}

	//At this point we know the user pressed a native browser navigation button

	//both directions contain the same hash we don't know the direction
	if (this._aHistory[this._iHistoryPosition + 1] === sNewHash && this._aHistory[this._iHistoryPosition - 1] === sNewHash) {
		return oDirection.Unknown;
	}

	if (this._aHistory[this._iHistoryPosition - 1] === sNewHash) {
		return oDirection.Backwards;
	}

	if (this._aHistory[this._iHistoryPosition + 1] === sNewHash) {
		return oDirection.Forwards;
	}

	//Nothing hit, return unknown since we cannot determine what happened
	return oDirection.Unknown;
};

sap.ui.core.routing.History.prototype._onHashChange = function(oEvent) {
	this._hashChange(oEvent.getParameter("newHash"));
};

/**
 * Handles a hash change and cleans up the History
 * @private
 */
sap.ui.core.routing.History.prototype._hashChange = function(sNewHash) {
	var oDirection = sap.ui.core.routing.HistoryDirection,
		iHistoryIndex = jQuery.inArray(sNewHash, this._aHistory),
		actualHistoryLength = window.history.length,
		sDirection;

	//We don't want to record replaced hashes
	if (this._oNextHash && this._oNextHash.bWasReplaced && this._oNextHash.sHash === sNewHash) {
		//Since a replace has taken place, the current history entry is also replaced
		this._aHistory[this._iHistoryPosition] = sNewHash;
		this._oNextHash = null;
		return;
	}

	//a navigation has taken place so the history is not initial anymore.
	this._bIsInitial = false;

	sDirection = this._sCurrentDirection = this._getDirection(sNewHash, this._iHistoryLength < window.history.length);

	if (this._oNextHash && !this._oNextHash.bWasReplaced) {
		this._iHistoryLength = actualHistoryLength + 1;
	} else {
		this._iHistoryLength = actualHistoryLength;
	}

	//the next hash direction was determined - set it back
	if (this._oNextHash) {
		this._oNextHash = null;
	}

	//We don't know the state of the history, don't record it set it back to unknown, since we can't say what comes up until the app navigates again
	if (sDirection === oDirection.Unknown) {
		this._reset();
		return;
	}

	//We are at a known state of the history now, since we have a new entry / forwards or backwards
	this._bUnknown = false;

	//new history entry
	if (sDirection === oDirection.NewEntry) {
		//new item and there where x back navigations before - remove all the forward items from the history
		if (this._iHistoryPosition + 1 < this._aHistory.length) {
			this._aHistory = this._aHistory.slice(0, this._iHistoryPosition + 1);
		}
		
		this._aHistory.push(sNewHash);
		this._iHistoryPosition += 1;
		return;
	} 

	if (sDirection === oDirection.Forwards) {
		this._iHistoryPosition++;
		return;
	}

	if (sDirection === oDirection.Backwards) {
		this._iHistoryPosition--;
	}
};

/**
 * Handles a hash change and cleans up the History
 * @private
 */
sap.ui.core.routing.History.prototype._hashSet = function(oEvent) {
	this._hashChangedByApp(oEvent.getParameter("sHash"), false);
};

/**
 * Handles a hash change and cleans up the History
 * @private
 */
sap.ui.core.routing.History.prototype._hashReplaced = function(oEvent) {
	this._hashChangedByApp(oEvent.getParameter("sHash"), true);
};

/**
 * Sets the next hash that is going to happen in the hashChange function - used to determine if the app or the browserHistory/links triggered this navigation
 * @param
 */
sap.ui.core.routing.History.prototype._hashChangedByApp = function(sNewHash, bWasReplaced) {
	this._oNextHash = { sHash : sNewHash, bWasReplaced : bWasReplaced };
};

(function() {
	var instance = new sap.ui.core.routing.History(sap.ui.core.routing.HashChanger.getInstance());

	/**
	 * @public 
	 * @returns { sap.ui.core.routing.History } a global singleton that gets created as soon as the sap.ui.core.routing.History is required
	 */
	sap.ui.core.routing.History.getInstance = function() {
		return instance;
	};
}());

}; // end of sap/ui/core/routing/History.js
if ( !jQuery.sap.isDeclared('sap.ui.core.routing.Route') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.routing.Route");

jQuery.sap.require('sap.ui.thirdparty.signals'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.crossroads'); // unlisted dependency retained


(function(){
	/**
	 * Instantiates a SAPUI5 Route
	 *
	 * @class
	 *
	 * @param {sap.ui.core.routing.Router} oParent The parent route
	 * @param {object} oConfig configuration object for the route 
	 * <ul>
	 *        <li>oConfig.pattern:           the url pattern where it needs to match agains</li>
	 *        <li>oConfig.name:              the name of the route</li>
	 *        <li>oConfig.viewId:            An optional id for the view which is created. No automatic id creation will be used for the view of this route.</li>
	 *        <li>oConfig.view:              The name of a view that will be created, the first time this route will be matched. To place the view into a Control use the targetAggregation and targetControl. Views will only be created once.</li>
	 *        <li>oConfig.viewType:          The type of the view that is going to be created</li>
	 *        <li>oConfig.viewPath:          A prefix that will be prependet in front of the view eg: view is set to "myView" and viewPath is set to "myApp" - the created view will be "myApp.myView".</li>
	 *        <li>oConfig.targetParent:      the id of the parent of the targetControl - if targetParent is undefined and the route is a subroute, the targetControl of the parent route is taken.</li>
	 *        <li>oConfig.targetControl:     Views will be put into a container Control, this might be a Shell control or a NavContainer? if working with mobile, or any other container. The id of this control has to be put in here.</li>
	 *        <li>oConfig.targetAggregation: The name of an aggregation of the targetControl, that contains views. Eg: a NavigationContainer? has an aggregation Pages , another Example is the Shell it has Content.</li>
	 *        <li>oConfig.clearTarget:       Defines a boolean that can be passed to specify if the aggregation should be cleared before adding the View to it.</li>
	 *        <li>oConfig.callback: a function which is executed after the route matched</li>
	 *</ul>
	 * @param {sap.ui.core.routing.Route} oParent The parent route
	 *
	 * @public
	 * @name sap.ui.core.routing.Route
	 */
	sap.ui.base.EventProvider.extend("sap.ui.core.routing.Route", /** @lends sap.ui.core.routing.Route */ {

		constructor : function(oRouter, oConfig, oParent) {
			if (!oConfig.name) {
				jQuery.sap.log.error("A name has to be specified for every route");
			}
			
			var that = this,
				vRoute = oConfig.pattern;
			
			if (!jQuery.isArray(vRoute)) {
				vRoute = [vRoute];
			}

			if (jQuery.isArray(oConfig.subroutes)) {
				//Convert subroutes
				var aSubRoutes = oConfig.subroutes;
				oConfig.subroutes = {};
				jQuery.each(aSubRoutes, function(iSubrouteIndex, oSubRoute) {
					oConfig.subroutes[oSubRoute.name] = oSubRoute;
				});
			}
			this._aPattern = [];
			this._aRoutes = [];
			this._oParent = oParent;
			this._oConfig = oConfig;
			

			if (oConfig.subroutes) {
				jQuery.each(oConfig.subroutes, function(sRouteName, oSubRouteConfig) {
					if (oSubRouteConfig.name == undefined) {
						oSubRouteConfig.name = sRouteName;
					}
					oRouter.addRoute(oSubRouteConfig, that);
				});
			}
			
			if(oConfig.pattern === undefined) {
				//this route has no pattern - it will not get a matched handler. Or a crossroads route
				return;
			}
			
			jQuery.each(vRoute, function(iIndex, sRoute) {

				that._aPattern[iIndex] = sRoute;

				that._aRoutes[iIndex] = oRouter._oRouter.addRoute(sRoute);

				that._aRoutes[iIndex].matched.add(function() {
					var oArguments = {};
					jQuery.each(arguments, function(iArgumentIndex, sArgument) {
						oArguments[that._aRoutes[iIndex]._paramsIds[iArgumentIndex]] = sArgument;
					});
					that._routeMatched(oRouter, oArguments, true);
				});
			});
		},
		metadata : {
			publicMethods: ["getURL", "getPattern"]
		}

	});
	
	/**
	 * Returns the URL for the route and replaces the placeholders with the values in oParameters
	 * 
	 * @param {object} Parameters for the route
	 * @return {string} the unencoded pattern with interpolated arguments
	 * @public
	 */
	sap.ui.core.routing.Route.prototype.getURL = function (oParameters) {
		return this._aRoutes[0].interpolate(oParameters);
		
	};
	
	/**
	 * Return the pattern of the route. If there are multiple patterns, the first pattern is returned
	 * 
	 * @return {string} the routes pattern
	 * @public
	 */
	sap.ui.core.routing.Route.prototype.getPattern = function() {
		return this._aPattern[0];
	};
	
	/**
	 * Executes the behaviour when route is matched
	 * 
	 * @private
	 */
	sap.ui.core.routing.Route.prototype._routeMatched = function(oRouter, oArguments, bInital) {
		
		var oView,
			oParentInfo, 
			oTargetParent,
			oTargetControl;
		
		if (this._oParent) {
			oParentInfo = this._oParent._routeMatched(oRouter, oArguments);
			
			oTargetParent = oParentInfo.oTargetParent;
			oTargetControl = oParentInfo.oTargetControl;
			
		}

		var oConfig =  jQuery.extend({}, oRouter._oConfig, this._oConfig);

		if ((oTargetControl || oConfig.targetControl) && oConfig.targetAggregation) {
			//no parent view - see if there is a targetParent in the config
			if (!oTargetParent) {
				
				if (oConfig.targetParent) {
					oTargetControl = sap.ui.getCore().byId(oConfig.targetParent).byId(oConfig.targetControl);
				}
			
			} else {
				//target control was specified - ask the parents view for it
				if(oConfig.targetControl) {
					oTargetControl = oTargetParent.byId(oConfig.targetControl);
				}
			}
			
			if (!oTargetControl) {
				//Test if control exists in core (without prefix)
				oTargetControl =  sap.ui.getCore().byId(oConfig.targetControl);
			}
		
			if (oTargetControl) {
				var oAggregationInfo = oTargetControl.getMetadata().getJSONKeys()[oConfig.targetAggregation];
				if (oAggregationInfo) {
					//Set view for content
					var sViewName = oConfig.view;
					if (oConfig.viewPath) {
						sViewName = oConfig.viewPath + "." + sViewName;
					}
					oView = oRouter.getView(sViewName, oConfig.viewType, oConfig.viewId);
					if (oConfig.clearTarget === true) {
						oTargetControl[oAggregationInfo._sRemoveAllMutator]();
					}
					
					oTargetControl[oAggregationInfo._sMutator](oView);
				} else {
					jQuery.sap.log.error("Control " + oConfig.targetControl + " does not has an aggregation called " + oConfig.targetAggregation);
				}
			} else {
				jQuery.sap.log.error("Control with ID " + oConfig.targetControl + " could not be found");
			}
		}
		
		if (oConfig.callback) {
			oConfig.callback(this, oArguments, oConfig, oTargetControl, oView);
		}

		oRouter.fireRouteMatched({
			name: oConfig.name,
			arguments: oArguments,
			targetControl: oTargetControl,
			view: oView,
			config : oConfig
		});
		
		if(bInital) {
			oRouter.fireRoutePatternMatched({
				name: oConfig.name,
				arguments: oArguments,
				targetControl: oTargetControl,
				view: oView,
				config : oConfig
			});
		}
		
		return { oTargetParent : oView, oTargetControl : oTargetControl };
	};

}());

}; // end of sap/ui/core/routing/Route.js
if ( !jQuery.sap.isDeclared('sap.ui.core.util.serializer.Serializer') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.util.serializer.Serializer");


/**
 * Serializer class. Iterates over all controls and call a given serializer delegate.
 *
 * @param {sap.ui.core.Control|sap.ui.core.UIArea} oRootControl the root control to serialize
 * @param {object} serializeDelegate the serializer delegate. Has to implement start/middle/end methods.
 * @param {boolean} bSkipRoot whether to skip the root node or not
 * @param {booolean} fnSkipAggregations whether to skip aggregations
 *
 * @public
 * @class Serializer class.
 * @extends sap.ui.base.EventProvider
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.util.serializer.Serializer
 * @experimental Since 1.15.1. The Serializer is still under construction, so some implementation details can be changed in future.
 */
sap.ui.base.EventProvider.extend("sap.ui.core.util.serializer.Serializer", /** @lends sap.ui.core.util.serializer.Serializer */
{
	constructor : function (oRootControl, serializeDelegate, bSkipRoot, oWindow, fnSkipAggregations) {
		sap.ui.base.EventProvider.apply(this);
		this._oRootControl = oRootControl;
		this._delegate = serializeDelegate;
		this._bSkipRoot = !!bSkipRoot;
		this._oWindow = oWindow || window;
		this._fnSkipAggregations = fnSkipAggregations;
	}
});

/**
 * Serializes the complete control tree.
 *
 * @returns {string} the serialized control tree.
 */
sap.ui.core.util.serializer.Serializer.prototype.serialize = function () {
	return this._serializeRecursive(this._oRootControl, 0);
};

/**
 * Internal method for recursive serializing
 *
 * @param {sap.ui.core.Control|sap.ui.core.UIArea} oControl The current control to process.
 * @param {integer} iLevel The nesting level of the recursion.
 * @param {string} sAggregationName The name of the aggregation which aggregates the control.
 * @param {boolean} isDefaultAggregation whether the aggregation is the default aggregation.
 * @returns {string} the serialized control tree.
 */
sap.ui.core.util.serializer.Serializer.prototype._serializeRecursive = function (oControl, iLevel, sAggregationName, isDefaultAggregation) {

	jQuery.sap.assert(typeof oControl !== "undefined", "The control must not be undefined");

	var aCode = [];

	var bWriteDelegate = (!this._bSkipRoot || iLevel !== 0);
	if (bWriteDelegate) {

		// make sure all prop / aggregation / association informations are available
		// (getJSONKeys calls sap.ui.base.ManagedObjectMetadata.prototype._enrichChildInfos)
		oControl.getMetadata().getJSONKeys();

		// write start and end
		var start = this._delegate.start(oControl, sAggregationName, isDefaultAggregation);
		var middle = this._delegate.middle(oControl, sAggregationName, isDefaultAggregation);
		aCode.push(start + middle);
	}

	// step down into recursion along the aggregations
	if (iLevel === 0 || !(this._fnSkipAggregations && this._fnSkipAggregations(oControl))) {
		var mAggregations = oControl.getMetadata().getAllAggregations();
		if (mAggregations) {
			for (var sName in mAggregations) {

				// compute those elements that shall be serialized
				var mElementsToSerialize = [];
				var oAggregation = mAggregations[sName];
				var oValue = oControl[oAggregation._sGetter]();
				if (oControl.getBindingPath(sName) && oControl.getBindingInfo(sName).template) {
					mElementsToSerialize.push(oControl.getBindingInfo(sName).template);
				} else if (oValue && oValue.length) { // TODO: ARRAY CHECK
					for (var i = 0 ; i < oValue.length ; i++) {
						var oObj = oValue[i];
						if (oObj instanceof this._oWindow.sap.ui.core.Element) {
							mElementsToSerialize.push(oObj);
						}
					}
				} else if (oValue instanceof this._oWindow.sap.ui.core.Element) {
					mElementsToSerialize.push(oValue);
				}

				// write and step down into recursion for elements
				if (mElementsToSerialize.length > 0) {
					if (bWriteDelegate) {
						aCode.push(this._delegate.startAggregation(oControl, sName));
					}
					var isDefault = this._isDefaultAggregation(oControl, sName);
					for (var i = 0 ; i < mElementsToSerialize.length ; i++) {
						aCode.push(this._serializeRecursive(mElementsToSerialize[i], iLevel + 1, sName, isDefault));
					}
					if (bWriteDelegate) {
						aCode.push(this._delegate.endAggregation(oControl, sName));
					}
				}
			}
		}
	}

	// write end
	if (bWriteDelegate) {
		var end = this._delegate.end(oControl, sAggregationName, isDefaultAggregation);
		aCode.push(end);
	}

	return aCode.join("");
};

/**
 * Checks if a given aggregation is the default aggregation.
 *
 * @param {sap.ui.core.Control|sap.ui.core.UIArea} oControl The current control to process.
 * @param {string} sAggregationName The name of the aggregation.
 * @returns {Boolean} Whether the given aggregation is the default aggregation or not
 * @private
 */
sap.ui.core.util.serializer.Serializer.prototype._isDefaultAggregation = function (oControl, sAggregationName) {
	return oControl.getMetadata().getDefaultAggregationName() === sAggregationName;
};
}; // end of sap/ui/core/util/serializer/Serializer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.util.serializer.delegate.Delegate') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.util.serializer.delegate.Delegate");



/**
 * Abstract serializer delegate class. All delegates must extend from this class and implement the abstract methods.
 *
 * @public
 * @abstract
 * @class Abstract serializer delegate class.
 * @extends sap.ui.base.EventProvider
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.util.serializer.delegate.Delegate
 * @experimental Since 1.15.1. The abstract serializer delegate is still under construction, so some implementation details can be changed in future.
 */
sap.ui.base.EventProvider.extend("sap.ui.core.util.serializer.delegate.Delegate", /** @lends sap.ui.core.util.serializer.delegate.Delegate */
{
	constructor : function () {
		sap.ui.base.EventProvider.apply(this);
	}
});


/**
 * Delegate method "start".
 * 
 * @abstract
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @param {boolean} isDefaultAggregation Whether the aggregation is the default aggregation.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.Delegate.prototype.start = function (oControl, sAggregationName, isDefaultAggregation) {
	return "";
};


/**
 * Delegate method "middle".
 * 
 * @abstract
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @param {boolean} isDefaultAggregation Whether the aggregation is the default aggregation.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.Delegate.prototype.middle = function (oControl, sAggregationName, isDefaultAggregation) {
	return "";
};


/**
 * Delegate method "end".
 * 
 * @abstract
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @param {boolean} isDefaultAggregation Whether the aggregation is the default aggregation.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.Delegate.prototype.end = function (oControl, sAggregationName, isDefaultAggregation) {
	return "";
};


/**
 * Delegate method "startAggregation".
 * 
 * @abstract
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.Delegate.prototype.startAggregation = function (oControl, sAggregationName) {
	return "";
};


/**
 * Delegate method "endAggregation".
 * 
 * @abstract
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.Delegate.prototype.endAggregation = function (oControl, sAggregationName) {
	return "";
};
}; // end of sap/ui/core/util/serializer/delegate/Delegate.js
if ( !jQuery.sap.isDeclared('sap.ui.core.util.serializer.delegate.HTML') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.util.serializer.delegate.HTML");



/**
 * HTML serializer delegate class. Called by the serializer instance.
 *
 * @param {function} [fnGetControlId] delegate function which returns the control id
 * @param {function} [fnGetEventHandlerName] delegate function which returns the event handler name
 *
 * @public
 * @class HTML serializer delegate class.
 * @extends sap.ui.core.util.serializer.delegate.Delegate
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.util.serializer.delegate.HTML
 * @experimental Since 1.15.1. The HTML serializer delegate is still under construction, so some implementation details can be changed in future.
 */
sap.ui.core.util.serializer.delegate.Delegate.extend("sap.ui.core.util.serializer.delegate.HTML", /** @lends sap.ui.core.util.serializer.delegate.HTML */
{
	constructor : function (fnGetControlId, fnGetEventHandlerName) {
		sap.ui.core.util.serializer.delegate.Delegate.apply(this);
		this._fnGetControlId = fnGetControlId;
		this._fnGetEventHandlerName = fnGetEventHandlerName;
	}
});


/**
 * Delegate method "startAggregation".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.HTML.prototype.startAggregation = function (oControl, sAggregationName) {
	return '<div data-sap-ui-aggregation="' + sAggregationName + '">';
};


/**
 * Delegate method "endAggregation".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.HTML.prototype.endAggregation = function (oControl, sAggregationName) {
	return '</div>';
};


/**
 * Delegate method "start".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @param {boolean} isDefaultAggregation Whether the aggregation is the default aggregation.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.HTML.prototype.start = function (oControl, sAggregationName, isDefaultAggregation) {
	return "<div";
};


/**
 * Delegate method "middle".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @param {boolean} isDefaultAggregation Whether the aggregation is the default aggregation.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.HTML.prototype.middle = function (oControl, sAggregationName, isDefaultAggregation) {
	
	var aHtml = [];
	
	// write non-generated Ids
	var sId = (this._fnGetControlId) ? this._fnGetControlId(oControl) : oControl.getId();
	if (sId.indexOf("__") !== 0) {
		aHtml.push(this._createAttribute("id", sId));
	}
	
	// write type
	aHtml.push(this._createAttribute("data-sap-ui-type", oControl.getMetadata()._sClassName));

	// write classes
	if (oControl.aCustomStyleClasses) {
		var aCustomClasses = oControl.aCustomStyleClasses;
		var aCssClasses = [];
		for (var i = 0; i < aCustomClasses.length; i++) {
			var sCssClass = aCustomClasses[i];
			if (!jQuery.sap.startsWith(sCssClass, "sapM") && !jQuery.sap.startsWith(sCssClass, "sapUi")) {
				aCssClasses.push(sCssClass)
			}
		}
		if (aCssClasses.length > 0) {
			aHtml.push(this._createAttribute("class", aCssClasses.join(" ")));
		}
	}

	// write events
	if (this._fnGetEventHandlerName) {
		var oEvents = oControl.getMetadata().getAllEvents();
		for (var sEvent in oEvents) {
			if (oControl.hasListeners(sEvent)) {
				var aEvents = oControl.mEventRegistry[sEvent];
				for (var i = 0; i < aEvents.length; i++) {
					var sHandlerName = this._fnGetEventHandlerName(aEvents[i]);
					if (sHandlerName) {
						aHtml.push(this._createAttribute("data-" + this._createHtmlAttributeName(sEvent), sHandlerName));
						break; // there can be only one event in declarative views
					}
				}
			}
		}
	}

	// write associations
	var oAssociations = oControl.getMetadata().getAllAssociations();
	this._createAttributes(aHtml, oControl, oAssociations, function (sName, oValue) {
		if (oAssociations[sName].multiple) {
			return oValue.join(" ");
		}
		return oValue;
	}, function (sName, oValue) {
		return (oValue !== null && typeof oValue !== undefined && oValue !== "");
	});

	// write properties
	var oProperties = oControl.getMetadata().getAllProperties();
	this._createAttributes(aHtml, oControl, oProperties, null, function (sName, oValue) {
		return (!!oControl.getBindingInfo(sName) || (oValue !== null && typeof oValue !== undefined && oValue !== ""));
	});

	// write aggregations
	var oAggregations = oControl.getMetadata().getAllAggregations();
	this._createAttributes(aHtml, oControl, oAggregations, null, function (sName, oValue) {
		if (!oControl.getBindingInfo(sName) && (!oValue || (typeof oValue !== "string"))) {
			return false;
		}
		return true;
	});

	aHtml.push('>');
	return aHtml.join('');
};


/**
 * Delegate method "end".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @param {boolean} isDefaultAggregation Whether the aggregation is the default aggregation.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.HTML.prototype.end = function (oControl, sAggregationName, isDefaultAggregation) {
	return "</div>";
};


/**
 * Serializes the attributes for a given control and properties
 * 
 * @param {string[]} aHtml The serialized HTML.
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {object} oObj The object to serialize the properties from.
 * @param {function} [fnGetValue] A delegate function to retrieve the value. 
 * @param {function} [fnValueCheck] A delegate function to check the value.
 * @private
 */
sap.ui.core.util.serializer.delegate.HTML.prototype._createAttributes = function (aHtml, oControl, oObj, fnGetValue, fnValueCheck) {
	for (var sName in oObj) {
		var oProp = oObj[sName];
		var sGetter = oProp._sGetter;
		if (oControl[sGetter]) {
			var oValue = oControl[sGetter]();
			oValue = fnGetValue ? fnGetValue(sName, oValue) : oValue;
			if (!oControl.getBindingInfo(sName)) {
				if (oValue !== oProp.defaultValue) {
					if (!fnValueCheck || fnValueCheck(sName, oValue)) {
						aHtml.push(this._createAttribute("data-" + this._createHtmlAttributeName(sName), oValue));
					}
				}
			} else {
				aHtml.push(this._createDataBindingAttribute(oControl, sName, oValue));
			}
		}
	}
};


/**
 * Creates a data binding attribute.
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sName The name of the property
 * @param {object} oValue The value of the property.
 * @return {string} The created data binding attribute.
 * @private
 */
sap.ui.core.util.serializer.delegate.HTML.prototype._createDataBindingAttribute = function (oControl, sName, oValue) {
		
	var oBindingInfo = oControl.getBindingInfo(sName);
	var sBindingValue = null;
	var oPath = oValue;

	if (!oBindingInfo.bindingString) {
		if (oBindingInfo.binding) {
			var sClassName = oBindingInfo.binding.getMetadata().getName();
			if (sClassName === "sap.ui.model.PropertyBinding" || sClassName === "sap.ui.model.resource.ResourcePropertyBinding") {
				sBindingValue = oBindingInfo.binding.getValue();
			}
		}

		if (oBindingInfo.parts) {
			oBindingInfo = oBindingInfo.parts[0];
		}

		var sModel = oBindingInfo.model;

		// TODO: Properties Panel should edit I18n Model directly!
		if (sBindingValue === oValue || sBindingValue === null) {
			oPath = "{" + (sModel ? (sModel + ">" + oBindingInfo.path) : oBindingInfo.path) + "}";
		}
	} else {
		oPath = oBindingInfo.bindingString;
	}

	return this._createAttribute("data-" + this._createHtmlAttributeName(sName), oPath);
};


/**
 * Creates an attribute string.
 * 
 * @param {string} sAttribute The name of the attribute.
 * @param {object} oValue The value of the attribute.
 * @return {string} The created attribute string.
 * @private
 */
sap.ui.core.util.serializer.delegate.HTML.prototype._createAttribute = function (sAttribute, oValue) {
	return ' ' + sAttribute + '="' + oValue + '"';
};


/**
 * Creates the HTML attribute name.
 * 
 * @param {string} sName The name of the attribute.
 * @return {string} The created attribute name.
 * @private
 */
sap.ui.core.util.serializer.delegate.HTML.prototype._createHtmlAttributeName = function (sName) {
	return jQuery.sap.hyphen(sName);
};
}; // end of sap/ui/core/util/serializer/delegate/HTML.js
if ( !jQuery.sap.isDeclared('sap.ui.core.util.serializer.delegate.XML') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.util.serializer.delegate.XML");



/**
 * XML serializer delegate class. Called by the serializer instance.
 *
 * @param {string} [sDefaultXmlNamespace] defines the default XML namespace
 * @param {function} [fnGetControlId] delegate function which returns the control id
 * @param {function} [fnGetEventHandlerName] delegate function which returns the event handler name
 * @param {function} [fnMemorizePackage] a delegate function to memorize the control packages
 *
 * @public
 * @class XML serializer delegate class.
 * @extends sap.ui.core.util.serializer.delegate.Delegate
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.util.serializer.delegate.XML
 * @experimental Since 1.15.1. The XML serializer delegate is still under construction, so some implementation details can be changed in future.
 */
sap.ui.core.util.serializer.delegate.Delegate.extend("sap.ui.core.util.serializer.delegate.XML", /** @lends sap.ui.core.util.serializer.delegate.XML */
{
	constructor : function (sDefaultNamespace, fnGetControlId, fnGetEventHandlerName, fnMemorizePackage) {
		sap.ui.core.util.serializer.delegate.Delegate.apply(this);
		this._sDefaultNamespace = sDefaultNamespace;
		this._fnGetControlId = fnGetControlId;
		this._fnMemorizePackage = fnMemorizePackage;
		this._fnGetEventHandlerName = fnGetEventHandlerName;
	}
});


/**
 * Delegate method "startAggregation".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.XML.prototype.startAggregation = function (oControl, sAggregationName) {
	return '<' + this._createAggregationName(oControl, sAggregationName) + '>';
};


/**
 * Delegate method "endAggregation".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.XML.prototype.endAggregation = function (oControl, sAggregationName) {
	return '</' + this._createAggregationName(oControl, sAggregationName) + '>';
};


/**
 * Delegate method "start".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @param {boolean} isDefaultAggregation Whether the aggregation is the default aggregation.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.XML.prototype.start = function (oControl, sAggregationName, isDefaultAggregation) {
	return "<" + this._createTagName(oControl);
};


/**
 * Delegate method "end".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @param {boolean} isDefaultAggregation Whether the aggregation is the default aggregation.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.XML.prototype.end = function (oControl, sAggregationName, isDefaultAggregation) {
	return "</" + this._createTagName(oControl) + ">";
};


/**
 * Delegate method "middle".
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @param {boolean} isDefaultAggregation Whether the aggregation is the default aggregation.
 * @return {string} the created string.
 */
sap.ui.core.util.serializer.delegate.XML.prototype.middle = function (oControl, sAggregationName, isDefaultAggregation) {

	var aXml = [];
	
	// write non-generated Ids
	var sId = (this._fnGetControlId) ? this._fnGetControlId(oControl) : oControl.getId();
	if (sId.indexOf("__") !== 0) {
		aXml.push(this._createAttribute("id", sId));
	}

	// write classes
	if (oControl.aCustomStyleClasses) {
		var aCustomClasses = oControl.aCustomStyleClasses;
		var aCssClasses = [];
		for (var i = 0; i < aCustomClasses.length; i++) {
			var sCssClass = aCustomClasses[i];
			if (!jQuery.sap.startsWith(sCssClass, "sapM") && !jQuery.sap.startsWith(sCssClass, "sapUi")) {
				aCssClasses.push(sCssClass)
			}
		}
		if (aCssClasses.length > 0) {
			aXml.push(this._createAttribute("class", aCssClasses.join(" ")));
		}
	}

	// write events
	if (this._fnGetEventHandlerName) {
		var oEvents = oControl.getMetadata().getAllEvents();
		for (var sEvent in oEvents) {
			if (oControl.hasListeners(sEvent)) {
				var aEvents = oControl.mEventRegistry[sEvent];
				for (var i = 0; i < aEvents.length; i++) {
					var sHandlerName = this._fnGetEventHandlerName(aEvents[i]);
					if (sHandlerName) {
						aXml.push(this._createAttribute(sEvent, sHandlerName));
						break; // there can be only one event in declarative views
					}
				}
			}
		}
	}

	// write associations
	var oAssociations = oControl.getMetadata().getAllAssociations();
	this._createAttributes(aXml, oControl, oAssociations, function (sName, oValue) {
		if (oAssociations[sName].multiple) {
			return oValue.join(" ");
		}
		return oValue;
	}, function (sName, oValue) {
		return (oValue !== null && typeof oValue !== undefined && oValue !== "");
	});

	// write properties
	var oProperties = oControl.getMetadata().getAllProperties();
	this._createAttributes(aXml, oControl, oProperties, null, function (sName, oValue) {
		return (!!oControl.getBindingInfo(sName) || (oValue !== null && typeof oValue !== undefined && oValue !== ""));
	});

	// write aggregations
	var oAggregations = oControl.getMetadata().getAllAggregations();
	this._createAttributes(aXml, oControl, oAggregations, null, function (sName, oValue) {
		if (!oControl.getBindingInfo(sName) && (!oValue || (typeof oValue !== "string"))) {
			return false;
		}
		return true;
	});

	// write end of tag
	aXml.push('>');
	
	return aXml.join('');
};



/**
 * Serializes the attributes for a given control and properties
 * 
 * @param {string[]} aXml The serialized XML.
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {object} oObj The object to serialize the properties from.
 * @param {function} [fnGetValue] A delegate function to retrieve the value. 
 * @param {function} [fnValueCheck] A delegate function to check the value.
 * @private
 */
sap.ui.core.util.serializer.delegate.XML.prototype._createAttributes = function (aXml, oControl, oObj, fnGetValue, fnValueCheck) {
	for (var sName in oObj) {
		var oProp = oObj[sName];
		var sGetter = oProp._sGetter;
		if (oControl[sGetter]) {
			var oValue = oControl[sGetter]();
			oValue = fnGetValue ? fnGetValue(sName, oValue) : oValue;
			if (!oControl.getBindingInfo(sName)) {
				if (oValue !== oProp.defaultValue) {
					if (!fnValueCheck || fnValueCheck(sName, oValue)) {
						aXml.push(this._createAttribute(sName, oValue));
					}
				}
			} else {
				aXml.push(this._createDataBindingAttribute(oControl, sName, oValue));
			}
		}
	}
};


/**
 * Creates a data binding attribute.
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sName The name of the property
 * @param {object} oValue The value of the property.
 * @return {string} The created data binding attribute.
 * @private
 */
sap.ui.core.util.serializer.delegate.XML.prototype._createDataBindingAttribute = function (oControl, sName, oValue) {
		
	var oBindingInfo = oControl.getBindingInfo(sName);
	var sBindingValue = null;
	var oPath = oValue;

	if (!oBindingInfo.bindingString) {
		if (oBindingInfo.binding) {
			var sClassName = oBindingInfo.binding.getMetadata().getName();
			if (sClassName === "sap.ui.model.PropertyBinding" || sClassName === "sap.ui.model.resource.ResourcePropertyBinding") {
				sBindingValue = oBindingInfo.binding.getValue();
			}
		}

		if (oBindingInfo.parts) {
			oBindingInfo = oBindingInfo.parts[0];
		}

		var sModel = oBindingInfo.model;

		// TODO: Properties Panel should edit I18n Model directly!
		if (sBindingValue === oValue || sBindingValue === null) {
			oPath = "{" + (sModel ? (sModel + ">" + oBindingInfo.path) : oBindingInfo.path) + "}";
		}
	} else {
		oPath = oBindingInfo.bindingString;
	}

	return this._createAttribute(sName, oPath);
};


/**
 * Creates an attribute string.
 * 
 * @param {string} sAttribute The name of the attribute.
 * @param {object} oValue The value of the attribute.
 * @return {string} The created attribute string.
 * @private
 */
sap.ui.core.util.serializer.delegate.XML.prototype._createAttribute = function (sAttribute, oValue) {
	return ' ' + sAttribute + '="' + oValue + '"';
};


/**
 * Creates the tag name string for a given control
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @return {string} The tag name.
 * @private
 */
sap.ui.core.util.serializer.delegate.XML.prototype._createTagName = function (oControl) {
	
	// compute those names
	var sClassName = oControl.getMetadata()._sClassName;
	var iLastDot = sClassName.lastIndexOf(".");
	var sControlName = (iLastDot === -1) ? sClassName : sClassName.substring(iLastDot + 1);
	var sPackageName = (iLastDot === -1) ? sClassName : sClassName.substring(0, iLastDot);

	// memorize package
	if (this._fnMemorizePackage) {
		this._fnMemorizePackage(oControl, sPackageName);
	}

	// done
	return this._createNamespace(sPackageName, sControlName);
};


/**
 * Creates the aggregation name string for a given control
 * 
 * @param {sap.ui.core.Control} oControl The current control to process.
 * @param {string} sAggregationName The current aggregation name.
 * @return {string} The aggregation name string.
 * @private
 */
sap.ui.core.util.serializer.delegate.XML.prototype._createAggregationName = function (oControl, sAggregationName) {
	
	// compute those names
	var sClassName = oControl.getMetadata()._sClassName;
	var iLastDot = sClassName.lastIndexOf(".");
	var sPackageName = (iLastDot === -1) ? sClassName : sClassName.substring(0, iLastDot);

	// done
	return this._createNamespace(sPackageName, sAggregationName);
};


/**
 * Creates the namespace string.
 * 
 * @param {string} sNamespace The namespace string to use
 * @param {string} sName The name string to use
 * @return {string} The namespace string.
 * @private
 */
sap.ui.core.util.serializer.delegate.XML.prototype._createNamespace = function (sNamespace, sName) {
	if (this._sDefaultNamespace && this._sDefaultNamespace === sNamespace) {
		return sName;
	} else {
		return sNamespace + ":" + sName;
	}
};
}; // end of sap/ui/core/util/serializer/delegate/XML.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ws.WebSocket') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.ws.WebSocket for standard WebSocket support
jQuery.sap.declare("sap.ui.core.ws.WebSocket");





/**
 * Creates a new WebSocket connection.
 *
 * @param {string}
 *            sUrl relative or absolute URL for WebSocket connection.
 *
 * @public
 *
 * @class Basic WebSocket class
 * @extends sap.ui.base.EventProvider
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.ws.WebSocket
 */
sap.ui.base.EventProvider.extend("sap.ui.core.ws.WebSocket", /** @lends sap.ui.core.ws.WebSocket */ {

	constructor: function(sUrl) {
		sap.ui.base.EventProvider.apply(this);

		// Check WebSocket support
		if (!sap.ui.Device.support.websocket) {
			throw new Error("Browser does not support WebSockets.");
		}

		if (typeof(sUrl) !== "string") {
			throw new Error("sUrl must be a string.");
		}

		this._openConnection(sUrl);
	},

	metadata: {
		publicMethods : [ "send", "close", "getReadyState" ]
	}

});

/**
 * Creates a new subclass of class sap.ui.core.ws.WebSocket with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 *
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code>
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.ws.WebSocket.extend
 * @function
 */

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.getInterface = function() {
	return this;
};

/**
 * Map of event names, that are provided by the WebSocket.
 */
sap.ui.core.ws.WebSocket.M_EVENTS = {

	/**
	 * Fired when the connection was successfully opened.
	 */
	Open : "open",

	/**
	 * Fired when the connection was closed.
	 */
	Close : "close",

	/**
	 * Fired when an error occurred.
	 * Contains Parameters: error
	 */
	Error : "error",

	/**
	 * Fired when a message was received
	 * Contains Parameters: data
	 */
	Message : "message"
};

/**
 * The 'open' event is fired, when the connection was successfully opened.
 *
 * @name sap.ui.core.ws.WebSocket#open
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 *
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.attachOpen = function(oData, fnFunction, oListener) {
	this.attachEvent("open", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.detachOpen = function(fnFunction, oListener) {
	this.detachEvent("open", fnFunction, oListener);
	return this;
};

/**
 * Fire event 'open' to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.ws.WebSocket.prototype.fireOpen = function(mArguments) {
	this.fireEvent("open", mArguments);
	return this;
};


/**
 * The 'close' event is fired, when the connection was closed.
 *
 * @name sap.ui.core.ws.WebSocket#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.code Close code provided by the server.
 * @param {string} oControlEvent.getParameters.reason Reason from server for closing the connection.
 * @param {string} oControlEvent.getParameters.wasClean Indicates whether the connection was cleanly closed or not.
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 *
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.attachClose = function(oData, fnFunction, oListener) {
	this.attachEvent("close", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.detachClose = function(fnFunction, oListener) {
	this.detachEvent("close", fnFunction, oListener);
	return this;
};

/**
 * Fire event 'close' to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.code] Close code provided by the server.
 * @param {string} [mArguments.reason] Reason from server for closing the connection.
 * @param {string} [mArguments.wasClean] Indicates whether the connection was cleanly closed or not.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.ws.WebSocket.prototype.fireClose = function(mArguments) {
	this.fireEvent("close", mArguments);
	return this;
};


/**
 * The 'error' event is fired, when an error occurred.
 *
 * @name sap.ui.core.ws.WebSocket#error
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 *
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.attachError = function(oData, fnFunction, oListener) {
	this.attachEvent("error", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'error' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.detachError = function(fnFunction, oListener) {
	this.detachEvent("error", fnFunction, oListener);
	return this;
};

/**
 * Fire event 'error' to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.ws.WebSocket.prototype.fireError = function(mArguments) {
	this.fireEvent("error", mArguments);
	return this;
};

/**
 * The 'message' event is fired, when a message was received.
 *
 * @name sap.ui.core.ws.WebSocket#message
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.data Received data from the server.
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this WebSocket is used.
 *
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.attachMessage = function(oData, fnFunction, oListener) {
	this.attachEvent("message", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'message' event of this <code>sap.ui.core.ws.WebSocket</code>.<br>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.detachMessage = function(fnFunction, oListener) {
	this.detachEvent("message", fnFunction, oListener);
	return this;
};

/**
 * Fire event 'message' to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.data] Received data from the server.
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.ws.WebSocket.prototype.fireMessage = function(mArguments) {
	this.fireEvent("message", mArguments);
	return this;
};

// Private Methods
/**
 * Resolves a the full WebSocket-Url from an absolute or relative url.
 *
 * @param {string} sUrl input url
 * @return {string} sFullUrl full url which can be used for the ws-connection
 * @private
 */
sap.ui.core.ws.WebSocket.prototype._resolveFullUrl = function(sUrl) {
	var sFullUrl = '';

	// check if no protocol (ws:// or wss://) is provided
	if (!/^wss?:\/\//.test(sUrl)) {

		var loc = document.location;

		sFullUrl = ((loc.protocol === 'https:')
						? 'wss://'
						: 'ws://') +
						loc.host;

		if (sUrl.substr(0, 1) === '/') {
			// absolute url, e.g. /foo/bar
			sFullUrl += sUrl;
		} else {
			// relative url, eg. foo/../../bar
			sFullUrl += loc.pathname.substring(0, loc.pathname.lastIndexOf('/')) + '/' + sUrl;
		}

	} else {
		sFullUrl = sUrl;
	}

	return sFullUrl;
};

/**
 * Opens the connection and binds the event-handlers.
 *
 * @param {string} sUrl	Url for WebSocket
 * @private
 */
sap.ui.core.ws.WebSocket.prototype._openConnection = function(sUrl) {
	this._oWs = new window.WebSocket(this._resolveFullUrl(sUrl));
	this._oWs.onopen = jQuery.proxy(this._onopen, this);
	this._oWs.onclose = jQuery.proxy(this._onclose, this);
	this._oWs.onmessage = jQuery.proxy(this._onmessage, this);
	this._oWs.onerror = jQuery.proxy(this._onerror, this);
};

// Event-Handlers
/**
 * Internal handler for open-event.
 *
 * @private
 */
sap.ui.core.ws.WebSocket.prototype._onopen = function() {
	this.fireOpen();
};

/**
 * Internal handler for close-event.
 *
 * @private
 */
sap.ui.core.ws.WebSocket.prototype._onclose = function(oCloseEvent) {
	this.fireClose({
		code: oCloseEvent.code,
		reason: oCloseEvent.reason,
		wasClean: oCloseEvent.wasClean
	});
};

/**
 * Internal handler for error-event.
 *
 * @private
 */
sap.ui.core.ws.WebSocket.prototype._onerror = function(oEvent) {
	this.fireError();
};

/**
 * Internal handler for message-event.
 *
 * @private
 */
sap.ui.core.ws.WebSocket.prototype._onmessage = function(oMessageEvent) {
	this.fireMessage({
		data: oMessageEvent.data
	});
};

// Public Methods
/**
 * Sends a message.<br>
 * <br>
 * If the connection is not yet opened, the message will be queued and sent
 * when the connection is established.
 *
 * @param {string} sMessage Message to send
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.send = function(sMessage) {

	if (this.getReadyState() === sap.ui.core.ws.ReadyState.OPEN) {
		this._oWs.send(sMessage);
	} else if (this.getReadyState() === sap.ui.core.ws.ReadyState.CONNECTING) {
		// queue the message until the connection is opened
		this.attachEventOnce("open", function(oEvent) {
			this._oWs.send(sMessage);
		});
	} else {
		jQuery.sap.log.warning("Unable to send WebSocket message. " +
			"Connection is already closed or closing. message: " + sMessage);
	}

	return this;
};

/**
 * Closes the connection.
 *
 * @return {sap.ui.core.ws.WebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.close = function() {

	if (this.getReadyState() === sap.ui.core.ws.ReadyState.OPEN) {
		this._oWs.close();
	} else {

		var sText = '';

		switch (this.getReadyState()) {
		case sap.ui.core.ws.ReadyState.CLOSED:
			sText = "Connection is already closed.";
			break;
		case sap.ui.core.ws.ReadyState.CLOSING:
			sText = "Connection is already closing.";
			break;
		case sap.ui.core.ws.ReadyState.CONNECTING:
			sText = "Connection is not yet established.";
			break;
		}

		jQuery.sap.log.warning("Unable to close WebSocket connection. " + sText);
	}

	return this;
};

/**
 * Getter for WebSocket readyState.
 *
 * @returns {sap.ui.core.ws.ReadyState} readyState
 * @public
 */
sap.ui.core.ws.WebSocket.prototype.getReadyState = function() {
	return this._oWs.readyState;
};

}; // end of sap/ui/core/ws/WebSocket.js
if ( !jQuery.sap.isDeclared('sap.ui.model.Binding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides an abstraction for model bindings
jQuery.sap.declare("sap.ui.model.Binding");



/**
 * Constructor for Binding class.
 *
 * @class
 * The Binding is the object, which holds the necessary information for a data binding,
 * like the binding path and the binding context, and acts like an interface to the
 * model for the control, so it is the event provider for changes in the data model
 * and provides getters for accessing properties or lists.
 *
 * @param {sap.ui.model.Model} the model
 * @param {String} sPath the path
 * @param {sap.ui.model.Context} oContext the context object
 * @param {object} [mParameters]
 * @abstract
 * @public
 * @name sap.ui.model.Binding
 */
sap.ui.base.EventProvider.extend("sap.ui.model.Binding", /** @lends sap.ui.model.Binding */ {
	
	constructor : function(oModel, sPath, oContext, mParameters){
		sap.ui.base.EventProvider.apply(this);
		
		this.oModel = oModel;
		this.bRelative = !jQuery.sap.startsWith(sPath,'/');
		this.sPath = sPath;
		this.oContext = oContext;
		this.mParameters = mParameters;
		this.bInitial = false;
		
	},

	metadata : {
		"abstract" : true,
		publicMethods : [
			// methods
			"getPath", "getContext", "getModel", "attachChange", "detachChange", "refresh", "isInitial","attachDataRequested","detachDataRequested","attachDataReceived","detachDataReceived"
		]
	}

});

/**
 * Creates a new subclass of class sap.ui.model.Binding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.Binding.extend
 * @function
 */

// Getter
/**
 * Getter for path
 * @return {String} the binding path
 */
sap.ui.model.Binding.prototype.getPath = function() {
	return this.sPath;
};

/**
 * Getter for context
 * @return {Object} the context object
 */
sap.ui.model.Binding.prototype.getContext = function() {
	return this.oContext;
};

/**
 * Setter for context
 * @param {Object} oContext the new context object
 */
sap.ui.model.Binding.prototype.setContext = function(oContext) {
	if (this.oContext != oContext) {
		this.oContext = oContext;
		this._fireChange();
	}
};

/**
 * Getter for model
 * @return {sap.ui.core.Model} the model
 */
sap.ui.model.Binding.prototype.getModel = function() {
	return this.oModel;
};

// Eventing and related
/**
 * Attach event-handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 */
sap.ui.model.Binding.prototype.attachChange = function(fnFunction, oListener) {
	if (!this.hasListeners("change")) {
		this.oModel.addBinding(this);
	}
	this.attachEvent("change", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.model.Model</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 */
sap.ui.model.Binding.prototype.detachChange = function(fnFunction, oListener) {
	this.detachEvent("change", fnFunction, oListener);
	if (!this.hasListeners("change")) {
		this.oModel.removeBinding(this);
	}
};

/**
 * Fire event change to attached listeners.

 * @param {Map}
 *         mArguments the arguments to pass along with the event.
 * @private
 */
sap.ui.model.Binding.prototype._fireChange = function(mArguments) {
	this.fireEvent("change", mArguments);
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 */
sap.ui.model.Binding.prototype.attachDataRequested = function(fnFunction, oListener) {
	this.attachEvent("dataRequested", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'dataRequested' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 */
sap.ui.model.Binding.prototype.detachDataRequested = function(fnFunction, oListener) {
	this.detachEvent("dataRequested", fnFunction, oListener);
};

/**
 * Fire event dataRequested to attached listeners.

 * @param {Map} mArguments the arguments to pass along with the event.
 * @protected
 */
sap.ui.model.Binding.prototype.fireDataRequested = function(mArguments) {
	this.fireEvent("dataRequested", mArguments);
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 */
sap.ui.model.Binding.prototype.attachDataReceived = function(fnFunction, oListener) {
	this.attachEvent("dataReceived", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'dataReceived' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @public
 */
sap.ui.model.Binding.prototype.detachDataReceived = function(fnFunction, oListener) {
	this.detachEvent("dataReceived", fnFunction, oListener);
};

/**
 * Fire event dataReceived to attached listeners.

 * @param {Map} mArguments the arguments to pass along with the event.
 * @protected
 */
sap.ui.model.Binding.prototype.fireDataReceived = function(mArguments) {
	this.fireEvent("dataReceived", mArguments);
};

/**
 * Determines if the binding should be updated by comparing the current model against a specified model.
 * @param {object} oModel The model instance to compare against
 * @returns {boolean} true if this binding should be updated
 * @protected
 */
sap.ui.model.Binding.prototype.updateRequired = function(oModel) {
	return oModel && this.getModel() === oModel;
};

/**
 * Checks whether an update of this bindings is required. If this is the case the change event of 
 * the binding is fired.
 * The default implementation just fires the change event, if the method is called, the bForceUpdate
 * parameter is ignored. Subclasses should implement this, if possible.
 * 
 * @param {boolean} bForceUpdate
 *  
 * @private
 */
sap.ui.model.Binding.prototype.checkUpdate = function(bForceUpdate) {
	this._fireChange({reason: sap.ui.model.ChangeReason.Change});
};

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event
 * if this is the case. For server side models this should refetch the data from the server.
 * To update a control, even if no data has been changed, e.g. to reset a control after failed
 * validation, please use the parameter bForceUpdate.
 * 
 * @param {boolean} bForceUpdate Update the bound control even if no data has been changed
 * 
 * @public
 */
sap.ui.model.Binding.prototype.refresh = function(bForceUpdate) {
	this.checkUpdate(bForceUpdate);
};

/**
 * Initialize the binding. The message should be called when creating a binding.
 * The default implementation calls checkUpdate(true). 
 * 
 * @protected
 */
sap.ui.model.Binding.prototype.initialize = function() {
	this.checkUpdate(true);
};

/**
 * _refresh for compatibility
 * @private
 */
sap.ui.model.Binding.prototype._refresh = function() {
	this.refresh();
};


/**
 * Returns whether the binding is initial, which means it did not get an initial value yet
 * @return {boolean} whether binding is initial
 * @public
 */
sap.ui.model.Binding.prototype.isInitial = function() {
	return this.bInitial;
};

/**
 * Returns whether the binding is relative, which means it did not start with a /
 * @return {boolean} whether binding is relative
 * @public
 */
sap.ui.model.Binding.prototype.isRelative = function() {
	return this.bRelative;
};

/**
 * attach multiple events
 * @protected
 */
sap.ui.model.Binding.prototype.attachEvents = function(oEvents) {
	if (!oEvents) {
		return this;
	}
	var that = this;
	jQuery.each(oEvents, function(sEvent, fnHandler) {
		var sMethod = "attach" + sEvent.substring(0,1).toUpperCase() + sEvent.substring(1);
		if (that[sMethod]) {
			that[sMethod](fnHandler);
		} else {
			jQuery.sap.log.warning(that.toString()+ " has no handler for event '" +sEvent+"'");
		}
	});
	return this;
};

/**
 * detach multiple events
 * @protected
 */
sap.ui.model.Binding.prototype.detachEvents = function(oEvents) {
	if (!oEvents) {
		return this;
	}
	var that = this;
	jQuery.each(oEvents, function(sEvent, fnHandler) {
		var sMethod = "detach" + sEvent.substring(0,1).toUpperCase() + sEvent.substring(1);
		if (that[sMethod]) {
			that[sMethod](fnHandler);
		} else {
			jQuery.sap.log.warning(that.toString()+ " has no handler for event '" +sEvent+"'");
		}
	});
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 */
sap.ui.model.Binding.prototype.attachRefresh = function(fnFunction, oListener) {
	this.attachEvent("refresh", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.ui.model.Binding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 */
sap.ui.model.Binding.prototype.detachRefresh = function(fnFunction, oListener) {
	this.detachEvent("refresh", fnFunction, oListener);
};

/**
 * Fire event refresh to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @private
 */
sap.ui.model.Binding.prototype._fireRefresh = function(mArguments) {
	this.fireEvent("refresh", mArguments);
};
}; // end of sap/ui/model/Binding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.Context') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides an abstraction for model bindings
jQuery.sap.declare("sap.ui.model.Context");


/**
 * Constructor for Context class.
 *
 * @class
 * The Context is a pointer to an object in the model data, which is used to 
 * allow definition of relative bindings, which are resolved relative to the
 * defined object.
 * Context elements are created either by the ListBinding for each list entry
 * or by using createBindingContext.
 *
 * @param {sap.ui.model.Model} the model
 * @param {String} sPath the path
 * @param {Object} oContext the context object
 * @abstract
 * @public
 * @name sap.ui.model.Context
 */
sap.ui.base.Object.extend("sap.ui.model.Context", /** @lends sap.ui.model.Context */ {
	
	constructor : function(oModel, sPath){

		sap.ui.base.Object.apply(this);
	
		this.oModel = oModel;
		this.sPath = sPath;
	
	},
	
	metadata : {
		"abstract" : true,
	  publicMethods : [
			"getModel", "getPath", "getProperty", "getObject"
		]
	}

});

/**
 * Creates a new subclass of class sap.ui.model.Context with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.C.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.Context.extend
 * @function
 */

// Getter
/**
 * Getter for model
 * @public
 * @return {sap.ui.core.Model} the model
 */
sap.ui.model.Context.prototype.getModel = function() {
	return this.oModel;
};

/**
 * Getter for path
 * @public
 * @return {String} the binding path
 */
sap.ui.model.Context.prototype.getPath = function() {
	return this.sPath;
};

/**
 * Gets the property with the given relative binding path
 * @public
 * @param {String} sPath the binding path
 * @return {any} the property value
 */
sap.ui.model.Context.prototype.getProperty = function(sPath) {
	return this.oModel.getProperty(sPath, this);
};

/**
 * Gets the (model dependent) object the context points to
 * @public
 * @return {object} the context object
 */
sap.ui.model.Context.prototype.getObject = function() {
	return this.oModel.getObject(this.sPath);
};

/** 
 * toString method returns path for compatbility
 */
sap.ui.model.Context.prototype.toString = function() {
	return this.sPath;
};

}; // end of sap/ui/model/Context.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ContextBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides an abstraction for list bindings
jQuery.sap.declare("sap.ui.model.ContextBinding");


/**
 * Constructor for ContextBinding
 *
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 *
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @param {Object} [oEvents] object defining event handlers
 * @abstract
 * @public
 * @name sap.ui.model.ContextBinding
 */
sap.ui.model.Binding.extend("sap.ui.model.ContextBinding", /** @lends sap.ui.model.ContextBinding */ {
	
	constructor : function(oModel, sPath, oContext, mParameters, oEvents){
		sap.ui.model.Binding.call(this, oModel, sPath, oContext, mParameters, oEvents);
		this.bInitial = true;
	},

	metadata : {
		 publicMethods : [
		 // methods
		 	"getElementContext"
		 ]
	}
});

/**
 * Creates a new subclass of class sap.ui.model.ContextBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.ContextBinding.extend
 * @function
 */

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 *
 * @param {boolean} bForceupdate
 */
sap.ui.model.ContextBinding.prototype.checkUpdate = function(bForceupdate) {
	// nothing to do here, data changes can not change the context
};

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event
 * if this is the case. For server side models this should refetch the data from the server.
 * 
 * @param {boolean} bForceUpdate Does not have any effect on this binding
 * 
 * @public
 */

/**
 * Return the bound context
 */
sap.ui.model.ContextBinding.prototype.getBoundContext = function(oContext) {
	return this.oElementContext;
};

}; // end of sap/ui/model/ContextBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.Filter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides a filter for list bindings
jQuery.sap.declare("sap.ui.model.Filter");


/**
 * Constructor for Filter
 * You can either pass an object with the filter parameters or use the function arguments
 * 
 * Using object:
 * new sap.ui.model.Filter({
 *   sPath: ...,
 *   sOperator: ...,
 *   oValue1: ...,
 *   oValue2: ...,
 *   aFilters: ...,
 *   bAnd: ...
 * })
 * 
 * You can only pass sPath, sOperator and their values OR aFilters and bAnd. You will get an error if you define an invalid combination of filters parameters.
 * 
 * Using arguments:
 * new sap.ui.model.Filter(sPath, sOperator, oValue1, oValue2);
 * OR
 * new sap.ui.model.Filter(aFilters, bAnd);
 * 
 * aFilters is an array of other instances of sap.ui.model.Filter. If bAnd is set all filters within the filter will be ANDed else they will be ORed.
 *
 * @class
 * Filter for the list binding
 *
 * @param {String} sPath the binding path for this filter
 * @param {sap.ui.model.FilterOperator} sOperator Operator used for the filter
 * @param {Object} oValue1 First value to use for filter
 * @param {Object} [oValue2=null] Second value to use for filter (optional)
 * @public
 * @name sap.ui.model.Filter
 */
sap.ui.base.Object.extend("sap.ui.model.Filter", /** @lends sap.ui.model.Filter */ {
	constructor : function(sPath, sOperator, oValue1, oValue2){
		//There are two different ways of specifying a filter
		//If can be passed in only one object or defined with parameters
		if (typeof sPath === "object" && !jQuery.isArray(sPath)) {
			var oFilterData = sPath;
			this.sPath = oFilterData.path;
			this.sOperator = oFilterData.operator;
			this.oValue1 = oFilterData.value1;
			this.oValue2 = oFilterData.value2;
			this.aFilters = oFilterData.aFilters;
			this.bAnd = oFilterData.bAnd;
		} else {
			//If parameters are used we have to check weather a regular or a multi filter is speficied
			if (jQuery.isArray(sPath)) {
				this.aFilters = sPath;
			} else {
				this.sPath = sPath;
			}
			if (jQuery.type(sOperator) === "boolean") {
				this.bAnd = sOperator;
			} else {
				this.sOperator = sOperator;
			}
			this.oValue1 = oValue1;
			this.oValue2 = oValue2;
		}
		if (jQuery.isArray(this.aFilters) && this.bAnd != undefined && !this.sPath && !this.sOperator && !this.oValue1 && !this.oValue2) {
			this._bMultiFilter = true;
			jQuery.each(this.aFilters, function(iIndex, oFilter) {
				if (!(oFilter instanceof sap.ui.model.Filter)) {
					jQuery.sap.log.error("Filter in Aggregation of Multi filter has to be instance of sap.ui.model.Filter");
				}
			});
		} else if (!this.aFilters && !this.bAnd && this.sPath !== undefined && this.sOperator && this.oValue1 !== undefined) {
			this._bMultiFilter = false;
		} else {
			jQuery.sap.log.error("Wrong parameters defined for filter.");
		}
	}

});

/**
 * Creates a new subclass of class sap.ui.model.Filter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.Filter.extend
 * @function
 */


}; // end of sap/ui/model/Filter.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ListBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides an abstraction for list bindings
jQuery.sap.declare("sap.ui.model.ListBinding");




/**
 * Constructor for ListBinding
 *
 * @class
 * The ListBinding is a specific binding for lists in the model, which can be used
 * to populate Tables or ItemLists.
 *
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {array} [aSorters] initial sort order (can be either a sorter or an array of sorters)
 * @param {array} [aFilters] predefined filter/s (can be either a filter or an array of filters)
 * @param {object} [mParameters]
 * 
 * @public
 * @name sap.ui.model.ListBinding
 */
sap.ui.model.Binding.extend("sap.ui.model.ListBinding", /** @lends sap.ui.model.ListBinding */ {
	
	constructor : function(oModel, sPath, oContext, aSorters, aFilters, mParameters){
		sap.ui.model.Binding.call(this, oModel, sPath, oContext, mParameters);
		
		this.aSorters = aSorters;
		if (!jQuery.isArray(this.aSorters) && this.aSorters instanceof sap.ui.model.Sorter) {
			this.aSorters = [this.aSorters];
		} else if (!jQuery.isArray(this.aSorters)) {
			this.aSorters = [];
		}
		this.aFilters = [];
		if (!jQuery.isArray(aFilters) && aFilters instanceof sap.ui.model.Filter) {
			aFilters = [aFilters];
		} else if (!jQuery.isArray(aFilters)) {
			aFilters = [];
		}
		this.aApplicationFilters = aFilters;
		this.bUseExtendedChangeDetection = false;
	},
	
	metadata : {
		"abstract" : true,

		publicMethods : [
			// methods
			"getContexts", "sort", "attachSort", "detachSort", "filter", "attachFilter", "detachFilter", "getDistinctValues", "isGrouped"
		]
	}
	
});

/**
 * Creates a new subclass of class sap.ui.model.ListBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.ListBinding.extend
 * @function
 */


// the 'abstract methods' to be implemented by child classes
/**
 * Returns the current value of the bound target
 *
 * @function
 * @name sap.ui.model.ListBinding.prototype.getContexts
 * @return {sap.ui.model.Context[]} the array of contexts for each row of the bound list
 *
 * @public
 */

/**
 * Filters the list according to the filter definitions
 *
 * @function
 * @name sap.ui.model.ListBinding.prototype.filter
 * @param {object[]} aFilters Array of filter objects
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining 
 *
 * @public
 */

/**
 * Sorts the list according to the sorter object
 *
 * @function
 * @name sap.ui.model.ListBinding.prototype.sort
 * @param {sap.ui.model.Sorter|Array} aSorters the Sorter object or an array of sorters which defines the sort order
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining 
 * @public
 */

// base methods, may be overridden by child classes
/**
 * Returns list of distinct values for the given relative binding path
 *
 * @param {string} sPath the relative binding path
 * @return {Array} the array of distinct values.
 *
 * @public
 */
sap.ui.model.ListBinding.prototype.getDistinctValues = function(sPath) {
	return null;
};

//Eventing and related
/**
 * Attach event-handler <code>fnFunction</code> to the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event. It now contains a parameter (reason : "sort") when a sorter event is fired.
 */
sap.ui.model.ListBinding.prototype.attachSort = function(fnFunction, oListener) {
	this.attachEvent("sort", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'sort' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event.
 */
sap.ui.model.ListBinding.prototype.detachSort = function(fnFunction, oListener) {
	this.detachEvent("sort", fnFunction, oListener);
};

/**
 * Fire event _sort to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @private
 * @deprecated use the change event. It now contains a parameter (reason : "sort") when a sorter event is fired.
 */
sap.ui.model.ListBinding.prototype._fireSort = function(mArguments) {
	this.fireEvent("sort", mArguments);
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
 */
sap.ui.model.ListBinding.prototype.attachFilter = function(fnFunction, oListener) {
	this.attachEvent("filter", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'filter' event of this <code>sap.ui.model.ListBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event.
 */
sap.ui.model.ListBinding.prototype.detachFilter = function(fnFunction, oListener) {
	this.detachEvent("filter", fnFunction, oListener);
};

/**
 * Fire event _filter to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @private
 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
 */
sap.ui.model.ListBinding.prototype._fireFilter = function(mArguments) {
	this.fireEvent("filter", mArguments);
};

/**
 * Checks if grouping is enabled for the binding<br/>
 * @public
 */
sap.ui.model.ListBinding.prototype.isGrouped = function() {
	return this.aSorters.length > 0 && !!this.aSorters[0].fnGroup;
};

/**
 * Enable extended change detection
 * @private
 */
sap.ui.model.ListBinding.prototype.enableExtendedChangeDetection = function( ) {
	this.bUseExtendedChangeDetection  = true;
	if (this.update) {
		this.update();
	}
};

}; // end of sap/ui/model/ListBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.Model') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.Model");




/**
 * The SAPUI5 Data Binding API.
 *
 * The default binding mode for model implementations (if not implemented otherwise) is two way and the supported binding modes by the model
 * are one way, two way and one time. The default binding mode can be changed by the application for each model instance.
 * A model implementation should specify its supported binding modes and set the default binding mode accordingly
 * (e.g. if the model supports only one way binding the default binding mode should also be set to one way).
 *
 * @namespace
 * @name sap.ui.model
 * @public
 */

/**
 * Constructor for a new Model.
 *
 * @class
 * This is an abstract base class for model objects.
 * @abstract
 *
 * @extends sap.ui.base.Object
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @name sap.ui.model.Model
 */
sap.ui.base.EventProvider.extend("sap.ui.model.Model", /** @lends sap.ui.model.Model */ {
	
	constructor : function () {
		sap.ui.base.EventProvider.apply(this, arguments);
	
		this.oData = {};
		this.aBindings = [];
		this.mContexts = {};
		this.iSizeLimit = 100;
		this.sDefaultBindingMode = sap.ui.model.BindingMode.TwoWay;
		this.mSupportedBindingModes = {"OneWay": true, "TwoWay": true, "OneTime": true};
		this.bLegacySyntax = false;
	},

	metadata : {

		"abstract" : true,
		publicMethods : [
			// methods
			"bindProperty", "bindList", "bindTree", "bindContext", "createBindingContext", "destroyBindingContext", "getProperty",
			"getDefaultBindingMode", "setDefaultBindingMode", "isBindingModeSupported", "attachParseError", "detachParseError",
			"attachRequestCompleted", "detachRequestCompleted", "attachRequestFailed", "detachRequestFailed", "attachRequestSent",
			"detachRequestSent", "setSizeLimit", "refresh", "isList", "getObject"
	  ]
	
	  /* the following would save code, but requires the new ManagedObject (1.9.1) 
	  , events : {
	  	"parseError" : {},
	  	"requestFailed" : {},
	  	"requestSent" : {},
	  	"requestCompleted" ; {} 
	  }
	  */
	
	}

});

/**
 * Creates a new subclass of class sap.ui.model.Model with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.Model.extend
 * @function
 */


/**
 * Map of event names, that are provided by the model.
 */
sap.ui.model.Model.M_EVENTS = {
	/**
	 * Depending on the model implementation a ParseError should be fired if a parse error occurred.
	 * Contains the parameters:
	 * errorCode, url, reason, srcText, line, linepos, filepos
	 */
	ParseError : "parseError",

	/**
	 * Depending on the model implementation a RequestFailed should be fired if a request to a backend failed.
	 * Contains the parameters:
	 * message, statusCode, statusText and responseText
	 */
	RequestFailed : "requestFailed",

	/**
	 * Depending on the model implementation a RequestSent should be fired when a request to a backend is sent.
	 * Contains Parameters: url, type, async, info
	 */
	RequestSent : "requestSent",

	/**
	 * Depending on the model implementation a RequestCompleted should be fired when a request to a backend is completed regardless if the request failed or succeeded.
	 * Contains Parameters: url, type, async, info, success, errorobject
	 */
	RequestCompleted : "requestCompleted"
};

/**
 * The 'requestFailed' event is fired, when data retrieval from a backend failed.
 *
 * @name sap.ui.model.Model#requestFailed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.message A text that describes the failure.
 * @param {string} oControlEvent.getParameters.statusCode HTTP status code returned by the request (if available)
 * @param {string} oControlEvent.getParameters.statusText The status as a text, details not specified, intended only for diagnosis output
 * @param {string} oControlEvent.getParameters.responseText Response that has been received for the request ,as a text string
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
 *
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.attachRequestFailed = function(oData, fnFunction, oListener) {
	this.attachEvent("requestFailed", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestFailed' event of this <code>sap.ui.model.Model</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.detachRequestFailed = function(fnFunction, oListener) {
	this.detachEvent("requestFailed", fnFunction, oListener);
	return this;
};

/**
 * Fire event requestFailed to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * 
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.Model.prototype.fireRequestFailed = function(mArguments) {
	this.fireEvent("requestFailed", mArguments);
	return this;
};


/**
 * The 'parseError' event is fired when parsing of a model document (e.g. XML response) fails.
 *
 * @name sap.ui.model.Model#parseError
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.errorCode
 * @param {string} oControlEvent.getParameters.url
 * @param {string} oControlEvent.getParameters.reason
 * @param {string} oControlEvent.getParameters.srcText
 * @param {int} oControlEvent.getParameters.line
 * @param {int} oControlEvent.getParameters.linepos
 * @param {int} oControlEvent.getParameters.filepos
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
 *
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.attachParseError = function(oData, fnFunction, oListener) {
	this.attachEvent("parseError", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of this <code>sap.ui.model.Model</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.detachParseError = function(fnFunction, oListener) {
	this.detachEvent("parseError", fnFunction, oListener);
	return this;
};

/**
 * Fire event parseError to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {int} [mArguments.errorCode]
 * @param {string} [mArguments.url]
 * @param {string} [mArguments.reason]
 * @param {string} [mArguments.srcText]
 * @param {int} [mArguments.line]
 * @param {int} [mArguments.linepos]
 * @param {int} [mArguments.filepos]
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.Model.prototype.fireParseError = function(mArguments) {
	this.fireEvent("parseError", mArguments);
	return this;
};

/**
 * The 'requestSent' event is fired, after a request has been sent to a backend.
 *
 * Note: Subclasses might add additional parameters to the event object.
 * 
 * @name sap.ui.model.Model#requestSent
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.url The url which is sent to the backend
 * @param {string} oControlEvent.getParameters.type The type of the request (if available)
 * @param {boolean} [oControlEvent.getParameters.async] If the request is synchronous or asynchronous (if available)
 * @param {string} [oControlEvent.getParameters.info] Additional information for the request (if available)
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestSent' event of this <code>sap.ui.model.Model</code>.
 *
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.attachRequestSent = function(oData, fnFunction, oListener) {
	this.attachEvent("requestSent", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestSent' event of this <code>sap.ui.model.Model</code>.
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.detachRequestSent = function(fnFunction, oListener) {
	this.detachEvent("requestSent", fnFunction, oListener);
	return this;
};

/**
 * Fire event requestSent to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.url] The url which is sent to the backend.
 * @param {string} [mArguments.type] The type of the request (if available)
 * @param {boolean} [mArguments.async] If the request is synchronous or asynchronous (if available)
 * @param {string} [mArguments.info] additional information for the request (if available)
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.Model.prototype.fireRequestSent = function(mArguments) {
	this.fireEvent("requestSent", mArguments);
	return this;
};

/**
 * The 'requestCompleted' event is fired, after a request has been completed (includes receiving a response), 
 * no matter whether the request succeeded or not.
 * 
 * Note: Subclasses might add additional parameters to the event object.
 * 
 * @name sap.ui.model.Model#requestCompleted
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.url The url which was sent to the backend
 * @param {string} oControlEvent.getParameters.type The type of the request (if available)
 * @param {boolean} oControlEvent.getParameters.success if the request has been successful or not. In case of errors consult the optional errorobject parameter.
 * @param {object} [oControlEvent.getParameters.errorobject] If the request failed the error if any can be accessed in this property.
 * @param {boolean} [oControlEvent.getParameters.async] If the request is synchronous or asynchronous (if available)
 * @param {string} [oControlEvent.getParameters.info] Additional information for the request (if available)
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
 *
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.attachRequestCompleted = function(oData, fnFunction, oListener) {
	this.attachEvent("requestCompleted", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'requestCompleted' event of this <code>sap.ui.model.Model</code>.
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.Model.prototype.detachRequestCompleted = function(fnFunction, oListener) {
	this.detachEvent("requestCompleted", fnFunction, oListener);
	return this;
};

/**
 * Fire event requestCompleted to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.url] The url which was sent to the backend.
 * @param {string} [mArguments.type] The type of the request (if available)
 * @param {boolean} [mArguments.async] If the request was synchronous or asynchronous (if available)
 * @param {string} [mArguments.info] additional information for the request (if available)
 *
 * @return {sap.ui.model.Model} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.Model.prototype.fireRequestCompleted = function(mArguments) {
	this.fireEvent("requestCompleted", mArguments);
	return this;
};


// the 'abstract methods' to be implemented by child classes

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.bindProperty
 * @function
 * @param {string}
 *         sPath the path pointing to the property that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @return {sap.ui.model.PropertyBinding}
 *
 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.bindList
 * @function
 * @param {string}
 *         sPath the path pointing to the list / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {sap.ui.model.Sorter}
 *         [aSorters=null] initial sort order (can be either a sorter or an array of sorters) (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s (can be either a filter or an array of filters) (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @return {sap.ui.model.ListBinding}

 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.bindTree
 * @function
 * @param {string}
 *         sPath the path pointing to the tree / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s contained in an array (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @return {sap.ui.model.TreeBinding}

 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.createBindingContext
 * @function
 * @param {string}
 *         sPath the path to create the new context from
 * @param {object}
 *		   [oContext=null] the context which should be used to create the new binding context
 * @param {object}
 *		   [mParameters=null] the parameters used to create the new binding context
 * @param {function}
 *         fnCallBack the function which should be called after the binding context has been created
 * @param {boolean}
 *         [bReload] force reload even if data is already available. For server side models this should 
 *                   refetch the data from the server 
 *         
 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.destroyBindingContext
 * @function
 * @param {object}
 *         oContext to destroy

 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.getProperty
 * @function
 * @param {string}
 *         sPath the path to where to read the attribute value
 * @param {object}
 *		   [oContext=null] the context with which the path should be resolved
 * @public
 */

/**
 * Implement in inheriting classes
 * @abstract
 *
 * @name sap.ui.model.Model.prototype.getObject
 * @function
 * @param {string}
 *         sPath the path to where to read the object
 * @param {object}
 *		   [oContext=null] the context with which the path should be resolved
 * @public
 */
sap.ui.model.Model.prototype.getObject = function(sPath, oContext) {
	return this.getProperty(sPath, oContext);
};


/**
 * Create ContextBinding
 * @abstract
 * 
 * @name sap.ui.model.Model.prototype.bindContext
 * @function
 * @param {string | object}
 *         sPath the path pointing to the property that should be bound or an object 
 *         which contains the following parameter properties: path, context, parameters
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 * @param {object}
 *         [oEvents=null] event handlers can be passed to the binding ({change:myHandler})
 * @return {sap.ui.model.ContextBinding}
 *
 * @public
 */

/**
 * Gets a binding context. If context already exists, return it from the map,
 * otherwise create one using the context constructor.
 *
 * @param {string} sPath the path
 */
sap.ui.model.Model.prototype.getContext = function(sPath) {
	if (!jQuery.sap.startsWith(sPath, "/")) {
		throw new Error("Path " +sPath+" must start with a / ");
	}
	var oContext = this.mContexts[sPath];
	if (!oContext) {
		oContext = new sap.ui.model.Context(this, sPath);
		this.mContexts[sPath] = oContext;
	}
	return oContext;
};

/**
 * Resolve the path relative to the given context.
 * 
 * If a relative path is given (not starting with a '/') but no context,
 * then the path can't be resolved and undefined is returned.
 *
 * For backward compatibility, the behavior of this method can be changed by 
 * setting the 'legacySyntax' property. Then an unresolvable, relative path 
 * is automatically converted into an absolute path.
 * 
 * @param {string} sPath path to resolve
 * @param {sap.ui.core.Context} [oContext] context to resolve a relative path against
 * @return {string} resolved path or undefined
 */
sap.ui.model.Model.prototype.resolve = function(sPath, oContext) {
	var bIsRelative = !jQuery.sap.startsWith(sPath, "/"),
		sResolvedPath = sPath,
		sContextPath;
	if (bIsRelative) {
		if (oContext) {
			sContextPath = oContext.getPath();
			sResolvedPath = sContextPath + (jQuery.sap.endsWith(sContextPath, "/") ? "" : "/") + sPath;
		}
		else {
			sResolvedPath = this.isLegacySyntax() ? "/" + sPath : undefined;
		}
	}
	
	// invariant: path never ends with a slash ... if root is requested we return /
	if (sResolvedPath && sResolvedPath !== "/" && jQuery.sap.endsWith(sResolvedPath, "/")) {
		sResolvedPath = sResolvedPath.substr(0, sResolvedPath.length - 1);
	}
	return sResolvedPath;
};

/**
 * Add a binding to this model
 *
 * @param {sap.ui.model.Binding} oBinding the binding to be added
 */
sap.ui.model.Model.prototype.addBinding = function(oBinding) {
	this.aBindings.push(oBinding);
};

/**
 * Remove a binding from the model
 *
 * @param {sap.ui.model.Binding} oBinding the binding to be removed
 */
sap.ui.model.Model.prototype.removeBinding = function(oBinding) {
	for (var i = 0; i < this.aBindings.length; i++) {
		if (this.aBindings[i] == oBinding) {
			this.aBindings.splice(i, 1);
			break;
		}
	}
};

/**
 * Get the default binding mode for the model
 *
 * @return {sap.ui.model.BindingMode} default binding mode of the model
 *
 * @public
 */
sap.ui.model.Model.prototype.getDefaultBindingMode = function() {
	return this.sDefaultBindingMode;
};

/**
 * Set the default binding mode for the model. If the default binding mode should be changed,
 * this method should be called directly after model instance creation and before any binding creation.
 * Otherwise it is not guaranteed that the existing bindings will be updated with the new binding mode.
 *
 * @param {sap.ui.model.BindingMode} sMode the default binding mode to set for the model
 *
 * @public
 */
sap.ui.model.Model.prototype.setDefaultBindingMode = function(sMode) {
	if (this.isBindingModeSupported(sMode)) {
		this.sDefaultBindingMode = sMode;
	}
	else {
		throw new Error("Binding mode " + sMode + " is not supported by this model.");
	}
};

/**
 * Check if the specified binding mode is supported by the model.
 *
 * @param {sap.ui.model.BindingMode} sMode the binding mode to check
 *
 * @public
 */
sap.ui.model.Model.prototype.isBindingModeSupported = function(sMode) {
	return (sMode in this.mSupportedBindingModes);
};

/**
 * Enables legacy path syntax handling
 * 
 * This defines, whether relative bindings, which do not have a defined
 * binding context, should be compatible to earlier releases which means
 * they are resolved relative to the root element or handled strict and
 * stay unresolved until a binding context is set
 *
 * @param {boolean} bCompatibleSyntax the path syntax to use
 *
 * @public
 */
sap.ui.model.Model.prototype.setLegacySyntax = function(bLegacySyntax) {
	this.bLegacySyntax = bLegacySyntax;
};

/**
 * Returns whether legacy path syntax is used
 *
 * @return {boolean} 
 * 
 * @public
 */
sap.ui.model.Model.prototype.isLegacySyntax = function() {
	return this.bLegacySyntax;
};

/**
 * Set the maximum number of entries which are used for for list bindings.
 * @param {int} collection size limit  
 * @public
 */
sap.ui.model.Model.prototype.setSizeLimit = function(iSizeLimit) {
	this.iSizeLimit = iSizeLimit;
};

/**
 * Override getInterface method to avoid creating an Interface object for models
 */
sap.ui.model.Model.prototype.getInterface = function() {
	return this;
};

/**
 * Refresh the model.
 * This will check all bindings for updated data and update the controls if data has been changed. 
 * 
 * @param {boolean} bForceUpdate Update controls even if data has not been changed
 * @public
 */
sap.ui.model.Model.prototype.refresh = function(bForceUpdate) {
	this.checkUpdate(bForceUpdate);
};

/**
 * Private method iterating the registered bindings of this model instance and initiating their check for update
 * @param {boolean} bForceUpdate
 * @private
 */
sap.ui.model.Model.prototype.checkUpdate = function(bForceUpdate) {
	var aBindings = this.aBindings.slice(0);
	jQuery.each(aBindings, function(iIndex, oBinding) {
		oBinding.checkUpdate(bForceUpdate);
	});
};

/**
 * Returns id the provided path is a list (aggregation) or an entity
 *
 * @abstract
 * @name sap.ui.model.Model.prototype.bindContext
 * @function
 * @param {string} sPath the path pointing to the property that should be bound
 * @param {object} [oContext=null] the context object for this databinding (optional)
 * @return {boolean} 
 * @since 1.17.1 
 * @public
 */

}; // end of sap/ui/model/Model.js
if ( !jQuery.sap.isDeclared('sap.ui.model.SelectionModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.model.SelectionModel
jQuery.sap.declare("sap.ui.model.SelectionModel");




/**
 * Constructs an instance of a sap.ui.model.SelectionModel.
 *
 * @class sap.ui.model.SelectionModel
 * @extends sap.ui.base.Object
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @param {int} iSelectionMode <code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> or <code>sap.ui.model.SelectionModel.MULTI_SELECTION</code>
 *
 * @constructor
 * @public
 * @name sap.ui.model.SelectionModel
 */
sap.ui.base.EventProvider.extend("sap.ui.model.SelectionModel", /** @lends sap.ui.model.SelectionModel */ {

	constructor : function(iSelectionMode) {
		sap.ui.base.EventProvider.apply(this);

		this.iSelectionMode = iSelectionMode || sap.ui.model.SelectionModel.SINGLE_SELECTION;

		this.aSelectedIndices = [];
		this.iLeadIndex = -1;

		this.fnSort = function(a, b) { return a - b; };
		this.fnSortReverse = function(a, b) { return b - a; };

	}

});

/**
 * SelectionMode: Single Selection
 * @public
 */
sap.ui.model.SelectionModel.SINGLE_SELECTION = 0;

/**
 * SelectionMode: Multi Selection
 * @public
 */
sap.ui.model.SelectionModel.MULTI_SELECTION = 1;


/**
 * Returns the current selection mode.
 * @return {int} the current selection mode
 * @public
 */
sap.ui.model.SelectionModel.prototype.getSelectionMode = function() {
	return this.iSelectionMode;
};

/**
 * Sets the selection mode. The following list describes the accepted
 * selection modes:
 * <ul>
 * <li><code>sap.ui.model.SelectionModel.SINGLE_SELECTION</code> -
 *   Only one list index can be selected at a time. In this mode,
 *   <code>setSelectionInterval</code> and <code>addSelectionInterval</code> are
 *   equivalent, both replacing the current selection with the index
 *   represented by the second argument (the "lead").
 * <li><code>sap.ui.model.SelectionModel.MULTI_SELECTION</code> -
 *   In this mode, there's no restriction on what can be selected.
 * </ul>
 *
 * @param {int} iSelectionMode selection mode
 * @public
 */
sap.ui.model.SelectionModel.prototype.setSelectionMode = function(iSelectionMode) {
	this.iSelectionMode = iSelectionMode || sap.ui.model.SelectionModel.SINGLE_SELECTION;
};

/**
 * Returns true if the specified index is selected.
 * @return {boolean} true if the specified index is selected.
 * @public
 */
sap.ui.model.SelectionModel.prototype.isSelectedIndex = function(iIndex) {
	return jQuery.inArray(iIndex, this.aSelectedIndices) !== -1;
};

/**
 * Return the second index argument from the most recent call to
 * setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
 * @return {int} lead selected index
 * @public
 */
sap.ui.model.SelectionModel.prototype.getLeadSelectedIndex = function() {
	return this.iLeadIndex;
};

/**
 * Set the lead selection index.
 * @param {int} iLeadIndex sets the lead selected index
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @private
 */
sap.ui.model.SelectionModel.prototype.setLeadSelectedIndex = function(iLeadIndex) {
	jQuery.sap.assert(typeof iLeadIndex === "number", "iLeadIndex must be an integer");
	// TODO: do we want to have a specific behavior for the lead selection so
	//       that it could be handled in another way? if yes we should consider
	//       also to rework the dataset which is using this method
	//this.iLeadIndex = iLeadIndex;
	this.setSelectionInterval(iLeadIndex, iLeadIndex);
	return this;
};


/**
 * Returns the first selected index or -1 if the selection is empty.
 * @return {int} first selected index or -1
 * @private
 */
sap.ui.model.SelectionModel.prototype.getMinSelectionIndex = function() {
	if (this.aSelectedIndices.length > 0) {
		var aIndices = this.aSelectedIndices.sort(this.fnSort);
		return aIndices[0];
	} else {
		return -1;
	}
};

/**
 * Returns the last selected index or -1 if the selection is empty.
 * @return {int} last selected index or -1
 * @private
 */
sap.ui.model.SelectionModel.prototype.getMaxSelectionIndex = function() {
	if (this.aSelectedIndices.length > 0) {
		var aIndices = this.aSelectedIndices.sort(this.fnSortReverse);
		return aIndices[0];
	} else {
		return -1;
	}
};


/**
 * Returns the selected indices as array.
 *
 * @return {int[]} array of selected indices
 * @public
 */
sap.ui.model.SelectionModel.prototype.getSelectedIndices = function() {
	var aIndices = this.aSelectedIndices.sort(this.fnSort);
	return aIndices;
};


/**
 * Changes the selection to be equal to the range <code>iFromIndex</code> and <code>iToIndex</code>
 * inclusive. If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 *
 * In <code>SINGLE_SELECTION</code> selection mode, only <code>iToindex</iToIndex> is used.
 *
 * If this call results in a change to the current selection, then a
 * <code>SelectionChanged</code> event is fired.
 *
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.SelectionModel.prototype.setSelectionInterval = function(iFromIndex, iToIndex) {
	jQuery.sap.assert(typeof iFromIndex === "number", "iFromIndex must be an integer");
	jQuery.sap.assert(typeof iToIndex === "number", "iToIndex must be an integer");

	if (this.iSelectionMode === sap.ui.model.SelectionModel.SINGLE_SELECTION) {
		iFromIndex = iToIndex;
	}

	var iFrom = Math.min(iFromIndex, iToIndex);
	var iTo = Math.max(iFromIndex, iToIndex);

	// set new selection range, determine set of changed indices
	var aChangedRowIndices = this.aSelectedIndices.slice();
	var aSelectedIndices = [];
	for (var iIndex = iFrom; iIndex <= iTo; iIndex++) {
		aSelectedIndices.push(iIndex);
		var pos = jQuery.inArray(iIndex, aChangedRowIndices);
		if ( pos === -1 ) {
			aChangedRowIndices.push(iIndex);
		} else {
			aChangedRowIndices.splice(pos, 1);
		}
	}
	this._update(aSelectedIndices, iToIndex, aChangedRowIndices);
	return this;
};

/**
 * Changes the selection to be the union of the current selection
 * and the range between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 *
 * In <code>SINGLE_SELECTION</code> selection mode, this is equivalent
 * to calling <code>setSelectionInterval</code>, and only the second index
 * is used.
 *
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 *
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.SelectionModel.prototype.addSelectionInterval = function(iFromIndex, iToIndex) {
	jQuery.sap.assert(typeof iFromIndex === "number", "iFromIndex must be an integer");
	jQuery.sap.assert(typeof iToIndex === "number", "iToIndex must be an integer");

	if (this.iSelectionMode === sap.ui.model.SelectionModel.SINGLE_SELECTION) {
		return this.setSelectionInterval(iFromIndex, iToIndex);
	}

	var iFrom = Math.min(iFromIndex, iToIndex);
	var iTo = Math.max(iFromIndex, iToIndex);

	var aChangedRowIndices = [];
	var aSelectedIndices = this.aSelectedIndices;

	for (var iIndex = iFrom; iIndex <= iTo; iIndex++) {
		if (jQuery.inArray(iIndex, aSelectedIndices) === -1) {
			aSelectedIndices.push(iIndex);
			aChangedRowIndices.push(iIndex);
		}
	}
	this._update(aSelectedIndices, iTo, aChangedRowIndices);
	return this;
};

/**
 * Changes the selection to be the set difference of the current selection
 * and the indices between <code>iFromIndex</code> and <code>iToIndex</code> inclusive.
 * If <code>iFromIndex</code> is smaller than <code>iToIndex</code>, both parameters are swapped.
 *
 * If the range of removed selection indices includes the current lead selection,
 * then the lead selection will be unset (set to -1).
 *
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 *
 * @param {int} iFromIndex one end of the interval.
 * @param {int} iToIndex other end of the interval
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.SelectionModel.prototype.removeSelectionInterval = function(iFromIndex, iToIndex) {
	jQuery.sap.assert(typeof iFromIndex === "number", "iFromIndex must be an integer");
	jQuery.sap.assert(typeof iToIndex === "number", "iToIndex must be an integer");

	if (this.iSelectionMode === sap.ui.model.SelectionModel.SINGLE_SELECTION) {
		iFromIndex = iToIndex;
	}

	var iFrom = Math.min(iFromIndex, iToIndex);
	var iTo = Math.max(iFromIndex, iToIndex);

	var aChangedRowIndices = [];
	var aSelectedIndices = this.aSelectedIndices;
	var iLeadIndex = this.iLeadIndex;
	for (var iIndex = iFrom; iIndex <= iTo; iIndex++) {
		var iIndexToRemove = jQuery.inArray(iIndex, aSelectedIndices);
		if (iIndexToRemove > -1) {
			aSelectedIndices.splice(iIndexToRemove, 1);
			aChangedRowIndices.push(iIndex);
		}
		if (iIndex === this.iLeadIndex) {
			iLeadIndex = -1;
		}
	}
	this._update(aSelectedIndices, iLeadIndex, aChangedRowIndices);
	return this;
};


/**
 * Change the selection to the empty set and clears the lead selection.
 *
 * If this call results in a change to the current selection or lead selection, then a
 * <code>SelectionChanged</code> event is fired.
 *
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.SelectionModel.prototype.clearSelection = function() {
	if (this.aSelectedIndices.length > 0 || this.iLeadIndex !== -1 ) {
		this._update([], -1, this.aSelectedIndices.slice());
	}
	return this;
};


/**
 * Attach event-handler <code>fnFunction</code> to the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.SelectionModel.prototype.attachSelectionChanged = function(oData, fnFunction, oListener) {
	this.attachEvent("selectionChanged", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'selectionChanged' event of this <code>sap.ui.model.SelectionModel</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.SelectionModel.prototype.detachSelectionChanged = function(fnFunction, oListener) {
	this.detachEvent("selectionChanged", fnFunction, oListener);
	return this;
};

/**
 * Fire event 'selectionChanged' to attached listeners.
 *
 * Expects following event parameters:
 * <ul>
 * <li>'leadIndex' of type <code>int</code> Lead selection index.</li>
 * <li>'rowIndices' of type <code>int[]</code> Other selected indices (if available)</li>
 * </ul>
 *
 * @param {object} mArguments the arguments to pass along with the event.
 * @param {int} mArguments.leadIndex Lead selection index
 * @param {int[]} [mArguments.rowIndices] Other selected indices (if available)
 * @return {sap.ui.model.SelectionModel} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.SelectionModel.prototype.fireSelectionChanged = function(mArguments) {
	this.fireEvent("selectionChanged", mArguments);
	return this;
};

/**
 * Updates the selection models selected indices and the lead selection. Finally
 * it notifies the listeners with an array of changed row indices which can
 * either be removed or added to the selection model.

 * @param {int[]} aSelectedIndices selected row indices
 * @param {int} iLeadSelection lead selection index
 * @param {int[]} aChangedRowIndices changed row indices
 * @private
 */
sap.ui.model.SelectionModel.prototype._update = function(aSelectedIndices, iLeadSelection, aChangedRowIndices) {

	// create the event parameters with the changed row indices (sorted!)
	var mParams = {
		rowIndices: aChangedRowIndices && aChangedRowIndices.sort(this.fnSort)
	}

	// update the selected indices
	this.aSelectedIndices = aSelectedIndices; // TODO: sorting here could avoid additional sorts in min/max and get

	mParams.oldIndex = this.iLeadIndex;
	
	// update lead selection (in case of removing the lead selection it is -1)
	if (this.iLeadIndex !== iLeadSelection) {
		this.iLeadIndex = iLeadSelection;
		mParams.leadIndex = this.iLeadIndex;
	}

	// fire change event
  if ( aChangedRowIndices.length > 0 || typeof mParams.leadIndex !== "undefined" ) {
		this.fireSelectionChanged( mParams );
	}

};

}; // end of sap/ui/model/SelectionModel.js
if ( !jQuery.sap.isDeclared('sap.ui.model.SimpleType') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.SimpleType");






/**
 * Constructor for a new SimpleType.
 *
 * @class
 * This is an abstract base class for simple types.
 * @abstract
 *
 * @extends sap.ui.model.Type
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @param {object} [oFormatOptions] options as provided by concrete subclasses
 * @param {object} [oConstraints] constraints as supported by concrete subclasses
 * @public
 * @name sap.ui.model.SimpleType
 */
sap.ui.model.Type.extend("sap.ui.model.SimpleType", /** @lends sap.ui.model.SimpleType */ {

	constructor : function(oFormatOptions, oConstraints) {
		sap.ui.model.Type.apply(this, arguments);
		this.setFormatOptions(oFormatOptions || {});
		this.setConstraints(oConstraints || {});
		this.sName = "SimpleType";
	},

  metadata : {
  	"abstract" : true,
  	publicMethods : [
	    "setConstraints", "setFormatOptions", "formatValue", "parseValue", "validateValue"
	  ]
  }
	
});

/**
 * Creates a new subclass of class sap.ui.model.SimpleType with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.SimpleType.extend
 * @function
 */


/**
 * Format the given value in model representation to an output value in the given
 * internal type. This happens according to the format options, if target type is 'string'.
 * If oValue is not defined or null, null will be returned.
 *
 * @function
 * @name sap.ui.model.SimpleType.prototype.formatValue
 * @param {any} oValue the value to be formatted
 * @param {string} sInternalType the target type
 * @return {any} the formatted output value
 *
 * @public
 */

/**
 * Parse a value of an internal type to the expected value of the model type.
 *
 * @function
 * @name sap.ui.model.SimpleType.prototype.parseValue
 * @param {any} oValue the value to be parsed
 * @param {string} sInternalType the source type
 * @return {any} the parse result
 *
 * @public
 */

/**
 * Validate whether a given value in model representation is valid and meets the
 * defined constraints (if any).
 *
 * @function
 * @name sap.ui.model.SimpleType.prototype.validateValue
 * @param {any} oValue the value to be validated
 *
 * @public
 */

/**
 * Sets constraints for this type. This is meta information used when validating the
 * value, to ensure it meets certain criteria, e.g. maximum length, minimal amount
 *
 * @param {object} oConstraints the constraints to set for this type
 */
sap.ui.model.SimpleType.prototype.setConstraints = function(oConstraints) {
	this.oConstraints = oConstraints;
};

/**
 * Set format options for this type. This is meta information used when formatting and
 * parsing values, such as patterns for number and date formatting or maximum length
 *
 * @param {object} oFormatOptions the options to set for this type
 */
sap.ui.model.SimpleType.prototype.setFormatOptions = function(oFormatOptions) {
	this.oFormatOptions = oFormatOptions;
};
}; // end of sap/ui/model/SimpleType.js
if ( !jQuery.sap.isDeclared('sap.ui.model.TreeBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides an abstraction for list bindings
jQuery.sap.declare("sap.ui.model.TreeBinding");


/**
 * Constructor for TreeBinding
 *
 * @class
 * The TreeBinding is a specific binding for trees in the model, which can be used
 * to populate Trees.
 *
 * @param {sap.ui.model.Model} oModel
 * @param {string}
 *         sPath the path pointing to the tree / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s contained in an array (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional) 
 * @public
 * @name sap.ui.model.TreeBinding
 */
sap.ui.model.Binding.extend("sap.ui.model.TreeBinding", /** @lends sap.ui.model.TreeBinding */ {
	
	constructor : function(oModel, sPath, oContext, aFilters, mParameters){
		sap.ui.model.Binding.call(this, oModel, sPath, oContext, mParameters);
		this.aFilters = aFilters;
		this.bDisplayRootNode = mParameters && mParameters.displayRootNode === true;
	},

	metadata : {
		"abstract" : true,
		publicMethods : [
			"getRootContexts", "getNodeContexts", "hasChildren", "filter"
		]
	}
	
});

/**
 * Creates a new subclass of class sap.ui.model.TreeBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.TreeBinding.extend
 * @function
 */


// the 'abstract methods' to be implemented by child classes
/**
 * Returns the current value of the bound target
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype.getRootContexts
 * @return {Array} the array of child contexts for the root node
 *
 * @public
 */

/**
 * Returns the current value of the bound target
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype.getNodeContexts
 * @param {Object} oContext the context element of the node
 * @return {Array} the array of child contexts for the given node
 *
 * @public
 */

/**
 * Returns if the node has child nodes
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype.hasChildren
 * @param {Object} oContext the context element of the node
 * @return {boolean} true if node has children
 *
 * @public
 */

/**
 * Filters the tree according to the filter definitions.
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype.filter
 * @param {Array} aFilters Array of sap.ui.model.Filter objects
 *
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
 */
sap.ui.model.TreeBinding.prototype.attachFilter = function(fnFunction, oListener) {
	this.attachEvent("_filter", fnFunction, oListener);
};

/**
 * Detach event-handler <code>fnFunction</code> from the '_filter' event of this <code>sap.ui.model.TreeBinding</code>.<br/>
 * @param {function} fnFunction The function to call, when the event occurs.
 * @param {object} [oListener] object on which to call the given function.
 * @protected
 * @deprecated use the change event.
 */
sap.ui.model.TreeBinding.prototype.detachFilter = function(fnFunction, oListener) {
	this.detachEvent("_filter", fnFunction, oListener);
};

/**
 * Fire event _filter to attached listeners.
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @private
 * @deprecated use the change event. It now contains a parameter (reason : "filter") when a filter event is fired.
 */
sap.ui.model.TreeBinding.prototype._fireFilter = function(mArguments) {
	this.fireEvent("_filter", mArguments);
};

}; // end of sap/ui/model/TreeBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.ODataContextBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides an abstraction for list bindings
jQuery.sap.declare("sap.ui.model.odata.ODataContextBinding");


/**
 * Constructor for odata.ODataContextBinding
 *
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 *
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @abstract
 * @public
 * @name sap.ui.model.odata.ODataContextBinding
 */
sap.ui.model.ContextBinding.extend("sap.ui.model.odata.ODataContextBinding", /** @lends sap.ui.model.odata.ODataContextBinding */ {

	constructor : function(oModel, sPath, oContext, mParameters, oEvents){
		sap.ui.model.ContextBinding.call(this, oModel, sPath, oContext, mParameters, oEvents);
	}
});

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataContextBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.odata.ODataContextBinding.extend
 * @function
 */

/**
 * @see sap.ui.model.Binding.prototype.initialize
 */
sap.ui.model.odata.ODataContextBinding.prototype.initialize = function() {
	var that = this,
		sResolvedPath = this.oModel.resolve(this.sPath, this.oContext),
		oData = this.oModel._getObject(this.sPath, this.oContext),
		bReloadNeeded = this.oModel._isReloadNeeded(sResolvedPath, oData, this.mParameters);

	if (bReloadNeeded) {
		this.fireDataRequested();
	}
	this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function(oContext) {
		that.oElementContext = oContext;
		that._fireChange(); 
		if (bReloadNeeded) {
			that.fireDataReceived();
		}
	}, bReloadNeeded);
};

/**
 * @see sap.ui.model.ContextBinding.prototype.refresh
 */
sap.ui.model.odata.ODataContextBinding.prototype.refresh = function(bForceUpdate) {
	var that = this;

	//recreate Context: force update
	this.fireDataRequested();
	this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function(oContext) {
		if (that.oElementContext == oContext) {
			that.oModel.checkUpdate(true, oContext);
			if (bForceUpdate) {
				that._fireChange();
			}
		} else { 
			that.oElementContext = oContext;
			that._fireChange();
		}
		that.fireDataReceived();
	}, true);
};

/**
 * @see sap.ui.model.ContextBinding.prototype.setContext
 */
sap.ui.model.odata.ODataContextBinding.prototype.setContext = function(oContext) {
	var that = this, 
		sResolvedPath,
		oData,
		bReloadNeeded;
	
	if (this.oContext != oContext && this.isRelative()) {
		sResolvedPath = this.oModel.resolve(this.sPath, this.oContext),
		oData = this.oModel._getObject(this.sPath, this.oContext),
	 	bReloadNeeded = this.oModel._isReloadNeeded(sResolvedPath, oData, this.mParameters);
	
		this.oContext = oContext;
		if (bReloadNeeded) {
			this.fireDataRequested();
		}
		this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function(oContext) {
			that.oElementContext = oContext;
			that._fireChange();
			if (bReloadNeeded) {
				that.fireDataReceived();
			}
		}, bReloadNeeded);
	}
};
}; // end of sap/ui/model/odata/ODataContextBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.ODataListBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.model.odata.ODataListBinding
jQuery.sap.declare("sap.ui.model.odata.ODataListBinding");





/*global OData *///declare unusual global vars for JSLint/SAPUI5 validation

/**
 *
 * @class
 * List binding implementation for oData format
 *
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {array} [aSorters] initial sort order (can be either a sorter or an array of sorters)
 * @param {array} [aFilters] predefined filter/s (can be either a filter or an array of filters)
 * @param {object} [mParameters]
 * 
 * @name sap.ui.model.odata.ODataListBinding
 * @extends sap.ui.model.ListBinding
 */
sap.ui.model.ListBinding.extend("sap.ui.model.odata.ODataListBinding", /** @lends sap.ui.model.odata.ODataListBinding */ {

	constructor : function(oModel, sPath, oContext, aSorters, aFilters, mParameters) {
		sap.ui.model.ListBinding.apply(this, arguments);
		this.sFilterParams = null;
		this.sSortParams = null;
		this.sRangeParams = null;
		this.sCustomParams = this.oModel.createCustomParams(this.mParameters);
		this.iStartIndex = 0;
		this.bPendingChange = false;
		this.aKeys = [];
		this.bInitialized = false;

		// load the entity type for the collection only once and not e.g. every time when filtering
		if (!this.oModel.getServiceMetadata()) {
			var that = this,
			fnCallback = function(oEvent) {
				that._initSortersFilters();
				that.oModel.detachMetadataLoaded(fnCallback);
			}
			this.oModel.attachMetadataLoaded(this, fnCallback);
		} else {
			this._initSortersFilters();
		}

		// if nested list is already available, use the data and don't send additional requests
		// TODO: what if nested list is not complete, because it was too large?
		var oRef = this.oModel._getObject(this.sPath, this.oContext);
		if (jQuery.isArray(oRef)) {
			this.aKeys = oRef;
			this.iLength = oRef.length;
			this.bLengthFinal = true;
		}
		else {
			// call getLength when metadata is already loaded or don't do anything
			// if the the metadata gets loaded it will call a refresh on all bindings
			if (this.oModel.getServiceMetadata()) {
				this.resetData();
			}
		}

	},

	metadata : {
		publicMethods : [
			"getLength"
		]
	}

});

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataListBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.odata.ODataListBinding.extend
 * @function
 */

/**
 * Return contexts for the list
 *
 * @param {int} [iStartIndex=0] the start index of the requested contexts
 * @param {int} [iLength] the requested amount of contexts
 *
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.odata.ODataListBinding.prototype.getContexts = function(iStartIndex, iLength, iThreshold) {	

	this.bInitialized = true;
	this.iLastLength = iLength;
	this.iLastStartIndex = iStartIndex;
	this.iLastThreshold = iThreshold;
	
	//	Set default values if startindex, threshold or length are not defined
	if (!iStartIndex) {
		iStartIndex = 0;
	}
	if (!iLength) {
		iLength = this.oModel.iSizeLimit;
		if (this.bLengthFinal && this.iLength < iLength) {
			iLength = this.iLength;
		}
	}
	if (!iThreshold) {
		iThreshold = 0;
	}

	var bLoadContexts = true, 
		aContexts = this._getContexts(iStartIndex, iLength),
		oContextData = {},
		oSection;

	oSection = this.calculateSection(iStartIndex, iLength, iThreshold, aContexts);
	bLoadContexts = aContexts.length != iLength && !(this.bLengthFinal && aContexts.length >= this.iLength - iStartIndex);
	
	// check if metadata are already available
	if (this.oModel.getServiceMetadata()) {
		// If rows are missing send a request
		if (!this.bPendingRequest && oSection.length > 0 && (bLoadContexts || iLength < oSection.length)) {
			this.loadData(oSection.startIndex, oSection.length);
		} 	
	}
	
	if (this.bUseExtendedChangeDetection) {
		for (var i = 0; i < aContexts.length; i++) {
			oContextData[aContexts[i].getPath()] = aContexts[i].getObject();
		}

		//Check diff
		if (this.aLastContexts&& iStartIndex < this.iLastEndIndex) {
			var that = this;
			var aDiff = jQuery.sap.arrayDiff(this.aLastContexts, aContexts, function(oOldContext, oNewContext) {
				return jQuery.sap.equal(
						oOldContext && that.oLastContextData && that.oLastContextData[oOldContext.getPath()],
						oNewContext && oContextData && oContextData[oNewContext.getPath()]
					);
			});
			aContexts.diff = aDiff;
		}

		this.iLastEndIndex = iStartIndex + iLength;
		this.aLastContexts = aContexts.slice(0);
		this.oLastContextData = jQuery.extend(true, {}, oContextData);
	}
	
	return aContexts;
};

/**
 * Return contexts for the list
 *
 * @param {int} [iStartIndex=0] the start index of the requested contexts
 * @param {int} [iLength] the requested amount of contexts
 *
 * @return {Array} the contexts array
 * @private
 */
sap.ui.model.odata.ODataListBinding.prototype._getContexts = function(iStartIndex, iLength) {
	var aContexts = [],
		oContext,
		sKey;
	
	if (!iStartIndex) {
		iStartIndex = 0;
	}
	if (!iLength) {
		iLength = this.oModel.iSizeLimit;
		if (this.bLengthFinal && this.iLength < iLength) {
			iLength = this.iLength;
		}
	}
	
	//	Loop through known data and check whether we already have all rows loaded
	for (var i = iStartIndex; i < iStartIndex + iLength; i++) {
		sKey = this.aKeys[i];
		if (!sKey) {
			break;
		}
		oContext = this.oModel.getContext('/'+sKey);
		aContexts.push(oContext);
	}

	return aContexts;
};

/*
 * @private
 */
sap.ui.model.odata.ODataListBinding.prototype.calculateSection = function(iStartIndex, iLength, iThreshold, aContexts) {
	var bLoadNegativeEntries = false,
		iSectionLength,
		iSectionStartIndex,
		iPreloadedSubsequentIndex,
		iPreloadedPreviousIndex,
		iRemainingEntries,
		oSection = {},
		sKey;

	iSectionStartIndex = iStartIndex;
	iSectionLength = 0;

	// check which data exists before startindex; If all necessary data is loaded iPreloadedPreviousIndex stays undefined
	for (var i = iStartIndex; i >= Math.max(iStartIndex-iThreshold,0); i--) {
		sKey = this.aKeys[i];
		if (!sKey) {
			iPreloadedPreviousIndex = i+1;
			break;
		}
	}
	// check which data is already loaded after startindex; If all necessary data is loaded iPreloadedSubsequentIndex stays undefined
	for (var j = iStartIndex + iLength; j < iStartIndex + iLength + iThreshold; j++) {
		sKey = this.aKeys[j];
		if (!sKey) {
			iPreloadedSubsequentIndex = j;
			break;
		}
	}
	
	// calculate previous remaining entries
	iRemainingEntries = iStartIndex - iPreloadedPreviousIndex;
	if (iPreloadedPreviousIndex && iStartIndex > iThreshold && iRemainingEntries < iThreshold) {
		if (aContexts.length != iLength) {
			iSectionStartIndex = iStartIndex - iThreshold;
		} else {
			iSectionStartIndex = iPreloadedPreviousIndex - iThreshold;
		} 
		iSectionLength = iThreshold;
	}
	
	// No negative preload needed; move startindex if we already have some data
	if (iSectionStartIndex == iStartIndex) {
		iSectionStartIndex += aContexts.length;
	}
	
	//read the rest of the requested data
	if (aContexts.length != iLength) {
		iSectionLength += iLength - aContexts.length;
	}
	
	//calculate subsequent remaining entries
	iRemainingEntries = iPreloadedSubsequentIndex - iStartIndex - iLength;
	
	if (iRemainingEntries == 0) {
		iSectionLength += iThreshold;
	}
	
	if (iPreloadedSubsequentIndex && iRemainingEntries < iThreshold && iRemainingEntries > 0) {
			//check if we need to load previous entries; If not we can move the startindex
			if (iSectionStartIndex >= iStartIndex) {
				iSectionStartIndex = iPreloadedSubsequentIndex;
				iSectionLength += iThreshold;
			}
			
	}
	
	//check final length and adapt sectionLength if needed.
	if (this.bLengthFinal && this.iLength < (iSectionLength + iSectionStartIndex)) {
		iSectionLength = this.iLength - iSectionStartIndex;
	}
	
	oSection.startIndex = iSectionStartIndex;
	oSection.length = iSectionLength;
	
	return oSection;
};

/**
 * Setter for context
 * @param {Object} oContext the new context object
 */
sap.ui.model.odata.ODataListBinding.prototype.setContext = function(oContext) {
	if (this.oContext != oContext) {
		this.oContext = oContext;
		if (this.isRelative()) {
			// get new entity type with new context
			this.oEntityType = this._getEntityType();

			if (this.bInitialized){
				// if nested list is already available, use the data and don't send additional requests
				// TODO: what if nested list is not complete, because it was too large?
				var oRef = this.oModel._getObject(this.sPath, this.oContext);
				if (jQuery.isArray(oRef)) {
					this.aKeys = oRef;
					this.iLength = oRef.length;
					this.bLengthFinal = true;
					this._fireChange();
				}
				else {
					this.refresh();
				}
			} 
		}
	}
};

/**
 * Load list data from the server
 */
sap.ui.model.odata.ODataListBinding.prototype.loadData = function(iStartIndex, iLength) {

	var that = this;

	// create range parameters and store start index for sort/filter requests
	if (iStartIndex || iLength) {
		this.sRangeParams = "$skip=" + iStartIndex + "&$top=" + iLength;
		this.iStartIndex = iStartIndex;
	}
	else {
		iStartIndex = this.iStartIndex;
	}

	// create the request url
	var aParams = [];
	if (this.sRangeParams) { 
		aParams.push(this.sRangeParams);
	}
	if (this.sSortParams) {
		aParams.push(this.sSortParams);
	}
	if (this.sFilterParams) {
		aParams.push(this.sFilterParams);
	}
	if (this.sCustomParams) {
		aParams.push(this.sCustomParams);
	}
	aParams.push("$inlinecount=allpages");

	function fnSuccess(oData) {

		// Collecting contexts
		jQuery.each(oData.results, function(i, entry) {
			that.aKeys[iStartIndex + i] = that.oModel._getKey(entry);
		});

		// update iLength (only when the inline count is available)
		if (oData.__count) {
			that.iLength = parseInt(oData.__count, 10);
			that.bLengthFinal = true;
		}

		// if we got data and the results + startindex is larger than the
		// length we just apply this value to the length
		if (that.iLength < iStartIndex + oData.results.length) {
			that.iLength = iStartIndex + oData.results.length;
			that.bLengthFinal = false;
		}

		// if less entries are returned than have been requested
		// set length accordingly
		if (oData.results.length < iLength || iLength === undefined) {
			that.iLength = iStartIndex + oData.results.length;
			that.bLengthFinal = true;
		}

		// check if there are any results at all...
		if (oData.results.length == 0) {
			that.iLength = 0;
			that.bLengthFinal = true;
		}
		
		that.oRequestHandle = null;
		that.bPendingRequest = false;
		that.oModel.checkUpdate(false, that.oContext);
		that.fireDataReceived();
	}
	
	function fnError(oError) {
		that.oRequestHandle = null;
		that.bPendingRequest = false;
		that.fireDataReceived();
	}
	
	function fnUpdateHandle(oHandle) {
		that.oRequestHandle = oHandle;
	}
	
	var sPath = this.sPath,
		oContext = this.oContext;
		
	if (this.isRelative()) {
		sPath = this.oModel.resolve(sPath,oContext);
	}
	if (sPath) {
		this.bPendingRequest = true;
		// execute the request and use the metadata if available
		this.fireDataRequested();
		this.oModel._loadData(sPath, aParams, fnSuccess, fnError, false, fnUpdateHandle);
	}

};

/**
 * Return the length of the list
 *
 * @return {number} the length
 * @protected
 */
sap.ui.model.odata.ODataListBinding.prototype.getLength = function() {
	return this.iLength;
};

/**
 * Return the length of the list
 *
 * @return {number} the length
 */
sap.ui.model.odata.ODataListBinding.prototype._getLength = function() {

	var that = this;

	// create a request object for the data request
	var aParams = [];
	if (this.sFilterParams) {
		aParams.push(this.sFilterParams);
	}
	
	// use only custom params for count and not expand,select params
	if (this.mParameters && this.mParameters.custom) {
		var oCust = { custom: {}};
		jQuery.each(this.mParameters.custom, function (sParam, oValue){
			oCust.custom[sParam] = oValue;
		});
		aParams.push(this.oModel.createCustomParams(oCust));
	}
	
	function _handleSuccess(oData) {
		that.iLength = parseInt(oData, 10);
		that.bLengthFinal = true;
		if (that.iLength === 0) {
			jQuery.sap.delayedCall(0,this,function(){that.checkUpdate();});
		}
	}

	function _handleError(oXHR, sError, oError) {
		jQuery.sap.log.warning("Request for $count failed: " +
				sError,
				oXHR.responseText + "," +
				  oXHR.status + "," +
				  oXHR.statusText);
	}
	
	// Use context and check for relative binding
	var sPath = this.sPath,
		oContext = this.oContext;
	
	if (this.isRelative()) {
		if (oContext) {
			sPath = oContext + "/" + sPath;
		}
		else {
			sPath = this.oModel.isLegacySyntax() ? "/" + sPath : undefined;
		}
	}

	// Only send request, if path is defined
	if (sPath) {
		var oRequest = this.oModel._createRequest(sPath + "/$count", aParams, false),
		    bCache = this.oModel.bCache,
		    mHeaders = this.oModel.mCustomHeaders;
	
		// execute the request and use the metadata if available
		// (since $count requests are synchronous we skip the withCredentials here)
		jQuery.ajax({
			url: oRequest.requestUri,
			beforeSend: function (request)
            {
                request.setRequestHeader("Accept-Language", sap.ui.getCore().getConfiguration().getLanguage());
            },
			async: oRequest.async,
			cache: bCache,
			username: oRequest.user,
			password: oRequest.password,
			headers: mHeaders,
			success: _handleSuccess,
			error: _handleError
		});
	}
};

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event
 * if this is the case. For server side models this should refetch the data from the server.
 * To update a control, even if no data has been changed, e.g. to reset a control after failed
 * validation, please use the parameter bForceUpdate.
 * 
 * @param {boolean} bForceUpdate Update the bound control even if no data has been changed
 * 
 * @public
 */
sap.ui.model.odata.ODataListBinding.prototype.refresh = function(bForceUpdate) {
	this.abortPendingRequest();
	this.resetData();
	this._fireRefresh({reason: sap.ui.model.ChangeReason.Refresh});
};

/**
 * Initialize binding. Fires a refresh 
 * 
 * @public
 */
sap.ui.model.odata.ODataListBinding.prototype.initialize = function() {
	this._fireRefresh({reason: sap.ui.model.ChangeReason.Refresh});
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 *
 * @param {boolean} bForceUpdate
 */
sap.ui.model.odata.ODataListBinding.prototype.checkUpdate = function(bForceUpdate) {
	var bChangeReason = this.sChangeReason ? this.sChangeReason : sap.ui.model.ChangeReason.Change;
	if (!this.bUseExtendedChangeDetection) {
		this._fireChange({reason: bChangeReason});
	} else {
		var bChangeDetected = false;
		var that = this;
		if (this.aLastContexts && this.aLastContexts.length == 0) {
			bChangeDetected = true;
		} else if (this.aLastContexts) {
			//Get contexts for visible area and compare with stored contexts
			var aContexts = this._getContexts(this.iLastStartIndex, this.iLastLength, this.iLastThreshold);
			if (this.aLastContexts.length != aContexts.length) {
				bChangeDetected = true;
			} else {
				jQuery.each(this.aLastContexts, function(iIndex, oContext) {
					if (!jQuery.sap.equal(aContexts[iIndex].getObject(), that.oLastContextData[oContext.getPath()])) {
						bChangeDetected = true;
						return false;
					}
				});
			}
		}
		if (bChangeDetected || bForceUpdate) {
			this._fireChange({reason: bChangeReason});
		}
	}
	this.sChangeReason = undefined;
};

/**
 * Resets the current list data and length
 * 
 * @private
 */
sap.ui.model.odata.ODataListBinding.prototype.resetData = function() {	
	this.aKeys = [];
	this.iLength = 0;
	this.bLengthFinal = false;
	this.sChangeReason = undefined;
	if (this.oModel.isCountSupported()) {
		this._getLength();
	}
};

/**
 * Aborts the current pending request (if any)
 * 
 * This can be called if we are sure that the data from the current request is no longer relevant,
 * e.g. when filtering/sorting is triggered or the context is changed.
 * 
 * @private
 */
sap.ui.model.odata.ODataListBinding.prototype.abortPendingRequest = function() {	
	if (this.oRequestHandle) {
		this.oRequestHandle.abort();
 		this.oRequestHandle = null;
		this.bPendingRequest = false;
	}
};

/**
 * Sorts the list.
 *
 * @param {sap.ui.model.Sorter|Array} aSorters the Sorter or an array of sorter objects object which define the sort order
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining 
 * @public
 */
sap.ui.model.odata.ODataListBinding.prototype.sort = function(aSorters) {

	if (aSorters instanceof sap.ui.model.Sorter) {
		aSorters = [aSorters];
	}
	
	this.aSorters = aSorters;
	this.createSortParams(aSorters);

	// Only reset the keys, length usually doesn't change when sorting
	this.abortPendingRequest();
	this.aKeys = [];

	if (this.bInitialized) {
		if (this.oRequestHandle) {
			this.oRequestHandle.abort();
			this.oRequestHandle = null;
			this.bPendingRequest = false;
		}
		this.sChangeReason = sap.ui.model.ChangeReason.Sort;
		this._fireRefresh({reason : this.sChangeReason});
		// TODO remove this if the sort event gets removed which is now deprecated
		this._fireSort({sorter: aSorters});
	}
	return this;
};

/**
 * Create URL parameters for sorting
 */
sap.ui.model.odata.ODataListBinding.prototype.createSortParams = function(aSorters) {
	if (!aSorters || aSorters.length == 0) {
		return;
	}
	this.sSortParams = "$orderby=";
	for (var i=0; i < aSorters.length; i++) {
		var oSorter = aSorters[i];
		if(oSorter instanceof sap.ui.model.Sorter){
			this.sSortParams += oSorter.sPath;
			this.sSortParams += oSorter.bDescending ? "%20desc" : "%20asc";
			this.sSortParams += ",";
		}
	}
	//remove trailing comma
	this.sSortParams = this.sSortParams.slice(0,-1);

};


/**
 * 
 * Filters the list.
 * 
 * When using sap.ui.model.Filter the filters are first grouped according to their binding path.
 * All filters belonging to a group are ORed and after that the
 * results of all groups are ANDed.
 * Usually this means, all filters applied to a single table column
 * are ORed, while filters on different table columns are ANDed.
 * 
 * When using the specific sap.ui.model.odata.Filter it is possible to specify to AND or OR the filters with the same binding path:
 * Syntax: new sap.ui.model.odata.Filter(sPath, [{operator:sap.ui.model.FilterOperator, value1: oValue},
 *				                                 {operator: sap.ui.model.FilterOperator, value1: oValue}], bAND); // [bAND] = true
 * 
 * @param {sap.ui.model.Filter[]|sap.ui.model.odata.Filter[]} aFilters Array of filter objects
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining 
 * 
 * @public
 */
sap.ui.model.odata.ODataListBinding.prototype.filter = function(aFilters, sFilterType) {

	if (!aFilters) {
		aFilters = [];
	}
	
	if (aFilters instanceof sap.ui.model.Filter) {
		aFilters = [aFilters];
	}

	if (sFilterType == sap.ui.model.FilterType.Application) {
		this.aApplicationFilters = aFilters;
	} else {
		this.aFilters = aFilters;
	}
	
	aFilters = this.aFilters.concat(this.aApplicationFilters);
	
	if (!aFilters || !jQuery.isArray(aFilters) || aFilters.length == 0) {
		this.aFilters = [];
		this.aApplicationFilters = [];
	}

	this.createFilterParams(aFilters);
	this.abortPendingRequest();
	this.resetData();
	
	if (this.bInitialized) {
		if (this.oRequestHandle) {
			this.oRequestHandle.abort();
			this.oRequestHandle = null;
			this.bPendingRequest = false;
		}
		this.sChangeReason = sap.ui.model.ChangeReason.Filter;
		this._fireRefresh({reason : this.sChangeReason});
		// TODO remove this if the filter event gets removed which is now deprecated
		if (sFilterType == sap.ui.model.FilterType.Application) {
			this._fireFilter({filters: this.aApplicationFilters});
		} else {
			this._fireFilter({filters: this.aFilters});
		}
	}
	
	return this;
};

/**
 * Create URL parameters for filtering
 */
sap.ui.model.odata.ODataListBinding.prototype.createFilterParams = function(aFilters) {
	
	if(aFilters && aFilters.length > 0){
		var oFilterGroups = {},
			iFilterGroupLength = 0,
			aFilterGroup,
			sFilterParam = "$filter=",
			iFilterGroupCount = 0,
			that = this;
		//group filters by path
		jQuery.each(aFilters, function(j, oFilter) {
			if (oFilter.sPath) {
				aFilterGroup = oFilterGroups[oFilter.sPath];
				if (!aFilterGroup) {
					aFilterGroup = oFilterGroups[oFilter.sPath] = [];
					iFilterGroupLength++;
				}
			} else {
				aFilterGroup = oFilterGroups["__multiFilter"];
				if (!aFilterGroup) {
					aFilterGroup = oFilterGroups["__multiFilter"] = [];
					iFilterGroupLength++;
				}
			}
			aFilterGroup.push(oFilter);
		});
		jQuery.each(oFilterGroups, function(sPath, aFilterGroup) {
			if (aFilterGroup.length > 1) {
				sFilterParam += '(';
			}
			jQuery.each(aFilterGroup, function(i,oFilter) {
				if (oFilter instanceof sap.ui.model.odata.Filter) {
					if (oFilter.aValues.length > 1) {
						sFilterParam += '(';
					}
					jQuery.each(oFilter.aValues, function(i, oFilterSegment) {
						if (i > 0) {
							if(oFilter.bAND) {
								sFilterParam += "%20and%20";
							} else {
								sFilterParam += "%20or%20";
							}
						}
						sFilterParam = that._createFilterSegment(oFilter.sPath, oFilterSegment.operator, oFilterSegment.value1, oFilterSegment.value2, sFilterParam);
					});
					if (oFilter.aValues.length > 1) {
						sFilterParam += ')';
					}
				} else if (oFilter._bMultiFilter) {
					sFilterParam += that._resolveMultiFilter(oFilter);
				} else {
					sFilterParam = that._createFilterSegment(oFilter.sPath, oFilter.sOperator, oFilter.oValue1, oFilter.oValue2, sFilterParam);
				}
				if (i < aFilterGroup.length-1) {
					sFilterParam += "%20or%20";
				}
			});
			if (aFilterGroup.length > 1) {
				sFilterParam += ')';
			}
			if (iFilterGroupCount < iFilterGroupLength-1) {
				sFilterParam += "%20and%20";
			}
			iFilterGroupCount++;
		});
		this.sFilterParams = sFilterParam;
	}else{
		this.sFilterParams = null;
	}
};

/**
 * convert multi filter to filter string
 *
 * @private
 */
sap.ui.model.odata.ODataListBinding.prototype._resolveMultiFilter = function(oMultiFilter){
	var that = this,
		aFilters = oMultiFilter.aFilters,
		sFilterParam = "";
	
	if (aFilters) {
		sFilterParam += "(";
		jQuery.each(aFilters, function(i, oFilter) {
			var bLocalMatch = false;
			if (oFilter._bMultiFilter) {
				sFilterParam += that._resolveMultiFilter(oFilter)
			} else if (oFilter.sPath) {
				sFilterParam += that._createFilterSegment(oFilter.sPath, oFilter.sOperator, oFilter.oValue1, oFilter.oValue2, "");
			}
			if (i < (aFilters.length - 1)) {
				if (oMultiFilter.bAnd) {
					sFilterParam += "%20and%20";
				} else {
					sFilterParam += "%20or%20";
				}
			}
		});
		sFilterParam += ")";
	}
	
	return sFilterParam;
};

sap.ui.model.odata.ODataListBinding.prototype._createFilterSegment = function(sPath, sOperator, oValue1, oValue2, sFilterParam) {
	
	var oProperty;
	if (this.oEntityType) {
		oProperty = this.oModel.oMetadata._getPropertyMetadata(this.oEntityType, sPath);
		jQuery.sap.assert(oProperty, "PropertyType for property "+ sPath + " of EntityType " + this.oEntityType.name + " not found!");
	}
	
	if (oProperty) {
		oValue1 = this.oModel.formatValue(oValue1, oProperty.type);
		oValue2 = (oValue2 != null) ? this.oModel.formatValue(oValue2, oProperty.type) : null;
	} else {
		jQuery.sap.assert(null, "Type for filter property could not be found in metadata!");
	}
	
	if (oValue1) {
		oValue1 = jQuery.sap.encodeURL(String(oValue1));
	}
	if (oValue2) {
		oValue2 = jQuery.sap.encodeURL(String(oValue2));
	}
	
	// TODO embed 2nd value
	switch(sOperator) {
		case "EQ":
		case "NE":
		case "GT":
		case "GE":
		case "LT":
		case "LE":
			sFilterParam += sPath + "%20" + sOperator.toLowerCase() + "%20" + oValue1;
			break;
		case "BT":
			sFilterParam += "(" + sPath + "%20ge%20" + oValue1 + "%20and%20" + sPath + "%20le%20" + oValue2 + ")";
			break;
		case "Contains":
			sFilterParam += "substringof(" + oValue1 + "," + sPath + ")";
			break;
		case "StartsWith":
			sFilterParam += "startswith(" + sPath + "," + oValue1 + ")";
			break;
		case "EndsWith":
			sFilterParam += "endswith(" + sPath + "," + oValue1 + ")";
			break;
		default:
			sFilterParam += "true";
	}
	return sFilterParam;
};

sap.ui.model.odata.ODataListBinding.prototype._initSortersFilters = function(){
	this.oEntityType = this._getEntityType();	
	this.createSortParams(this.aSorters);
	this.createFilterParams(this.aFilters.concat(this.aApplicationFilters));
};

sap.ui.model.odata.ODataListBinding.prototype._getEntityType = function(){
	var sResolvedPath = this.oModel.resolve(this.sPath, this.oContext);
	
	if (sResolvedPath) {
		var oEntityType = this.oModel.oMetadata._getEntityTypeByPath(sResolvedPath);
		jQuery.sap.assert(oEntityType, "EntityType for path " + sResolvedPath + " could not be found!");
		return oEntityType;
		
	}
	return undefined;
};

}; // end of sap/ui/model/odata/ODataListBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.ODataTreeBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the OData model implementation of a tree binding
jQuery.sap.declare("sap.ui.model.odata.ODataTreeBinding");


/**
*
* @class
* Tree binding implementation for client models
*
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {array} [aFilters] predefined filter/s (can be either a filter or an array of filters)
 * @param {object} [mParameters]
 * 
* @name sap.ui.model.odata.ODataTreeBinding
* @extends sap.ui.model.TreeBinding
*/
sap.ui.model.TreeBinding.extend("sap.ui.model.odata.ODataTreeBinding", /** @lends sap.ui.model.odata.ODataTreeBinding */ {

	constructor : function(oModel, sPath, oContext, aFilters, mParameters){
		sap.ui.model.TreeBinding.apply(this, arguments);

		this.bPendingRequest = false;
		this.oFinalLengths = {};
		this.oLengths = {};
		this.oKeys = {};
		if (!mParameters || !mParameters.navigation) {
			jQuery.sap.log.error("A navigation paths parameter object has to be defined");
			this.oNavigationPaths = {};
		} else {
			this.oNavigationPaths = mParameters.navigation;
		}
	}

});

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataTreeBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.odata.ODataTreeBinding.extend
 * @function
 */

/**
 * Return root contexts for the tree
 *
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.odata.ODataTreeBinding.prototype.getRootContexts = function() {
	var sNavPath = this._getNavPath(this.sPath),
		that = this,
		oContext;

	if (!this.oModel.isList(this.sPath)) {
		//An context is bound
		if (this.bDisplayRootNode) {
			//Get the binding context for the root element, it is created if it doesn't exist yet
			this.oModel.createBindingContext(this.sPath, null, { expand: sNavPath }, function(oNewContext) {
				oContext = oNewContext;
				if (that.oRootContext !== oNewContext) {
					that.oRootContext = oNewContext;
					that._fireChange();
				} else {
					var oData = that.oModel.oData[oContext.getPath().substr(1)];
					that._processODataObject(oData, oContext.getPath(), sNavPath);
				}
			}, false);
			if (oContext) {
				return [oContext];
			} else {
				return [];
			}
		} else {
			//We don't really need the data from the root context, that's why we don'z use createbindingContext here which would load the data
			oContext = this.oModel.getContext(this.sPath);
			return this.getNodeContexts(oContext);
		}
	} else {
		//An aggregation is bound
		return this._getContextsForPath(this.sPath, sNavPath);
	}

};

/**
 * Return node contexts for the tree
 * @param {object} oContext to use for retrieving the node contexts
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.odata.ODataTreeBinding.prototype.getNodeContexts = function(oContext) {

	var sNavPath = this._getNavPath(oContext.getPath()),
		sAbsolutePath;

	//If no nav path was found no nav property is defined and we cannot find any more data
	if (!sNavPath) {
		return [];
	}

	sAbsolutePath = this.oModel.resolve(sNavPath, oContext);
	sNavPath = this.oNavigationPaths[sNavPath];
	
	return this._getContextsForPath(sAbsolutePath, sNavPath);

};

/**
 * Returns if the node has child nodes
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype.hasChildren
 * @param {Object} oContext the context element of the node
 * @return {boolean} true if node has children
 *
 * @public
 */
sap.ui.model.odata.ODataTreeBinding.prototype.hasChildren = function(oContext) {
	return oContext && this.oLengths[oContext.getPath()] > 0;
};

/**
 * Gets or loads all contexts for a specified path
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype._getContextsForPath
 * @param {String} sAbsolutePath the absolute path to be loaded
 * @param {String} sNavPath the nav path which defines the expand parameter
 * @return {boolean} true if node has children
 *
 * @private
 */
sap.ui.model.odata.ODataTreeBinding.prototype._getContextsForPath = function(sAbsolutePath, sNavPath) {
	var aContexts = [],
		iLength = this.oModel.iSizeLimit,
		bLoadContexts,
		sKey;

	if (this.oFinalLengths && this.oFinalLengths[sAbsolutePath] && this.oLengths[sAbsolutePath] < iLength) {
		iLength = this.oLengths[sAbsolutePath];
	}

	// Loop through known data and check whether we already have all rows loaded
	if (this.oKeys[sAbsolutePath]) {
		for (var i = 0; i < iLength; i++) {
			sKey = this.oKeys[sAbsolutePath][i];
			if (!sKey) {
				break;
			}
			aContexts.push(this.oModel.getContext('/'+sKey));
		}
	}

	bLoadContexts = aContexts.length != iLength && !(this.oFinalLengths[sAbsolutePath] && aContexts.length >= this.oLengths[sAbsolutePath]);

	// check if metadata are already available
	if (this.oModel.getServiceMetadata()) {
		// If rows are missing send a request
		if (!this.bPendingRequest && bLoadContexts) {
			this.loadSubNodes(sAbsolutePath, sNavPath);
		}
	}

	return aContexts;
};

/**
 * Load list data from the server
 */
sap.ui.model.odata.ODataTreeBinding.prototype.loadSubNodes = function(sAbsolutePath, sNavPath) {
	var that = this,
		aParams = [];

	if (sNavPath) {
		aParams.push("$expand=" + sNavPath);
	}

	function fnSuccess(oData) {

		// Collecting contexts
		that.oLengths[sAbsolutePath] = oData.results.length;
		that.oFinalLengths[sAbsolutePath] = true;
		that.oKeys[sAbsolutePath] = [];
		for (var i=0; i < oData.results.length; i++) {
			var oEntry = oData.results[i];
			that._processODataObject(oEntry, sAbsolutePath, sNavPath);
			that.oKeys[sAbsolutePath].push(that.oModel._getKey(oEntry));
		}

		that.oRequestHandle = null;
		that.bPendingRequest = false;
		that.oModel.checkUpdate(false, this.oContext);
		that.fireDataReceived();
	}

	function fnError(oData) {
		that.oRequestHandle = null;
		that.bPendingRequest = false;
		that.fireDataReceived();
	}

	function fnUpdateHandle(oHandle) {
		that.oRequestHandle = oHandle;
	}

	if (sAbsolutePath) {
		if (!this.oFinalLengths[sAbsolutePath]) {
			this.bPendingRequest = true;
			// execute the request and use the metadata if available
			this.fireDataRequested();
			this.oModel._loadData(sAbsolutePath, aParams, fnSuccess, fnError, false, fnUpdateHandle);
		}
	}
};

/**
 * Resets the current list data and length
 * 
 * @private
 */
sap.ui.model.odata.ODataTreeBinding.prototype.resetData = function(oContext) {
	if (oContext) {
		//Only reset specific content
		var sPath = oContext.getPath();

		delete this.oKeys[sPath];
		delete this.oLengths[sPath];
		delete this.oFinalLengths[sPath];
	} else {
		this.oKeys = {};
		this.oLengths = {};
		this.oFinalLengths = {};
	}
};

/**
 * Refreshes the binding, check whether the model data has been changed and fire change event
 * if this is the case. For server side models this should refetch the data from the server.
 * To update a control, even if no data has been changed, e.g. to reset a control after failed
 * validation, please use the parameter bForceUpdate.
 * 
 * @param {boolean} bForceUpdate Update the bound control even if no data has been changed
 * 
 * @public
 */
sap.ui.model.odata.ODataTreeBinding.prototype.refresh = function(bForceUpdate) {
	this.resetData();
	this.checkUpdate(bForceUpdate);
};

/**
 * @see sap.ui.model.TreeBinding.prototype.filter
 * @public
 */
sap.ui.model.odata.ODataTreeBinding.prototype.filter = function(aFilters){
	jQuery.sap.log.warning("Filtering is currently not possible in the ODataTreeBinding");
	return this;
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * 
 * @param {boolean} bForceupdate
 * 
 */
sap.ui.model.odata.ODataTreeBinding.prototype.checkUpdate = function(bForceupdate){
	this._fireChange();
};

sap.ui.model.odata.ODataTreeBinding.prototype._getNavPath = function(sPath) {
	//Check the last part of the path
	var sEntityName = sPath.substr(1),
		sNavPath;
	//Only if part contains "(" we are working on a specific entity with children
	var sCurrent = sEntityName.split("(")[0];
	if (sCurrent && this.oNavigationPaths[sCurrent]) {
		//Replace context with subitems context
		sNavPath = this.oNavigationPaths[sCurrent];
	}
	return sNavPath;
};

sap.ui.model.odata.ODataTreeBinding.prototype._processODataObject = function(oObject, sAbsolutePath, sNavPath) {
	var sKey = this.oModel._getKey(oObject),
		oContext = this.oModel.getContext("/" + sKey),
		sPath = oContext.getPath();

	var oRef = this.oModel._getObject(sNavPath, oContext);
	if (jQuery.isArray(oRef)) {
		this.oKeys[sPath] = oRef;
		this.oLengths[sPath] = oRef.length;
		this.oFinalLengths[sPath] = true;
	} else if (typeof oRef === "object") {
		this.oKeys[sPath] = [oRef];
		this.oLengths[sPath] = 0;
		this.oFinalLengths[sPath] = true;
	} else {
		if (sNavPath && oObject[sNavPath].__list) {
			this.oKeys[sPath] = oObject[sNavPath].__list;
			this.oLengths[sPath] = this.oKeys[sPath].length;
			this.oFinalLengths[sPath] = true;
		} else {
			this.oKeys[sAbsolutePath] = [];
			this.oLengths[sAbsolutePath] = 0;
			this.oFinalLengths[sAbsolutePath] = false;
		}
	}
};
}; // end of sap/ui/model/odata/ODataTreeBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.type.Boolean') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.Boolean");



/**
 * Constructor for a Boolean type.
 *
 * @class
 * This class represents boolean simple types.
 *
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. Boolean doesn't support any specific format options
 * @param {object} [oConstraints] value constraints. Boolean doesn't support additional constraints
 * @name sap.ui.model.type.Boolean
 */
sap.ui.model.SimpleType.extend("sap.ui.model.type.Boolean", /** @lends sap.ui.model.type.Boolean */ {
	
	constructor : function () {
		sap.ui.model.SimpleType.apply(this, arguments);
		this.sName = "Boolean";
	}

});

/**
 * Creates a new subclass of class sap.ui.model.type.Boolean with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.type.Boolean.extend
 * @function
 */

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.Boolean.prototype.formatValue = function(bValue, sInternalType) {
	if (bValue == undefined || bValue == null) {
		return null;
	}
	switch(sInternalType) {
		case "boolean":
			return bValue;
		case "string":
			return bValue.toString();
		case "int": // TODO return 1 for true?!
		case "float":
		default:
			throw new sap.ui.model.FormatException("Don't know how to format Boolean to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.Boolean.prototype.parseValue = function(oValue, sInternalType) {
	var sResult;
	switch(sInternalType) {
		case "boolean":
			return oValue;
		case "string":
			if (oValue.toLowerCase() == "true" || oValue == "X"){
				return true;
			}
			if (oValue.toLowerCase() == "false" || oValue == ""){
				return false;
			}
			throw new sap.ui.model.ParseException("Don't know how to parse Boolean from " + sInternalType);
		case "int": // TODO return 1 for true?!
		case "float":
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse Boolean from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.Boolean.prototype.validateValue = function(sValue) {

};


}; // end of sap/ui/model/type/Boolean.js
if ( !jQuery.sap.isDeclared('sap.ui.model.type.Date') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.Date");



/**
 * Constructor for a Date type.
 *
 * @class
 * This class represents date simple types.
 *
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @param {object} [oFormatOptions] options used to create a DateFormat for formatting / parsing. Supports the same options as {@link sap.ui.core.format.DateFormat.getDateInstance DateFormat.getDateInstance}
 * @param {object} [oFormatOptions.source] additional set of options used to create a second DateFormat object for conversions between 
 *           string values in the data source (e.g. model) and Date. This second format object is used to convert from a model string to Date before 
 *           converting the Date to string with the primary format object. Vice versa, this 'source' format is also used to format an already parsed 
 *           external value (e.g. user input) into the string format expected by the data source.
 *           Supports the same set of options as {@link sap.ui.core.format.DateFormat.getDateInstance DateFormat.getDateInstance}.
 * @param {object} [oConstraints] value constraints. 
 * @param {Date|string} [oConstraints.minimum] smallest value allowed for this type. Values for constraints must use the same type as configured via <code>oFormatOptions.source</code>  
 * @param {Date|string} [oConstraints.maximum] largest value allowed for this type. Values for constraints must use the same type as configured via <code>oFormatOptions.source</code>  
 * @name sap.ui.model.type.Date
 */
sap.ui.model.SimpleType.extend("sap.ui.model.type.Date", /** @lends sap.ui.model.type.Date */ {
	
	constructor : function () {
		sap.ui.model.SimpleType.apply(this, arguments);
		this.sName = "Date";
	}

});

/**
 * Creates a new subclass of class sap.ui.model.type.Date with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.type.Date.extend
 * @function
 */

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.Date.prototype.formatValue = function(oValue, sInternalType) {
	switch(sInternalType) {
		case "string":
			if (oValue == null) {
				return "";
			}
			if (this.oInputFormat) {
				if (this.oFormatOptions.source.pattern == "timestamp") {
					if(typeof(oValue) != "number"){
						if (isNaN(oValue)) {
							throw new sap.ui.model.FormatException("Cannot format date: " + oValue + " is not a valid Timestamp");
						}else{
							oValue = parseInt(oValue, 10);
						}
					}
					oValue= new Date(oValue);
				}else{
					if (oValue == "") {
						return "";
					}
					oValue = this.oInputFormat.parse(oValue);
					if (oValue == null) {
						throw new sap.ui.model.FormatException("Cannot format date: " + oValue + " has the wrong format");
					}
				}
			}
			return this.oOutputFormat.format(oValue);
		default:
			throw new sap.ui.model.FormatException("Don't know how to format Date to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.Date.prototype.parseValue = function(oValue, sInternalType) {
	var oResult;
	switch(sInternalType) {
		case "string":
			if (oValue === "") {
				return null;
			}
			var oResult = this.oOutputFormat.parse(oValue);
			if (!oResult) {
				throw new sap.ui.model.ParseException(oValue + " is not a valid Date value");
			}
			if (this.oInputFormat) {
				if (this.oFormatOptions.source.pattern == "timestamp") {
					oResult = oResult.getTime();
				}else{
					oResult = this.oInputFormat.format(oResult);
				}
			}
			return oResult;
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse Date from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.Date.prototype.validateValue = function(oValue) {
	if (this.oConstraints) {
		var aViolatedConstraints = [],
			oInputFormat = this.oInputFormat;

		// convert date into date object to compare
		if (oInputFormat && this.oFormatOptions.source.pattern != "timestamp"){
			oValue = oInputFormat.parse(oValue);
		}

		jQuery.each(this.oConstraints, function(sName, oContent) {
			if (oInputFormat){
				oContent = oInputFormat.parse(oContent);
			}
			switch (sName) {
				case "minimum":
					if (oValue < oContent) {
						aViolatedConstraints.push("minimum");
					}
					break;
				case "maximum":
					if (oValue > oContent) {
						aViolatedConstraints.push("maximum");
					}
			}
		});
		if (aViolatedConstraints.length > 0) {
			throw new sap.ui.model.ValidateException("Validation of type constraints failed", aViolatedConstraints);
		}
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.setFormatOptions
 */
sap.ui.model.type.Date.prototype.setFormatOptions = function(oFormatOptions) {
	this.oFormatOptions = oFormatOptions;
	this._handleLocalizationChange();
};

/**
 * @protected
 */
sap.ui.model.type.Date.prototype.getOutputPattern = function() {

	return this.oOutputFormat.oFormatOptions.pattern;

};

/**
 * Called by the framework when any localization setting changed
 * @private
 */
sap.ui.model.type.Date.prototype._handleLocalizationChange = function() {
	// recreate formatters
	this.oOutputFormat = sap.ui.core.format.DateFormat.getInstance(this.oFormatOptions);
	if (this.oFormatOptions.source) {
		this.oInputFormat = sap.ui.core.format.DateFormat.getInstance(this.oFormatOptions.source);
	}
};


}; // end of sap/ui/model/type/Date.js
if ( !jQuery.sap.isDeclared('sap.ui.model.type.DateTime') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.DateTime");


/**
 * Constructor for a DateTime type.
 *
 * @class
 * This class represents datetime simple types.
 *
 * @extends sap.ui.model.type.Date
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @param {object} [oFormatOptions] options used to create a DateFormat for formatting / parsing to/from external values and 
 *           optionally for a second DateFormat to convert between the data source format (Model) and the internally used JavaScript Date.format. 
 *           For both DateFormat objects, the same options are supported as for {@link sap.ui.core.format.DateFormat.getDateTimeInstance DateFormat.getDateTimeInstance}.
 *           Note that this differs from the base type.
 * @param {object} [oConstraints] value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. DateTime) 
 * @name sap.ui.model.type.DateTime
 */
sap.ui.model.type.Date.extend("sap.ui.model.type.DateTime", /** @lends sap.ui.model.type.DateTime */ {
	
	constructor : function () {
		sap.ui.model.type.Date.apply(this, arguments);
		this.sName = "DateTime";
	}

});

/**
 * Creates a new subclass of class sap.ui.model.type.DateTime with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.type.DateTime.extend
 * @function
 */

/**
 * Called by the framework when any localization setting changed
 * @see sap.ui.model.Date.prototype._handleLocalizationChange
 * @private
 */
sap.ui.model.type.DateTime.prototype._handleLocalizationChange = function() {
	this.oOutputFormat = sap.ui.core.format.DateFormat.getDateTimeInstance(this.oFormatOptions);
	if (this.oFormatOptions.source) {
		this.oInputFormat = sap.ui.core.format.DateFormat.getDateTimeInstance(this.oFormatOptions.source);
	}
};


}; // end of sap/ui/model/type/DateTime.js
if ( !jQuery.sap.isDeclared('sap.ui.model.type.Float') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.Float");



/**
 * Constructor for a Float type.
 *
 * @class
 * This class represents float simple types.
 *
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getFloatInstance NumberFormat.getFloatInstance}
 * @param {object} [oConstraint]s value constraints. 
 * @param {float} [oConstraints.minimum] smallest value allowed for this type  
 * @param {float} [oConstraints.maximum] largest value allowed for this type  
 * @name sap.ui.model.type.Float 
 */
sap.ui.model.SimpleType.extend("sap.ui.model.type.Float", /** @lends sap.ui.model.type.Float  */ {
	
	constructor : function () {
		sap.ui.model.SimpleType.apply(this, arguments);
		this.sName = "Float";
	}

});

/**
 * Creates a new subclass of class sap.ui.model.type.Float with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.type.Float.extend
 * @function
 */

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.Float.prototype.formatValue = function(fValue, sInternalType) {
	if (fValue == undefined || fValue == null) {
		return null;
	}
	switch(sInternalType) {
		case "string":
			return this.oFormat.format(fValue);
		case "int":
			return Math.floor(fValue);
		case "float":
			return fValue;
		default:
			throw new sap.ui.model.FormatException("Don't know how to format Float to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.Float.prototype.parseValue = function(oValue, sInternalType) {
	var iResult;
	switch(sInternalType) {
		case "string":
			iResult = this.oFormat.parse(oValue);
			if (isNaN(iResult)) {
				throw new sap.ui.model.ParseException(oValue + " is not a valid Float value");
			}
			return iResult;
		case "int":
		case "float":
			return oValue;
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse Float from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.Float.prototype.validateValue = function(iValue) {
	if (this.oConstraints) {
		var aViolatedConstraints = [];
		jQuery.each(this.oConstraints, function(sName, oContent) {
			switch (sName) {
				case "minimum":
					if (iValue < oContent) {
						aViolatedConstraints.push("minimum");
					}
					break;
				case "maximum":
					if (iValue > oContent) {
						aViolatedConstraints.push("maximum");
					}
			}
		});
		if (aViolatedConstraints.length > 0) {
			throw new sap.ui.model.ValidateException("Validation of type constraints failed", aViolatedConstraints);
		}
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.setFormatOptions
 */
sap.ui.model.type.Float.prototype.setFormatOptions = function(oFormatOptions) {
	this.oFormatOptions = oFormatOptions;
	this._handleLocalizationChange();
};

/**
 * Called by the framework when any localization setting changed
 * @private
 */
sap.ui.model.type.Float.prototype._handleLocalizationChange = function() {
	this.oFormat = sap.ui.core.format.NumberFormat.getFloatInstance(this.oFormatOptions);
};

}; // end of sap/ui/model/type/Float.js
if ( !jQuery.sap.isDeclared('sap.ui.model.type.Integer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.Integer");



/**
 * Constructor for a Integer type.
 *
 * @class
 * This class represents integer simple types.
 *
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. Supports the same options as {@link sap.ui.core.format.NumberFormat.getIntegerInstance NumberFormat.getIntegerInstance}
 * @param {object} [oConstraints] value constraints. 
 * @param {int} [oConstraints.minimum] smallest value allowed for this type  
 * @param {int} [oConstraints.maximum] largest value allowed for this type  
 * @name sap.ui.model.type.Integer
 */
sap.ui.model.SimpleType.extend("sap.ui.model.type.Integer", /** @lends sap.ui.model.type.Integer */ {
	
	constructor : function () {
		sap.ui.model.SimpleType.apply(this, arguments);
		this.sName = "Integer";
	}

});

/**
 * Creates a new subclass of class sap.ui.model.type.Integer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.type.Integer.extend
 * @function
 */

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.Integer.prototype.formatValue = function(iValue, sInternalType) {
	if (iValue == undefined || iValue == null) {
		return null;
	}
	switch(sInternalType) {
		case "string":
			return this.oFormat.format(iValue);
		case "int":
		case "float":
			return iValue;
		default:
			throw new sap.ui.model.FormatException("Don't know how to format Integer to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.Integer.prototype.parseValue = function(oValue, sInternalType) {
	var iResult;
	switch(sInternalType) {
		case "float":
		case "string":
			iResult = this.oFormat.parse(String(oValue));
			if (isNaN(iResult)) {
				throw new sap.ui.model.ParseException(oValue + " is not a valid Integer value");
			}
			return iResult;
		case "int":
			return oValue;
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse Integer from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.Integer.prototype.validateValue = function(iValue) {
	if (this.oConstraints) {
		var aViolatedConstraints = [];
		jQuery.each(this.oConstraints, function(sName, oContent) {
			switch (sName) {
				case "minimum":
					if (iValue < oContent) {
						aViolatedConstraints.push("minimum");
					}
					break;
				case "maximum":
					if (iValue > oContent) {
						aViolatedConstraints.push("maximum");
					}
			}
		});
		if (aViolatedConstraints.length > 0) {
			throw new sap.ui.model.ValidateException("Validation of type constraints failed", aViolatedConstraints);
		}
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.setFormatOptions
 */
sap.ui.model.type.Integer.prototype.setFormatOptions = function(oFormatOptions) {
	this.oFormatOptions = oFormatOptions;
	this._handleLocalizationChange();
};

/**
 * Called by the framework when any localization setting changed
 * @private
 */
sap.ui.model.type.Integer.prototype._handleLocalizationChange = function() {
	this.oFormat = sap.ui.core.format.NumberFormat.getIntegerInstance(this.oFormatOptions);
};

}; // end of sap/ui/model/type/Integer.js
if ( !jQuery.sap.isDeclared('sap.ui.model.type.String') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.String");



/**
 * Constructor for a String type.
 *
 * @class
 * This class represents string simple types.
 *
 * @extends sap.ui.model.SimpleType
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @param {object} [oFormatOptions] formatting options. String doesn't support any formatting options
 * @param {object} [oConstraints] value constraints. All given constraints must be fulfilled by a value to be valid  
 * @param {int} [oConstraints.maxLength] maximum length (in characters) that a string of this value may have  
 * @param {string} [oConstraints.startsWith] a prefix that any valid value must start with  
 * @param {string} [oConstraints.startsWithIgnoreCase] a prefix that any valid value must start with, ignoring case  
 * @param {string} [oConstraints.endsWith] a suffix that any valid value must end with  
 * @param {string} [oConstraints.endsWithIgnoreCase] a suffix that any valid value must end with, ignoring case  
 * @param {string} [oConstraints.contains] an infix that must be contained in any valid value  
 * @param {string} [oConstraints.equals] only value that is allowed  
 * @param {RegExp} [oConstraints.search] a regular expression that the value must match  
 * @name sap.ui.model.type.String
 */
sap.ui.model.SimpleType.extend("sap.ui.model.type.String", /** @lends sap.ui.model.type.String */ {
	
	constructor : function () {
		sap.ui.model.SimpleType.apply(this, arguments);
		this.sName = "String";
		if (this.oConstraints.search && typeof this.oConstraints.search == "string") {
			this.oConstraints.search = new RegExp(this.oConstraints.search);
		}
	}

});

/**
 * Creates a new subclass of class sap.ui.model.type.String with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.type.String.extend
 * @function
 */

/**
 * @see sap.ui.model.SimpleType.prototype.formatValue
 */
sap.ui.model.type.String.prototype.formatValue = function(sValue, sInternalType) {
	if (sValue == undefined || sValue == null) {
		return null;
	}
	switch(sInternalType) {
		case "string":
			return sValue;
		case "int":
			var iResult = parseInt(sValue, 10);
			if (isNaN(iResult)) {
				throw new sap.ui.model.FormatException(sValue + " is not a valid int value");
			}
			return iResult;
		case "float":
			var fResult = parseFloat(sValue);
			if (isNaN(fResult)) {
				throw new sap.ui.model.FormatException(sValue + " is not a valid float value");
			}
			return fResult;
		case "boolean":
			if (sValue.toLowerCase() == "true" || sValue == "X") {
				return true;
			}
			if (sValue.toLowerCase() == "false" || sValue == "") {
				return false;
			}
			throw new sap.ui.model.FormatException(sValue + " is not a valid boolean value");
		default:
			throw new sap.ui.model.FormatException("Don't know how to format String to " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.parseValue
 */
sap.ui.model.type.String.prototype.parseValue = function(oValue, sInternalType) {
	var sResult;
	switch(sInternalType) {
		case "string":
			return oValue;
		case "boolean":
		case "int":
		case "float":
			return oValue.toString();
		default:
			throw new sap.ui.model.ParseException("Don't know how to parse String from " + sInternalType);
	}
};

/**
 * @see sap.ui.model.SimpleType.prototype.validateValue
 */
sap.ui.model.type.String.prototype.validateValue = function(sValue) {
	if (this.oConstraints) {
		var aViolatedConstraints = [];
		jQuery.each(this.oConstraints, function(sName, oContent) {
			switch (sName) {
				case "maxLength":  // expects int
					if (sValue.length > oContent) {
						aViolatedConstraints.push("maxLength");
					}
					break;
				case "minLength":  // expects int
					if (sValue.length < oContent) {
						aViolatedConstraints.push("minLength");
					}
					break;
				case "startsWith":  // expects string
					if (!jQuery.sap.startsWith(sValue,oContent)) {
						aViolatedConstraints.push("startsWith");
					}
					break;
				case "startsWithIgnoreCase":  // expects string
					if (!jQuery.sap.startsWithIgnoreCase(sValue,oContent)) {
						aViolatedConstraints.push("startsWithIgnoreCase");
					}
					break;
				case "endsWith":  // expects string
					if (!jQuery.sap.endsWith(sValue,oContent)) {
						aViolatedConstraints.push("endsWith");
					}
					break;
				case "endsWithIgnoreCase": // expects string
					if (!jQuery.sap.endsWithIgnoreCase(sValue,oContent)) {
						aViolatedConstraints.push("endsWithIgnoreCase");
					}
					break;
				case "contains": // expects string
					if (sValue.indexOf(oContent) == -1) {
						aViolatedConstraints.push("contains");
					}
					break;
				case "equals": // expects string
					if (sValue != oContent) {
						aViolatedConstraints.push("equals");
					}
					break;
				case "search": // expects regex
					if (sValue.search(oContent) == -1) {
						aViolatedConstraints.push("search");
					}
					break;
			}
		});
		if (aViolatedConstraints.length > 0) {
			throw new sap.ui.model.ValidateException("Validation of type constraints failed", aViolatedConstraints);
		}
	}
};


}; // end of sap/ui/model/type/String.js
if ( !jQuery.sap.isDeclared('sap.ui.model.type.Time') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base implementation for all model implementations
jQuery.sap.declare("sap.ui.model.type.Time");


/**
 * Constructor for a Time type.
 *
 * @class
 * This class represents time simple types.
 *
 * @extends sap.ui.model.type.Date
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @param {object} [oFormatOptions] options used to create a DateFormat for formatting / parsing to/from external values and 
 *           optionally for a second DateFormat to convert between the data source format (Model) and the internally used JavaScript Date.format. 
 *           For both DateFormat objects, the same options are supported as for {@link sap.ui.core.format.DateFormat.getTimeInstance DateFormat.getTimeInstance}.
 *           Note that this differs from the base type.
 * @param {object} [oConstraints] value constraints. Supports the same kind of constraints as its base type Date, but note the different format options (Date vs. Time) 
 * @name sap.ui.model.type.Time
 */
sap.ui.model.type.Date.extend("sap.ui.model.type.Time", /** @lends sap.ui.model.type.Time */ {
	
	constructor : function () {
		sap.ui.model.type.Date.apply(this, arguments);
		this.sName = "Time";
	}

});

/**
 * Creates a new subclass of class sap.ui.model.type.Time with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.type.Time.extend
 * @function
 */

/**
 * Called by the framework when any localization setting changed
 * @see sap.ui.model.SimpleType.prototype._handleLocalizationChange
 * @private
 */
sap.ui.model.type.Time.prototype._handleLocalizationChange = function() {
	this.oOutputFormat = sap.ui.core.format.DateFormat.getTimeInstance(this.oFormatOptions);
	if (this.oFormatOptions.source) {
		this.oInputFormat = sap.ui.core.format.DateFormat.getTimeInstance(this.oFormatOptions.source);
	}
};

}; // end of sap/ui/model/type/Time.js
if ( !jQuery.sap.isDeclared('jquery.sap.ui') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// A bridge between the jQuery.sap plugin and the SAPUI5 Core
jQuery.sap.declare("jquery.sap.ui", false);

//jQuery.sap.require("sap.ui.core.Core"); // cyclic

// !!!!!!!!!!!!!!!!!!!!!!!!!!
// !!     EXPERIMENTAL     !!
// !!!!!!!!!!!!!!!!!!!!!!!!!!
(function() {

	// FIXME Too tough or just right?
	if(!jQuery.sap) {
		throw "Initialisation of jQuery.sap.ui failed. jQuery.sap plugin required!";
	}
	if(!window.sap || !window.sap.ui) {
		jQuery.sap.fatal("Initialisation of jQuery.sap.ui failed. Global SAP UI namespace required!");
	}

	//ensure not to initialize twice
	if(jQuery.sap.ui) {
		return;
	}

//	/**
//	 * Root Namespace for the jQuery UI-Layer plugin provided by SAP AG.
//	 *
//	 * @version 1.18.9
//	 * @namespace
//	 * @public
//	 */
//	jQuery.sap.ui = {};

	function fUIAreaFilter(idx){
		return sap.ui.getCore().getUIArea(this.id) != null;
	}
	function fgetUIArea(idx, odomref){
		return sap.ui.getCore().getUIArea(this.id);
	}
	function fgetUIAreaOfCtrl(oCtrl, idx){
		return oCtrl.getUIArea().getInterface();
	}

	/**
	 * @public
	 * @author SAP AG
	 */
	jQuery.fn.root = function(oRootControl) {
		var tmp;
		// handle 'setRoot'
		if(oRootControl) {
			sap.ui.getCore().setRoot(this.get(0), oRootControl);
			return this;
		}
		// and 'getRoot' behavior.
		var aControls = this.control();
		if (aControls.length > 0) {
			return jQuery.map(aControls, fgetUIAreaOfCtrl);
		}

		var aUIAreas = this.uiarea();

		if (aUIAreas.length > 0) {
			// we have UIAreas
			return aUIAreas;
		}

		// create UIAreas
		this.each(function(idx){
			sap.ui.getCore().createUIArea(this);
		});
		return this;
	};

	/**
	 * @public
	 */
	jQuery.fn.uiarea = function(iIdx) {
		// UIAreas need to have IDs... so reduce to those elements first
		var aUIAreas = this.slice("[id]").filter(fUIAreaFilter).map(fgetUIArea).get();
		return typeof(iIdx) === "number"?aUIAreas[iIdx]:aUIAreas;
	};

	/**
	 * Function identifying the closest SAPUI5 Control in the given jQuery context (provided via jQuery.map method).
	 * @private
	 */
	function fgetControl() {
		// as with jQuery 1.4.3 and 1.4.4 there is a big problem here, we increase checks here
		if(!this || !this.nodeType || this.nodeType === 9) {
			return null;
		} // in this case, we are on the HTML Document and cannot do anything
		// in IE8 'closest' might fail (e.g. when the element is not in the current document tree)
		// The following line would probably also work for the 'try-catch' below but induce performance penalty in EVERY call of this method.
		// if(jQuery(document.documentElement).has(this)) {
		try{
			var sId = jQuery(this).closest("[data-sap-ui]").attr("id");
			return sId ? sap.ui.getCore().byId(sId) : null;
		} catch(e){
			// probably IE8 case where element is not in current document tree... ==> there is no current control
			return null;
		}
	}

	/**
	 * Extension function to the jQuery.fn which identifies SAPUI5 controls in the given jQuery context.
	 *
	 * @param {integer} [idx] optional parameter to return the control instance at the given idx's position in the array.
	 * @methodOf jQuery.prototype
	 * @returns {sap.ui.core.Control[] | sap.ui.core.Control | null} depending on the given context and idx parameter an array of controls, an instance or null.
	 * @public
	 */
	jQuery.fn.control = function(idx) {
		var aControls = this.map(fgetControl);
		if(idx === undefined || isNaN(idx)) {
			return aControls.get();
		}
		else {
			return aControls.get(idx);
		}
	};


	/**
	 * EXPERIMENTAL!!
	 * Creates a new control of the given type and places it into the first DOM object of the jQuery collection.
	 * The type string is case sensitive.
	 *
	 * @param {string} sControlType the control type (fully qualified, like "sap.ui.dev.GoogleMap"; if no package is given, the package "sap.ui.commons" is assumed)
	 * @param {string} [sId] optional id for the new control; generated automatically if no non-empty id is given
	 * @param {object} [oConfiguration] optional map/JSON-object with initial values for the new control
	 * @returns {jQuery} the given jQuery object
	 * @private
	 */
	jQuery.fn.sapui = function(sControlType, sId, oConfiguration) {

		return this.each(function() { // TODO: hack for Steffen; (point is not clear, as this adds identical controls to many DOM elements...); remove soon

			var oControl = null;
			if (this) {
				// allow omitting the package prefix because this looks less Java-like...  sap.ui.commons is the default package
				if (sControlType.indexOf(".") == -1)  {
					sControlType = "sap.ui.commons." + sControlType;
				}

				// instantiate the control
				var fnClass = jQuery.sap.getObject(sControlType);
				if (fnClass) {

					// TODO: hack for Steffen; remove later
					if(typeof oConfiguration == 'object' && typeof oConfiguration.press == 'function') {
			  oConfiguration.press = jQuery.proxy(oConfiguration.press,this);
			}

					oControl = new (fnClass)(sId, oConfiguration); // sId might actually contain oConfiguration, the Element constructor will take care of this

					// placeAt first DomRef in collection
					oControl.placeAt(this);
					// TODO: avoid the direct call to applyChanges() in favor of a delayed version that potentially bundles several changes
					//sap.ui.getCore().applyChanges();
				}
			}

		});
	};

}());
}; // end of jquery.sap.ui.js
if ( !jQuery.sap.isDeclared('sap.ui.app.ApplicationMetadata') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.app.ApplicationMetadata
jQuery.sap.declare("sap.ui.app.ApplicationMetadata");


/**
 * Creates a new metadata object for a Application subclass.
 *
 * @param {string} sClassName fully qualified name of the class that is described by this metadata object
 * @param {object} oStaticInfo static info to construct the metadata from
 *
 * @experimental Since 1.13.2. The Application class is still under construction, so some implementation details can be changed in future.
 * @deprecated Since 1.15.1. The Component class is enhanced to take care about the Application code.
 * @class
 * @author SAP
 * @version 1.18.9
 * @since 1.13.2
 */
sap.ui.app.ApplicationMetadata = function(sClassName, oClassInfo) {
	// call super constructor
	sap.ui.base.ManagedObjectMetadata.apply(this, arguments);
};

//chain the prototypes
sap.ui.app.ApplicationMetadata.prototype = jQuery.sap.newObject(sap.ui.base.ManagedObjectMetadata.prototype);

sap.ui.app.ApplicationMetadata.preprocessClassInfo = function(oClassInfo) {
	// if the component is a string we convert this into a "_src" metadata entry
	// the specific metadata object can decide to support this or gracefully ignore it
	// basically the ComponentMetadata makes use of this feature
	if (oClassInfo && typeof oClassInfo.metadata === "string") {
		oClassInfo.metadata = {
			_src: oClassInfo.metadata
		};
	}
	return oClassInfo;
};

sap.ui.app.ApplicationMetadata.prototype.applySettings = function(oClassInfo) {

	var oStaticInfo = oClassInfo.metadata;

	sap.ui.base.ManagedObjectMetadata.prototype.applySettings.call(this, oClassInfo);

	// if the application specifies the metadata property: loadFromFile then
	// the application metadata will be loaded from the specified file 
	// which needs to be located next to the application script file.
	if (oStaticInfo._src) {
		jQuery.sap.log.warning("The metadata of the application " + this.getName() + " is loaded from file " + oStaticInfo._src + ". This is a design time feature and not for productive usage!");
		var sPackage = this.getName().replace(/\.\w+?$/, "");
		var sUrl = jQuery.sap.getModulePath(sPackage, "/" + oStaticInfo._src);
		var oResponse = jQuery.sap.syncGetJSON(sUrl);
		if (oResponse.success) {
			jQuery.extend(oStaticInfo, oResponse.data);
		} else {
			jQuery.sap.log.error("Failed to load application metadata from \"" + oStaticInfo._src + "\"! Reason: " + oResponse.error);
		}
	}
	
	this._mRootComponent = oStaticInfo.rootComponent || null;
	this._mModels = oStaticInfo.models || null;
	this._mServices = oStaticInfo.services || null;
	
};

/**
 * Returns the root component of the application 
 * @return {string} root component
 * @public
 */
sap.ui.app.ApplicationMetadata.prototype.getRootComponent = function() {
	return this._mRootComponent;
};

/**
 * Returns the models configuration which defines the available models of the
 * application. 
 * @return {Object} models configuration
 * @public
 */
sap.ui.app.ApplicationMetadata.prototype.getModels = function() {
	return this._mModels;
};

/**
 * Returns the services configuration which defines the available services of the
 * application. 
 * @return {Object} services configuration
 * @public
 */
sap.ui.app.ApplicationMetadata.prototype.getServices = function() {
	return this._mServices;
};

}; // end of sap/ui/app/ApplicationMetadata.js
if ( !jQuery.sap.isDeclared('sap.ui.core.util.serializer.HTMLViewSerializer') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.util.serializer.HTMLViewSerializer");





/*global vkbeautify *///declare unusual global vars for JSLint/SAPUI5 validation

/**
 * HTML view serializer class. Serializes a given view.
 *
 * @param {sap.ui.core.mvc.HTMLView} oView the view to serialize
 * @param {object} [oWindow=window] the window object. Default is the window object the instance of the serializer is running in
 * @param {function} fnGetControlId delegate function which returns the control id
 * @param {function} fnGetEventHandlerName delegate function which returns the event handler name
 *
 * @public
 * @class HTMLViewSerializer class.
 * @extends sap.ui.base.EventProvider
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.util.serializer.HTMLViewSerializer
 * @experimental Since 1.15.1. The HTMLViewSerializer is still under construction, so some implementation details can be changed in future.
 */
sap.ui.base.EventProvider.extend("sap.ui.core.util.serializer.HTMLViewSerializer", /** @lends sap.ui.core.util.serializer.HTMLViewSerializer */
{
	constructor : function (oView, oWindow, fnGetControlId, fnGetEventHandlerName) {
		sap.ui.base.EventProvider.apply(this);
		this._oView = oView;
		this._oWindow = oWindow;
		this._fnGetControlId = fnGetControlId;
		this._fnGetEventHandlerName = fnGetEventHandlerName;
	}
});


/**
 * Serializes the given HTML view.
 * 
 * @returns {string} the serialized HTML view.
 */
sap.ui.core.util.serializer.HTMLViewSerializer.prototype.serialize = function () {

	// a function to understand if to skip aggregations
	var fnSkipAggregations = function (oControl) {
		return (oControl instanceof this._oWindow.sap.ui.core.mvc.View);
	};

	// create serializer
	var oControlSerializer = new sap.ui.core.util.serializer.Serializer(
		this._oView,
		new sap.ui.core.util.serializer.delegate.HTML(
			this._fnGetControlId,
			this._fnGetEventHandlerName),
		true,
		this._oWindow,
		fnSkipAggregations);
	
	// run serializer
	var sResult = oControlSerializer.serialize();
	
	// wrap result with the template tag
	var sView = [];
	sView.push('<template');
	if (this._oView.getControllerName && this._oView.getControllerName()) {
		sView.push(' data-controller-name="' + this._oView.getControllerName() + '"');
	}
	sView.push(" >");
	sView.push(sResult);
	sView.push("</template>");
	
	// done
	return vkbeautify.xml(sView.join(""));
};
}; // end of sap/ui/core/util/serializer/HTMLViewSerializer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.util.serializer.XMLViewSerializer') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.util.serializer.XMLViewSerializer");





/*global vkbeautify *///declare unusual global vars for JSLint/SAPUI5 validation

/**
 * XML view serializer class. Serializes a given view.
 *
 * @param {sap.ui.core.mvc.XMLView} oView the view to serialize
 * @param {object} [oWindow=window] the window object. Default is the window object the instance of the serializer is running in
 * @param {string} [sDefaultXmlNamespace] defines the default XML namespace
 * @param {function} fnGetControlId delegate function which returns the control id
 * @param {function} fnGetEventHandlerName delegate function which returns the event handler name
 *
 * @public
 * @class XMLViewSerializer class.
 * @extends sap.ui.base.EventProvider
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.util.serializer.XMLViewSerializer
 * @experimental Since 1.15.1. The XMLViewSerializer is still under construction, so some implementation details can be changed in future.
 */
sap.ui.base.EventProvider.extend("sap.ui.core.util.serializer.XMLViewSerializer", /** @lends sap.ui.core.util.serializer.XMLViewSerializer */ 
{
	constructor : function (oView, oWindow, sDefaultNamespace, fnGetControlId, fnGetEventHandlerName) {
		sap.ui.base.EventProvider.apply(this);
		this._oView = oView;
		this._oWindow = oWindow;
		this._sDefaultNamespace = sDefaultNamespace;
		this._fnGetControlId = fnGetControlId;
		this._fnGetEventHandlerName = fnGetEventHandlerName;
	}
});



/**
 * Serializes the given XML view.
 * 
 * @returns {string} the serialized XML view.
 */
sap.ui.core.util.serializer.XMLViewSerializer.prototype.serialize = function () {

	// a function to memorize the control packages
	var mPackages = [];
	var fnMemorizePackage = function (oControl, sPackage) {
		if (!sPackage) {
			var sType = (oControl) ? oControl.constructor : "?";
			throw Error("Controls with empty package are currently not supported by the XML serializer: " + sType);
		}
		if (jQuery.inArray(sPackage, mPackages) === -1) {
			mPackages.push(sPackage);
		}
	};
	
	// a function to understand if to skip aggregations
	var fnSkipAggregations = function (oControl) {
		return (oControl instanceof this._oWindow.sap.ui.core.mvc.View);
	};
	
	// create serializer
	var oControlSerializer = new sap.ui.core.util.serializer.Serializer(
		this._oView,
		new sap.ui.core.util.serializer.delegate.XML(
			this._sDefaultNamespace,
			this._fnGetControlId,
			this._fnGetEventHandlerName,
			fnMemorizePackage),
		true,
		this._oWindow,
		fnSkipAggregations);
	
	// run serializer ... before writing namespaces
	var sResult = oControlSerializer.serialize();
	
	// write view start
	var sView = [];
	sView.push('<sap.ui.core.mvc:View');
	if (this._oView.getControllerName && this._oView.getControllerName()) {
		sView.push(' controllerName="' + this._oView.getControllerName() + '"');
	}
	
	// write view namespaces ... after running serializer
	if (jQuery.inArray('sap.ui.core', mPackages) === -1) {
		mPackages.push('sap.ui.core');
	}
	for (var i = 0 ; i < mPackages.length ; i++) {
		if (this._sDefaultNamespace && this._sDefaultNamespace === mPackages[i]) {
			sView.push(' xmlns="' + mPackages[i] + '"');
		} else {
			sView.push(' xmlns:' + mPackages[i] + '="' + mPackages[i] + '"');
		}
	}
	
	// write the main content
	sView.push(" >");
	sView.push(sResult);
	sView.push("</sap.ui.core.mvc:View>");
	
	return vkbeautify.xml(sView.join(""));
};
}; // end of sap/ui/core/util/serializer/XMLViewSerializer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ws.SapPcpWebSocket') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.ws.WebSocket for WebSocket support with SAP-PCP Protocol
jQuery.sap.declare("sap.ui.core.ws.SapPcpWebSocket");


/**
 * Creates a new WebSocket connection and uses the pcp-protocol for communication.
 *
 * @param {string}
 *            sUrl relative or absolute URL for WebSocket connection.
 *
 * @public
 *
 * @class WebSocket class implementing the pcp-protocol
 * @extends sap.ui.core.ws.WebSocket
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.ws.SapPcpWebSocket
 */
sap.ui.core.ws.WebSocket.extend("sap.ui.core.ws.SapPcpWebSocket", /** @lends sap.ui.core.ws.SapPcpWebSocket */ {

	constructor: function(sUrl) {
		sap.ui.core.ws.WebSocket.apply(this, arguments);
	}

});

/**
 * Creates a new subclass of class sap.ui.core.ws.SapPcpWebSocket with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 *
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code>
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.ws.SapPcpWebSocket.extend
 * @function
 */

/**
 * The 'message' event is fired, when a message was received.
 *
 * @name sap.ui.core.ws.SapPcpWebSocket#message
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @param {string} oControlEvent.getParameters.data Received data from the server.
 * @param {string} oControlEvent.getParameters.pcpFields Received pcpFields as a key-value map.
 * @public
 */

/**
 * Fire event 'message' to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.data] Received data from the server.
 * @param {string} [mArguments.pcpFields] Received pcpFields as a key-value map.
 * @return {sap.ui.core.ws.SapPcpWebSocket} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.ws.SapPcpWebSocket#fireMessage
 * @function
 */

/**
 * RegEx to get pcp-header fields
 *
 * @private
 */
sap.ui.core.ws.SapPcpWebSocket._deserializeRegexp = /((?:[^:\\]|(?:\\.))+):((?:[^:\\\n]|(?:\\.))*)/;

/**
 * Separator between header-fields and message body
 *
 * @private
 */
sap.ui.core.ws.SapPcpWebSocket._SEPARATOR = "\n\n";

/**
 * pcp-action value
 *
 * @private
 */
sap.ui.core.ws.SapPcpWebSocket._MESSAGE = "MESSAGE";

/**
 * Internal handler for message-event.
 *
 * @private
 */
sap.ui.core.ws.SapPcpWebSocket.prototype._onmessage = function(oMessageEvent) {
	var iSplitPos = -1,
		oEventData = {};

	if (typeof oMessageEvent.data === "string") {
		iSplitPos = oMessageEvent.data.indexOf(sap.ui.core.ws.SapPcpWebSocket._SEPARATOR);
	}

	if (iSplitPos !== -1) {
		oEventData.pcpFields = this._extractPcpFields(oMessageEvent.data.substring(0, iSplitPos));
		oEventData.data = oMessageEvent.data.substr(iSplitPos + sap.ui.core.ws.SapPcpWebSocket._SEPARATOR.length);
	} else {
		jQuery.sap.log.warning("Invalid PCP message received: " + oMessageEvent.data);
		oEventData.pcpFields = {};
		oEventData.data = oMessageEvent.data; // Fall back, just pass through original data
	}

	this.fireMessage(oEventData);
};

/**
 * Extracts the pcp-fields from a header string.
 *
 * @param {string} sHeader Header as string
 * @return {object} oPcpFields extracted fields as key-value map
 * @private
 */
sap.ui.core.ws.SapPcpWebSocket.prototype._extractPcpFields = function(sHeader) {
	var aFields = sHeader.split("\n"),
		aLine = [],
		oPcpFields = {};

	for (var i = 0; i < aFields.length; i++) {
		aLine = aFields[i].match(sap.ui.core.ws.SapPcpWebSocket._deserializeRegexp);
		if (aLine && aLine.length === 3) {
			oPcpFields[this._unescape(aLine[1])] = this._unescape(aLine[2]);
		}
	}

	return oPcpFields;
};

/**
 * Unescapes a string.
 *
 * @param {string} sEscaped escaped string
 * @return sUnescaped Unescaped string
 * @private
 */
sap.ui.core.ws.SapPcpWebSocket.prototype._unescape = function(sEscaped) {
	var aParts = sEscaped.split("\u0008"),
		sUnescaped = "";

	for (var i = 0; i < aParts.length; i++) {
		aParts[i] = aParts[i].replace(/\\\\/g, "\u0008").replace(/\\:/g, ':').replace(/\\n/g, '\n').replace(/\u0008/g, "\\");
	}

	sUnescaped = aParts.join("\u0008");

	return sUnescaped;
};

/**
 * Serializes pcp-fields into a string.
 *
 * @param {object} oPcpFields key-value map with pcp-fields
 * @param {string} sMessageType message-type, one of 'string', 'blob' or 'arraybuffer'.
 * @param {string} sPcpAction pcp-action value
 * @return {string} serialized pcp-fields
 * @private
 */
sap.ui.core.ws.SapPcpWebSocket.prototype._serializePcpFields = function(oPcpFields, sMessageType, sPcpAction) {
	var oSerialized = "",
		sFieldName = "",
		sPcpBodyType = "";

	if (sMessageType === 'string') {
		sPcpBodyType = 'text';
	} else if (sMessageType === 'blob' || sMessageType === 'arraybuffer') {
		sPcpBodyType = 'binary';
	}

	if (oPcpFields && typeof oPcpFields === 'object') {
		for (sFieldName in oPcpFields) {
			if (oPcpFields.hasOwnProperty(sFieldName) && sFieldName.indexOf('pcp-') !== 0) {
				oSerialized += this._escape(sFieldName) + ":" + this._escape(String(oPcpFields[sFieldName])) + "\n";
			}
		}
	}

	return "pcp-action:" + sPcpAction + "\npcp-body-type:" + sPcpBodyType + "\n" + oSerialized + "\n";
};

/**
 * Escapes a string.
 *
 * @param {string} sUnEscaped unescaped string
 * @return {string} sEscaped escaped string
 * @private
 */
sap.ui.core.ws.SapPcpWebSocket.prototype._escape = function(sUnEscaped) {
	return sUnEscaped.replace(/\\/g, '\\\\').replace(/:/g, '\\:').replace(/\n/g, '\\n');
};

// Public Methods
/**
 * Sends a message and optional pcp-header-fields using the pcp-protocol.<br>
 * <br>
 * If the connection is not yet opened, the message will be queued and sent
 * when the connection is established.
 *
 * @param {string|blob|arraybuffer} message message to send
 * @param {object} [oPcpFields] additional pcp-fields as key-value map
 * @return {sap.ui.core.ws.SapPcpWebSocket} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.ws.SapPcpWebSocket.prototype.send = function(message, oPcpFields) {
	var sMessageType = typeof message,
		sPcpFields = "";

	sPcpFields = this._serializePcpFields(oPcpFields, sMessageType, sap.ui.core.ws.SapPcpWebSocket._MESSAGE);

	sap.ui.core.ws.WebSocket.prototype.send.call(this, sPcpFields + message);
	return this;
};

}; // end of sap/ui/core/ws/SapPcpWebSocket.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ClientContextBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides an abstraction for list bindings
jQuery.sap.declare("sap.ui.model.ClientContextBinding");


/**
 * Constructor for ClientContextBinding
 *
 * @class
 * The ContextBinding is a specific binding for a setting context for the model
 *
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {Object} oContext
 * @param {Object} [mParameters]
 * @abstract
 * @public
 * @name sap.ui.model.ClientContextBinding
 */
sap.ui.model.ContextBinding.extend("sap.ui.model.ClientContextBinding", /** @lends sap.ui.model.ClientContextBinding */ {

	constructor : function(oModel, sPath, oContext, mParameters, oEvents){
		sap.ui.model.ContextBinding.call(this, oModel, sPath, oContext, mParameters, oEvents);
		var that = this;
		oModel.createBindingContext(sPath, oContext, mParameters, function(oContext) {
			that.bInitial = false;
			that.oElementContext = oContext;
		});
	}

});

/**
 * Creates a new subclass of class sap.ui.model.ClientContextBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.ClientContextBinding.extend
 * @function
 */

/**
 * @see sap.ui.model.ContextBinding.prototype.refresh
 */
sap.ui.model.ClientContextBinding.prototype.refresh = function(bForceUpdate) {
	var that = this;
	//recreate Context: force update
	this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function(oContext) {
		if (that.oElementContext === oContext && !bForceUpdate) {
			that.oModel.checkUpdate(true,oContext);
		} else {
			that.oElementContext = oContext;
			that._fireChange(); 
		}
	}, true);
};

/**
 * @see sap.ui.model.ContextBinding.prototype.refresh
 */
sap.ui.model.ClientContextBinding.prototype.initialize = function() {
	var that = this;
	//recreate Context: force update
	this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function(oContext) {
		that.oElementContext = oContext;
		that._fireChange(); 
	}, true);
};

/**
 * @see sap.ui.model.ContextBinding.prototype.setContext
 */
sap.ui.model.ClientContextBinding.prototype.setContext = function(oContext) {
	var that = this;
	if (this.oContext != oContext) {
		this.oContext = oContext;
		this.oModel.createBindingContext(this.sPath, this.oContext, this.mParameters, function(oContext) {
			that.oElementContext = oContext;
			that._fireChange();
		});
	}
};
}; // end of sap/ui/model/ClientContextBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ClientListBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the JSON model implementation of a list binding
jQuery.sap.declare("sap.ui.model.ClientListBinding");




/**
 *
 * @class
 * List binding implementation for client models
 *
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {array} [aSorters] initial sort order (can be either a sorter or an array of sorters)
 * @param {array} [aFilters] predefined filter/s (can be either a filter or an array of filters)
 * @param {object} [mParameters]
 * 
 * @name sap.ui.model.ClientListBinding
 * @extends sap.ui.model.ListBinding
 */
sap.ui.model.ListBinding.extend("sap.ui.model.ClientListBinding", /** @lends sap.ui.model.ClientListBinding */ {

	constructor : function(oModel, sPath, oContext, aSorters, aFilters, mParameters){
		sap.ui.model.ListBinding.apply(this, arguments);
		this.update();
	},

	metadata : {
		publicMethods : [
			"getLength"
		]
	}

});

/**
 * Return contexts for the list or a specified subset of contexts
 * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts
 * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index.
 * Default is the whole list length.
 *
 * @return {Array} the contexts array
 * @private
 */
sap.ui.model.ClientListBinding.prototype._getContexts = function(iStartIndex, iLength) {
	if (!iStartIndex) {
		iStartIndex = 0;
	}
	if (!iLength) {
		iLength = Math.min(this.iLength, this.oModel.iSizeLimit);
	}
	
	var iEndIndex = Math.min(iStartIndex + iLength, this.aIndices.length),
	oContext,
	aContexts = [],
	sPrefix = this.oModel.resolve(this.sPath, this.oContext);
	
	if (sPrefix && !jQuery.sap.endsWith(sPrefix, "/")) {
		sPrefix += "/";
	}		

	for (var i = iStartIndex; i < iEndIndex; i++) {
		oContext = this.oModel.getContext(sPrefix + this.aIndices[i]);
		aContexts.push(oContext);
	}
	
	return aContexts;
};

/**
 * Setter for context
 * @param {Object} oContext the new context object
 */
sap.ui.model.ClientListBinding.prototype.setContext = function(oContext) {
	if (this.oContext != oContext) {
		this.oContext = oContext;
		if (this.isRelative()) {
			this.update();
			this._fireChange({reason: sap.ui.model.ChangeReason.Context});
		}
	}
};

/**
 * Return the length of the list
 *
 * @return {int} the length
 * @protected
 */
sap.ui.model.ClientListBinding.prototype.getLength = function() {
	return this.iLength;
};

/**
 * Return the length of the list
 *
 * @return {int} the length
 */
sap.ui.model.ClientListBinding.prototype._getLength = function() {
	return this.aIndices.length;
};

/**
 * Get indices of the list
 */
sap.ui.model.ClientListBinding.prototype.updateIndices = function(){
	this.aIndices = [];
	for (var i = 0; i < this.oList.length; i++) {
		this.aIndices.push(i);
	}

};

/**
 * @see sap.ui.model.ListBinding.prototype.sort
 *
 */
sap.ui.model.ClientListBinding.prototype.sort = function(aSorters){
	if (!aSorters) {
		this.aSorters = null;
		this.updateIndices();
		this.applyFilter();
	} else {
		if (aSorters instanceof sap.ui.model.Sorter) {
			aSorters = [aSorters];
		}
		this.aSorters = aSorters;
		this.applySort();
	}
	this._fireChange({reason: sap.ui.model.ChangeReason.Sort});
	// TODO remove this if the sorter event gets removed which is deprecated
	this._fireSort({sorter: aSorters}); 
	return this;
};

/**
 * Sorts the list
 * @private
 */
sap.ui.model.ClientListBinding.prototype.applySort = function(){
	var that = this,
		aSortValues = [],
		aCompareFunctions = [],
		oValue,
		oSorter;

	if (!this.aSorters || this.aSorters.length == 0) {
		return;
	}
	
	
	for(var j=0; j<this.aSorters.length; j++) {
		oSorter = this.aSorters[j];
		aCompareFunctions[j] = oSorter.fnCompare;
		
		if (!aCompareFunctions[j]) {
			aCompareFunctions[j] = function(a, b) {
				if (b == null) {
					return -1;
				}
				if (a == null) {
					return 1;
				}
				if (typeof a == "string" && typeof b == "string") {
					return a.localeCompare(b);
				}
				if (a < b) {
					return -1;
				}
				if (a > b) {
					return 1;
				}
				return 0;
			}
		}
		jQuery.each(this.aIndices, function(i, iIndex) {
			oValue = that.oModel.getProperty(oSorter.sPath, that.oList[iIndex]);
			if (typeof oValue == "string") {
				oValue = oValue.toLocaleUpperCase();
			}
			if (!aSortValues[j]) {
				aSortValues[j] = [];
			}
			aSortValues[j][iIndex] = oValue;
		});
	}

	this.aIndices.sort(function(a, b) {
		var valueA = aSortValues[0][a],
			valueB = aSortValues[0][b];
		
		return that._applySortCompare(a, b, valueA, valueB, aSortValues, aCompareFunctions, 0);
	});
};

sap.ui.model.ClientListBinding.prototype._applySortCompare = function(a, b, valueA, valueB, aSortValues, aCompareFunctions, iDepth){
	var oSorter = this.aSorters[iDepth],
		fnCompare = aCompareFunctions[iDepth],
		returnValue;

	returnValue = fnCompare(valueA, valueB);
	if (oSorter.bDescending) {
		returnValue = -returnValue;
	}
	if (returnValue == 0 && this.aSorters[iDepth + 1]) {
		valueA = aSortValues[iDepth + 1][a],
		valueB = aSortValues[iDepth + 1][b];
		returnValue = this._applySortCompare(a, b, valueA, valueB, aSortValues, aCompareFunctions, iDepth + 1);
	}
	return returnValue;
};

/**
 * Filters the list.
 * 
 * Filters are first grouped according to their binding path.
 * All filters belonging to a group are ORed and after that the
 * results of all groups are ANDed.
 * Usually this means, all filters applied to a single table column
 * are ORed, while filters on different table columns are ANDed.
 * 
 * @param {sap.ui.model.Filter[]} aFilters Array of filter objects
 * @param {sap.ui.model.FilterType} sFilterType Type of the filter which should be adjusted, if it is not given, the standard behaviour applies
 * @return {sap.ui.model.ListBinding} returns <code>this</code> to facilitate method chaining 
 * 
 * @public
 */
sap.ui.model.ClientListBinding.prototype.filter = function(aFilters, sFilterType){
	this.updateIndices();
	if (aFilters instanceof sap.ui.model.Filter) {
		aFilters = [aFilters];
	}
	if (sFilterType == sap.ui.model.FilterType.Application) {
		this.aApplicationFilters = aFilters || [];
	} else if (sFilterType == sap.ui.model.FilterType.Control) {
		this.aFilters = aFilters || [];
	} else {
		//Previous behaviour
		this.aFilters = aFilters || [];
		this.aApplicationFilters = [];
	}
	aFilters = this.aFilters.concat(this.aApplicationFilters);
	if (aFilters.length == 0) {
		this.aFilters = [];
		this.aApplicationFilters = [];
		this.iLength = this._getLength();
	} else {
		this.applyFilter();
	}
	this.applySort();
	this._fireChange({reason: sap.ui.model.ChangeReason.Filter});
	// TODO remove this if the filter event gets removed which is deprecated
	if (sFilterType == sap.ui.model.FilterType.Application) {
		this._fireFilter({filters: this.aApplicationFilters});
	} else {
		this._fireFilter({filters: this.aFilters});
	}
	return this;
};

/**
 * Normalize filter value
 * 
 * @private
 */
sap.ui.model.ClientListBinding.prototype.normalizeFilterValue = function(oValue){
	if (typeof oValue == "string") {
		return oValue.toUpperCase();
	} 
	if (oValue instanceof Date) {
		return oValue.getTime();
	}
	return oValue;
};

/**
 * Filters the list
 * Filters are first grouped according to their binding path.
 * All filters belonging to a group are ORed and after that the
 * results of all groups are ANDed.
 * Usually this means, all filters applied to a single table column
 * are ORed, while filters on different table columns are ANDed.
 * Multiple MultiFilters are ORed.
 *
 * @private
 */
sap.ui.model.ClientListBinding.prototype.applyFilter = function(){
	if (!this.aFilters) {
		return;
	}
	var that = this,
		oFilterGroups = {},
		aFilterGroup,
		aFiltered = [],
		bGroupFiltered = false,
		bFiltered = true,
		aFilters = this.aFilters.concat(this.aApplicationFilters);

	jQuery.each(aFilters, function(j, oFilter) {
		if (oFilter.sPath !== undefined) {
			aFilterGroup = oFilterGroups[oFilter.sPath];
			if (!aFilterGroup) {
				aFilterGroup = oFilterGroups[oFilter.sPath] = [];
			}
		} else {
			aFilterGroup = oFilterGroups["__multiFilter"];
			if (!aFilterGroup) {
				aFilterGroup = oFilterGroups["__multiFilter"] = [];
			}
		}
		aFilterGroup.push(oFilter);
	});
	jQuery.each(this.aIndices, function(i, iIndex) {
		bFiltered = true;
		jQuery.each(oFilterGroups, function(sPath, aFilterGroup) {
			if (sPath !== "__multiFilter") {
				var oValue = that.oModel.getProperty(sPath, that.oList[iIndex]);
				oValue = that.normalizeFilterValue(oValue);
				bGroupFiltered = false;
				jQuery.each(aFilterGroup, function(j, oFilter) {
					var fnTest = that.getFilterFunction(oFilter);
					if (oValue != undefined && fnTest(oValue)) {
						bGroupFiltered = true;
						return false;
					}
				});
			} else {
				bGroupFiltered = false;
				jQuery.each(aFilterGroup, function(j, oFilter) {
					bGroupFiltered = that._resolveMultiFilter(oFilter, iIndex);
					if (bGroupFiltered) {
						return false;
					}
				});
			}
			if (!bGroupFiltered) {
				bFiltered = false;
				return false;
			}
		});
		if (bFiltered) {
			aFiltered.push(iIndex);
		}
	});
	this.aIndices = aFiltered;
	this.iLength = aFiltered.length;
};

/**
 * Resolve the client list binding and check if an index matches
 *
 * @private
 */
sap.ui.model.ClientListBinding.prototype._resolveMultiFilter = function(oMultiFilter, iIndex){
	var that = this,
		bMatched = false,
		aFilters = oMultiFilter.aFilters;
	
	if (aFilters) {
		jQuery.each(aFilters, function(i, oFilter) {
			var bLocalMatch = false;
			if (oFilter._bMultiFilter) {
				bLocalMatch = that._resolveMultiFilter(oFilter, iIndex)
			} else if (oFilter.sPath !== undefined) {
				var oValue = that.oModel.getProperty(oFilter.sPath, that.oList[iIndex]);
				oValue = that.normalizeFilterValue(oValue);
				var fnTest = that.getFilterFunction(oFilter);
				if (oValue != undefined && fnTest(oValue)) {
					bLocalMatch = true;
				}
			}
			if (bLocalMatch && oMultiFilter.bAnd) {
				bMatched = true;
			} else if (!bLocalMatch && oMultiFilter.bAnd) {
				bMatched = false;
				return false;
			} else if (bLocalMatch) {
				bMatched = true;
				return false;
			}
		});
	}
	
	return bMatched;
};

/**
 * Provides a JS filter function for the given filter
 */
sap.ui.model.ClientListBinding.prototype.getFilterFunction = function(oFilter){
	if (oFilter.fnTest) {
		return oFilter.fnTest;
	}
	var oValue1 = this.normalizeFilterValue(oFilter.oValue1),
		oValue2 = this.normalizeFilterValue(oFilter.oValue2);

	switch (oFilter.sOperator) {
		case "EQ":
			oFilter.fnTest = function(value) { return value == oValue1; }; break;
		case "NE":
			oFilter.fnTest = function(value) { return value != oValue1; }; break;
		case "LT":
			oFilter.fnTest = function(value) { return value < oValue1; }; break;
		case "LE":
			oFilter.fnTest = function(value) { return value <= oValue1; }; break;
		case "GT":
			oFilter.fnTest = function(value) { return value > oValue1; }; break;
		case "GE":
			oFilter.fnTest = function(value) { return value >= oValue1; }; break;
		case "BT":
			oFilter.fnTest = function(value) { return (value >= oValue1) && (value <= oValue2); }; break;
		case "Contains":
			oFilter.fnTest = function(value) {
				if (typeof value != "string") {
					throw new Error("Only \"String\" values are supported for the FilterOperator: \"Contains\".");
				}
				return value.indexOf(oValue1) != -1; 
			}; 
			break;
		case "StartsWith":
			oFilter.fnTest = function(value) { 
				if (typeof value != "string") {
					throw new Error("Only \"String\" values are supported for the FilterOperator: \"StartsWith\".");
				}
				return value.indexOf(oValue1) == 0; 
			}; 
			break;
		case "EndsWith":
			oFilter.fnTest = function(value) { 
				if (typeof value != "string") {
					throw new Error("Only \"String\" values are supported for the FilterOperator: \"EndsWith\".");
				}
				var iPos = value.indexOf(oValue1);
				if (iPos == -1){
					return false;					
				}
				return iPos == value.length - new String(oFilter.oValue1).length; 
			}; 
			break;
		default:
			oFilter.fnTest = function(value) { return true; };
	}
	return oFilter.fnTest;
};

/**
 * Get distinct values
 *
 * @param {String} sPath
 *
 * @protected
 */
sap.ui.model.ClientListBinding.prototype.getDistinctValues = function(sPath){
	var aResult = [],
		oMap = {},
		sValue,
		that = this;
	jQuery.each(this.oList, function(i, oContext) {
		sValue = that.oModel.getProperty(sPath, oContext);
		if (!oMap[sValue]) {
			oMap[sValue] = true;
			aResult.push(sValue);
		}
	});
	return aResult;
};

}; // end of sap/ui/model/ClientListBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ClientTreeBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the JSON model implementation of a list binding
jQuery.sap.declare("sap.ui.model.ClientTreeBinding");


/**
*
* @class
* Tree binding implementation for client models
*
* @param sPath
* @param [oModel]
* @name sap.ui.model.xml.XMLTreeBinding
* @extends sap.ui.model.TreeBinding
*/
sap.ui.model.TreeBinding.extend("sap.ui.model.ClientTreeBinding", /** @lends sap.ui.model.ClientTreeBinding */ {

	constructor : function(oModel, sPath, oContext, aFilters, mParameters){
		sap.ui.model.TreeBinding.apply(this, arguments);
		if (!this.oContext) {
			this.oContext = "";
		}
		this.filterInfo = {};
		this.filterInfo.aFilteredContexts = [];
		this.filterInfo.oParentContext = {};
		
		if (this.aFilters) {
			if (this.oModel._getObject(this.sPath, this.oContext)) {
				this.filter(aFilters);
			}
		}
	}
	
});

/**
 * Creates a new subclass of class sap.ui.model.ClientTreeBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.ClientTreeBinding.extend
 * @function
 */

/**
 * Return root contexts for the tree
 *
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.ClientTreeBinding.prototype.getRootContexts = function() {
	if (!this.oModel.isList(this.sPath)) {
		var oContext = this.oModel.getContext(this.sPath);
		if (this.bDisplayRootNode) {
			return [oContext];
		} else {
			return this.getNodeContexts(oContext);
		}
	} else {
		var aContexts = [],
			that = this;
		jQuery.each(this.oModel._getObject(this.sPath), function(iIndex, oObject) {
			aContexts.push(that.oModel.getContext(that.sPath + (jQuery.sap.endsWith(that.sPath, "/") ? "" : "/") + iIndex));
		});
		return aContexts;
	}

};

/**
 * Return node contexts for the tree
 * @param {object} oContext to use for retrieving the node contexts
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.ClientTreeBinding.prototype.getNodeContexts = function(oContext) {

	var sContextPath = oContext.getPath();
	if (!jQuery.sap.endsWith(sContextPath,"/")) {
		sContextPath = sContextPath + "/";
	}
	if (!jQuery.sap.startsWith(sContextPath,"/")) {
		sContextPath = "/" + sContextPath;
	}

	var aContexts = [],
	that = this,
	oNode = this.oModel._getObject(sContextPath),
	oChild,
	aArrayNames = this.mParameters && this.mParameters.arrayNames,
	aChildArray;
	
	if (aArrayNames && jQuery.isArray(aArrayNames)) {
		
		jQuery.each(aArrayNames, function(iIndex, sArrayName){
			aChildArray = oNode[sArrayName];
			if (aChildArray) {
				jQuery.each(aChildArray, function(sSubName, oSubChild) {
					that._saveSubContext(oSubChild, aContexts, sContextPath, sArrayName + "/" + sSubName);
				})
			}
		});
	} else {
		if (oNode) {
			jQuery.sap.each(oNode, function(sName, oChild) {
				if (jQuery.isArray(oChild)){
					jQuery.each(oChild, function(sSubName, oSubChild) {
						that._saveSubContext(oSubChild, aContexts, sContextPath, sName + "/" + sSubName);
					})
				} else if (typeof oChild == "object") {
					that._saveSubContext(oChild, aContexts, sContextPath, sName);
				}	
			});
		}
	}
	return aContexts;
};

/**
 * Returns if the node has child nodes
 *
 * @function
 * @name sap.ui.model.TreeBinding.prototype.hasChildren
 * @param {Object} oContext the context element of the node
 * @return {boolean} true if node has children
 *
 * @public
 */
sap.ui.model.ClientTreeBinding.prototype.hasChildren = function(oContext) {
	return oContext ? this.getNodeContexts(oContext).length > 0 : false;
};

sap.ui.model.ClientTreeBinding.prototype._saveSubContext = function(oNode, aContexts, sContextPath, sName) {
	if (typeof oNode == "object") {
		var oNodeContext = this.oModel.getContext(sContextPath + sName);
		// check if there is a filter on this level applied
		if (this.aFilters && !this.bIsFiltering){
			if (jQuery.inArray(oNodeContext, this.filterInfo.aFilteredContexts) != -1) {
				aContexts.push(oNodeContext);
			}
		} else {
			aContexts.push(oNodeContext);
		}
	}
};


/**
 *
 * @see sap.ui.model.TreeBinding.prototype.filter
 * Filters the tree according to the filter definitions.
 * The filtering is applied recursively through the tree.
 * The parent nodes of filtered child nodes will also be displayed if they don't match the filter conditions.
 * All filters belonging to a group (=have the same path) are ORed and after that the
 * results of all groups are ANDed.
 * @function
 * @name sap.ui.model.TreeBinding.prototype.filter
 * @param {Array} aFilters Array of sap.ui.model.Filter objects
 *
 * @public
 */
sap.ui.model.ClientTreeBinding.prototype.filter = function(aFilters){
	// The filtering is applied recursively through the tree and stores all filtered contexts and its parent contexts in an array.

	// reset previous stored filter contexts
	this.filterInfo.aFilteredContexts = [];
	this.filterInfo.oParentContext = {};
	if (!aFilters || !jQuery.isArray(aFilters) || aFilters.length == 0) {
		this.aFilters = null;
	} else {
		this.aFilters = aFilters;
		// start with binding path root
		var oContext = new sap.ui.model.Context(this.oModel, this.sPath);
		this.filterRecursive(oContext);
	}
	this._fireChange({reason: "filter"});
	// TODO remove this if the filter event is removed
	this._fireFilter({filters: aFilters});
};

/**
 * filters the tree recursively.
 * @param {object} oParentContext the context where to start. The children of this node context are then filtered recursively.
 * @private
 */
sap.ui.model.ClientTreeBinding.prototype.filterRecursive = function(oParentContext){

	this.bIsFiltering = true;
	var aChildren = this.getNodeContexts(oParentContext);
	this.bIsFiltering = false;

	if (aChildren.length > 0) {
		var that = this;
		jQuery.each(aChildren, function(i, oChildContext){
			that.filterRecursive(oChildContext);
		});
		this.applyFilter(oParentContext);
	}
};


/**
 * Performs the real filtering and stores all filtered contexts and its parent context into an array.
 * @param {object} oParentContext the context where to start. The children of this node context are filtered.
 * @private
 */
sap.ui.model.ClientTreeBinding.prototype.applyFilter = function(oParentContext){
	if (!this.aFilters) {
		return;
	}
	var that = this,
		oFilterGroups = {},
		aFilterGroup,
		aFiltered = [],
		bGroupFiltered = false,
		bFiltered = true;
	this.bIsFiltering = true;
	var aUnfilteredContexts = this.getNodeContexts(oParentContext);
	this.bIsFiltering = false;
	jQuery.each(that.aFilters, function(j, oFilter) {
		if (oFilter.sPath) {
			aFilterGroup = oFilterGroups[oFilter.sPath];
			if (!aFilterGroup) {
				aFilterGroup = oFilterGroups[oFilter.sPath] = [];
			}
		} else {
			aFilterGroup = oFilterGroups["__multiFilter"];
			if (!aFilterGroup) {
				aFilterGroup = oFilterGroups["__multiFilter"] = [];
			}
		}
		aFilterGroup.push(oFilter);
	});
	jQuery.each(aUnfilteredContexts, function(i, oUnfilteredContext) {
		bFiltered = true;
		jQuery.each(oFilterGroups, function(sPath, aFilterGroup) {
			if (sPath !== "__multiFilter") {
				var oValue = that.oModel._getObject(sPath, oUnfilteredContext);
				if (typeof oValue == "string") {
					oValue = oValue.toUpperCase();
				}
				bGroupFiltered = false;
				jQuery.each(aFilterGroup, function(j, oFilter) {
					var fnTest = that.getFilterFunction(oFilter);
					if (oValue != undefined && fnTest(oValue)) {
						bGroupFiltered = true;
						return false;
					}
				});
			} else {
				bGroupFiltered = false;
				jQuery.each(aFilterGroup, function(j, oFilter) {
					bGroupFiltered = that._resolveMultiFilter(oFilter, oUnfilteredContext);
					if (bGroupFiltered) {
						return false;
					}
				});
			}
			if (!bGroupFiltered) {
				bFiltered = false;
				return false;
			}
		});
		if (bFiltered) {
			aFiltered.push(oUnfilteredContext);
		}
	});
	if (aFiltered.length > 0) {
		jQuery.merge(this.filterInfo.aFilteredContexts, aFiltered);
		this.filterInfo.aFilteredContexts.push(oParentContext);
		this.filterInfo.oParentContext = oParentContext;
	}
	// push additionally parentcontexts if any children are already included in filtered contexts
	if (jQuery.inArray(this.filterInfo.oParentContext, aUnfilteredContexts) != -1) {
		this.filterInfo.aFilteredContexts.push(oParentContext);
		// set the parent context which was added to be the new parent context
		this.filterInfo.oParentContext = oParentContext;
	}

};

/**
 * Resolve the client list binding and check if an index matches
 *
 * @private
 */
sap.ui.model.ClientTreeBinding.prototype._resolveMultiFilter = function(oMultiFilter, oUnfilteredContext){
	var that = this,
		bMatched = false,
		aFilters = oMultiFilter.aFilters;
	
	if (aFilters) {
		jQuery.each(aFilters, function(i, oFilter) {
			var bLocalMatch = false;
			if (oFilter._bMultiFilter) {
				bLocalMatch = that._resolveMultiFilter(oFilter, oUnfilteredContext)
			} else if (oFilter.sPath) {
				var oValue = that.oModel.getProperty(oFilter.sPath, oUnfilteredContext);
				if (typeof oValue == "string") {
					oValue = oValue.toUpperCase();
				}
				var fnTest = that.getFilterFunction(oFilter);
				if (oValue != undefined && fnTest(oValue)) {
					bLocalMatch = true;
				}
			}
			if (bLocalMatch && oMultiFilter.bAnd) {
				bMatched = true;
			} else if (!bLocalMatch && oMultiFilter.bAnd) {
				bMatched = false;
				return false;
			} else if (bLocalMatch) {
				bMatched = true;
				return false;
			}
		});
	}
	
	return bMatched;
};

/**
 * Provides a JS filter function for the given filter
 * @private
 */
sap.ui.model.ClientTreeBinding.prototype.getFilterFunction = function(oFilter){
	if (oFilter.fnTest) {
		return oFilter.fnTest;
	}
	var oValue1 = oFilter.oValue1,
		oValue2 = oFilter.oValue2;
	if (typeof oValue1 == "string") {
		oValue1 = oValue1.toUpperCase();
	}
	if (typeof oValue2 == "string") {
		oValue2 = oValue2.toUpperCase();
	}
	switch (oFilter.sOperator) {
		case "EQ":
			oFilter.fnTest = function(value) { return value == oValue1; }; break;
		case "NE":
			oFilter.fnTest = function(value) { return value != oValue1; }; break;
		case "LT":
			oFilter.fnTest = function(value) { return value < oValue1; }; break;
		case "LE":
			oFilter.fnTest = function(value) { return value <= oValue1; }; break;
		case "GT":
			oFilter.fnTest = function(value) { return value > oValue1; }; break;
		case "GE":
			oFilter.fnTest = function(value) { return value >= oValue1; }; break;
		case "BT":
			oFilter.fnTest = function(value) { return (value > oValue1) && (value < oValue2); }; break;
		case "Contains":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) != -1; }; break;
		case "StartsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == 0; }; break;
		case "EndsWith":
			oFilter.fnTest = function(value) { return value.indexOf(oValue1) == value.length - new String(oFilter.oValue1).length; }; break;
		default:
			oFilter.fnTest = function(value) { return true; };
	}
	return oFilter.fnTest;
};


/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * 
 * @param {boolean} bForceupdate
 * 
 */
sap.ui.model.ClientTreeBinding.prototype.checkUpdate = function(bForceupdate){
	this._fireChange();
};

}; // end of sap/ui/model/ClientTreeBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.PropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides an abstract property binding.
jQuery.sap.declare("sap.ui.model.PropertyBinding");



/**
 * Constructor for PropertyBinding
 *
 * @class
 * The PropertyBinding is used to access single data values in the data model.
 *
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {object} [mParameters]
 * 
 * @public
 * @name sap.ui.model.PropertyBinding
 */

sap.ui.model.Binding.extend("sap.ui.model.PropertyBinding", /** @lends sap.ui.model.PropertyBinding */ {

	constructor : function (oModel, sPath, oContext, mParameters) {
		sap.ui.model.Binding.apply(this, arguments);
	},
	metadata : {
		"abstract" : true,
		
	  publicMethods : [
		  "getValue", "setValue", "setType", "getType", "setFormatter", "getFormatter", "getExternalValue", "setExternalValue", "getBindingMode"
	  ]
	}

});

/**
 * Creates a new subclass of class sap.ui.model.PropertyBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.PropertyBinding.extend
 * @function
 */

// the 'abstract methods' to be implemented by child classes
/**
 * Returns the current value of the bound target
 *
 * @function
 * @name sap.ui.model.PropertyBinding.prototype.getValue
 * @return {object} the current value of the bound target
 *
 * @public
 */

/**
 * Sets the value for this binding. A model implementation should check if the current default binding mode permits
 * setting the binding value and if so set the new value also in the model.
 *
 * @function
 * @name sap.ui.model.PropertyBinding.prototype.setValue
 * @param {object} oValue the value to set for this binding
 *
 * @public
 */

/**
 * Returns the current external value of the bound target which is formatted via a type or formatter function. 
 *
 * @throws sap.ui.model.FormatException
 *
 * @return {object} the current value of the bound target
 *
 * @public
 */
sap.ui.model.PropertyBinding.prototype.getExternalValue = function() {	
	var oValue = this.getValue();
	if (this.oType) {
		oValue = this.oType.formatValue(oValue, this.sInternalType);
	}
	if (this.fnFormatter) {
		oValue = this.fnFormatter(oValue);
	}
	return oValue;
};


/**
 * Sets the value for this binding. The value is parsed and validated against its type and then set to the binding.
 * A model implementation should check if the current default binding mode permits
 * setting the binding value and if so set the new value also in the model.
 *
 * @param {object} oValue the value to set for this binding
 * 
 * @throws sap.ui.model.ParseException
 * @throws sap.ui.model.ValidateException
 *
 * @public
 */
sap.ui.model.PropertyBinding.prototype.setExternalValue = function(oValue) {
	// formatter doesn't support two way binding
	if (this.fnFormatter) {
		return;
	}
	if (this.oType) {
		oValue = this.oType.parseValue(oValue, this.sInternalType);
		this.oType.validateValue(oValue);
	}
	// if no type specified set value directly
	this.setValue(oValue);
};

/**
 * Sets the optional type and internal type for the binding. The type and internal type are used to do the parsing/formatting correctly.
 * The internal type is the property type of the element which the value is formatted to.  
 *
 * @param {object} oType the sap.ui.model.Type for the binding
 * @param {String} sInternalType the internal type of the element property which this binding is bound against.
 * 
 * @public
 */
sap.ui.model.PropertyBinding.prototype.setType = function(oType, sInternalType) {
	this.oType = oType;
	this.sInternalType = sInternalType;
};

/**
 *  Returns the type if any for the binding.
 *  @returns the binding type
 *  @public
 */
sap.ui.model.PropertyBinding.prototype.getType = function() {
	return this.oType;
};

/**
 * Sets the optional formatter function for the binding.

 * @param {function} fnFormatter the formatter function for the binding
 * 
 * @public
 */
sap.ui.model.PropertyBinding.prototype.setFormatter = function(fnFormatter) {
	this.fnFormatter = fnFormatter;
};

/**
 *  Returns the formatter function
 *  @returns the formatter function
 *  @public
 */
sap.ui.model.PropertyBinding.prototype.getFormatter = function() {
	return this.fnFormatter;
};

/**
 *  Returns the binding mode 
 *  @returns {sap.ui.model.BindingMode} the binding mode
 *  @public
 */
sap.ui.model.PropertyBinding.prototype.getBindingMode = function() {
	return this.sMode;
};

/**
 *  Sets the binding mode 
 *  @params {sap.ui.model.BindingMode} sBindingMode the binding mode
 *  @protected
 */
sap.ui.model.PropertyBinding.prototype.setBindingMode = function(sBindingMode) {
	this.sMode = sBindingMode;
};

}; // end of sap/ui/model/PropertyBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.control.ControlPropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the JSON model implementation of a property binding
jQuery.sap.declare("sap.ui.model.control.ControlPropertyBinding");


/**
 *
 * @class
 * Property binding implementation for JSON format
 *
 * @param sPath
 * @param [oModel]
 * @name sap.ui.model.control.ControlPropertyBinding
 * @extends sap.ui.model.PropertyBinding
 */
sap.ui.model.PropertyBinding.extend("sap.ui.model.control.ControlPropertyBinding", /** @lends sap.ui.model.control.ControlPropertyBinding */ {
	
	constructor : function(oModel, sPath, oContext){
		sap.ui.model.PropertyBinding.apply(this, arguments);
		this.oValue = this._getValue();
	}

});

/**
 * Returns the current value of the bound target
 * @return {object} the current value of the bound target
 */
sap.ui.model.control.ControlPropertyBinding.prototype.getValue = function(){
	return this.oValue;
};

/**
 * Sets the current value on the control
 */
sap.ui.model.control.ControlPropertyBinding.prototype.setValue = function(oValue){
	this.oValue = oValue;
	this.oContext.setProperty(this.sPath, oValue);
};

/**
 * Returns the current value of the bound target (incl. re-evaluation)
 * @return {object} the current value of the bound target
 */
sap.ui.model.control.ControlPropertyBinding.prototype._getValue = function () {
	return this.oContext.getProperty(this.sPath);
};

/**
 * Setter for context
 */
sap.ui.model.control.ControlPropertyBinding.prototype.setContext = function(oContext) {
	this.oContext = oContext;
	this.checkUpdate();
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * @protected
 */
sap.ui.model.control.ControlPropertyBinding.prototype.checkUpdate = function() {
	var oValue = this._getValue();
	if(oValue !== this.oValue) {// optimize for not firing the events when unneeded
		this.oValue = oValue;
		this._fireChange();
	}
};
}; // end of sap/ui/model/control/ControlPropertyBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.json.JSONListBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the JSON model implementation of a list binding
jQuery.sap.declare("sap.ui.model.json.JSONListBinding");




/**
 *
 * @class
 * List binding implementation for JSON format
 *
 * @param sPath
 * @param [oModel]
 * @name sap.ui.model.json.JSONListBinding
 * @extends sap.ui.model.ListBinding
 */
sap.ui.model.ClientListBinding.extend("sap.ui.model.json.JSONListBinding");

/**
 * Creates a new subclass of class sap.ui.model.json.JSONListBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.json.JSONListBinding.extend
 * @function
 */


/**
 * Return contexts for the list or a specified subset of contexts
 * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts
 * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index.
 * Default is the whole list length.
 *
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.json.JSONListBinding.prototype.getContexts = function(iStartIndex, iLength) {
	this.iLastStartIndex = iStartIndex;
	this.iLastLength = iLength;
	
	if (!iStartIndex) {
		iStartIndex = 0;
	}
	if (!iLength) {
		iLength = Math.min(this.iLength, this.oModel.iSizeLimit);
	}

	var aContexts = this._getContexts(iStartIndex, iLength),
		oContextData = {};

	if (this.bUseExtendedChangeDetection) {

		for (var i = 0; i < aContexts.length; i++) {
			oContextData[aContexts[i].getPath()] = aContexts[i].getObject();
		}

		//Check diff
		if (this.aLastContexts && iStartIndex < this.iLastEndIndex) {
			var that = this;
			var aDiff = jQuery.sap.arrayDiff(this.aLastContexts, aContexts, function(oOldContext, oNewContext) {
				return jQuery.sap.equal(
						oOldContext && that.oLastContextData && that.oLastContextData[oOldContext.getPath()],
						oNewContext && oContextData && oContextData[oNewContext.getPath()]
					);
			});
			aContexts.diff = aDiff;
		}

		this.iLastEndIndex = iStartIndex + iLength;
		this.aLastContexts = aContexts.slice(0);
		this.oLastContextData = jQuery.extend(true, {}, oContextData);
	}
	
	return aContexts;
};

/**
 * Update the list, indices array and apply sorting and filtering
 * @private
 */
sap.ui.model.json.JSONListBinding.prototype.update = function(){
	var oList = this.oModel._getObject(this.sPath, this.oContext);
	if (oList && jQuery.isArray(oList)) {
		if (this.bUseExtendedChangeDetection) {
			this.oList = jQuery.extend(true, [], oList);
		} else {
			this.oList = oList.slice(0);
		}
		this.updateIndices();
		this.applyFilter();
		this.applySort();
		this.iLength = this._getLength();
	}
	else {
		this.oList = [];
		this.aIndices = [];
		this.iLength = 0;
	}
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * 
 * @param {boolean} bForceupdate
 * 
 */
sap.ui.model.json.JSONListBinding.prototype.checkUpdate = function(bForceupdate){
	if (!this.bUseExtendedChangeDetection) {
		var oList = this.oModel._getObject(this.sPath, this.oContext);
		if (!jQuery.sap.equal(this.oList, oList) || bForceupdate) {
			this.update();
			this._fireChange({reason: sap.ui.model.ChangeReason.Change});
		}
	} else {
		var bChangeDetected = false;
		var that = this;
		
		//If the list has changed we need to update the indices first
		var oList = this.oModel._getObject(this.sPath, this.oContext);
		if (!jQuery.sap.equal(this.oList, oList)) {
			this.update();
		}
		
		//Get contexts for visible area and compare with stored contexts
		var aContexts = this._getContexts(this.iLastStartIndex, this.iLastLength);
		if (this.aLastContexts) {
			if (this.aLastContexts.length != aContexts.length) {
				bChangeDetected = true;
			} else {
				jQuery.each(this.aLastContexts, function(iIndex, oContext) {
					if (!jQuery.sap.equal(aContexts[iIndex].getObject(), that.oLastContextData[oContext.getPath()])) {
						bChangeDetected = true;
						return false;
					}
				});
			}
		} else {
			bChangeDetected = true;
		}
		if (bChangeDetected || bForceupdate) {
			this._fireChange({reason: sap.ui.model.ChangeReason.Change});
		}
	}
};

}; // end of sap/ui/model/json/JSONListBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.json.JSONTreeBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the JSON model implementation of a list binding
jQuery.sap.declare("sap.ui.model.json.JSONTreeBinding");


/**
 *
 * @class
 * Tree binding implementation for JSON format.
 * 
 * The tree data structure may contain JSON objects and also arrays. If using arrays and don't want to bind every array data in the data structure you can 
 * specify a parameter <code>arrayNames</code> in the mParameters which contains the names of the arrays in a string array which should be bound for the tree.
 * An array not included there won't be bound. If an array is included but it is nested in another parent array which isn't included in the names list it won't be bound.
 * So make sure that the parent array name is also included. If the tree data structure doesn't include any arrays you don't have to specify this parameter at all. 
 *
 * @param [oModel]
 * @param {string}
 *         sPath the path pointing to the tree / array that should be bound
 * @param {object}
 *         [oContext=null] the context object for this databinding (optional)
 * @param {array}
 *         [aFilters=null] predefined filter/s contained in an array (optional)
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 *         If the mParameter <code>arrayNames</code> is specified with an array of string names this names will be checked against the tree data structure
 *         and the found data in this array is included in the tree but only if also the parent array is included.
 *         If this parameter is not specified then all found arrays in the data structure are bound.
 *         If the tree data structure doesn't contain an array you don't have to specify this parameter. 
 * 
 * @name sap.ui.model.json.JSONTreeBinding
 * @extends sap.ui.model.TreeBinding
 */
sap.ui.model.ClientTreeBinding.extend("sap.ui.model.json.JSONTreeBinding");

/**
 * Creates a new subclass of class sap.ui.model.json.JSONTreeBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.json.JSONTreeBinding.extend
 * @function
 */

/**
 * Return node contexts for the tree
 * @param {object} oContext to use for retrieving the node contexts
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.json.JSONTreeBinding.prototype.getNodeContexts = function(oContext) {

	var sContextPath = oContext.getPath();
	if (!jQuery.sap.endsWith(sContextPath,"/")) {
		sContextPath = sContextPath + "/";
	}
	if (!jQuery.sap.startsWith(sContextPath,"/")) {
		sContextPath = "/" + sContextPath;
	}

	var aContexts = [],
		that = this,
		oNode = this.oModel._getObject(sContextPath),
		oChild,
		aArrayNames = this.mParameters && this.mParameters.arrayNames,
		aChildArray;
	
	if (aArrayNames && jQuery.isArray(aArrayNames)) {
		
		jQuery.each(aArrayNames, function(iIndex, sArrayName){
			aChildArray = oNode[sArrayName];
			if (aChildArray) {
				jQuery.each(aChildArray, function(sSubName, oSubChild) {
					that._saveSubContext(oSubChild, aContexts, sContextPath, sArrayName + "/" + sSubName);
				})
			}
		});
	} else {
		if (oNode) {
			jQuery.sap.each(oNode, function(sName, oChild) {
				if (jQuery.isArray(oChild)){
					jQuery.each(oChild, function(sSubName, oSubChild) {
						that._saveSubContext(oSubChild, aContexts, sContextPath, sName + "/" + sSubName);
					})
				} else if (typeof oChild == "object") {
					that._saveSubContext(oChild, aContexts, sContextPath, sName);
				}	
			});
		}
	}
	return aContexts;
};


sap.ui.model.json.JSONTreeBinding.prototype._saveSubContext = function(oNode, aContexts, sContextPath, sName) {
	if (typeof oNode == "object") {
		var oNodeContext = this.oModel.getContext(sContextPath + sName);
		// check if there is a filter on this level applied
		if (this.aFilters && !this.bIsFiltering){
			if (jQuery.inArray(oNodeContext, this.filterInfo.aFilteredContexts) != -1) {
				aContexts.push(oNodeContext);
			}
		} else {
			aContexts.push(oNodeContext);
		}
	}
};
}; // end of sap/ui/model/json/JSONTreeBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.ODataPropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.model.odata.ODataPropertyBinding
jQuery.sap.declare("sap.ui.model.odata.ODataPropertyBinding");


/**
 *
 * @class
 * Property binding implementation for oData format
 *
 * @param {sap.ui.model.Model} oModel
 * @param {string} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {object} [mParameters]
 * 
 * @name sap.ui.model.odata.ODataPropertyBinding
 * @extends sap.ui.model.PropertyBinding
 */
sap.ui.model.PropertyBinding.extend("sap.ui.model.odata.ODataPropertyBinding", /** @lends sap.ui.model.odata.ODataPropertyBinding */ {
	
	constructor : function(oModel, sPath, oContext, mParameters){
		sap.ui.model.PropertyBinding.apply(this, arguments);
	
		this.oValue = this._getValue();
	}

});

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataPropertyBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.odata.ODataPropertyBinding.extend
 * @function
 */

/**
 * Returns the current value of the bound target
 * @return {object} the current value of the bound target
 * @protected
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.getValue = function(){
	return this.oValue;
};

/**
 * Returns the current value of the bound target (incl. re-evaluation)
 * @return {object} the current value of the bound target
 */
sap.ui.model.odata.ODataPropertyBinding.prototype._getValue = function(){
	return this.oModel._getObject(this.sPath, this.oContext);
};

/**
 * @see sap.ui.model.PropertyBinding.prototype.setValue
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.setValue = function(oValue){
	if (this.oValue != oValue){
		//the binding value will be updated by the model. The model calls checkupdate on all bindings after updating its value.
		if (!this.oModel.setProperty(this.sPath, oValue, this.oContext)) {
			this._fireChange();
		}
	}
};

/**
 * Setter for context
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.setContext = function(oContext) {
	if (this.oContext != oContext) {
		this.oContext = oContext;
		if (this.isRelative()) {
			this.checkUpdate();
		}
	}
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * 
 * @param {boolean} force no cache true/false: Default = false
 * 
 */
sap.ui.model.odata.ODataPropertyBinding.prototype.checkUpdate = function(bForceUpdate){
	var oValue = this._getValue();
	if(oValue !== this.oValue || bForceUpdate) {// optimize for not firing the events when unneeded
		this.oValue = oValue;
		this._fireChange({reason: sap.ui.model.ChangeReason.Change});
	}
};
}; // end of sap/ui/model/odata/ODataPropertyBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.resource.ResourcePropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the Resource model implementation of a property binding
jQuery.sap.declare("sap.ui.model.resource.ResourcePropertyBinding");


/**
 * @class
 * Property binding implementation for resource bundles
 *
 * @param sPath
 * @param [oModel]
 * @name sap.ui.model.resource.ResourcePropertyBinding
 */
sap.ui.model.PropertyBinding.extend("sap.ui.model.resource.ResourcePropertyBinding", /** @lends sap.ui.model.resource.ResourcePropertyBinding */ {
	
	constructor : function(oModel, sPath){
		sap.ui.model.PropertyBinding.apply(this, arguments);
	
		this.oValue = this.oModel.getProperty(sPath);
	}
	
});

/**
 * Creates a new subclass of class sap.ui.model.resource.ResourcePropertyBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.resource.ResourcePropertyBinding.extend
 * @function
 */

/**
 * @see sap.ui.model.PropertyBinding.prototype.getValue
 */
sap.ui.model.resource.ResourcePropertyBinding.prototype.getValue = function(){
	return this.oModel.getProperty(this.sPath);
};
}; // end of sap/ui/model/resource/ResourcePropertyBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.xml.XMLListBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the XML model implementation of a list binding
jQuery.sap.declare("sap.ui.model.xml.XMLListBinding");




/**
 *
 * @class
 * List binding implementation for XML format
 *
 * @param sPath
 * @param [oModel]
 * @name sap.ui.model.xml.XMLListBinding
 * @extends sap.ui.model.ListBinding
 */
sap.ui.model.ClientListBinding.extend("sap.ui.model.xml.XMLListBinding");

/**
 * Return contexts for the list or a specified subset of contexts
 * @param {int} [iStartIndex=0] the startIndex where to start the retrieval of contexts
 * @param {int} [iLength=length of the list] determines how many contexts to retrieve beginning from the start index.
 * Default is the whole list length.
 *
 * @return {sap.ui.model.Context[]} the contexts array
 * @protected
 */
sap.ui.model.xml.XMLListBinding.prototype.getContexts = function(iStartIndex, iLength) {
	this.iLastStartIndex = iStartIndex;
	this.iLastLength = iLength;
	
	if (!iStartIndex) {
		iStartIndex = 0;
	}
	if (!iLength) {
		iLength = Math.min(this.iLength, this.oModel.iSizeLimit);
	}

	var aContexts = this._getContexts(iStartIndex, iLength),
		oContextData = {};
	
	if (this.bUseExtendedChangeDetection) {
		for (var i = 0; i < aContexts.length; i++) {
			oContextData[aContexts[i].getPath()] = this.oModel._getObject(aContexts[i].getPath())[0];
		}

		//Check diff
		if (this.aLastContexts && iStartIndex < this.iLastEndIndex) {
			var that = this;
			var aDiff = jQuery.sap.arrayDiff(this.aLastContexts, aContexts, function(oOldContext, oNewContext) {
				var oOldNode =  that.oLastContextData &&  that.oLastContextData[oOldContext.getPath()];
				var oNewNode = oContextData && oContextData[oNewContext.getPath()];
				if (oOldNode && oNewNode) {
					return jQuery.sap.isEqualNode(oOldNode, oNewNode);
				}
				return false;
			});
			aContexts.diff = aDiff;
		}
	
		this.iLastEndIndex = iStartIndex + iLength;
		this.aLastContexts = aContexts.slice(0);
		this.oLastContextData = {};
		var that = this;
		jQuery.each(oContextData, function(sKey, oNode) {
			that.oLastContextData[sKey] = oNode.cloneNode(true);
		});
	}

	return aContexts;
};

/**
 * Update the list, indices array and apply sorting and filtering
 * @private
 */
sap.ui.model.xml.XMLListBinding.prototype.update = function(){
	var oList = this.oModel._getObject(this.sPath, this.oContext);
	if (oList) {
		this.oList = [];
		var that = this;
		if (this.bUseExtendedChangeDetection) {
			jQuery.each(oList, function(sKey, oNode) {
				that.oList.push(oNode.cloneNode(true));
			});
		} else {
			this.oList = oList.slice(0);
		}
		this.updateIndices();
		this.applyFilter();
		this.applySort();
		this.iLength = this._getLength();
	}
	else {
		this.oList = [];
		this.aIndices = [];
		this.iLength = 0;
	}
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * 
 * @param {boolean} bForceupdate
 * 
 */
sap.ui.model.xml.XMLListBinding.prototype.checkUpdate = function(bForceupdate){
	if (!this.bUseExtendedChangeDetection) {
		var oList = this.oModel._getObject(this.sPath, this.oContext);
		if (!this.oList || !oList || oList.length != this.oList.length || bForceupdate) {
			// TODO does not work currently, so so old behavior
			//if (!jQuery.sap.equal(this.oList, oList)) {
			this.update();
			this._fireChange({reason: sap.ui.model.ChangeReason.Change});
		}
	} else {
		var bChangeDetected = false;
		var that = this;
		
		//If the list has changed we need to update the indices first
		var oList = this.oModel._getObject(this.sPath, this.oContext);
		if (!jQuery.sap.equal(this.oList, oList)) {
			this.update();
		}
		
		//Get contexts for visible area and compare with stored contexts
		var aContexts = this._getContexts(this.iLastStartIndex, this.iLastLength);
		if (this.aLastContexts) {
			if (this.aLastContexts.length != aContexts.length) {
				bChangeDetected = true;
			} else {
				jQuery.each(this.aLastContexts, function(iIndex, oContext) {
					var oNewNode = aContexts[iIndex].getObject();
					var oOldNode = that.oLastContextData && that.oLastContextData[oContext.getPath()];
					if (oNewNode && oOldNode && !oOldNode.isEqualNode(oNewNode)) {
						bChangeDetected = true;
						return false;
					}
				});
			}
		} else {
			bChangeDetected = true;
		}
		if (bChangeDetected || bForceupdate) {
			this._fireChange({reason: sap.ui.model.ChangeReason.Change});
		}	
	}
};

}; // end of sap/ui/model/xml/XMLListBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.xml.XMLTreeBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the XML model implementation of a list binding
jQuery.sap.declare("sap.ui.model.xml.XMLTreeBinding");


/**
 *
 * @class
 * Tree binding implementation for XML format
 *
 * @param sPath
 * @param [oModel]
 * @name sap.ui.model.xml.XMLTreeBinding
 * @extends sap.ui.model.TreeBinding
 */
sap.ui.model.ClientTreeBinding.extend("sap.ui.model.xml.XMLTreeBinding");

/**
 * Return node contexts for the tree
 * @param {object} oContext to use for retrieving the node contexts
 * @return {Array} the contexts array
 * @protected
 */
sap.ui.model.xml.XMLTreeBinding.prototype.getNodeContexts = function(oContext) {
	var sContextPath = oContext.getPath();
	
	if (!jQuery.sap.endsWith(sContextPath,"/")) {
		sContextPath = sContextPath + "/";
	}
	if (!jQuery.sap.startsWith(sContextPath,"/")) {
		sContextPath = "/" + sContextPath;
	}

	var aContexts = [],
		mNodeIndices = {},
		that = this,
		oNode = this.oModel._getObject(oContext.getPath()),
		oChild, sChildPath, oChildContext;

	jQuery.each(oNode[0].childNodes, function(sName, oChild) {
		if (oChild.nodeType == 1) { // check if node is an element
			if (mNodeIndices[oChild.nodeName] == undefined){
				mNodeIndices[oChild.nodeName] = 0;
			} else {
				mNodeIndices[oChild.nodeName]++;
			}
			sChildPath = sContextPath + oChild.nodeName + "/" + mNodeIndices[oChild.nodeName];
			oChildContext = that.oModel.getContext(sChildPath);
			// check if there is a filter on this level applied
			if (that.aFilters && !that.bIsFiltering){
				if (jQuery.inArray(oChildContext, that.filterInfo.aFilteredContexts) != -1) {
					aContexts.push(oChildContext);
				}
			}else {
				aContexts.push(oChildContext);
			}
		}
	});

	return aContexts;
};
}; // end of sap/ui/model/xml/XMLTreeBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.core.util.serializer.ViewSerializer') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.util.serializer.ViewSerializer");







/**
 * View serializer class. Iterates over all controls and serializes all found views by calling the corresponding view type serializer.
 *
 * @param {sap.ui.core.Control|sap.ui.core.UIArea} oRootControl the root control to serialize
 * @param {object} [oWindow=window] the window object. Default is the window object the instance of the serializer is running in.
 * @param {string} [sDefaultXmlNamespace] defines the default xml namespace
 *
 * @public
 * @class ViewSerializer class.
 * @extends sap.ui.base.EventProvider
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.util.serializer.ViewSerializer
 * @experimental Since 1.15.1. The ViewSerializer is still under construction, so some implementation details can be changed in future.
 */
sap.ui.base.EventProvider.extend("sap.ui.core.util.serializer.ViewSerializer", /** @lends sap.ui.core.util.serializer.ViewSerializer */
{
	constructor : function (oRootControl, oWindow, sDefaultXmlNamespace) {
		sap.ui.base.EventProvider.apply(this);
		this._oRootControl = oRootControl;
		this._oWindow = oWindow || window;
		this._mViews = {};
		this._sDefaultXmlNamespace = sDefaultXmlNamespace;
	}
});

/**
 * Serializes all views into XML.
 * 
 * @returns {map} the serialized views. The keys are the view name.
 */
sap.ui.core.util.serializer.ViewSerializer.prototype.serializeToXML = function () {
	return this.serialize("XML");
};

/**
 * Serializes all views into HTML.
 * 
 * @returns {map} the serialized views. The keys are the view name.
 */
sap.ui.core.util.serializer.ViewSerializer.prototype.serializeToHTML = function () {
	return this.serialize("HTML");
};

/**
 * Serializes all views into a given format.
 * Possible values are XML or HTML.  
 * If left empty the content is left as it was.
 * 
 * @returns {map} the serialized views. The keys are the view name.
 */
sap.ui.core.util.serializer.ViewSerializer.prototype.serialize = function (sConvertToViewType) {
	this._mViews = {};
	this._sConvertToViewType = sConvertToViewType || undefined;
	return this._serializeRecursive(this._oRootControl);
};


sap.ui.core.util.serializer.ViewSerializer.prototype._getViewType = function(oView) {
	if (!this._sConvertToViewType) {
		if (oView instanceof this._oWindow.sap.ui.core.mvc.HTMLView) {
			return "HTML";
		} else if (oView instanceof this._oWindow.sap.ui.core.mvc.XMLView) {
			return "XML";
		}
	}
	return this._sConvertToViewType;
};

/**
 * Internal method for recursive serializing
 * 
 * @param {sap.ui.core.Control|sap.ui.core.UIArea} oControl the control to serialize
 * @returns {map} the serialized views. The keys are the view name.
 * @private
 */
sap.ui.core.util.serializer.ViewSerializer.prototype._serializeRecursive = function (oControl) {

	jQuery.sap.assert(typeof oControl !== "undefined", "The control must not be undefined");
	// serialize view
	if (oControl instanceof this._oWindow.sap.ui.core.mvc.View) {
		var oViewSerializer = this._getViewSerializer(oControl, this._getViewType(oControl));
		if (oViewSerializer) {
			var oViewName = oControl.getViewName() || oControl.getControllerName();
			if (!this._mViews[oViewName]) {
				this._mViews[oViewName] = oViewSerializer.serialize(this._getViewType(oControl));
			}
		}
	}

	if (oControl.getMetadata().getClass() === this._oWindow.sap.ui.core.UIArea) {
		var aContent = oControl.getContent();
		for (var i = 0; i < aContent.length; i++) {
			this._serializeRecursive(aContent[i]);
		}
	} else if (oControl.getMetadata().getClass() === this._oWindow.sap.ui.core.ComponentContainer) {
		this._serializeRecursive(oControl.getComponentInstance().getAggregation("rootControl"));
	} else {
		var mAggregations = oControl.getMetadata().getAllAggregations();
		if (mAggregations) {
			for (var sName in mAggregations) {
				var oAggregation = mAggregations[sName];
				var oValue = oControl[oAggregation._sGetter]();

				if (oValue && oValue.length) {
					for (var i=0;i<oValue.length;i++) {
						var oObj = oValue[i];
						if (oObj instanceof this._oWindow.sap.ui.core.Element) {
							this._serializeRecursive(oObj);
						}
					}
				} else if (oValue instanceof this._oWindow.sap.ui.core.Element) {
					this._serializeRecursive(oValue);
				}
			}
		}
	}
	return this._mViews;
};

/**
 * Instantiates the view serializer depending on the type of view (XML/HTML).
 * 
 * @param {sap.ui.core.mvc.View|sap.ui.core.Control|sap.ui.core.UIArea} oView the instance of the view. Needed to determine the type of view serializer.
 * @returns {sap.ui.core.util.serializer.XMLViewSerializer|sap.ui.core.util.serializer.HTMLViewSerializer} returns the corresponding serializer for the view type. Returns null when control is not a view.. 
 * @private
 */
sap.ui.core.util.serializer.ViewSerializer.prototype._getViewSerializer = function (oView, sType) {

	// a function to find the event handler name for an event
	var fnGetEventHandlerName = function (oEvent) {

		// both xml and html view write this ui5 internal property for the serializer
		if (oEvent.fFunction && oEvent.fFunction._sapui_handlerName) {
			var sHandlerName = oEvent.fFunction._sapui_handlerName;

			// double check that the function is on the controller
			var oController = oView.getController();
			if (oController[sHandlerName]) {
				return sHandlerName;
			}
		}
		// TODO: ITERARTE OVER HANDLERS AND CHECK THE EVENT FUNCTION
		// NOTE: JQUERY GUID WON'T WORK AS THE GUID WILL BE SAVED AT THE CLOSURED FUNCTION AS WELL
		// WHEN THE FUNCTION IS REUSED FOR SEVERAL HANDLERS WE WILL LOSE THE INFORMATION
		/*for (var sHandler in oController) {
			if (oController[sHandler] === oEvent.fFunction) {
				return sHandler;
			}
		}*/
	};

	// a function to compute the control id
	var fnGetControlId = function (oControl) {
		// Allow specification of desired controlId as changing ids later on is not possible
		//This has to be the view relative ID
		if (oControl._sapui_controlId){
			return oControl._sapui_controlId;
		}
		return oControl.getId().replace(oView.createId(""), "");
	};

	// create the appropriate view serializer

	if (sType === "HTML") {
		return new sap.ui.core.util.serializer.HTMLViewSerializer(
				oView,
				this._oWindow,
				fnGetControlId,
				fnGetEventHandlerName);
	} else if (sType === "XML") {
		return new sap.ui.core.util.serializer.XMLViewSerializer(
				oView,
				this._oWindow,
				this._sDefaultXmlNamespace,
				fnGetControlId,
				fnGetEventHandlerName);
	} else {
		var sType = (oView) ? oView.constructor : "?";
		throw Error("View type '" + sType + "' is not supported for conversion. Only HTML and XML is supported");
	}
};

}; // end of sap/ui/core/util/serializer/ViewSerializer.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ClientPropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the JSON model implementation of a property binding
jQuery.sap.declare("sap.ui.model.ClientPropertyBinding");


/**
 *
 * @class
 * Property binding implementation for client models
 * 
 * @param {sap.ui.model.Model} oModel
 * @param {String} sPath
 * @param {sap.ui.model.Context} oContext
 * @param {Object} [mParameters]
 * 
 * @name sap.ui.model.ClientPropertyBinding
 * @extends sap.ui.model.PropertyBinding
 */
sap.ui.model.PropertyBinding.extend("sap.ui.model.ClientPropertyBinding", /** @lends sap.ui.model.ClientPropertyBinding */ {
	
	constructor : function(oModel, sPath, oContext, mParameters){
		sap.ui.model.PropertyBinding.apply(this, arguments);
		this.oValue = this._getValue();
	}
	
});

/**
 * @see sap.ui.model.PropertyBinding.prototype.getValue
 */
sap.ui.model.ClientPropertyBinding.prototype.getValue = function(){
	return this.oValue;
};


/**
 * Returns the current value of the bound target (incl. re-evaluation)
 * @return {object} the current value of the bound target
 */
sap.ui.model.ClientPropertyBinding.prototype._getValue = function(){
	var sProperty = this.sPath.substr(this.sPath.lastIndexOf("/")+1);
	if (sProperty == "__name__") {
		var aPath = this.oContext.split("/");
		return aPath[aPath.length - 1];
	}
	return this.oModel.getProperty(this.sPath, this.oContext); // ensure to survive also not set model object
};

/**
 * Setter for context
 */
sap.ui.model.ClientPropertyBinding.prototype.setContext = function(oContext) {
	if (this.oContext != oContext) {
		this.oContext = oContext;
		if (this.isRelative()) {
			this.checkUpdate();
		}
	}
};
}; // end of sap/ui/model/ClientPropertyBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.CompositeBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides an abstract property binding.
jQuery.sap.declare("sap.ui.model.CompositeBinding");



/**
 * Constructor for CompositeBinding
 *
 * @class
 * The CompositeBinding is used to bundle multiple property bindings which are be used to provide a single binding against
 * these property bindings. Note: Only One Way binding is supported. So setValue and setExternalValue throw exceptions.
 *
 * @public
 * @name sap.ui.model.CompositeBinding
 */

sap.ui.model.PropertyBinding.extend("sap.ui.model.CompositeBinding", /** @lends sap.ui.model.CompositeBinding */ {

	constructor : function (aBindings, bRawValues) {
		sap.ui.model.PropertyBinding.apply(this, [null,""]);
		var that = this;
		this.aBindings = aBindings;
		this.bRawValues = bRawValues;
	},
	metadata : {
		
	  publicMethods : [
	          "getBindings", "attachChange", "detachChange"
	  ]
	}

});

sap.ui.model.CompositeBinding.prototype.getPath = function() {
	jQuery.sap.assert(null, "Composite Binding has no path!");
	return null;
};

sap.ui.model.CompositeBinding.prototype.getModel = function() {
	jQuery.sap.assert(null, "Composite Binding has no model!");
	return null;
};

sap.ui.model.CompositeBinding.prototype.getContext = function() {
	jQuery.sap.assert(null, "Composite Binding has no context!");
	return null;
};

sap.ui.model.CompositeBinding.prototype.getType = function() {
	jQuery.sap.assert(null, "Composite Binding type is not supported!");
	return null;
};

/**
 * sets the context for each property binding in this composite binding
 * @param {object} oContext the new context for the bindings
 */
sap.ui.model.CompositeBinding.prototype.setContext = function(oContext) {
	jQuery.each(this.aBindings, function(i, oBinding){
		// null context could also be set
		if(!oContext || oBinding.updateRequired(oContext.getModel())) {
			oBinding.setContext(oContext);
		}
	});
};

/**
 * Not supported for CompositeBinding as a composite binding contains an array of property bindings. 
 * An exception will be thrown. 
 *
 * @param {object} oValue the value to set for this binding
 * 
 * @throws sap.ui.base.Exception
 *
 * @public
 */
sap.ui.model.CompositeBinding.prototype.setValue = function(oValue) {
	throw new sap.ui.base.Exception("Composite Binding does not support setValue because it contains multiple property bindings!");
};

/**
 * Returns the raw values of the property bindings in an array.
 *
 * @return {object} the values of the internal property bindings in an array
 *
 * @public
 */
sap.ui.model.CompositeBinding.prototype.getValue = function() {	
	var aValues = [],
	oValue;

	jQuery.each(this.aBindings, function(i, oBinding) {
		oValue = oBinding.getValue();
		aValues.push(oValue);
	});

	return aValues;
};

/**
 * Returns the current external value of the bound target which is formatted via a type or formatter function. 
 *
 * @return {object} the current value of the bound target
 *
 *@throws sap.ui.model.FormatException
 *
 * @public
 */
sap.ui.model.CompositeBinding.prototype.getExternalValue = function() {	
	var aValues = [],
		oValue;
	if (this.bRawValues) {
		// type of property bindings is ignored here because we call getValue().
		aValues = this.getValue();
	} else {
		// composite type is ignored here and the property binding types are used in getExternalValue()
		jQuery.each(this.aBindings, function(i, oBinding) {
			oValue = oBinding.getExternalValue();
			aValues.push(oValue);
		});
	}
	
	if (this.fnFormatter) {
		oValue = this.fnFormatter.apply(this, aValues);
	} else {
		if ( aValues.length > 1) {
			// default: multiple values are joined together if no formatter specified
			oValue = aValues.join(" ");
		} else {
			oValue = aValues[0];
		}
	}
	
	return oValue;
};


/**
 * Not supported for CompositeBinding as a composite binding contains an array of property bindings. 
 * An exception will be thrown. 
 *
 * @param {object} oValue the value to set for this binding
 * 
 * @throws sap.ui.base.Exception
 *
 * @public
 */
sap.ui.model.CompositeBinding.prototype.setExternalValue = function(oValue) {
	throw new sap.ui.base.Exception("Composite Binding does not support setExternalValue because it contains multiple property bindings!");
};

/**
 * Returns the property bindings contained in this composite binding.
 *
 * @return {array} the property bindings in this composite binding
 *
 * @public
 */
sap.ui.model.CompositeBinding.prototype.getBindings = function() {
	return this.aBindings;
};

//Eventing and related
/**
* Attach event-handler <code>fnFunction</code> to the '_change' event of this <code>sap.ui.model.Model</code>.<br/>
* @param {function} fnFunction The function to call, when the event occurs.
* @param {object} [oListener] object on which to call the given function.
* @protected
*/
sap.ui.model.CompositeBinding.prototype.attachChange = function(fnFunction, oListener) {
	this.attachEvent("change", fnFunction, oListener);
	if (this.aBindings) {
		var that = this;
		jQuery.each(this.aBindings, function(i,oBinding) {
			oBinding.attachChange(that.checkUpdate, that);
		});
	}
};

/**
* Detach event-handler <code>fnFunction</code> from the '_change' event of this <code>sap.ui.model.Model</code>.<br/>
* @param {function} fnFunction The function to call, when the event occurs.
* @param {object} [oListener] object on which to call the given function.
* @protected
*/
sap.ui.model.CompositeBinding.prototype.detachChange = function(fnFunction, oListener) {
	this.detachEvent("change", fnFunction, oListener);
	if (this.aBindings) {
		var that = this;
		jQuery.each(this.aBindings, function(i,oBinding) {
			oBinding.detachChange(that.checkUpdate, that);
		});
	}
};

/**
 * Determines if the property bindings in the composite binding should be updated by calling updateRequired on all property bindings with the specified model.
 * @param {object} oModel The model instance to compare against
 * @returns {boolean} true if this binding should be updated
 * @protected
 */
sap.ui.model.CompositeBinding.prototype.updateRequired = function(oModel) {
	var bUpdateRequired = false;
	jQuery.each(this.aBindings, function(i, oBinding){
		bUpdateRequired = bUpdateRequired || oBinding.updateRequired(oModel);
	});
	return bUpdateRequired;
};
/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * 
 * @param {boolean} bForceupdate
 * 
 */
sap.ui.model.CompositeBinding.prototype.checkUpdate = function(bForceupdate){
	var oValue = this.getExternalValue();
	if(!jQuery.sap.equal(oValue, this.oValue) || bForceupdate) {// optimize for not firing the events when unneeded
		this.oValue = oValue;
		this._fireChange({reason: sap.ui.model.ChangeReason.Change});
	}
};
}; // end of sap/ui/model/CompositeBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.control.ControlModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * Control-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.control
 * @public
 */

// Provides the JSON object based model implementation
jQuery.sap.declare("sap.ui.model.control.ControlModel");


//jQuery.sap.require("sap.ui.model.control.ControlListBinding");

/**
 * Constructor for a new ControlModel.
 *
 * @class
 * Model implementation for Control model
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @name sap.ui.model.control.ControlModel
 */
sap.ui.model.Model.extend("sap.ui.model.control.ControlModel", /** @lends sap.ui.model.control.ControlModel */ {
	
	constructor : function (oControl) {
		sap.ui.model.Model.apply(this, arguments);
		this.oControl = oControl;
		this.oControl.attachEvent("_change", this.checkUpdate, this);
		this.oElements = [];
	}

});

/**
 */
sap.ui.model.control.ControlModel.prototype.destroy = function() {
	this.oControl.detachEvent("_change", this.checkUpdate, this);
};

/**
 */
sap.ui.model.control.ControlModel.prototype.addFacadeComponent = function(oElement) {
	var i=jQuery.inArray(oElement, this.oElements);
	if ( i<0 ) {
		this.oElements.push(oElement);
		oElement.attachEvent("_change", this.checkUpdate, this);
	}
};

/**
 */
sap.ui.model.control.ControlModel.prototype.removeFacadeComponent = function(oElement) {
	var i=jQuery.inArray(oElement, this.oElements);
	if ( i>= 0 ) {
		this.oElements.splice(i, 1);
		oElement.detachEvent("_change", this.checkUpdate, this);
	}
};

/**
 * @see sap.ui.model.Model.prototype.bindProperty
 */
sap.ui.model.control.ControlModel.prototype.bindProperty = function(sPath, oContext) {
	oContext = oContext || this.oControl;
	if ( oContext !== this.oControl ) {
		this.addFacadeComponent(oContext);
	}
	return new sap.ui.model.control.ControlPropertyBinding(this, sPath, oContext);
};

/**
 */
sap.ui.model.control.ControlModel.prototype.checkUpdate = function(oEvent) {
	if ( this._onchange ) {
		this._onchange(oEvent);
	}
	if ( this.aBindings.length ) {
		// TODO optimize with info from event object (control & property)
		var aBindings = this.aBindings.slice(0);
		jQuery.each(aBindings, function(iIndex, oBinding) {
			oBinding.checkUpdate();
		});
	}
};
}; // end of sap/ui/model/control/ControlModel.js
if ( !jQuery.sap.isDeclared('sap.ui.model.json.JSONPropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the JSON model implementation of a property binding
jQuery.sap.declare("sap.ui.model.json.JSONPropertyBinding");


/**
 *
 * @class
 * Property binding implementation for JSON format
 *
 * @param sPath
 * @param [oModel]
 * @name sap.ui.model.json.JSONPropertyBinding
 * @extends sap.ui.model.PropertyBinding
 */
sap.ui.model.ClientPropertyBinding.extend("sap.ui.model.json.JSONPropertyBinding");

/**
 * Creates a new subclass of class sap.ui.model.json.JSONPropertyBinding with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.json.JSONPropertyBinding.extend
 * @function
 */

/**
 * @see sap.ui.model.PropertyBinding.prototype.setValue
 */
sap.ui.model.json.JSONPropertyBinding.prototype.setValue = function(oValue){
	if (!jQuery.sap.equal(this.oValue, oValue)){
		// the binding value will be updated by the model. The model calls checkupdate on all bindings after updating its value.
		this.oModel.setProperty(this.sPath, oValue, this.oContext);
	}
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * 
 * @param {boolean} bForceupdate
 * 
 */
sap.ui.model.json.JSONPropertyBinding.prototype.checkUpdate = function(bForceupdate){
	var oValue = this._getValue();
	if(!jQuery.sap.equal(oValue, this.oValue) || bForceupdate) {// optimize for not firing the events when unneeded
		this.oValue = oValue;
		this._fireChange({reason: sap.ui.model.ChangeReason.Change});
	}
};
}; // end of sap/ui/model/json/JSONPropertyBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.model.odata.ODataModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * OData-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.odata
 * @public
 */

// Provides class sap.ui.model.odata.ODataModel
jQuery.sap.declare("sap.ui.model.odata.ODataModel");
jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained









/*global OData *///declare unusual global vars for JSLint/SAPUI5 validation
/*global URI *///declare unusual global vars for JSLint/SAPUI5 validation

/**
 * Constructor for a new ODataModel.
 *
 * @param {string} sServiceUrl required - base uri of the service to request data from; additional URL parameters appended here will be appended to every request
 * @param {string | object} [bJSON] (optional) true to request data as JSON or an object which contains the following parameter properties:
 * 							json, user, password, headers, tokenHandling, withCredentials, loadMetadataAsync, maxDataServiceVersion (default = '2.0';
 * please use the following string format e.g. '2.0' or '3.0'. OData version supported by the ODataModel: '2.0'. '3.0' may work but is currently experimental.), 
 * useBatch (all requests will be sent in batch requests default = false),
 * refreshAfterChange (enable/disable automatic refresh after change operations: default = true).
 * See below for descriptions of these parameters.
 * @param {string} [sUser] (optional) user
 * @param {string} [sPassword] (optional) password
 * @param {object} [mHeaders] (optional) map of custom headers which should be set in each request.
 * @param {boolean} [bTokenHandling] (optional) enable/disable XCSRF-Token handling
 * @param {boolean} [bWithCredentials] (optional, experimental) true when user credentials are to be included in a cross-origin request. Please note that this works only if all requests are asynchronous.
 * @param {object} [bLoadMetadataAsync] (optional) determined if the service metadata request is sent synchronous or asynchronous. Default is false.
 * Please note that if this is set to true attach to the metadataLoaded event to get notified when the metadata has been loaded before accessing the service metadata.

 *
 * @class
 * Model implementation for oData format
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @constructor
 * @public
 * @name sap.ui.model.odata.ODataModel
 */
sap.ui.model.Model.extend("sap.ui.model.odata.ODataModel", /** @lends sap.ui.model.odata.ODataModel */ {

	constructor : function(sServiceUrl, bJSON, sUser, sPassword, mHeaders, bTokenHandling, bWithCredentials, bLoadMetadataAsync) {
		sap.ui.model.Model.apply(this, arguments);

		var bUseBatch,
			bRefreshAfterChange,
			sMaxDataServiceVersion;

		if (typeof bJSON === "object") {
			sUser = bJSON.user;
			sPassword = bJSON.password;
			mHeaders = bJSON.headers;
			bTokenHandling = bJSON.tokenHandling;
			bLoadMetadataAsync = bJSON.loadMetadataAsync;
			bWithCredentials = bJSON.withCredentials;
			sMaxDataServiceVersion = bJSON.maxDataServiceVersion;
			bUseBatch = bJSON.useBatch;
			bRefreshAfterChange = bJSON.refreshAfterChange;
			bJSON = bJSON.json;
		}

		this.sDefaultBindingMode = sap.ui.model.BindingMode.OneWay;
		this.mSupportedBindingModes = {"OneWay": true, "OneTime": true, "TwoWay":true};
		this.bCountSupported = true;
		this.bJSON = bJSON;
		this.bCache = true;
		this.oRequestQueue = {};
		this.aBatchOperations = [];
		this.oHandler;
		this.sETag = '';
		this.bTokenHandling = bTokenHandling !== false;
		this.bWithCredentials = bWithCredentials === true;
		this.bUseBatch = bUseBatch === true;
		this.bRefreshAfterChange = bRefreshAfterChange !== false;
		this.sMaxDataServiceVersion = sMaxDataServiceVersion;

		// prepare variables for request headers, data and metadata
		// TODO: metadata should be an separate object furthermore
		this.oHeaders = {};
		this.setHeaders(mHeaders);
		this.oData = {};
		this.oMetadata = {};

		// determine the service base url and the url parameters
		if (sServiceUrl.indexOf("?") == -1) {
			this.sServiceUrl = sServiceUrl;
		} else {
			var aUrlParts = sServiceUrl.split("?");
			this.sServiceUrl = aUrlParts[0];
			this.sUrlParams = aUrlParts[1];
		}

		if (sap.ui.getCore().getConfiguration().getStatistics()) {
			// add statistics parameter to every request (supported only on Gateway servers)
			if (this.sUrlParams) {
				this.sUrlParams = this.sUrlParams + "&sap-statistics=true";
			} else {
				this.sUrlParams = "sap-statistics=true";
			}
		}

		// Remove trailing slash (if any)
		this.sServiceUrl = this.sServiceUrl.replace(/\/$/, "");
		
		// Get/create service specific data container
		this.oServiceData = sap.ui.model.odata.ODataModel.mServiceData[this.sServiceUrl];
		if (!this.oServiceData) {
			sap.ui.model.odata.ODataModel.mServiceData[this.sServiceUrl] = {};
			this.oServiceData = sap.ui.model.odata.ODataModel.mServiceData[this.sServiceUrl];
		}

		// Get CSRF token, if already available
		if (this.bTokenHandling && this.oServiceData.securityToken) {
			this.oHeaders["x-csrf-token"] = this.oServiceData.securityToken;
		}
		
		// store user and password
		this.sUser = sUser;
		this.sPassword = sPassword;

		this.oHeaders["Accept-Language"] = sap.ui.getCore().getConfiguration().getLanguage();

		// load the metadata before setting accept headers because metadata is only available as XML
		if (!bLoadMetadataAsync === true) {
			bLoadMetadataAsync = false;
		}
		this.oMetadata = new sap.ui.model.odata.ODataMetadata(this, bLoadMetadataAsync);

		// set the the header for the accepted content types
		if (this.bJSON) {
			if (this.sMaxDataServiceVersion === "3.0") {
				this.oHeaders["Accept"] = "application/json;odata=fullmetadata";
			} else {
				this.oHeaders["Accept"] = "application/json";
			}
			this.oHandler = OData.jsonHandler;
		} else {
			this.oHeaders["Accept"] = "application/atom+xml,application/atomsvc+xml,application/xml";
			this.oHandler = OData.atomHandler;
		}


		// the max version number the client can accept in a response
		this.oHeaders["MaxDataServiceVersion"] = "2.0";
		if (this.sMaxDataServiceVersion) {
			this.oHeaders["MaxDataServiceVersion"] = this.sMaxDataServiceVersion;
		}

		// set version to 2.0 because 1.0 does not support e.g. skip/top, inlinecount...
		// states the version of the Open Data Protocol used by the client to generate the request.
		this.oHeaders["DataServiceVersion"] = "2.0";

	},
	metadata : {

		publicMethods : ["create", "remove", "update", "submitChanges", "getServiceMetadata", "read", "hasPendingChanges", "refresh", "resetChanges",
		                 "isCountSupported", "setCountSupported", "forceNoCache", "setProperty", "refreshSecurityToken", "setHeaders", "getHeaders",
		                 "formatValue, setUseBatch"]
	}
});

/**
 * Creates a new subclass of class sap.ui.model.odata.ODataModel with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 *
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code>
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.odata.ODataModel.extend
 * @function
 */

//
sap.ui.model.odata.ODataModel.M_EVENTS = {
		RejectChange: "rejectChange",
		/**
		 * Event is fired if the metadata document was successfully loaded
		 */
		MetadataLoaded: "metadataLoaded",
		MetadataFailed: "metadataFailed"
};

// Keep a map of service specific data, which can be shared across different model instances
// on the same OData service
sap.ui.model.odata.ODataModel.mServiceData = {
};

sap.ui.model.odata.ODataModel.prototype.fireRejectChange = function(mArguments) {
	this.fireEvent("rejectChange", mArguments);
	return this;
};

sap.ui.model.odata.ODataModel.prototype.attachRejectChange = function(oData, fnFunction, oListener) {
	this.attachEvent("rejectChange", oData, fnFunction, oListener);
	return this;
};

sap.ui.model.odata.ODataModel.prototype.detachRejectChange = function(fnFunction, oListener) {
	this.detachEvent("rejectChange", fnFunction, oListener);
	return this;
};

/**
 * Fire event metadataLoaded to attached listeners.
 *
 * @param {object} [mArguments] the arguments to pass along with the event.
 * @param {string} [mArguments.message]  A text that describes the failure.
 * @param {string} [mArguments.statusCode]  HTTP status code returned by the request (if available)
 * @param {string} [mArguments.statusText] The status as a text, details not specified, intended only for diagnosis output
 * @param {string} [mArguments.responseText] Response that has been received for the request ,as a text string
 * 
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.model.odata.ODataModel.prototype.fireMetadataLoaded = function(mArguments) {
	this.fireEvent("metadataLoaded", mArguments);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.<br/>
 *
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.attachMetadataLoaded = function(oData, fnFunction, oListener) {
	this.attachEvent("metadataLoaded", oData, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'metadataLoaded' event of this <code>sap.ui.model.odata.ODataModel</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.model.odata.ODataModel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.detachMetadataLoaded = function(fnFunction, oListener) {
	this.detachEvent("metadataLoaded", fnFunction, oListener);
	return this;
};

sap.ui.model.odata.ODataModel.prototype.fireMetadataFailed = function(mArguments) {
	this.fireEvent("metadataFailed", mArguments);
	return this;
};

sap.ui.model.odata.ODataModel.prototype.attachMetadataFailed = function(oData, fnFunction, oListener) {
	this.attachEvent("metadataFailed", oData, fnFunction, oListener);
	return this;
};

sap.ui.model.odata.ODataModel.prototype.detachMetadataFailed = function(fnFunction, oListener) {
	this.detachEvent("metadataFailed", fnFunction, oListener);
	return this;
};
/**
 * creates a request object
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._createRequest = function(sPath, aUrlParams, bAsync, bCache) {

	// create the url for the service
	var sUrl = this.sServiceUrl;
	if (sPath) {
		if (!jQuery.sap.startsWith(sPath, "/")) {
			sUrl += "/";
		}
		sUrl += sPath;
	}
	if (!aUrlParams) {
		aUrlParams = [];
	}
	if (this.sUrlParams) {
		aUrlParams.push(this.sUrlParams);
	}
	if (aUrlParams.length > 0) {
		sUrl += "?" + aUrlParams.join("&");
	}
	if (bCache === undefined) {
		bCache = true;
	}
	if (bCache === false) {

		var timeStamp = jQuery.now();
		// try replacing _= if it is there
		var ret = sUrl.replace( /([?&])_=[^&]*/, "$1_=" + timeStamp );
		// if nothing was replaced, add timestamp to the end
		sUrl = ret + ( ( ret === sUrl ) ? ( /\?/.test( sUrl ) ? "&" : "?" ) + "_=" + timeStamp : "" );
	}

	var oChangeHeader = {};
	jQuery.extend(oChangeHeader, this.mCustomHeaders, this.oHeaders);

	if (bAsync === undefined) {
		bAsync = true;
	}

	// create a request object for the url, url params and async option
	var oRequest = {
		requestUri: sUrl,
		headers: oChangeHeader,
		async: bAsync,
		user: this.sUser,
		password: this.sPassword
	};

	if (bAsync) {
		oRequest.withCredentials = this.bWithCredentials;
	}

	return oRequest;

};

/**
 * Does a request using the service URL and configuration parameters
 * provided in the model's constructor and sets the response data into the
 * model. This request is performed asynchronously.
 *
 * @param {string}
 *            sPath Path A string containing the path to the data which should
 *            be retrieved. The path is concatenated to the <code>sServiceUrl</code>
 *            which was specified in the model constructor.
 * @param {function}
 *            [fnSuccess] a callback function which is called when the data has
 *            been successfully retrieved and stored in the model
 * @param {function}
 *            [fnError] a callback function which is called when the request failed
 *
 * @param {boolean} [bCache=true] Force no caching if false
 *
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._loadData = function(sPath, aParams, fnSuccess, fnError, bCache, fnHandleUpdate){

	// create a request object for the data request
	var oRequestHandle, sRequestUri,
		oRequest = this._createRequest(sPath, aParams, true, bCache || this.bCache);

	// request the data of the service for the given path
	var that = this;

	function _handleSuccess(oData, oResponse) {

		var oResultData = oData;
		// no data available
		if (!oResultData) {
			jQuery.sap.log.fatal("The following problem occurred: No data was retrieved by service: " + oResponse.requestUri);
			that.sChangeKey = null;
			that.fireRequestCompleted({url : oRequest.requestUri, type : "GET", async : oRequest.async, info: "Accept headers:" + that.oHeaders["Accept"], success: false});
			return false;
		}

		if (that.bUseBatch) { // process batch response
			// check if errors occurred in the batch
			var aErrorResponses = that._getBatchErrors(oData);
			if (aErrorResponses.length > 0) {
				// call handle error with the first error.
				_handleError(aErrorResponses[0]);
				return false;
			}

			if (oResultData.__batchResponses && oResultData.__batchResponses.length > 0) {
				oResultData = oResultData.__batchResponses[0].data;
			} else {
				jQuery.sap.log.fatal("The following problem occurred: No data was retrieved by service: " + oResponse.requestUri);
			}
		}

		aResults = aResults.concat(oResultData.results);
		// check if not all requested data was loaded
		if (oResultData.__next){
			// replace request uri with next uri to retrieve additional data
			var oURI = new URI(oResultData.__next);
			sRequestUri = oURI.absoluteTo(oResponse.requestUri).toString();
			sRequestUri += that.sUrlParams ? '&'+ that.sUrlParams : '';
			oRequest.requestUri = sRequestUri;
			readRequestedData(oRequest);
		}else{
			// all data is read so merge all data
			jQuery.extend(oResultData.results, aResults);
			// broken implementations need this
			if (oResultData.results && !jQuery.isArray(oResultData.results)) {
				oResultData = oResultData.results;
			}

			// adding the result data to the data object
			that._importData(oResultData);

			if (fnSuccess) {
				fnSuccess(oResultData);
			}
			that.sChangeKey = null;

			that.fireRequestCompleted({url : oRequest.requestUri, type : "GET", async : oRequest.async, info: "Accept headers:" + that.oHeaders["Accept"], success: true});
		}
	}

	function _handleError(oError) {
		if (fnError) {
			fnError();
		}

		var mParameters = that._handleError(oError);

		that.sChangeKey = null;

		that.fireRequestCompleted({url : oRequest.requestUri, type : "GET", async : oRequest.async, info: "Accept headers:" + that.oHeaders["Accept"], success: false, errorobject: mParameters});

		// Don't fire RequestFailed for intentionally aborted requests
		if (!oRequestHandle.bAborted) {
			that.fireRequestFailed(mParameters);
		}
	}

	/**
	 * this method is used to retrieve all desired data. It triggers additional read requests if the server paging size
	 * permits to return all the requested data. This could only happen for servers with support for oData > 2.0.
	 */
	function readRequestedData(oRequest){
		// execute the request and use the metadata if available

		if (that.bUseBatch) {
			that.clearBatch();
			// batch requests only need the path without the service URL
			// extract query of url and combine it with the path...
			var sUriQuery = URI.parse(oRequest.requestUri).query;
			var sRequestUrl = sPath.replace(/\/$/, ""); // remove trailing slash if any
			sRequestUrl += sUriQuery ? "?" + sUriQuery : "";

			var oReadOp = that.createBatchOperation(sRequestUrl, "GET");
			that.addBatchReadOperations([oReadOp]);
			oRequestHandle = that.submitBatch(_handleSuccess, _handleError, oRequest.async);
		} else {
			oRequestHandle = OData.read(oRequest, _handleSuccess, _handleError, that.oHandler, undefined, that.oMetadata.getServiceMetadata());
		}

		if (fnHandleUpdate) {
			// Create a wrapper for the request handle to be able to differentiate
			// between intentionally aborted requests and failed requests
			var oWrappedHandle = {
				abort: function() {
					oRequestHandle.bAborted = true;
					oRequestHandle.abort();
				}
			};
			fnHandleUpdate(oWrappedHandle);
		}
	}

	// execute request
	var aResults = [];
	this.fireRequestSent({url : oRequest.requestUri, type : "GET", async : oRequest.async, info: "Accept headers:" + this.oHeaders["Accept"]});
	readRequestedData(oRequest);
};

/**
 * Imports the data to the internal storage.
 * Nested entries are processed recursively, moved to the canonic location and referenced from the parent entry.
 */
sap.ui.model.odata.ODataModel.prototype._importData = function(oData) {
	var that = this,
		aList, sKey, oResult, oEntry;
	if (oData.results) {
		aList = [];
		jQuery.each(oData.results, function(i, entry) {
			aList.push(that._importData(entry));
		});
		return aList;
	} else {
		sKey = this._getKey(oData);
		oEntry = this.oData[sKey];
		if (!oEntry) {
			oEntry = oData;
			this.oData[sKey] = oEntry;
		}
		jQuery.each(oData, function(sName, oProperty) {
			if (oProperty && (oProperty.__metadata && oProperty.__metadata.uri || oProperty.results) && !oProperty.__deferred) {
				oResult = that._importData(oProperty);
				if (jQuery.isArray(oResult)) {
					oEntry[sName] = { __list: oResult };
				}
				else {
					oEntry[sName] = { __ref: oResult	};
				}
			} else {
				oEntry[sName] = oProperty;
			}
		});
		return sKey;
	}
};

/**
 * Remove references of navigation properties created in importData function
 */
sap.ui.model.odata.ODataModel.prototype._removeReferences = function(oData){
	var that = this, aList;
	if (oData.results) {
		aList = [];
		jQuery.each(oData.results, function(i, entry) {
			aList.push(that._removeReferences(entry));
		});
		return aList;
	} else {
		jQuery.each(oData, function(sPropName, oCurrentEntry) {
			if (oCurrentEntry) {
				if (oCurrentEntry["__ref"] || oCurrentEntry["__list"]) {
					delete oData[sPropName];
				}
			}
		});
		return oData;
	}
};

/**
 * Restore reference entries of navigation properties created in importData function
 */
sap.ui.model.odata.ODataModel.prototype._restoreReferences = function(oData){
	var that = this,
 	oCurrentEntry, aList,
 	aResults = [];
	if (oData.results) {
		aList = [];
		jQuery.each(oData.results, function(i, entry) {
			aList.push(that._restoreReferences(entry));
		});
		return aList;
	} else {
		jQuery.each(oData, function(sPropName, oCurrentEntry) {
			if (oCurrentEntry && oCurrentEntry["__ref"]) {
				var oChildEntry = that._getObject("/" + oCurrentEntry["__ref"]);
				jQuery.sap.assert(oChildEntry, "ODataModel inconsistent: " + oCurrentEntry["__ref"] + " not found!");
				if (oChildEntry) {
					delete oCurrentEntry["__ref"];
					oData[sPropName] = oChildEntry;
					// check recursively for found child entries
					that._restoreReferences(oChildEntry);
				}
			} else if (oCurrentEntry && oCurrentEntry["__list"]) {
				jQuery.each(oCurrentEntry["__list"], function(j, sEntry) {
					var oChildEntry = that._getObject("/" + oCurrentEntry["__list"][j]);
					jQuery.sap.assert(oChildEntry, "ODataModel inconsistent: " +  oCurrentEntry["__list"][j] + " not found!");
					if (oChildEntry) {
						aResults.push(oChildEntry);
						// check recursively for found child entries
						that._restoreReferences(oChildEntry);
					}
				});
				delete oCurrentEntry["__list"];
				oCurrentEntry.results = aResults;
				aResults = [];
			}
		});
		return oData;
	}
};

/**
 * removes all existing data from the model
 */
sap.ui.model.odata.ODataModel.prototype.removeData = function(){
	this.oData = {};
};

/**
 * Refresh the model.
 * This will check all bindings for updated data and update the controls if data has been changed.
 *
 * @param {boolean} bForceUpdate Update controls even if data has not been changed
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.refresh = function(bForceUpdate) {
	// Call refresh on all bindings instead of checkUpdate to properly reset cached data in bindings
	var aBindings = this.aBindings.slice(0);
	jQuery.each(aBindings, function(iIndex, oBinding) {
		oBinding.refresh(bForceUpdate);
	});
};

/**
 * Private method iterating the registered bindings of this model instance and initiating their check for update
 *
 * @param {boolean} bForceUpdate
 * @param {object} oContext
 *
 * @private
 */
sap.ui.model.odata.ODataModel.prototype.checkUpdate = function(bForceUpdate, oContext) {
	var aBindings = this.aBindings.slice(0);
	jQuery.each(aBindings, function(iIndex, oBinding) {
		if ((!oContext || oBinding.getContext() == oContext) || bForceUpdate) {
			oBinding.checkUpdate(bForceUpdate);
		}
	});
};

/**
 * @see sap.ui.model.Model.prototype.bindProperty
 */
sap.ui.model.odata.ODataModel.prototype.bindProperty = function(sPath, oContext, mParameters) {
	var oBinding = new sap.ui.model.odata.ODataPropertyBinding(this, sPath, oContext, mParameters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindList
 */
sap.ui.model.odata.ODataModel.prototype.bindList = function(sPath, oContext, aSorters, aFilters, mParameters) {
	var oBinding = new sap.ui.model.odata.ODataListBinding(this, sPath, oContext, aSorters, aFilters, mParameters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindTree
 */
sap.ui.model.odata.ODataModel.prototype.bindTree = function(sPath, oContext, aFilters, mParameters) {
	var oBinding = new sap.ui.model.odata.ODataTreeBinding(this, sPath, oContext, aFilters, mParameters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.createBindingContext
 */
sap.ui.model.odata.ODataModel.prototype.createBindingContext = function(sPath, oContext, mParameters, fnCallBack, bReload) {
	var bReload = !!bReload,
		sFullPath = this.resolve(sPath, oContext);
	// optional parameter handling
	if (typeof oContext == "function") {
		fnCallBack = oContext;
		oContext = null;
	}
	if (typeof mParameters == "function") {
		fnCallBack = mParameters;
		mParameters = null;
	}
	// try to resolve path, send a request to the server if data is not available yet
	// if we have set forceUpdate in mParameters we send the request even if the data is available
	var oData = this._getObject(sPath, oContext),
		sKey,
		oNewContext,
		that = this;

	if (!bReload) {
		bReload = this._isReloadNeeded(sFullPath, oData, mParameters);
	}

	if (!bReload) {
		sKey = this._getKey(oData);
		oNewContext = this.getContext('/'+sKey);
		fnCallBack(oNewContext);
	}
	else {
		var bIsRelative = !jQuery.sap.startsWith(sPath, "/");
		if (sFullPath) {
			var aParams = [],
				sCustomParams = this.createCustomParams(mParameters);
			if (sCustomParams) {
				aParams.push(sCustomParams);
			}
			this._loadData(sFullPath, aParams, function(oData) {
				sKey = oData ? that._getKey(oData) : undefined;
				if (sKey && oContext && bIsRelative) {
					var sContextPath = oContext.getPath();
					// remove starting slash
					sContextPath = sContextPath.substr(1);
					// when model is refreshed, parent entity might not be available yet
					if (that.oData[sContextPath]) {
						that.oData[sContextPath][sPath] = {__ref: sKey};
					}
				}
				oNewContext = that.getContext('/'+sKey);
				fnCallBack(oNewContext);
			}, function() {
				fnCallBack(); // error - notify to recreate contexts
			});
		} else {
			fnCallBack(); // error - notify to recreate contexts
		}
	}
};

/**
 * checks if data based on select, expand parameters is already loaded or not.
 * In case it couldn't be found we should reload the data so we return true.
 */
sap.ui.model.odata.ODataModel.prototype._isReloadNeeded = function(sFullPath, oData, mParameters) {
	var sNavProps, aNavProps = [],
		sSelectProps, aSelectProps = [];

	// no data --> load needed
	if (!oData) {
		return true;
	}

	if (mParameters && mParameters["expand"]) {
		sNavProps = mParameters["expand"].replace(/\s/g, "");
		aNavProps = sNavProps.split(',');
	}
	if (mParameters && mParameters["select"]) {
		sSelectProps = mParameters["select"].replace(/\s/g, "");
		aSelectProps = sSelectProps.split(',')
	}

	for(var i = 0; i < aNavProps.length; i++) {
		// reload data if nav property not available or if nav property data is deferred
		if (oData[aNavProps[i]] === undefined || (oData[aNavProps[i]] && oData[aNavProps[i]].__deferred)) {
			return true;
		}
	}

	for(var i = 0; i < aSelectProps.length; i++) {
		// reload data if select property not available
		if (oData[aSelectProps[i]] === undefined) {
			return true;
		}
	}

	if (aSelectProps.length == 0){
		// check if all props exist and are already loaded...
		// only a subset of props may already be loaded before and now we want to load all.
		var oEntityType = this.oMetadata._getEntityTypeByPath(sFullPath);
		if (!oEntityType) {
			// if no entity type could be found we decide not to reload
			return false;
		} else {
			for(var i = 0; i < oEntityType.property.length; i++) {
				if (oData[oEntityType.property[i].name] === undefined) {
					return true;
				}
			}
		}
	}
	return false;
};

/**
 * @see sap.ui.model.Model.prototype.destroyBindingContext
 */
sap.ui.model.odata.ODataModel.prototype.destroyBindingContext = function(oContext) {
};

/**
 * Create URL parameters from custom parameters
 * @private
 */
sap.ui.model.odata.ODataModel.prototype.createCustomParams = function(mParameters) {
	var aCustomParams = [],
		mCustomQueryOptions,
		mSupportedParams = {
			expand: true,
			select: true
		};
	for (var sName in mParameters) {
		if (sName in mSupportedParams) {
			aCustomParams.push("$" + sName + "=" + jQuery.sap.encodeURL(mParameters[sName]));
		}
		if (sName == "custom") {
			mCustomQueryOptions = mParameters[sName];
			for (var sName in mCustomQueryOptions) {
				if (sName.indexOf("$") == 0) {
					jQuery.sap.log.warning("Trying to set OData parameter " + sName + " as custom query option!");
				}
				else {
					aCustomParams.push(sName + "=" + jQuery.sap.encodeURL(mCustomQueryOptions[sName]));
				}
			}
		}
	}
	return aCustomParams.join("&");
};

/**
 * @see sap.ui.model.Model.prototype.bindContext
 */
sap.ui.model.odata.ODataModel.prototype.bindContext = function(sPath, oContext, mParameters) {
	var oBinding = new sap.ui.model.odata.ODataContextBinding(this, sPath, oContext, mParameters);
	return oBinding;
};

/**
 * Sets whether this OData service supports $count on its collections
 *
 * @param {boolean} bCountSupported
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.setCountSupported = function(bCountSupported) {
	this.bCountSupported = bCountSupported;
};

/**
 * Returns whether this model supports the $count on its collections
 *
 * @returns {boolean}
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.isCountSupported = function() {
	return this.bCountSupported;
};


/**
 * Returns the key part from the complete entry URI
 */
sap.ui.model.odata.ODataModel.prototype._getKey = function(oEntry) {
	var sURI = oEntry.__metadata.uri;
	return sURI.substr(sURI.lastIndexOf("/") + 1);
};


/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 *
 * @param {string}
 *          sPath the path/name of the property
 * @param {object} [oContext] the context if available to access the property value
 * @param {boolean} [bIncludeExpandEntries=null] This parameter should be set when a URI or custom parameter
 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
 * If false the associated/expanded entry properties are removed and not included in the
 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
 * @type any
 * @return the value of the property
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.getProperty = function(sPath, oContext, bIncludeExpandEntries) {
	var oValue = this._getObject(sPath, oContext);

	// same behavior as before
	if (bIncludeExpandEntries == null || bIncludeExpandEntries == undefined) {
		return oValue;
	}

	// if value is a plain value and not an object we return directly
	if (!jQuery.isPlainObject(oValue)) {
		return oValue;
	}

	// do a value copy or the changes to that value will be modified in the model as well (reference)
	oValue = jQuery.extend(true, {}, oValue);

	if (bIncludeExpandEntries == true) {
		// include expand entries
		return this._restoreReferences(oValue);
	} else {
		// remove expanded references
		return this._removeReferences(oValue);
	}

};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.odata.ODataModel.prototype._getObject = function(sPath, oContext) {
	var oNode = this.isLegacySyntax() ? this.oData : null,
		sKey;
	if (oContext) {
		sKey = oContext.getPath();
		// remove starting slash
		sKey = sKey.substr(1);
		oNode = this.oData[sKey];
	}
	if (!sPath) {
		return oNode;
	}
	var aParts = sPath.split("/"),
		iIndex = 0;
	if (!aParts[0]) {
		// absolute path starting with slash
		oNode = this.oData;
		iIndex++;
	}
	while(oNode && aParts[iIndex]) {
		oNode = oNode[aParts[iIndex]];
		if (oNode) {
			if (oNode.__ref) {
				oNode = this.oData[oNode.__ref];
			}
			else if (oNode.__list) {
				oNode = oNode.__list;
			}
			else if (oNode.__deferred) {
				oNode = null;
			}
		}
		iIndex++;
	}
	return oNode;
};

/**
 * Update the security token, if token handling is enabled and token is not available yet
 */
sap.ui.model.odata.ODataModel.prototype.updateSecurityToken = function() {
	if (this.bTokenHandling) {
		if (!this.oServiceData.securityToken) {
			this.refreshSecurityToken();
		}
		// Update header every time, in case security token was changed by other model
		if (this.bTokenHandling) {
			this.oHeaders["x-csrf-token"] = this.oServiceData.securityToken;
		}
	}
};

/**
 * Clears the security token, as well from the service data as from the headers object
 */
sap.ui.model.odata.ODataModel.prototype.resetSecurityToken = function() {
	delete this.oServiceData.securityToken;
	delete this.oHeaders["x-csrf-token"];
};

/**
 * refresh XSRF token by performing a GET request against the service root URL.
 *
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully retrieved.
 * @param {function} [fnError] a callback function which is called when the request failed. The handler can have the parameter: oError which contains
 *  additional error information.
 *
 * @param {boolean} [bAsync=false] true for asynchronous requests.
 *
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.refreshSecurityToken = function(fnSuccess, fnError, bAsync) {
	var that = this, sToken;

	// bAsync default is false ?!
	bAsync = bAsync === true;
	
	// trigger a read to the service url to fetch the token
	var oRequest = this._createRequest("/", null, bAsync);
	oRequest.headers["x-csrf-token"] = "Fetch";
	
	function _handleSuccess(oData, oResponse) {
		if (oResponse) {
			sToken = that._getHeader("x-csrf-token", oResponse.headers);
			if (sToken) {
				that.oServiceData.securityToken = sToken;
				// For compatibility with applications, that are using getHeaders() to retrieve the current
				// CSRF token additionally keep it in the oHeaders object
				that.oHeaders["x-csrf-token"] = sToken;
			}
			else {
				// Disable token handling, if service does not return tokens
				that.resetSecurityToken();
				that.bTokenHandling = false;
			}
		}

		if (fnSuccess) {
			fnSuccess(oData, oResponse);
		}
	}

	function _handleError(oError) {
		// Disable token handling, if token request returns an error
		that.resetSecurityToken();
		that.bTokenHandling = false;
		that._handleError(oError);

		if (fnError) {
			fnError(oError);
		}
	}

	return OData.read(oRequest, _handleSuccess, _handleError, this.oHandler, null, this.getServiceMetadata());
};

/**
 * submit changes from the requestQueue (queue can currently have only one request)
 *
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._submitChange = function(oRequest, fnSuccess, fnError){
	var that = this;

	function _handleSuccess(oData, oResponse) {
		// check if embedded errors occurred in success request
		if (that.bUseBatch) {
			// check if errors occurred in the batch
			var aErrorResponses = that._getBatchErrors(oData);
			if (aErrorResponses.length > 0) {
				// call handle error with the first error.
				_handleError(aErrorResponses[0]);
				return false;
			}
			// if response contains data
			if (oData.__batchResponses && oData.__batchResponses.length > 0) {
				oData = oData.__batchResponses[0].data;
			}
		} else {
		//we cannot wait for the refresh to get the new etag
			var sUri = oRequest.requestUri.replace(that.sServiceUrl+'/','')
			if (!jQuery.sap.startsWith(sUri , "/")) {
				sUri = "/" + sUri;
		}
			var oEntry = that._getObject(sUri);
			if (oEntry && oEntry.__metadata && oResponse.headers.ETag){
					oEntry.__metadata.etag = oResponse.headers.ETag;
			}
		}
		if (that.sChangeKey && oRequest.requestUri === that.sChangeKey) {
			that.sChangeKey = null;
		}

		var oRequestToDelete = oRequest;

		// delete request from queue: if it is a create entry or a remove we also delete the data from oData
		jQuery.each(that.oRequestQueue,function(sName, oRequest){
			oRequest === oRequestToDelete ? delete that.oRequestQueue[sName] : false;

			// delete created entry via POST (CREATE) and DELETE
			if ((oRequest.method === "POST" && !oRequest.headers["x-http-method"]) || oRequest.method === "DELETE") {
				var sPath = sName.substr(sName.lastIndexOf('/') + 1);
				delete that.oData[sPath];
				delete that.mContexts["/" + sPath]; // contexts are stored starting with /
			}
		});
		 // use Batch already does a refresh so don't do it again
		if (!that.bUseBatch && that.bRefreshAfterChange && that._isRefreshNeeded(oRequest, oResponse)){
			that.refresh();
		}

		if (fnSuccess) {
			fnSuccess(oData, oResponse);
		}
	}

	function _handleError(oError) {

		// if batch is enabled don't call handle error because _submitBatch has its own _handleError call
		if (!that.bUseBatch) {
			that._handleError(oError);
		}

		if (that.sChangeKey && oRequest.requestUri === that.sChangeKey && that._isRefreshNeeded(oRequest, oError.response )) {
			that.sChangeKey = null;
			delete that.oRequestQueue[oRequest.requestUri];
			that.refresh();
		}

		if (fnError) {
			fnError(oError);
		}
	}
	
	if (this.bUseBatch) {
		var oParameters = {};
		this.clearBatch();
		var sRequestUrl = this._getBatchUrl(oRequest.requestUri);

		// check MERGE which is converted to POST in _createChangeRequest function
		if (oRequest.method === "POST" && oRequest.headers["x-http-method"] === "MERGE") {
			oRequest.method = "MERGE";
		}
		if(oRequest.headers["If-Match"]){
			//we have an etag
			oParameters.sETag = oRequest.headers["If-Match"];
		}
		var oChangeOp = this.createBatchOperation(sRequestUrl, oRequest.method, oRequest.data, oParameters);
		this.addBatchChangeOperations([oChangeOp]);
		return this.submitBatch(_handleSuccess, _handleError, oRequest.async);
	} else {
		// request token only if we have change operations 
		// token needs to be set directly on request headers, as request is already created
		this.updateSecurityToken();
		if (this.bTokenHandling) {
			oRequest.headers["x-csrf-token"] = this.oServiceData.securityToken;
		}
		return OData.request(oRequest, _handleSuccess, _handleError, that.oHandler, undefined, this.getServiceMetadata());
	}
};

/**
 * submit batch requests and collects errors of included requests in an array.
 *
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._submitBatch = function(oRequest, fnSuccess, fnError){
	var that = this,
		aErrorResponses = [];

	function _handleSuccess(oData, oResponse) {
		// check if errors occurred in the batch
		aErrorResponses = that._getBatchErrors(oData);

			if (aErrorResponses.length === 0){
				try {
					var sUri, aChangeRequests, aChangeResponses, oRefObject ;
					var aBatchRequests = oRequest.data.__batchRequests;
					var aBatchResponses= oResponse.data.__batchResponses;
					if(aBatchRequests){
						for(var i = 0; i < aBatchRequests.length; i++){
							// get change requests and corresponding responses - the latter are in the same order as the requests according to odata spec
							aChangeRequests = aBatchRequests[i].__changeRequests;
							aChangeResponses = aBatchResponses[i].__changeResponses;
							if(aChangeRequests && aChangeResponses){
								for(var j = 0; j < aChangeRequests.length; j++){
									if(aChangeRequests[j].method == "MERGE" || aChangeRequests[j].method == "POST" ){
										//try to get the object to the uri from the model
										sUri = aChangeRequests[j].requestUri.replace(this.sServiceUrl+'/','');
										if (!jQuery.sap.startsWith(sUri , "/")) {
											sUri = "/" + sUri;
										}
										oRefObject = that._getObject(sUri);
										// if there is an object, try to update its eTag from the response.
										oRefObject.__metadata.etag = aChangeResponses[j].headers.ETag;
									}
								}
							}
						}
					}
				} catch (e) {
					jQuery.sap.log.warning("could not update ETags");
				};
			}

		if (that.bRefreshAfterChange && that._isRefreshNeeded(oRequest, oResponse)){
			that.refresh();
		}

		if (fnSuccess) {
			fnSuccess(oData, oResponse, aErrorResponses);
		}
	}

	function _handleError(oError) {
		that._handleError(oError);

		if (fnError) {
			fnError(oError);
		}
	}

	this.updateSecurityToken();
	if (this.bTokenHandling) {
		oRequest.headers["x-csrf-token"] = this.oServiceData.securityToken;
	}

	var oRequestHandle = OData.request(oRequest, _handleSuccess, _handleError, OData.batchHandler, undefined, this.getServiceMetadata());
	// clear batch stack
	this.aBatchOperations = [];
	return oRequestHandle;

};


sap.ui.model.odata.ODataModel.prototype._getBatchErrors = function(oData) {
	var aErrorResponses = [], sErrorMsg;
	// check if errors occurred in the batch
	jQuery.each(oData.__batchResponses, function(iIndex, oOperationResponse) {
		if (oOperationResponse.message) {
			sErrorMsg = "The following problem occurred: " + oOperationResponse.message;
			if (oOperationResponse.response) {
				sErrorMsg += oOperationResponse.response.statusCode + "," +
				oOperationResponse.response.statusText + "," +
				oOperationResponse.response.body;
			}
			aErrorResponses.push(oOperationResponse);
			jQuery.sap.log.fatal(sErrorMsg);
		}
		if (oOperationResponse.__changeResponses) {
			jQuery.each(oOperationResponse.__changeResponses, function(iIndex, oChangeOperationResponse) {
				if (oChangeOperationResponse.message) {
					sErrorMsg = "The following problem occurred: " + oChangeOperationResponse.message;
					if (oChangeOperationResponse.response) {
						sErrorMsg += oChangeOperationResponse.response.statusCode + "," +
						oChangeOperationResponse.response.statusText + "," +
						oChangeOperationResponse.response.body;
					}
					aErrorResponses.push(oChangeOperationResponse);
					jQuery.sap.log.fatal(sErrorMsg);
				}
			});
		}
	});
	return aErrorResponses;
};

/**
 * error handling for requests
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._handleError = function(oError) {
	var mParameters = {}, fnHandler, sToken;
	var sErrorMsg = "The following problem occurred: " + oError.message;

	mParameters.message = oError.message;
	if (oError.response){
		if (this.bTokenHandling) {
			// if XSRFToken is not valid we get 403 with the x-csrf-token header : Required.
			// a new token will be fetched in the refresh afterwards.
			sToken = this._getHeader("x-csrf-token", oError.response.headers);
			if (oError.response.statusCode == '403' && sToken && sToken.toLowerCase() == "required") {
				this.resetSecurityToken();
			}
		}
		sErrorMsg += oError.response.statusCode + "," +
		oError.response.statusText + "," +
		oError.response.body;
		mParameters.statusCode = oError.response.statusCode;
		mParameters.statusText = oError.response.statusText;
		mParameters.responseText = oError.response.body;
	}
	jQuery.sap.log.fatal(sErrorMsg);

	return mParameters;
};

/**
 * reset changes
 *
 * @private
 */
/*sap.ui.model.odata.ODataModel.prototype.resetChanges = function(fnSuccess, fnError) {
	var that = this, sPath;


};*/

/**
 * Return requested data as object if the data has already been loaded and stored in the model.
 *
 * @param {string} sPath A string containing the path to the data object that should be returned.
 * @param {object} [oContext] the optional context which is used with the sPath to retrieve the requested data.
 * @param {boolean} [bIncludeExpandEntries=null] This parameter should be set when a URI or custom parameter
 * with a $expand System Query Option was used to retrieve associated entries embedded/inline.
 * If true then the getProperty function returns a desired property value/entry and includes the associated expand entries (if any).
 * If false the associated/expanded entry properties are removed and not included in the
 * desired entry as properties at all. This is useful for performing updates on the base entry only. Note: A copy and not a reference of the entry will be returned.
 *
 * return {object} oData Object containing the requested data if the path is valid.
 * @public
 * @deprecated please use {@link #getProperty} instead
 */
sap.ui.model.odata.ODataModel.prototype.getData = function(sPath, oContext, bIncludeExpandEntries) {
	return this.getProperty(sPath, oContext, bIncludeExpandEntries);
};

/**
 * get change url: the url which can be used to easily trigger your change without "nachdenken".
 *
 * @return {string} change url
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._getChangeUrl = function(sPath, oContext){
	var sUrl, sKey;

	if (oContext) {
		sKey = oContext.getPath();
		// remove starting slash
		sKey = sKey.substr(1);
	}

	sPath = sPath.replace(/^\/|\/$/g, "");

	if(oContext && sPath) {
		sUrl = this.sServiceUrl + '/' + sKey + '/' + sPath;
	} else if (!oContext && sPath){
		sUrl = this.sServiceUrl + '/' + sPath;
	} else {
		sUrl = this.sServiceUrl + '/' + sKey;
	}
	return sUrl;
};

/**
 * sets this.sETag to either the passed sETag or tries to retrieve the ETag from the metadata of oPayload or sPath
 *
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._setCurrentETag = function(sPath, oPayload, sETag) {
	var sCurrent, sEntry;
	if(sETag){
		sCurrent = sETag;
	}
	else{
		if (oPayload && oPayload.__metadata){
			sCurrent = oPayload.__metadata.etag;
		}
		else if(sPath){
			sEntry = sPath.replace(this.sServiceUrl+'/','');
			if (this.oData.hasOwnProperty(sEntry)){
				sCurrent = this.getProperty('/' + sEntry +'/__metadata/etag');
			}
		}
	}
	this.sETag = sCurrent;
};
/**
 * creation of a request object for changes
 *
 * @return {object} request object
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._createChangeRequest = function(sUrl, oPayload, sMethod, bAsync, sETag) {
	var oChangeHeader = {};
	jQuery.extend(oChangeHeader, this.mCustomHeaders, this.oHeaders);

	this._setCurrentETag(sUrl, oPayload, sETag);

	if(this.sETag){
		oChangeHeader["If-Match"] = this.sETag;
	}
	// make sure to set content type header for POST/PUT requests when using JSON format to prevent datajs to add "odata=verbose" to the content-type header
	// may be removed as later gateway versions support this
	if (this.bJSON && sMethod != "DELETE" && this.sMaxDataServiceVersion === "2.0") {
		oChangeHeader["Content-Type"] = "application/json";
	}

	if (sMethod == "MERGE") {
		oChangeHeader["x-http-method"] = "MERGE";
		sMethod = "POST";
	}

	if (bAsync === undefined) {
		bAsync = true;
	}

	var oRequest = {
			headers : oChangeHeader,
			requestUri : sUrl,
			method : sMethod,
			data : oPayload,
			user: this.sUser,
			password: this.sPassword,
			async: bAsync
	};

	if (bAsync) {
		oRequest.withCredentials = this.bWithCredentials;
	}

	return oRequest;
};

/**
 * Checks if a model refresh is needed, either because the the data provided by the sPath and oContext is stored
 * in the model or new data is added (POST). For batch requests all embedded requests are checked separately.
 *
 * @return {boolean}
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._isRefreshNeeded = function(oRequest, oResponse) {
	var bRefreshNeeded = false,
	sErrorCode,
	aErrorResponses = [],
		that = this;

	// if this is a batch request, loop through the batch operations, find change requests
	// and check every change request individually
	if (oRequest.data && jQuery.isArray(oRequest.data.__batchRequests)) {
		if(oResponse) {
			aErrorResponses = that._getBatchErrors(oResponse.data);
			jQuery.each(aErrorResponses, function(iIndex, oErrorResponse){
				if (oErrorResponse.response && oErrorResponse.response.statusCode == "412"){
					sErrorCode = oErrorResponse.response.statusCode;
					return false;
				}
			});
			if (!!sErrorCode){
				return false;
			}
		}
		jQuery.each(oRequest.data.__batchRequests, function(iIndex, oBatchRequest) {
			if (jQuery.isArray(oBatchRequest.__changeRequests)) {
				jQuery.each(oBatchRequest.__changeRequests, function(iIndex, oChangeRequest) {
					bRefreshNeeded = bRefreshNeeded || that._isRefreshNeeded(oChangeRequest);
					return !bRefreshNeeded; //break
				});
			}
			return !bRefreshNeeded; //break
		});
	} else {
		var sPath = oRequest.requestUri.replace(this.sServiceUrl,''),
			oData = this._getObject(sPath);
		if (oData || oRequest.method === "POST" || oRequest.method === "DELETE" || oRequest.method === "MERGE") {
			if(oResponse && oResponse.statusCode == "412"){
				bRefreshNeeded = false;
			}
			else{
				bRefreshNeeded = true;
			}
		}
	}
	return bRefreshNeeded;
};

/**
 * Trigger a PUT/MERGE request to the odata service that was specified in the model constructor. Please note that deep updates are not supported
 * and may not work. These should be done seperate on the entry directly.
 *
 * @param {string} sPath A string containing the path to the data that should be updated.
 * 							The path is concatenated to the sServiceUrl which was specified
 * 							in the model constructor.
 * @param {object} oData data of the entry that should be updated.
 * @param {object} [oParameters] Optional, can contain the following attributes:
 * @param {object} [oParameters.oContext] If specified the sPath has to be is relative to the path given with the context.
 * @param {function} [oParameters.fnSuccess] a callback function which is called when the data has been successfully updated.
 * @param {function} [oParameters.fnError] a callback function which is called when the request failed.
 *     The handler can have the parameter <code>oError</code> which contains additional error information.
 * @param {boolean} [oParameters.bMerge=false] trigger a MERGE request instead of a PUT request to perform a differential update
 * @param {string} [oParameters.sETag] If specified, the If-Match-Header will be set to this Etag.
 *
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 *
 * @public
 */

sap.ui.model.odata.ODataModel.prototype.update = function(sPath, oData, oParameters) {
	var fnSuccess, fnError, bMerge, oRequest, sUrl, oContext, sETag;
//ensure compatibility, check for old or new declaration of parameters
	if (oParameters instanceof sap.ui.model.Context || arguments.length >3)
	{
		oContext = oParameters;
		fnSuccess = arguments [3];
		fnError = arguments [4];
		bMerge = arguments [5];
	}
	else{
		if (oParameters instanceof Object){
		//we are using the new parameters
			oContext = oParameters.oContext;
			fnSuccess = oParameters.fnSuccess;
			fnError = oParameters.fnError;
			bMerge = oParameters.bMerge;
			sETag = oParameters.sETag;
		//else oParameters is just not there
		}
	}
	sUrl = this._getChangeUrl(sPath, oContext);

	if (bMerge) {
		oRequest = this._createChangeRequest(sUrl, oData, "MERGE", false, sETag);
	} else {
		oRequest = this._createChangeRequest(sUrl, oData, "PUT", false, sETag);
	}

	this.oRequestQueue[oRequest.requestUri] = oRequest;

	return this._submitChange(oRequest, fnSuccess, fnError);

};

/**
 * Trigger a POST request to the odata service that was specified in the model constructor. Please note that deep creates are not supported
 * and may not work.
 * @param {string} sPath A string containing the path to the collection where an entry
 *                      should be created. The path is concatenated to the sServiceUrl
 *                      which was specified in the model constructor.
 * @param {object} oData data of the entry that should be created.
 * @param {object} [oContext] If specified the sPath has to be relative to the path given with the context.
 *
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *                              been successfully retrieved. The handler can have the
 *                              following parameters: oData and response.
 *
 * @param {function} [fnError] a callback function which is called when the request failed.
 *           The handler can have the parameter <code>oError</code> which contains additional error information.
 *
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.create = function(sPath, oData, oContext, fnSuccess, fnError) {
	var oRequest, sUrl;

	sUrl = this._getChangeUrl(sPath, oContext);

	oRequest = this._createChangeRequest(sUrl, oData, "POST", false);

	this.oRequestQueue[oRequest.requestUri] = oRequest;

	return this._submitChange(oRequest, fnSuccess, fnError);

};

/**
 * Trigger a DELETE request to the odata service that was specified in the model constructor.
 *
 * @param {string} sPath A string containing the path to the data that should be removed.
 *                       The path is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {object} [oParameters] Optional, can contain the following attributes: oContext, fnSuccess, fnError, sETag:
 * @param {object} [oParameters.oContext] If specified the sPath has to be relative to the path given with the context.
 * @param {function} [oParameters.fnSuccess]  a callback function which is called when the data has been successfully retrieved.
 *                       The handler can have the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} [oParameters.fnError] a callback function which is called when the request failed.
 *                       The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @param {string} [oParameters.sETag] If specified, the If-Match-Header will be set to this Etag.
 * @param {object} [oParameters.oPayload] if specified, this optional variable can be used to pass a payload into the delete function,
 *                       e.g. if the entry which should be deleted has not been bound to any control, but has been retrieved via read, only.
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.remove = function(sPath, oParameters) {
	var oContext, fnSuccess, fnError, oRequest, sUrl, sETag, oPayload;
	// maintain compatibility, check if the old or new function parameters are used and set values accordingly:
	if ((oParameters && oParameters instanceof sap.ui.model.Context) || arguments[2])
	{
		oContext = oParameters;
		fnSuccess = arguments [2];
		fnError = arguments [3];
	} else {
	  if (oParameters){
	  	oContext = oParameters.oContext;
			fnSuccess = oParameters.fnSuccess;
			fnError = oParameters.fnError;
			sETag = oParameters.sETag;
			oPayload = oParameters.oPayload;
	  }
	}
	sUrl = this._getChangeUrl(sPath, oContext);

	oRequest = this._createChangeRequest(sUrl, oPayload, "DELETE", false, sETag);

	this.oRequestQueue[oRequest.requestUri] = oRequest;

	return this._submitChange(oRequest, fnSuccess, fnError);

};

/**
 * Trigger a request to the function import odata service that was specified in the model constructor.
 *
 * @param {string} sFunctionName A string containing the name of the function to call.
 *                       The name is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {string} sMethod A string containing the type of method to call this function with
 * @param {map} oParameters A map containing the parameters that will be passed as query strings
 * @param {object} oContext If specified the sPath has to be relative to the path given with the context.
 * @param {function} fnSuccess  a callback function which is called when the data has been successfully retrieved.
 *                       The handler can have the following parameters: <code>oData<code> and <code>response</code>.
 * @param {function} fnError a callback function which is called when the request failed.
 *                       The handler can have the parameter: <code>oError</code> which contains additional error information.
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.callFunction = function (sFunctionName, sMethod, oParameters, oContext, fnSuccess, fnError) {
    var oRequest, sUrl;
    var that = this;
    var oUrlParams = {};
    var oFunctionMetadata = this.oMetadata._getFunctionImportMetadata(sFunctionName, sMethod);
    jQuery.sap.assert(oFunctionMetadata, "Function " + sFunctionName + " not found in the metadata !");
    if (oFunctionMetadata) {
        sUrl = this._getChangeUrl(sFunctionName, oContext);

        var sUrlURI = URI(sUrl);
        if (oFunctionMetadata.parameter != null) {
            jQuery.each(oParameters, function (sParameterName, oParameterValue) {
                var matchingParameters = jQuery.grep(oFunctionMetadata.parameter, function (oParameter) {
                    return oParameter.name == sParameterName && oParameter.mode == "In";
                });
                if (matchingParameters != null && matchingParameters.length > 0) {
                    var matchingParameter = matchingParameters[0];
                    oUrlParams[sParameterName] = that.formatValue(oParameterValue, matchingParameter.type);
                }
                else {
                    jQuery.sap.log.warning("Parameter " + sParameterName + " is not defined for function call " + sFunctionName + "!");
                }
            });
        }
        if (sMethod === "GET") {
        	// parameters are encoded in read function
            that.read(sFunctionName, oContext, oUrlParams, true, fnSuccess, fnError)
        }
        else {
            jQuery.each(oUrlParams, function (sParameterName, oParameterValue) {
            	// addQuery also encodes the url
                sUrlURI.addQuery(sParameterName, oParameterValue);
            });
            oRequest = this._createChangeRequest(sUrlURI.toString(), null, sMethod, false);

            this.oRequestQueue[oRequest.requestUri] = oRequest;

            return this._submitChange(oRequest, fnSuccess, fnError);
        }
    }
};

/**
 * Trigger a GET request to the odata service that was specified in the model constructor.
 * The data will not be stored in the model. The requested data is returned with the response.
 *
 * @param {string} sPath A string containing the path to the data which should
 *            				be retrieved. The path is concatenated to the sServiceUrl
 *            				which was specified in the model constructor.
 * @param {object} [oContext] If specified the sPath has to be is relative to the path given with the context.
 * @param {any[]} [oUrlParams] An map of url parameters which will be concatenated to the read url
 *
 * @param {boolean} [bAsync] true for asynchronous requests. Default is true.
 *
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully retrieved. The handler can have the
 *            	                 following parameters: oData and response.
 * @param {function} [fnError] a callback function which is called when the request failed. The handler can have the parameter: oError which contains
 * additional error information.
 *
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.read = function(sPath, oContext, oUrlParams, bAsync, fnSuccess, fnError) {
	var oRequest, sUrl,
		that = this,
		aUrlParams = [];

	sUrl = this._getChangeUrl(sPath, oContext);

	if (oUrlParams && !jQuery.isArray(oUrlParams)) {
		// convert parameter map into parameter array as needed by read function
		jQuery.each(oUrlParams, function (sParameterName, oParameterValue) {
			if (jQuery.type(oParameterValue) === "string") {
				oParameterValue = jQuery.sap.encodeURL(oParameterValue);
			}
			aUrlParams.push(jQuery.sap.encodeURL(sParameterName) + "=" + oParameterValue);
		});
	} else {
		// compatibility with old aUrlParams array
		aUrlParams = oUrlParams;
	}

	oRequest = this._createRequest(sUrl.replace(this.sServiceUrl,''), aUrlParams, bAsync);

	if (this.bUseBatch) {
		this.clearBatch();

		var sRequestUrl = this._getBatchUrl(oRequest.requestUri);

		var oReadOp = that.createBatchOperation(sRequestUrl, "GET");
		that.addBatchReadOperations([oReadOp]);

		// check if embedded errors occurred in success request
		var _fnSuccess = function(oData, oResponse){
			// check if errors occurred in the batch
			var aErrorResponses = that._getBatchErrors(oData);
			if (aErrorResponses.length > 0) {
				// call handle error with the first error.
				if (fnError) {
					fnError(aErrorResponses[0]);
				}
				return false;
			}
			// first response should contain the data
			if (oData.__batchResponses && oData.__batchResponses.length > 0) {
				oData = oData.__batchResponses[0].data;
			} else {
				jQuery.sap.log.fatal("The following problem occurred: No data was retrieved by service: " + oResponse.requestUri);
			}
			if (fnSuccess) {
				fnSuccess(oData, oResponse);
			}
		}

		return that.submitBatch(_fnSuccess, fnError, oRequest.async);
	} else {
		return OData.read(oRequest, fnSuccess, fnError, this.oHandler, null, this.getServiceMetadata());
	}

};

sap.ui.model.odata.ODataModel.prototype._getBatchUrl = function(sUrl) {
	// batch requests only need the path without the service URL
	// extract query of url and combine it with the path...
	var sExtractedUrl = sUrl.replace(this.sServiceUrl,'');
	var sRequestUrl = sExtractedUrl.replace(/\/$/, ""); // remove trailing slash if any
	return sRequestUrl;
};

/**
 * Creates a single batch operation (read or change operation) which can be used in a batch request.
 *
 * @param {string} sPath A string containing the path to the collection or entry where the batch operation should be performed.
 * 						The path is concatenated to the sServiceUrl which was specified in the model constructor.
 * @param {string} sMethod for the batch operation. Possible values are GET, PUT, MERGE, POST, DELETE
 * @param {object} [oData] optional data payload which should be created, updated, deleted in a change batch operation.
 * @param {object} [oParameters] optional parameter for additional information introduced in SAPUI5 1.9.1,
 * @param {string} [oParameters.sETag] an ETag which can be used for concurrency control. If it is specified,
 *                  it will be used in an If-Match-Header in the request to the server for this entry.
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.createBatchOperation = function(sPath, sMethod, oData, oParameters) {
	var oChangeHeader = {}, sETag;
	jQuery.extend(oChangeHeader, this.mCustomHeaders, this.oHeaders);

	// for batch remove starting / if any
	if (jQuery.sap.startsWith(sPath, "/")) {
		sPath = sPath.substr(1);
	}

	if (oParameters){
		sETag = oParameters.sETag;
	}

	if (sMethod != "GET"){
		this._setCurrentETag(sPath, oData, sETag);
		if(this.sETag){
			oChangeHeader["If-Match"] = this.sETag;
		}
	}
	// make sure to set content type header for POST/PUT requests when using JSON format to prevent datajs to add "odata=verbose" to the content-type header
	// may be removed as later gateway versions support this
	if (this.bJSON){
		if (sMethod != "DELETE" && sMethod != "GET" && this.sMaxDataServiceVersion === "2.0") {
			oChangeHeader["Content-Type"] = "application/json";
		}
	}
	else {
		// for XML case set the content-type accordingly so that the data is transformed to XML in the batch part
		oChangeHeader["Content-Type"] = "application/atom+xml";
	}

	var oRequest = {
		requestUri: sPath,
		method: sMethod.toUpperCase(),
		headers: oChangeHeader
	};

	if (oData) {
		oRequest.data = oData;
	}

	return oRequest;

};

/**
 * Appends the read batch operations to the end of the batch stack. Only GET batch operations should be included in the specified array.
 * If an illegal batch operation is added to the batch nothing will be performed and false will be returned.
 *
 * @param {any[]} aReadOperations an array of read batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = GET
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.addBatchReadOperations = function(aReadOperations) {
	if (!jQuery.isArray(aReadOperations) || aReadOperations.length <= 0) {
		jQuery.sap.log.warning("No array with batch operations provided!");
		return false;
	}
	var that = this;
	jQuery.each(aReadOperations, function(iIndex, oReadOperation) {
		if (oReadOperation.method != "GET") {
			jQuery.sap.log.warning("Batch operation should be a GET operation!");
			return false;
		}
		that.aBatchOperations.push(oReadOperation);
	});
};

/**
 * Appends the change batch operations to the end of the batch stack. Only PUT, POST or DELETE batch operations should be included in the specified array.
 * The operations in the array will be included in a single changeset. To embed change operations in different change sets call this method with the corresponding change operations again.
 * If an illegal batch operation is added to the change set nothing will be performed and false will be returned.
 *
 * @param {any[]} aChangeOperations an array of change batch operations created via <code>createBatchOperation</code> and <code>sMethod</code> = POST, PUT, MERGE or DELETE
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.addBatchChangeOperations = function(aChangeOperations) {
	if (!jQuery.isArray(aChangeOperations) || aChangeOperations.length <= 0) {
		return false;
	}
	jQuery.each(aChangeOperations, function(iIndex, oChangeOperation) {
		if (oChangeOperation.method != "POST" && oChangeOperation.method != "PUT" && oChangeOperation.method != "MERGE" && oChangeOperation.method != "DELETE") {
			jQuery.sap.log.warning("Batch operation should be a POST/PUT/MERGE/DELETE operation!");
			return false;
		}
	});
	this.aBatchOperations.push({ __changeRequests : aChangeOperations });
};

/**
 * Removes all operations in the current batch.
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.clearBatch = function() {
	this.aBatchOperations = [];
};

/**
 * Submits the collected changes in the batch which were collected via <code>addBatchReadOperations</code> or <code>addBatchChangeOperations</code>.
 * The batch will be cleared afterwards. If the batch is empty no request will be performed and false will be returned.
 * Note: No data will be stored in the model.
 *
 * @param {function} [fnSuccess] a callback function which is called when the batch request has
 *            					 been successfully sent. Note: There might have errors occured in the single batch operations. These errors can be accessed in the
 *            aErrorResponses parameter in the callback handler.
 *            The handler can have the
 *            	                 following parameters: oData, oResponse and aErrorResponses.
 *
 * @param {function} [fnError] a callback function which is called when the batch request failed. The handler can have the parameter: oError which contains
 * additional error information.
 * @param {boolean} [bAsync] true for asynchronous request. Default is true.
 *
 * @return {object} an object which has an <code>abort</code> function to abort the current request. Returns false if no request will be performed because the batch is empty.
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.submitBatch = function(fnSuccess, fnError, bAsync) {
	var oRequest, sUrl;

	// ensure compatibility with old declaration: // bAsync, fnSuccess, fnError
	if (!(typeof(fnSuccess) == "function")) {
		var fnOldError = bAsync;
		var fnOldSuccess = fnError;
		bAsync = fnSuccess;
		fnSuccess = fnOldSuccess;
		fnError = fnOldError;
	}

	if (this.aBatchOperations.length <= 0) {
		jQuery.sap.log.warning("No batch operations in batch. No request will be triggered!");
		return false;
	}

	sUrl = this.sServiceUrl	+ "/$batch";

	if (this.sUrlParams) {
		sUrl += "?" + this.sUrlParams;
	}

	var oChangeHeader = {};
	jQuery.extend(oChangeHeader, this.mCustomHeaders, this.oHeaders);

	// reset
	delete oChangeHeader["Content-Type"];

	// create payload
	var oPayload = { };
	oPayload.__batchRequests = this.aBatchOperations;

	if (bAsync === undefined) {
		bAsync = true;
	}

	var oRequest = {
		    headers : oChangeHeader,
		    requestUri : sUrl,
		    method : "POST",
		    data : oPayload,
		    user: this.sUser,
		    password: this.sPassword,
		    async: bAsync
	};

	if (bAsync) {
		oRequest.withCredentials = this.bWithCredentials;
	}

	return this._submitBatch(oRequest, fnSuccess, fnError);
};

/**
 * Return the metadata object. Please note that when using the model with bLoadMetadataAsync = true then this function might return undefined because the
 * metadata has not been loaded yet.
 * In this case attach to the <code>metadataLoaded</code> event to get notified when the metadata is available and then call this function.
 *
 * @return {Object} metdata object
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.getServiceMetadata = function() {
	if (this.oMetadata.getServiceMetadata) {
		return this.oMetadata.getServiceMetadata();
	}
	return undefined;
};


/**
 * Submits the collected changes which were collected by the setProperty method. A MERGE request will be triggered to only update the changed properties.
 * If a URI with a $expand System Query Option was used then the expand entries will be removed from the collected changes.
 * Changes to this entries should be done on the entry itself. So no deep updates are supported.
 *
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully updated. The handler can have the
 *            	                 following parameters: oData and response.
 * @param {function} [fnError] a callback function which is called when the request failed. The handler can have the parameter: oError which contains
 * additional error information
 * @param {object} [oParameters] optional parameter for additional information introduced in SAPUI5 1.9.1
 * @param {string} [oParameters.sETag] an ETag which can be used for concurrency control. If it is specified, it will be used in an If-Match-Header in the request to the server for this entry.
 * @return {object} an object which has an <code>abort</code> function to abort the current request.
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.submitChanges = function(fnSuccess, fnError, oParameters) {

	var oRequest, oPayload, that = this, sPath, sETag, sType, sMetadataETag;

	if (this.sChangeKey) {

		sPath = this.sChangeKey.replace(this.sServiceUrl,'');

		oPayload = this._getObject(sPath);

		if (jQuery.isPlainObject(oPayload)) {
			// do a copy of the payload or the changes will be deleted in the model as well (reference)
			oPayload = jQuery.extend(true, {}, oPayload);
			// remove metadata, navigation properties to reduce payload
			if (oPayload.__metadata) {
				sType = oPayload.__metadata.type;
				sMetadataETag = oPayload.__metadata.etag;
				delete oPayload.__metadata;
				if (sType || sMetadataETag) {
					oPayload.__metadata = {};
				}
				// type information may be needed by an odata service!!!
				if(sType){
					oPayload.__metadata.type = sType;
				}
				// etag information may be needed by an odata service, too!!!
				if (!!sMetadataETag) {
					oPayload.__metadata.etag = sMetadataETag;
				}
			}
			jQuery.each(oPayload, function(sPropName, oPropValue) {
				if (oPropValue && oPropValue.__deferred) {
					delete oPayload[sPropName];
				}
			});

			// delete expand properties = navigation properties
			var oEntityType = this.oMetadata._getEntityTypeByPath(sPath);
			if (oEntityType) {
				var aNavProps = this.oMetadata._getNavigationPropertyNames(oEntityType);
				jQuery.each(aNavProps, function(iIndex, sNavPropName) {
					delete oPayload[sNavPropName];
				});
			}
			// remove any yet existing references which should already have been deleted
			oPayload = this._removeReferences(oPayload);
		}
		if (oParameters && oParameters.sETag){
			sETag = oParameters.sETag;
		}

		oRequest = this._createChangeRequest(this.sChangeKey, oPayload, "MERGE", true, sETag);

		this.oRequestQueue[this.sChangeKey] = oRequest;
	}
	function _handleSuccess(oData, oResponse) {
		if (fnSuccess) {
			fnSuccess(oData, oResponse);
		}
	}
	function _handleError(oError) {
		if (fnError) {
			fnError(oError);
		}
	}

	//loop request queue
	jQuery.each(this.oRequestQueue, function(sKey, oRequest){
		//remove create flag
		oRequest.data._bCreate ? delete oRequest.data._bCreate : false;
		that._submitChange(oRequest, _handleSuccess, _handleError);
	});
	return undefined;
};

/**
 *
 * Resets the collected changes by the setProperty method and reloads the data from the server.
 *
 * @param {function} [fnSuccess] a callback function which is called when the data has
 *            					 been successfully resetted. The handler can have the
 *            	                 following parameters: oData and response.
 * @param {function} [fnError] a callback function which is called when the request failed
 *
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.resetChanges = function(fnSuccess, fnError) {

	var sPath;
	if (this.sChangeKey) {
		sPath = this.sChangeKey.replace(this.sServiceUrl,'');
		this._loadData(sPath, null, fnSuccess, fnError);
	}
};

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model without triggering a server request.
 *  This can be done by the submitChanges method.
 *
 *  Note: Only one entry of one collection can be updated at once. Otherwise a fireRejectChange event is fired.
 *
 *  Before updating a different entry the existing changes of the current entry have to be submitted or resetted by the
 *  corresponding methods: submitChanges, resetChanges.
 *
 *  IMPORTANT: All pending changes are resetted in the model if the application triggeres any kind of requests
 *  which change the model data e.g. sorting, filtering, refresh, create, remove, update. Make sure to
 *  submit the pending changes first. To determine if there are any pending changes call the hasPendingChanges method.
 *
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @return {boolean} true if the value was set correctly and false if errors occurred like the entry was not found or another entry was already updated.
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.setProperty = function(sPath, oValue, oContext) {

	var sProperty, oEntry = { },
		sChangeKey = this._getChangeUrl(sPath, oContext),
		sObjectPath = sPath.substring(0, sPath.lastIndexOf("/")),
		success = false;

	// check if path / context is valid
	if (!this.resolve(sPath, oContext)) {
		return success;
	}

	// extract the Url that points to the 'entry'. We need to do this if a complex type will be updated.
	sChangeKey = sChangeKey.replace(this.sServiceUrl+'/','');
	sChangeKey = sChangeKey.substring(0, sChangeKey.indexOf("/")),
	sChangeKey = this.sServiceUrl + '/' + sChangeKey,

	sProperty = sPath.substr(sPath.lastIndexOf("/")+1);
	oEntry = this._getObject(sObjectPath, oContext);

	if (oEntry._bCreate) {
		oEntry[sProperty] = oValue;
		success = true;
		this.checkUpdate(false, oContext);
	} else {
		if (!this.sChangeKey) {
			this.sChangeKey = sChangeKey;
		}

		if (this.sChangeKey == sChangeKey) {
			oEntry[sProperty] = oValue;
			success = true;
			this.checkUpdate(false, oContext);
		} else {
			this.fireRejectChange(
					{rejectedValue : oValue,
						oldValue: oEntry[sProperty]}
			);
		}
	}
	return success;

};


sap.ui.model.odata.ODataModel.prototype._isHeaderPrivate = function(sHeaderName) {
	// case sensitive check needed to make sure private headers cannot be overriden by difference in the upper/lower case (e.g. accept and Accept).
	switch(sHeaderName.toLowerCase()) {
		case "accept":
		case "accept-language":
		case "maxdataserviceversion":
		case "dataserviceversion":
			return true;
			break;
		case "x-csrf-token":
			return this.bTokenHandling;
			break;
		default:
			return false;
	}
};

/**
 * Set custom headers which are provided in a key/value map. These headers are used for requests against the OData backend.
 * Private headers which are set in the ODataModel cannot be modified.
 * These private headers are: accept, accept-language, x-csrf-token, MaxDataServiceVersion, DataServiceVersion.
 *
 * To remove these headers simply set the mCustomHeaders parameter to null. Please also note that when calling this method again all previous custom headers
 * are removed unless they are specified again in the mCustomHeaders parameter.
 *
 * @param {object} mHeaders the header name/value map.
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.setHeaders = function(mHeaders) {
	var mCheckedHeaders = {},
		that= this;
	if (mHeaders) {
		jQuery.each(mHeaders, function(sHeaderName, sHeaderValue){
			// case sensitive check needed to make sure private headers cannot be overriden by difference in the upper/lower case (e.g. accept and Accept).
			if (that._isHeaderPrivate(sHeaderName)){
				jQuery.sap.log.warning("Not allowed to modify private header: " + sHeaderName);
			}
			else {
				mCheckedHeaders[sHeaderName] = sHeaderValue;
			}
		});
		this.mCustomHeaders = mCheckedHeaders;
	} else {
		this.mCustomHeaders = {};
	}

};

/**
 * Returns all headers and custom headers which are stored in the OData model.
 * @return {object} the header map
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.getHeaders = function() {
	return jQuery.extend({}, this.mCustomHeaders, this.oHeaders);
};

/**
 * Searches the specified headers map for the specified header name and returns the found header value
 */
sap.ui.model.odata.ODataModel.prototype._getHeader = function(sFindHeader, mHeaders) {
	var sHeaderName;
	for (sHeaderName in mHeaders) {
		if (sHeaderName.toLowerCase() === sFindHeader.toLowerCase()) {
			return mHeaders[sHeaderName];
		}
	}
	return null;
};

/**
 * Checks if there exist pending changes in the model created by the setProperty method.
 * @return {boolean} true/false
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.hasPendingChanges = function() {
	return this.sChangeKey != null;
};

/**
 * update all bindings
 * @param {boolean} [bForceUpdate=false] If set to false an update  will only be done when the value of a binding changed.
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.updateBindings = function(bForceUpdate) {
	this.checkUpdate(bForceUpdate);
};

/**
 * Force no caching
 * @param {boolean} [bForceNoCache=false] whether to force no caching
 * @public
 * @deprecated The caching should be controlled by the backend by setting the correct cache control header
 */
sap.ui.model.odata.ODataModel.prototype.forceNoCache = function(bForceNoCache) {
	this.bCache = !bForceNoCache;
};

/**
 * Enable/Disable XCSRF-Token handling
 * @param {boolean} [bTokenHandling=true] whether to use token handling or not
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.setTokenHandlingEnabled  = function(bTokenHandling) {
	this.bTokenHandling = bTokenHandling;
};

/**
 * Enable/Disable batch for all requests
 * @param {boolean} [bUseBatch=false] whether the requests should be encapsulated in a batch request
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.setUseBatch  = function(bUseBatch) {
	this.bUseBatch = bUseBatch;
};

/**
 * Format a JavaScript value according to the given EDM type
 * http://www.odata.org/documentation/overview#AbstractTypeSystem
 *
 * @param {any} vValue the value to format
 * @param {string} sType the EDM type (e.g. Edm.Decimal)
 * @return {string} the formatted value
 */
sap.ui.model.odata.ODataModel.prototype.formatValue = function(vValue, sType) {
	// Lazy creation of format objects
	if (!this.oDateTimeFormat) {
		this.oDateTimeFormat = sap.ui.core.format.DateFormat.getDateInstance({
			pattern: "'datetime'''yyyy-MM-dd'T'HH:mm:ss''"
		});
		this.oDateTimeOffsetFormat = sap.ui.core.format.DateFormat.getDateInstance({
			pattern: "'datetimeoffset'''yyyy-MM-dd'T'HH:mm:ss'Z'''"
		});
		this.oTimeFormat = sap.ui.core.format.DateFormat.getTimeInstance({
			pattern: "'time'''HH:mm:ss''"
		});
	}

	// Format according to the given type
	var sValue;
	switch(sType) {
		case "Edm.String":
			// quote
			sValue = "'" + String(vValue).replace(/'/g, "''") + "'";
			break;
		case "Edm.Time":
			sValue = "time'" + vValue + "'";
			break;
		case "Edm.DateTime":
			sValue = this.oDateTimeFormat.format(new Date(vValue), true);
			break;
		case "Edm.DateTimeOffset":
			sValue = this.oDateTimeOffsetFormat.format(new Date(vValue), true);
			break;
		case "Edm.Guid":
			sValue = "guid'" + vValue + "'";
			break;
		case "Edm.Decimal":
			sValue = vValue + "M";
			break;
		case "Edm.Int64":
			sValue = vValue + "L";
			break;
		case "Edm.Single":
			sValue = vValue + "f";
			break;
		case "Edm.Binary":
			sValue = "binary'" + vValue + "'";
			break;
		default:
			sValue = new String(vValue);
			break;
	}
	return sValue;
};

/**
 * Deletes a created entry from the request queue and the model.
 * @param {sap.ui.model.Context} oContext The context object pointing to the created entry
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.deleteCreatedEntry = function(oContext) {
	if (oContext) {
		var sPath = oContext.getPath();
		delete this.mContexts[sPath]; // contexts are stored starting with /
		// remove starting / if any
		if (jQuery.sap.startsWith(sPath, "/")) {
			sPath = sPath.substr(1);
		}
		delete this.oRequestQueue[sPath];
		delete this.oData[sPath];

	}
};

/**
 * Creates a new entry object which is described by the metadata of the entity type of the
 * specified sPath Name. A context object is returned which can be used to bind
 * against the newly created object.
 *
 * For each created entry a request is created and stored in a request queue.
 * The request queue can be submitted by calling submitChanges. To delete a created
 * entry from the request queue call deleteCreateEntry.
 *
 * The optional vProperties parameter can be used as follows:
 *
 *   - vProperties could be an array containing the property names which should be included
 *     in the new entry. Other properties defined in the entity type are not included.
 *   - vProperties could be an object which includes the desired properties and the values
 *     which should be used for the created entry.
 *
 * If vProperties is not specified, all properties in the entity type will be included in the
 * created entry.
 *
 * If there are no values specified the properties will have undefined values.
 *
 * Please note that deep creates (including data defined by navigationproperties) are not supported
 *
 * @param {String} sPath Name of the path to the collection
 * @param {array|object} vProperties An array that specifies a set of properties or the entry
 * @return {sap.ui.model.Context} oContext A Context object that point to the new created entry.
 * @public
 */
sap.ui.model.odata.ODataModel.prototype.createEntry = function(sPath, vProperties) {
	if (!jQuery.sap.startsWith(sPath, "/")) {
		sPath = "/" + sPath;
	}
	var oEntity = {};
	var oEntityMetadata = this.oMetadata._getEntityTypeByPath(sPath);
	if (!oEntityMetadata) {
		jQuery.sap.assert(oEntityMetadata, "No Metadata for collection "+sPath+" found");
		return undefined;
	}
	if (typeof vProperties === "object" && !jQuery.isArray(vProperties)) {
		oEntity = vProperties;
	} else {
		for (var i = 0; i < oEntityMetadata.property.length; i++) {
			var oPropertyMetadata = oEntityMetadata.property[i];

			var aType = oPropertyMetadata.type.split('.');
			var bPropertyInArray = jQuery.inArray(oPropertyMetadata.name,vProperties) > -1;
			if (!vProperties || bPropertyInArray)  {
				oEntity[oPropertyMetadata.name] = this._createPropertyValue(aType);
				if (bPropertyInArray) {
					vProperties.splice(vProperties.indexOf(oPropertyMetadata.name),1);
				}
			}
		}
		if (vProperties) {
			jQuery.sap.assert(vProperties.length === 0, "No metadata for the following properties found: "+vProperties.join(","));
		}
	}
	//mark as entity for create; we need this for setProperty
	oEntity._bCreate = true;

	// remove starting / for key only
	var sKey = sPath.substring(1) +"('"+jQuery.sap.uid()+"')";

	this.oData[sKey] = oEntity;

	oEntity.__metadata = {type: ""+ oEntityMetadata.entityType};

	var sChangeKey = this._getChangeUrl(sPath);

	var oRequest = this._createChangeRequest(sChangeKey, oEntity, "POST", true);

	this.oRequestQueue[sKey] = oRequest;

	return this.getContext("/" + sKey); // context wants a path
};

/**
 * Return value for a property. This can also be a ComplexType property
 * @param {array} aType Type splitted by dot and passed as array
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._createPropertyValue = function(aType) {
	var sNamespace = aType[0];
	var sTypeName = aType[1];
	if (sNamespace.toUpperCase() !== 'EDM') {
		var oComplexType = {};
		var oComplexTypeMetadata = this.oMetadata._getObjectMetadata("complexType",sTypeName,sNamespace);
		jQuery.sap.assert(oComplexTypeMetadata, "Compley type " + sTypeName + " not found in the metadata !");
		for (var i = 0; i < oComplexTypeMetadata.property.length; i++) {
			var oPropertyMetadata = oComplexTypeMetadata.property[i];
			var aType = oPropertyMetadata.type.split('.');
			oComplexType[oPropertyMetadata.name] = this._createPropertyValue(aType);
		}
		return oComplexType;
	} else {
		return this._getDefaultPropertyValue(sTypeName,sNamespace);
	}
};

/**
 * Returns the default value for a property
 * @param {string} sType
 * @param {string} sNamespace
 * @private
 */
sap.ui.model.odata.ODataModel.prototype._getDefaultPropertyValue = function(sType, sNamespace) {
	return undefined;
};

/**
 * Enable/Disable automatic updates of all Bindings after change operations
 * @param {boolean} bRefreshAfterChange
 * @public
 * @since 1.16.3
 */
sap.ui.model.odata.ODataModel.prototype.setRefreshAfterChange = function(bRefreshAfterChange) {
	this.bRefreshAfterChange = bRefreshAfterChange;
};

sap.ui.model.odata.ODataModel.prototype.isList = function(sPath, oContext) {
	var sPath = this.resolve(sPath, oContext);
	return sPath.substr(sPath.lastIndexOf("/")).indexOf("(") === -1;
};

}; // end of sap/ui/model/odata/ODataModel.js
if ( !jQuery.sap.isDeclared('sap.ui.model.resource.ResourceModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * ResourceBundle-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.resource
 * @public
 */

// Provides the resource bundle based model implementation
jQuery.sap.declare("sap.ui.model.resource.ResourceModel");



/**
 * Constructor for a new ResourceModel.
 *
 * @class Model implementation for resource bundles
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @param {object} oData parameters used to initialize the ResourceModel; at least either bundleUrl or bundleName must be set on this object; if both are set, bundleName wins
 * @param {string} [oData.bundleUrl] the URL to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
 * @param {string} [oData.bundleName] the UI5 module name of the .properties file; this name will be resolved to a path like the paths of normal UI5 modules and ".properties" will then be appended (e.g. a name like "myBundle" can be given)
 * @param {string} [oData.bundleLocale] an optional locale; when not given, the default is the active locale from the UI5 configuration
 * @constructor
 * @public
 * @name sap.ui.model.resource.ResourceModel
 */
sap.ui.model.Model.extend("sap.ui.model.resource.ResourceModel", /** @lends sap.ui.model.resource.ResourceModel */ {

	constructor : function(oData) {
		sap.ui.model.Model.apply(this, arguments);
	
		this.sDefaultBindingMode = sap.ui.model.BindingMode.OneTime;
		this.mSupportedBindingModes = {
			"OneWay" : false,
			"TwoWay" : false,
			"OneTime" : true
		};

		this.oData = oData;
		// load resource bundle
		if (oData && (oData.bundleUrl || oData.bundleName)) {
			this.ResourceBundle = this.loadResourceBundle(oData);
		} else {
			throw new Error("Neither bundleUrl nor bundleName are given. One of these is mandatory.");
		}
	},

	metadata : {
		publicMethods : [ "getResourceBundle" ]
	}

});

/**
 * Creates a new subclass of class sap.ui.model.resource.ResourceModel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.resource.ResourceModel.extend
 * @function
 */

/**
 * Returns the resource bundle
 *
 * @param {object} oData
 * @return loaded resource bundle
 * @private
 */
sap.ui.model.resource.ResourceModel.prototype.loadResourceBundle = function(oData) {
	var oConfiguration = sap.ui.getCore().getConfiguration(),
		oRb, sUrl, sLocale, bIncludeInfo;
	sLocale = oData.bundleLocale;
	if (!sLocale) {
		sLocale = oConfiguration.getLanguage();
	}
	bIncludeInfo = oConfiguration.getOriginInfo();
	sUrl = oData.bundleUrl;
	if(oData.bundleName) {
		sUrl = jQuery.sap.getModulePath(oData.bundleName, '.properties');
	}
    oRb = jQuery.sap.resources({url: sUrl, locale: sLocale, includeInfo: bIncludeInfo});
    return oRb;
};

/**
 * Enhances the resource model with a custom resource bundle. The resource model
 * can be enhanced with multiple resource bundles. The last enhanced resource
 * bundle wins against the previous ones and the original ones. This function
 * can be called several times.
 *
 * @param {object} oData parameters used to initialize the ResourceModel; at least either bundleUrl or bundleName must be set on this object; if both are set, bundleName wins
 * @param {string} [oData.bundleUrl] the URL to the base .properties file of a bundle (.properties file without any locale information, e.g. "mybundle.properties")
 * @param {string} [oData.bundleName] the UI5 module name of the .properties file; this name will be resolved to a path like the paths of normal UI5 modules and ".properties" will then be appended (e.g. a name like "myBundle" can be given)
 * @param {string} [oData.bundleLocale] an optional locale; when not given, the default is the active locale from the UI5 configuration
 * @since 1.16.1
 * @protected
 */
sap.ui.model.resource.ResourceModel.prototype.enhance = function(oData) {
	var oCustomResourceBundle = this.loadResourceBundle(oData);
	if (oCustomResourceBundle) {
		this.ResourceBundle._enhance(oCustomResourceBundle);
	}
};

/**
 * @see sap.ui.model.Model.prototype.bindProperty
 *
 */
sap.ui.model.resource.ResourceModel.prototype.bindProperty = function(sPath) {
	var oBinding = new sap.ui.model.resource.ResourcePropertyBinding(this, sPath);
	return oBinding;
};

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 *
 * @param {string} sPath the path to the property
 * @type any
 * @return the value of the property
 * @public
 */
sap.ui.model.resource.ResourceModel.prototype.getProperty = function(sPath) {
	return this.ResourceBundle.getText(sPath);
};

/**
 * Returns the resource bundle of this model
 *
 * @return loaded resource bundle
 * @public
 */
sap.ui.model.resource.ResourceModel.prototype.getResourceBundle = function() {
	return this.ResourceBundle;
};

sap.ui.model.resource.ResourceModel.prototype._handleLocalizationChange = function() {
	if (this.oData && (this.oData.bundleUrl || this.oData.bundleName)) {
		this.ResourceBundle = this.loadResourceBundle(this.oData);
	}
}

}; // end of sap/ui/model/resource/ResourceModel.js
if ( !jQuery.sap.isDeclared('sap.ui.model.xml.XMLPropertyBinding') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the XML model implementation of a property binding
jQuery.sap.declare("sap.ui.model.xml.XMLPropertyBinding");


/**
 *
 * @class
 * Property binding implementation for XML format
 *
 * @param sPath
 * @param [oModel]
 * @name sap.ui.model.xml.XMLPropertyBinding
 * @extends sap.ui.model.PropertyBinding
 */
sap.ui.model.ClientPropertyBinding.extend("sap.ui.model.xml.XMLPropertyBinding");

/**
 * @see sap.ui.model.PropertyBinding.prototype.setValue
 */
sap.ui.model.xml.XMLPropertyBinding.prototype.setValue = function(oValue){
	if (this.oValue != oValue){
		// the binding value will be updated by the model. The model calls checkupdate on all bindings after updating its value.
		this.oModel.setProperty(this.sPath, oValue, this.oContext);
	}
};

/**
 * Check whether this Binding would provide new values and in case it changed,
 * inform interested parties about this.
 * 
 * @param {boolean} bForceupdate
 * 
 */
sap.ui.model.xml.XMLPropertyBinding.prototype.checkUpdate = function(bForceupdate){
	var oValue = this._getValue();
	if(oValue !== this.oValue || bForceupdate) {// optimize for not firing the events when unneeded
		this.oValue = oValue;
		this._fireChange({reason: sap.ui.model.ChangeReason.Change});
	}
};
}; // end of sap/ui/model/xml/XMLPropertyBinding.js
if ( !jQuery.sap.isDeclared('sap.ui.base.ManagedObject') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base class for all objects with managed properties and aggregations.
jQuery.sap.declare("sap.ui.base.ManagedObject");













/**
 * Constructs and initializes a managed object with the given <code>sId</code> and settings.
 *
 * If the optional <code>mSettings</code> are given, they must be a simple object  
 * that defines values for properties, aggregations, associations or events keyed by their name.
 *
 * <b>Valid Names:</b>
 *
 * The property (key) names supported in the object literal are exactly the (case sensitive)
 * names documented in the JSDoc for the properties, aggregations, associations and events
 * of the managed object and its base classes. Note that for  0..n aggregations and associations this
 * usually is the plural name, whereas it is the singular name in case of 0..1 relations.
 *
 * If a key name is ambiguous for a specific managed object class (e.g. a property has the same
 * name as an event), then this method prefers property, aggregation, association and
 * event in that order. To resolve such ambiguities, the keys can be prefixed with
 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>.
 * In that case the keys must be quoted due to the ':'.
 *
 * Each subclass should document the set of supported names in its constructor documentation.
 *
 * <b>Valid Values:</b>
 *
 * <ul>
 * <li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)
 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated type
 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type
 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
 * <li>0..n associations are not supported yet
 * <li>for events either a function (event handler) is accepted or an array of length 2
 *     where the first element is a function and the 2nd element is an object to invoke the method on.
 * </ul>
 *
 * @param {string} [sId] id for the new managed object; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new object
 * @param {object} [oScope] scope object for resolving string based type and formatter references in bindings
 *
 * @class Base Class for managed objects.
 * @extends sap.ui.base.EventProvider
 * @author SAP
 * @version 1.18.9
 * @public
 * @name sap.ui.base.ManagedObject
 * @experimental Since 1.11.2. support for the optional parameter oScope is still experimental 
 */
sap.ui.base.EventProvider.extend("sap.ui.base.ManagedObject", {

	metadata : {
	  "abstract" : true,
	  publicMethods : [ "getId", "getMetadata", "getModel", "setModel", "hasModel", "bindProperty", "unbindProperty", "bindAggregation", "unbindAggregation", "bindObject", "unbindObject", "getObjectBinding"],
	  library : "sap.ui.core", // UI Library that contains this class
	  properties : {
	  },
	  aggregations : {
	  },
	  associations : {},
	  events : { 
		  "validationSuccess" : { enableEventBubbling : true },
		  "validationError" : { enableEventBubbling : true },
		  "parseError" : { enableEventBubbling : true }, 
		  "formatError" : { enableEventBubbling : true } 
	  }
	},

	constructor : function(sId, mSettings, oScope) {

		sap.ui.base.EventProvider.apply(this); // no use to pass our arguments
		if (typeof(sId) != "string" && arguments.length>0) {
			// shift arguments in case sId was missing, but mSettings was given
			oScope = mSettings;
			mSettings = sId;
			if (mSettings && mSettings.id) {
				sId = mSettings["id"];
			} else {
				sId = null;
			}
		}

		if (!sId) {
			sId = this.getMetadata().uid() || jQuery.sap.uid();
		} else {
			var preprocessor = sap.ui.base.ManagedObject._fnIdPreprocessor;
			sId = (preprocessor ? preprocessor.call(this, sId) : sId);
			var oType = sap.ui.base.DataType.getType("sap.ui.core.ID");
			if (!oType.isValid(sId)) {
				throw new Error("\"" + sId + "\" is not a valid ID.");
			}
		}
		this.sId = sId;

		// managed object interface
		// create an empty property bag that uses a map of defaultValues as its prototype
		this.mProperties = this.getMetadata().createPropertyBag();
		this.mAggregations = {};
		this.mAssociations = {};
		this.mMethods = {};

		// private properties
		this.oParent = null;

		this.aDelegates = [];
		this.aBeforeDelegates = [];
		this.iSuppressInvalidate = 0;
		this.oPropagatedProperties = {oModels:{}, oBindingContexts:{}};

		// data binding
		this.oModels = {};
		this.oBindingContexts = {};
		this.mBindingInfos = {};
		this.sBindingPath = null;
		this.mBindingParameters = null;
		this.mBoundObjects = {};
		
		// apply the owner id if defined
		this._sOwnerId = sap.ui.base.ManagedObject._sOwnerId; 
		
		// make sure that the object is registered before initializing
		// and to deregister the object in case of errors
		try {
			
			// registers the object in the Core
			if (this.register) this.register();

			// TODO: generic concept for init hooks?
			if ( this._initCompositeSupport ) {
				this._initCompositeSupport(mSettings);
			}

			// Call init method here instead of specific Controls constructor.
			if (this.init) {
				this.init();
			}

			// apply the settings
			this.applySettings(mSettings, oScope);

		} catch (ex) {
			
			// unregisters the object in the Core
			if (this.deregister) this.deregister();

			// forward the exception
			throw ex;
			
		}
		
	}

}, /* Metadata constructor */ sap.ui.base.ManagedObjectMetadata);



/**
 * Creates a new ManagedObject from the given data.
 *
 * If vData is a managed object already, that object is returned.
 * If vData is an object (literal), then a new object is created with vData as settings.
 * The type of the object is either determined by a "Type" entry in the vData or
 * by a type information in the oKeyInfo object
 * @param {sap.ui.base.ManagedObject|object} vData the data to create the object from
 * @param {object} oKeyInfo
 * @public
 * @static
 */
sap.ui.base.ManagedObject.create = function(vData, oKeyInfo) {
	if ( !vData || vData instanceof sap.ui.base.ManagedObject || typeof vData !== "object" || vData instanceof String) {
		return vData;
	}

	function getClass(vType) {
		if ( typeof vType === "function" ) {
			return vType;
		} 
		if (typeof vType === "string" ) {
			return jQuery.sap.getObject(vType);
		}
	}

	var fnClass = getClass(vData.Type) || getClass(oKeyInfo && oKeyInfo.type);
	if ( typeof fnClass === "function" ) {
		return new fnClass(vData);
	}

	// we don't know how to create the ManagedObject from vData, so fail
	// extension points could be integrated here
	var message = "Don't know how to create a ManagedObject from " + vData + " (" + (typeof vData) + ")";
	jQuery.sap.log.fatal(message);
	throw new Error(message);
};

/**
 * A global preprocessor for the ID of a ManagedObject (used internally).
 * If set, this function will be called before the ID is applied to any ManagedObject.
 * If the original ID was empty, the hook will not be called (to be discussed).
 *
 * The expected signature is <code>function(sId)</code>, and <code>this</code> will
 * be the current ManagedObject.
 *
 * @return new ID of the ManagedObject
 * @type function
 * @private
 */
sap.ui.base.ManagedObject._fnIdPreprocessor = null;

/**
 * A global preprocessor for the settings of a ManagedObject (used internally).
 * If set, this function will be called before the settings are applied to any ManagedObject.
 * If the original settings are empty, the hook will not be called (to be discussed).
 *
 * The expected signature is <code>function(mSettings)</code>, and <code>this</code> will
 * be the current ManagedObject.
 *
 * @type function
 * @private
 */
sap.ui.base.ManagedObject._fnSettingsPreprocessor = null;

sap.ui.base.ManagedObject.runWithPreprocessors = function(fn, oPreprocessors) {
	jQuery.sap.assert(typeof fn === "function", "fn must be a function");
	jQuery.sap.assert(!oPreprocessors || typeof oPreprocessors === "object", "oPreprocessors must be an object");

	var oOldPreprocessors = { id : this._fnIdPreprocessor, settings : this._fnSettingsPreprocessor };
	oPreprocessors = oPreprocessors || {};

	this._fnIdPreprocessor = oPreprocessors.id; 
	this._fnSettingsPreprocessor = oPreprocessors.settings;

	try {
		var result = fn.call();
		this._fnIdPreprocessor = oOldPreprocessors.id; 
		this._fnSettingsPreprocessor = oOldPreprocessors.settings;
		return result;
	} catch (e) {
		this._fnIdPreprocessor = oOldPreprocessors.id; 
		this._fnSettingsPreprocessor = oOldPreprocessors.settings;
		throw e;
	}

};

/*
 * Returns the ID of the owner ManagedObject in which context the given 
 * ManagedObject has been created. 
 */
sap.ui.base.ManagedObject.getOwnerIdFor = function(oObject) {
	return oObject && oObject._sOwnerId;
};

/*
 * Internal function to assign the ID of the owner in which the creation of 
 * a ManagedObject will be done.
 */
sap.ui.base.ManagedObject.runWithOwner = function(fn, oObject) {
	
	jQuery.sap.assert(typeof fn === "function", "fn must be a function");
	jQuery.sap.assert(oObject instanceof sap.ui.base.ManagedObject, "oObject is not an instance of sap.ui.core.ManagedObject");

	var oldOwnerId = sap.ui.base.ManagedObject._sOwnerId;
	try {
		sap.ui.base.ManagedObject._sOwnerId = oObject.getId();
		var result = fn.call();
		sap.ui.base.ManagedObject._sOwnerId = oldOwnerId;
		return result;
	} catch (e) {
		sap.ui.base.ManagedObject._sOwnerId = oldOwnerId;
		throw e;
	}

};

/**
 * Sets all the properties, aggregations, associations and event handlers as given in
 * the object literal <code>mSettings</code>. If a property, aggregation, etc.
 * is not listed in <code>mSettings</code>, then its value is not changed by this method.
 *
 * For properties and 0..1 aggregations/associations, any given setting overwrites
 * the current value. For 0..n aggregations, the given values are appended; event
 * listeners are registered in addition to existing ones.
 *
 * For the possible keys and values in <code>mSettings</code> see the general
 * documentation in {@link sap.ui.base.ManagedObject} or the specific documentation
 * of the constructor of the concrete managed object class.
 *
 * @param {object} mSettings the settings to apply to this managed object
 * @param {object} [oScope] Scope object to resolve types and formatters
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @public
 * @experimental Since 1.11.2. support for complex string binding syntax as well as the 
 * 				scope object for resolving string based type and formatter references 
 * 				in bindings is still experimental
 */
sap.ui.base.ManagedObject.prototype.applySettings = function(mSettings, oScope) {

	// PERFOPT: don't retrieve (expensive) JSONKeys if no settings are given
	if ( !mSettings || jQuery.isEmptyObject(mSettings) ) {
		return this;
	}

	var oMetadata = this.getMetadata(),
		mValidKeys = oMetadata.getJSONKeys(),
		makeObject = sap.ui.base.ManagedObject.create,
		preprocessor = sap.ui.base.ManagedObject._fnSettingsPreprocessor,
		sKey, oValue, oKeyInfo;

	// call the preprocessor if it has been defined
	preprocessor && preprocessor.call(this, mSettings); // TODO: decide whether to call for empty settings as well?
	
	// process models
	if ( mSettings.models ) {
		if ( typeof mSettings.models !== "object" ) {
			throw new Error("models must be a simple object");
		}
		if ( mSettings.models instanceof sap.ui.model.Model) {
			this.setModel(mSettings.models);
		} else {
			for(sKey in mSettings.models ) {
				this.setModel(mSettings.models[sKey], sKey === "undefined" ? undefined : sKey);
			}
		}
		delete mSettings.models;
	}
	//process BindingContext
	if ( mSettings.bindingContexts ) {
		if ( typeof mSettings.bindingContexts !== "object" ) {
			throw new Error("bindingContexts must be a simple object");
		}
		if ( mSettings.bindingContexts instanceof sap.ui.model.Context) {
			this.setBindingContext(mSettings.bindingContexts);
		} else {
			for(sKey in mSettings.bindingContexts ) {
				this.setBindingContext(mSettings.bindingContexts[sKey], sKey === "undefined" ? undefined : sKey);
			}
		}
		delete mSettings.bindingContexts;
	}
	//process object bindings
	if ( mSettings.objectBindings ) {
		if ( typeof mSettings.objectBindings !== "string" && typeof mSettings.objectBindings !== "object" ) {
			throw new Error("binding must be a string or simple object");
		}
		if ( typeof mSettings.objectBindings === "string" || mSettings.objectBindings.path ) { // excludes "path" as model name
			this.bindObject(mSettings.objectBindings);
		} else {
			for(var sKey in mSettings.objectBindings ) {
				mSettings.objectBindings.model = sKey;
				this.bindObject(mSettings.objectBindings[sKey]);
			}
		}
		delete mSettings.objectBindings;
	}
	// process all settings
	// process settings
	for(sKey in mSettings) {
		// get info object for the key
		if ( oKeyInfo = mValidKeys[sKey] ) {
			oValue = mSettings[sKey];
			switch(oKeyInfo._iKind) {
			case 0: // PROPERTY
				var oBindingInfo = this.extractBindingInfo(oValue, oKeyInfo.type === "object", oScope);
				if (oBindingInfo && typeof oBindingInfo === "object") {
					this.bindProperty(sKey, oBindingInfo);
				} else {
					this[oKeyInfo._sMutator](oBindingInfo || oValue);
				}
				break;
			case 1: // SINGLE_AGGREGATION
				var oBindingInfo = oKeyInfo.altTypes && this.extractBindingInfo(oValue, jQuery.inArray("object", oKeyInfo.altTypes) >= 0, oScope); 
				if ( oBindingInfo && typeof oBindingInfo === "object" ) {
					this.bindProperty(sKey, oBindingInfo);
				} else {
					this[oKeyInfo._sMutator](makeObject(oBindingInfo || oValue, oKeyInfo));
				}
				break;
			case 2: // MULTIPLE_AGGREGATION
				var oBindingInfo = this.extractBindingInfo(oValue, false, oScope); 
				if (oBindingInfo && typeof oBindingInfo === "object" ) {
					this.bindAggregation(sKey, oBindingInfo);
				} else {
					oValue = oBindingInfo || oValue; // could be an unescaped string if altTypes contains 'string'
					if ( oValue && !jQuery.isArray(oValue) ) {
						oValue = [oValue];
					}
					if ( oValue ) {
						for(var i=0,l=oValue.length; i<l; i++) {
							this[oKeyInfo._sMutator](makeObject(oValue[i], oKeyInfo));
						}
					}
				}
				break;
			case 3: // SINGLE_ASSOCIATION
				this[oKeyInfo._sMutator](oValue);
				break;
			case 4: // MULTIPLE_ASSOCIATION
				if ( oValue && !jQuery.isArray(oValue) ) {
					oValue = [oValue];
				}
				if ( oValue ) {
					for(var i=0,l=oValue.length; i<l; i++) {
						this[oKeyInfo._sMutator](oValue[i]);
					}
				}
				break;
			case 5: // EVENT
				if ( typeof oValue == "function" ) {
					this[oKeyInfo._sMutator](oValue);
				}
				else {
					this[oKeyInfo._sMutator](oValue[0], oValue[1], oValue[2]);
				}
					//this[oKeyInfo._sMutator].apply(this, oValue); // could be replacement for line before
				break;
			default:
				break;
			}
		}
	}

	return this;
};

/**
 * Returns a simple string representation of this managed object.
 *
 * Mainly useful for tracing purposes.
 * @public
 * @return {string} a string description of this managed object
 */
sap.ui.base.ManagedObject.prototype.toString = function() {
	return "ManagedObject " + this.getMetadata().getName() + "#" + this.getId();
};

/**
 * Returns the object's Id.
 *
 * @return {string} the objects's Id.
 * @public
 */
sap.ui.base.ManagedObject.prototype.getId = function() {
	return this.sId;
};


/**
 * Sets a new value for the given property <code>sPropertyName</code> and marks
 * this object as changed. If the given <code>oValue</code> equals the
 * current value, nothing happens.
 *
 * @param {string}  sPropertyName name of the property to set
 * @param {any}     oValue value to set the property to
 * @param {boolean} [bSuppressInvalidate] if true, the managed is not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * TODO better name bSuppressInvalidate positive, e.g. "bStayValid"
 * @protected
 */
sap.ui.base.ManagedObject.prototype.setProperty = function(sPropertyName, oValue, bSuppressInvalidate) {

	// check for a value change
	var oOldValue = this.mProperties[sPropertyName];

	// value validation
	oValue = this.validateProperty(sPropertyName, oValue);

	if (jQuery.sap.equal(oOldValue, oValue)) {
		return this;
	} // no change
	
	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		//Refresh only for property changes with suppressed invalidation (others lead to rerendering and refresh is handled there)
		jQuery.sap.act.refresh();
		this.iSuppressInvalidate++;
	}

	// change the property (and invalidate if the rendering should be updated)
	this.mProperties[sPropertyName] = oValue;
	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// check whether property is bound and update model in case of two way binding
	this.updateModelProperty(sPropertyName, oValue, oOldValue);

	// prototype for generic property change events
	// TODO: THINK ABOUT CONFIGURATION TO ENABLE THIS
	sap.ui.base.EventProvider.prototype.fireEvent.apply(this, ["_change", {
		"id": this.getId(),
		"name": sPropertyName,
		"oldValue": oOldValue,
		"newValue": oValue
	}]);

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return this;
};

/**
 * Returns the value for the property with the given <code>sPropertyName</code>
 *
 * @param {string} sPropertyName the name of the property
 * @type any
 * @return the value of the property
 * @protected
 */
sap.ui.base.ManagedObject.prototype.getProperty = function(sPropertyName) {
	var oValue = this.mProperties[sPropertyName],
		oMetadata = this.getMetadata(),
		oProperty = oMetadata.getAllProperties()[sPropertyName],
		oType;

	if (!oProperty) {
		throw new Error("Property \"" + sPropertyName + "\" does not exist in " + this);
	}

	oType = sap.ui.base.DataType.getType(oProperty.type);

	// If property has an array type, clone the array to avoid modification of original data
	if (oType instanceof sap.ui.base.DataType && oType.isArrayType() && jQuery.isArray(oValue)) {
		oValue = oValue.slice(0);
	}
	
	// If proprerty is of type String instead of string, convert with valueOf()
	if (oValue instanceof String) {
		oValue = oValue.valueOf();
	}
	
	return oValue;
};

/**
 * Checks whether the given value is of the proper type for the given property name. In case null or undefined is
 * passed, the default value for this property is returned.
 *
 * @param {string} sPropertyName the name of the property
 * @param {any} oValue the value
 * @return {any} the passed value or the property's default value if null or undefined was passed
 * @throws Error if no property with the given name is found or the given value does not fit to the property type
 * @protected
 */
sap.ui.base.ManagedObject.prototype.validateProperty = function(sPropertyName, oValue) {
	var oMetadata = this.getMetadata(),
		oProperty = oMetadata.getAllProperties()[sPropertyName],
		oType;

	if (!oProperty) {
		throw new Error("Property \"" + sPropertyName + "\" does not exist in " + this);
	}

	oType = sap.ui.base.DataType.getType(oProperty.type);

	// If property has an array type, clone the array to avoid modification of original data
	if (oType instanceof sap.ui.base.DataType && oType.isArrayType() && jQuery.isArray(oValue)) {
		oValue = oValue.slice(0);
	}
	
	// In case null is passed as the value return the default value, either from the property or from the type
	if (oValue === null || oValue === undefined) {
		if (oProperty.defaultValue !== null) {
			oValue = oProperty.defaultValue;
		} else {
			oValue = oType.getDefaultValue();
		}
	} else if (oType instanceof sap.ui.base.DataType) {
		// Implicit casting for string only, other types are causing errors

		if (oType.getName() == "string") {
			if (!(typeof oValue == "string" || oValue instanceof String)) {
				oValue = "" + oValue;
			}
		} else if (oType.getName() == "string[]") {
			for (var i = 0; i < oValue.length; i++) {
				if (!typeof oValue[i] == "string") {
					oValue[i] = "" + oValue[i];
				}
			}
		} else if (!oType.isValid(oValue)) {
			throw new Error("\"" + oValue + "\" is of type " + typeof oValue + ", expected " +
					oType.getName() + " for property \"" + sPropertyName + "\" of " + this);
		}
	} else if (!(oValue in oType)){ // Enumeration
		throw new Error("\"" + oValue + "\" is not a valid entry of the enumeration for property \"" + sPropertyName + "\" of " + this);
	}

	// Normalize the value (if a normalizer was set using the setNormalizer method on the type)
	if (oType && oType.normalize && typeof oType.normalize === "function") {
		oValue = oType.normalize(oValue);
	}

	return oValue;
};

/**
 * Returns the origin info on the property value of the given property name
 *
 * @param {string} sPropertyName the name of the property
 * @return {object} a map of properties describing the origin of this property value or null
 * @public
 */
sap.ui.base.ManagedObject.prototype.getOriginInfo = function(sPropertyName) {
	var oValue = this.mProperties[sPropertyName];
	if (!(oValue instanceof String && oValue.originInfo)) {
		return null;
	}
	return oValue.originInfo;
};


// ######################################################################################################
// Associations
// ######################################################################################################

/**
 * Sets an association for the managed object
 *
 * @param {string}
 *            sAssociationName name of the association
 * @param {string | sap.ui.base.ManagedObject}
 *            sId the ID of the managed object that is set as an association, or the managed object itself or null
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the managed objects invalidate method is not called
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.base.ManagedObject.prototype.setAssociation = function(sAssociationName, sId, bSuppressInvalidate) {
	if (sId instanceof sap.ui.base.ManagedObject) {
		sId = sId.getId();
	} else if (sId != null && typeof sId !== "string") {
		jQuery.sap.assert(false, "setAssociation(): sId must be a string, an instance of sap.ui.base.ManagedObject or null");
		return this;
	}

	if (this.mAssociations[sAssociationName] === sId) {
		return this;
	} // no change

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	this.mAssociations[sAssociationName] = sId;

	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return this;
};

/**
 * Returns an association of the managed object with a given sAssociationName
 *
 * @param {string} sAssociationName the name of the association
 * @param {object}
 *			  oDefaultForCreation the object that is used in case the current aggregation is empty (only null or empty array allowed)
 * @return {string | string[]} the ID of the associated managed object or an array of such IDs; may be null if the association has not been populated
 * @protected
 */
sap.ui.base.ManagedObject.prototype.getAssociation = function(sAssociationName, oDefaultForCreation) {
	var result = this.mAssociations[sAssociationName];

	if (!result) {
		result = this.mAssociations[sAssociationName] = oDefaultForCreation || null;
	} else {
		if (typeof result.length === 'number' && !(result.propertyIsEnumerable('length')) ) {
			// Return a copy of the array instead of the array itself as reference!!
			return result.slice();
		}
		// simple type or ManagedObject
		return result;
	}

	return result;
};

/**
 * Adds some entity with the ID <code>sId</code> to the association identified by <code>sAssociationName</code>.
 *
 * @param {string}
 *            sAssociationName the string identifying the association the object should be added to.
 * @param {string | sap.ui.base.ManagedObject}
 *            sId the ID of the managed object to add; if empty, nothing is added; if a <code>sap.ui.base.ManagedObject</code> is given, its ID is added
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this managed object as well as the newly associated object are not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.base.ManagedObject.prototype.addAssociation = function(sAssociationName, sId, bSuppressInvalidate) {
	if (sId instanceof sap.ui.base.ManagedObject) {
		sId = sId.getId();
	} else if (typeof sId !== "string") {
	  // TODO what about empty string?
    jQuery.sap.assert(false, "addAssociation(): sId must be a string or an instance of sap.ui.base.ManagedObject");
		return this;
	}

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	var aIds = this.mAssociations[sAssociationName];
	if (!aIds) {
		aIds = this.mAssociations[sAssociationName] = [sId];
	} else {
		aIds.push(sId);
	}

	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return this;
};

/**
 * Removes a ManagedObject from the association named <code>sAssociationName</code>.
 *
 * @param {string}
 *            sAssociationName the string identifying the association the ManagedObject should be removed from.
 * @param {int | string | sap.ui.base.ManagedObject}
 *            vObject the position or ID of the ManagedObject to remove or the ManagedObject itself; if <code>vObject</code> is invalid input,
 *            a negative value or a value greater or equal than the current size of the association, nothing is removed
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the managed object is not marked as changed
 * @return the ID of the removed ManagedObject or null
 * @protected
 */
sap.ui.base.ManagedObject.prototype.removeAssociation = function(sAssociationName, vObject, bSuppressInvalidate) {
	var aIds = this.mAssociations[sAssociationName];
	var sId = null;

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	if (typeof(vObject) == "object" && vObject.getId) { // object itself is given
		vObject = vObject.getId();
	}

	if (typeof(vObject) == "string") { // ID of the object is given or has just been retrieved
		for (var i = 0; i < aIds.length; i++) {
			if (aIds[i] == vObject) {
				vObject = i;
				break;
			}
		}
	}

	if (typeof(vObject) == "number") { // "object" is the index now
		if (vObject < 0 || vObject >= aIds.length) {
			jQuery.sap.log.warning("ManagedObject.removeAssociation called with invalid index: " + sAssociationName + ", " + vObject);
		} else {
			sId = aIds[vObject];
			aIds.splice(vObject, 1);
			if (!this.isInvalidateSuppressed()) {
				this.invalidate();
			}
		}
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return sId;
};

/**
 * Removes all the objects in the 0..n-association named <code>sAssociationName</code> (and returns them in an array).<br/>
 *
 * @param {string}
 *            sAssociationName the name of the association
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @type Array
 * @return an array with the IDs of the removed objects (might be empty)
 * @protected
 */
sap.ui.base.ManagedObject.prototype.removeAllAssociation = function(sAssociationName, bSuppressInvalidate){
	var aIds = this.mAssociations[sAssociationName];
	if (!aIds)	{
		return [];
	}

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	delete this.mAssociations[sAssociationName];
	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return aIds;
};

// ######################################################################################################
// End of Associations
// ######################################################################################################


// ######################################################################################################
// Aggregations
// ######################################################################################################

/**
 * Checks whether the given value is of the proper type for the given aggregation name. 
 *
 * @param {string} sAggregationName the name of the aggregation
 * @param {sap.ui.base.ManagedObject|any} oObject the aggregated object or a primitive value
 * @param {boolean} bMultiple whether the aggregation must have cardinality 0..n
 * @return {sap.ui.base.ManagedObject|any} the passed object
 * @throws Error if no aggregation with the given name is found or the given value does not fit to the aggregation type
 * @protected
 */
sap.ui.base.ManagedObject.prototype.validateAggregation = function(sAggregationName, oObject, bMultiple) {
	var oMetadata = this.getMetadata(),
		oAggregation = oMetadata.getManagedAggregation(sAggregationName), // public or private
		aAltTypes,
		oType,
		i,
		msg;

	// undeclared aggregation 
	if (!oAggregation) {
		if(sAggregationName && oMetadata._mHiddenAggregations && oMetadata._mHiddenAggregations[sAggregationName]){
			oAggregation = oMetadata._mHiddenAggregations[sAggregationName];
			jQuery.sap.log.error("Support for '_mHiddenAggregations' is about to be removed (with 1.12 latest). Hidden aggregations like '" + oMetadata.getName() + "." + sAggregationName + "' instead can be declared like normal aggregations but with visibility:'hidden'.");
		}else{
			msg = "Aggregation \"" + sAggregationName + "\" does not exist in " + this;
			
			if ( /^sap\.(ui\.core|ui\.commons|ui\.table|ui\.ux3|m|makit|viz|uiext\.inbox)$/.test(oMetadata.getLibraryName() || "") ) {
				throw new Error(msg);
			} else {
				// TODO throw for any lib as soon as "hidden" aggregations are a public feature.
				// Otherwise, composite controls currently would have no legal way to react 
				jQuery.sap.log.error("Support for undeclared aggregations is about to be removed (with 1.12 latest). Hidden aggregations like '" + oMetadata.getName() + "." + sAggregationName + "' can be declared like normal aggregations but with visibility:'hidden'.");
				jQuery.sap.assert(false, msg);
				return oObject;
			}
		}
	}

	if (oAggregation.multiple !== bMultiple ) {
		throw new Error("Aggregation '" + sAggregationName + "' of " + this + " used with wrong cardinality (declared as " + (oAggregation.multiple ? "0..n" : "0..1") + ")");
	}
	
	//Null is a valid value for 0..1 aggregations
	if(!oAggregation.multiple && !oObject){
		return oObject;
	}
	
	oType = jQuery.sap.getObject(oAggregation.type);
	// class types
	if ( typeof oType === "function" && oObject instanceof oType ) {
		return oObject;
	}
	// interfaces 
	if ( oObject && oObject.getMetadata && oObject.getMetadata().isInstanceOf(oAggregation.type) ) {
		return oObject;
	}
	// alternative types
	aAltTypes = oAggregation.altTypes;
	if ( aAltTypes && aAltTypes.length ) {
		// for primitive types, null or undefined is valid as well 
		if ( oObject == null ) {
			return oObject;
		}
		for (i=0; i<aAltTypes.length; i++) {
			oType = sap.ui.base.DataType.getType(aAltTypes[i]);
			if (oType instanceof sap.ui.base.DataType) {
				if (oType.isValid(oObject)) {
					return oObject;
				}
			} else if (oObject in oType) { // Enumeration
				return oObject;
			}
		}
	}

	// TODO make this stronger again (e.g. for FormattedText)
	msg = "\"" + oObject + "\" is not valid for aggregation \"" + sAggregationName + "\" of " + this;
	if ( sap.ui.base.DataType.isInterfaceType(oAggregation.type) ) {
		jQuery.sap.assert(false, msg);
		return oObject;
	} else {
	  throw new Error(msg);
	}
};

/**
 * Sets an aggregation for the managed object
 *
 * @param {string}
 *            sAggregationName name of the aggregation
 * @param {object}
 *            oObject the managed object that is set as an aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.base.ManagedObject.prototype.setAggregation = function(sAggregationName, oObject, bSuppressInvalidate) {
	var oOldChild = this.mAggregations[sAggregationName];
	if (oOldChild === oObject) {
		return this;
	} // no change
	oObject = this.validateAggregation(sAggregationName, oObject, /* multiple */ false); 

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	if (oOldChild instanceof sap.ui.base.ManagedObject) { // remove old child
		oOldChild.setParent(null);
	}
	this.mAggregations[sAggregationName] = oObject;
	if (oObject instanceof sap.ui.base.ManagedObject) { // adopt new child
		oObject.setParent(this, sAggregationName, bSuppressInvalidate);
	} else {
		if (!this.isInvalidateSuppressed()) {
			this.invalidate();
		}
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return this;
};

/**
 * Returns an aggregation of the managed object with a given sAggregationName
 *
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {sap.ui.base.ManagedObject | Array}
 *			  oDefaultForCreation the object that is used in case the current aggregation is empty
 * @type sap.ui.base.ManagedObject|Array
 * @return the aggregation array in case of 0..n-aggregations or the managed object or null in case of 0..1-aggregations
 * @protected
 */
sap.ui.base.ManagedObject.prototype.getAggregation = function(sAggregationName, oDefaultForCreation) {
	var aChildren = this.mAggregations[sAggregationName];
	if (!aChildren) {
		aChildren = this.mAggregations[sAggregationName] = oDefaultForCreation || null;
	}
	if (aChildren) {
		if (typeof aChildren.length === 'number' && !(aChildren.propertyIsEnumerable('length')) ) {
			// Return a copy of the array instead of the array itself as reference!!
			return aChildren.slice();
		}
		// simple type or ManagedObject
		return aChildren;
	} else {
		return null;
	}
};

/**
 * Checks for the provided managed object <code>oObject</code> in the aggregation
 * named <code>sAggregationName</code> and returns its index if found, or -1
 * otherwise. Returns -2 if the given named aggregation is not a multiple one
 * (and does not contain the given child).
 *
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {sap.ui.base.ManagedObject}
 *            oObject the ManagedObject whose index is looked for.
 * @return {int} the index of the provided managed object in the aggregation.
 * @protected
 */
sap.ui.base.ManagedObject.prototype.indexOfAggregation = function(sAggregationName, oObject) {
	var aChildren = this.mAggregations[sAggregationName];
	if (aChildren) {
		if (aChildren.length == undefined) {
			return -2;
		} // not a multiple aggregation

		for (var i = 0; i < aChildren.length; i++) {
			if (aChildren[i] == oObject) {
				return i;
			}
		}
	}
	return -1;
};

/**
 * Inserts managed object <code>oObject</code> to the aggregation named <code>sAggregationName</code> at
 * position <code>iIndex</code>.
 *
 * @param {string}
 *            sAggregationName the string identifying the aggregation the managed object <code>oObject</code>
 *            should be inserted into.
 * @param {sap.ui.base.ManagedObject}
 *            oObject the ManagedObject to add; if empty, nothing is inserted.
 * @param {int}
 *            iIndex the <code>0</code>-based index the managed object should be inserted at; for a negative
 *            value <code>iIndex</code>, <code>oObject</code> is inserted at position 0; for a value
 *            greater than the current size of the aggregation, <code>oObject</code> is inserted at
 *            the last position
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject as well as the added child are not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.base.ManagedObject.prototype.insertAggregation = function(sAggregationName, oObject, iIndex, bSuppressInvalidate) {
	if (!oObject) {
		return this;
	}
	oObject = this.validateAggregation(sAggregationName, oObject, /* multiple */ true);

	var aChildren = this.mAggregations[sAggregationName] || (this.mAggregations[sAggregationName] = []);
	// force index into valid range 
	var i = iIndex < 0 ? 0 : (iIndex > aChildren.length ? aChildren.length : iIndex);
	if (i !== iIndex) {
		jQuery.sap.log.warning("ManagedObject.insertAggregation: index '" + iIndex + "' out of range [0," + aChildren.length + "], forced to " + i);
	}
	aChildren.splice(i, 0, oObject);
	oObject.setParent(this, sAggregationName, bSuppressInvalidate);

	return this;
};

/**
 * Adds some entity <code>oObject</code> to the aggregation identified by <code>sAggregationName</code>.
 *
 * @param {string}
 *            sAggregationName the string identifying the aggregation that <code>oObject</code> should be added to.
 * @param {sap.ui.base.ManagedObject}
 *            oObject the object to add; if empty, nothing is added
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject as well as the added child are not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.base.ManagedObject.prototype.addAggregation = function(sAggregationName, oObject, bSuppressInvalidate) {
	if (!oObject) {
		return this;
	}
	oObject = this.validateAggregation(sAggregationName, oObject, /* multiple */ true);

	var aChildren = this.mAggregations[sAggregationName];
	if (!aChildren) {
		aChildren = this.mAggregations[sAggregationName] = [oObject];
	} else {
		aChildren.push(oObject);
	}
	oObject.setParent(this, sAggregationName, bSuppressInvalidate);
	return this;
};

/**
 * Removes an object from the aggregation named <code>sAggregationName</code>.
 *
 * @param {string}
 *            sAggregationName the string identifying the aggregation the ManagedObject should be removed from
 * @param {int | string | sap.ui.base.ManagedObject}
 *            vObject the position or ID of the ManagedObject to remove or the ManagedObject itself; if <code>vObject</code> is invalid,
 *            a negative value or a value greater or equal than the current size of the aggregation, nothing is removed
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @type sap.ui.base.ManagedObject
 * @return the removed object or null
 * @protected
 */
sap.ui.base.ManagedObject.prototype.removeAggregation = function(sAggregationName, vObject, bSuppressInvalidate) {
	var aChildren = this.mAggregations[sAggregationName],
		oChild=null,
		i;

	if ( !aChildren ) {
		return null;
	}
	
	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	if (typeof(vObject) == "string") { // ID of the object is given
		// Note: old lookup via sap.ui.getCore().byId(vObject) only worked for Elements, not for managed objects in general!
		for (i = 0; i < aChildren.length; i++) {
			if (aChildren[i] && aChildren[i].getId() === vObject) {
				vObject = i;
				break;
			}
		}
	}
	
	if (typeof(vObject) == "object") { // the object itself is given or has just been retrieved
		for (i = 0; i < aChildren.length; i++) {
			if (aChildren[i] == vObject) {
				vObject = i;
				break;
			}
		}
	}

	if (typeof(vObject) == "number") { // "vObject" is the index now
		if (vObject < 0 || vObject >= aChildren.length) {
			jQuery.sap.log.warning("ManagedObject.removeAggregation called with invalid index: " + sAggregationName + ", " + vObject);
	
		} else {
			oChild = aChildren[vObject];
			aChildren.splice(vObject, 1); // first remove it from array, then call setParent (avoids endless recursion)
			oChild.setParent(null);
			if (!this.isInvalidateSuppressed()) {
				this.invalidate();
			}
		}
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return oChild;
};

/**
 * Removes all the controls in the 0..n-aggregation named <code>sAggregationName</code> (and returns them in an array).<br/>
 * Additionally unregisters them from the hosting UIArea.
 *
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @type Array
 * @return an array of the removed elements (might be empty)
 * @protected
 */
sap.ui.base.ManagedObject.prototype.removeAllAggregation = function(sAggregationName, bSuppressInvalidate){
	var aChildren = this.mAggregations[sAggregationName];
	if (!aChildren)	{
		return [];
	}

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	delete this.mAggregations[sAggregationName];
	for (var i = 0; i < aChildren.length; i++) {
		aChildren[i].setParent(null);
	}
	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return aChildren;
};

/**
 * Destroys (all) the managed object(s) in the aggregation named <code>sAggregationName</code> and afterwards empties the
 * aggregation.
 *
 * @param {string}
 *            sAggregationName the name of the aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @return {sap.ui.base.ManagedObject} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.base.ManagedObject.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate){
	var aChildren = this.mAggregations[sAggregationName],
		i, aChild;
	
	if (!aChildren) {
		return this;
	}

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	// Deleting the aggregation here before destroying the children is a BUG:
	//
	// The destroy() method on the children calls _removeChild() on this instance
	// to properly remove each child from the bookkeeping by executing the named
	// removeXYZ() method. But as the aggegation is deleted here already, 
	// _removeChild() doesn't find the child in the bookkeeping and therefore 
	// refuses to work. Asa result ,side effects from removeXYZ() are missing.
	// 
	// The lines below marked with 'FIXME DESTROY' sketch a potential fix, but 
	// that fix has proven to be incompatible for several controls that don't 
	// properly implement removeXYZ(). As this might affect custom controls
	// as well, the fix has been postponed.
	//
	delete this.mAggregations[sAggregationName]; //FIXME DESTROY: should be removed here
	
	if (aChildren instanceof sap.ui.base.ManagedObject) {
		// FIXME DESTROY: this._removeChild(aChildren, sAggregationName, bSuppressInvalidate); // (optional, done by destroy())
		aChildren.destroy(bSuppressInvalidate);
	} else if (jQuery.isArray(aChildren)) {
		for (i = aChildren.length-1; i >= 0; i--) {
			aChild = aChildren[i];
			if (aChild) {
				// FIXME DESTROY: this._removeChild(aChild, sAggregationName, bSuppressInvalidate); // (optional, done by destroy())
				aChild.destroy(bSuppressInvalidate);
			}
		}
	}
	
	// FIXME DESTROY: // 'delete' aggregation only now so that _removeChild() can still do its cleanup
	// FIXME DESTROY: delete this.mAggregations[sAggregationName];

	if (!this.isInvalidateSuppressed()) {
		this.invalidate();
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return this;
};

// ######################################################################################################
// End of Aggregations
// ######################################################################################################


/**
 * This triggers rerendering of itself and its children.<br/> As <code>sap.ui.base.ManagedObject</code> "bubbles up" the
 * invalidate, changes to child-<code>Elements</code> will also result in rerendering of the whole sub tree.
 * @protected
 */
sap.ui.base.ManagedObject.prototype.invalidate = function() {
	if (this.oParent) {
		this.oParent.invalidate(this);
	}
};


/**
 * Returns whether rerendering is currently suppressed on this ManagedObject
 * @return boolean
 * @protected
 */
sap.ui.base.ManagedObject.prototype.isInvalidateSuppressed = function() {
	var bInvalidateSuppressed = this.iSuppressInvalidate > 0;
	if (this.oParent && this.oParent instanceof sap.ui.base.ManagedObject) {
		bInvalidateSuppressed = bInvalidateSuppressed || this.oParent.isInvalidateSuppressed();
	}
	return bInvalidateSuppressed;
};


/**
 * Removes the given child from this object's named aggregation.
 * @see sap.ui.core.UIArea#_removeChild
 * @see sap.ui.base.ManagedObject#setParent
 *
 * @param {sap.ui.base.ManagedObject}
 *            oChild the child object to be removed
 * @param {string}
 *            sAggregationName the name of this object's aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @private
 */
sap.ui.base.ManagedObject.prototype._removeChild = function(oChild, sAggregationName, bSuppressInvalidate) {
	if (!sAggregationName) {
		// an aggregation name has to be specified!
		jQuery.sap.log.error("Cannot remove aggregated child without aggregation name.", null, this);
	} else {
		// set suppress invalidate flag
		if (bSuppressInvalidate) {
			this.iSuppressInvalidate++;
		}

		var iIndex = this.indexOfAggregation(sAggregationName, oChild);
		var oAggregationInfo = this.getMetadata().getJSONKeys()[sAggregationName];
		// Note: we assume that this is the given child's parent, i.e. -1 not expected!
		if (iIndex == -2) { // 0..1
			if(oAggregationInfo && this[oAggregationInfo._sMutator]) { // TODO properly deal with hidden aggregations
				this[oAggregationInfo._sMutator](null);
			}
			else {
				this.setAggregation(sAggregationName, null, bSuppressInvalidate);
			}
		} else if(iIndex > -1 ) { // 0..n
			if(oAggregationInfo && this[oAggregationInfo._sRemoveMutator]) { // TODO properly deal with hidden aggregations
				this[oAggregationInfo._sRemoveMutator](iIndex);
			}
			else {
				this.removeAggregation(sAggregationName, iIndex, bSuppressInvalidate);
			}
		} else {
			// already removed!?
			// this is the unexpected -1
			// TODO: What would be better? Explicit removeCompositeChild callback on subclass?
		}
		if (!this.isInvalidateSuppressed()) {
			this.invalidate();
		}

		// reset suppress invalidate flag
		if (bSuppressInvalidate) {
			this.iSuppressInvalidate--;
		}
	}
};

/**
 * Defines this object's new parent. If no new parent is given, the parent is
 * just unset and we assume that the old parent has removed this child from its
 * aggregation. But if a new parent is given, this child is first removed from
 * its old parent.
 *
 * @param {sap.ui.base.ManagedObject}
 *            oParent the object that becomes this objects's new parent
 * @param {string}
 *            sAggregationName the name of the parent objects's aggregation
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed. The old parent, however, is marked.
 * @return {sap.ui.base.ManagedObject}
 *            Returns <code>this</code> to allow method chaining
 * @private
 */
sap.ui.base.ManagedObject.prototype.setParent = function(oParent, sAggregationName, bSuppressInvalidate) {
	var that = this;

	if ( !oParent ) {
		this.oParent = null;
		this.sParentAggregationName = null;
		this.oPropagatedProperties = {oModels:{}, oBindingContexts:{}};
		
		jQuery.sap.act.refresh();
		
		// Note: no need (and no way how) to invalidate
		return;
	}

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		//Refresh only for changes with suppressed invalidation (others lead to rerendering and refresh is handled there)
		jQuery.sap.act.refresh();
		this.iSuppressInvalidate++;
	}

	var oOldParent = this.getParent();
	if (oOldParent) { // remove this object from its old parent
		// Note: bSuppressInvalidate  by intention is not propagated to the old parent.
		// It is not sure whether the (direct or indirect) caller of setParent
		// has enough knowledge about the old parent to automatically propagate this.
		// If needed, callers can first remove the object from the oldParent (specifying a 
		// suitable value for bSuppressInvalidate there) and only then call setParent.
		oOldParent._removeChild(this, this.sParentAggregationName);  
	}
	// adopt new parent
	this.oParent = oParent;
	this.sParentAggregationName = sAggregationName;
	
	//get properties to propagate
	this.oPropagatedProperties = oParent._getPropertiesToPropagate();
	
	// update bindings
	if (this.hasModel()) {
		this.updateBindingContext(false, true, undefined, true);
		this.updateBindings(true,null); // TODO could be restricted to models that changed
		this.propagateProperties(true);
	}

	// only the parent knows where to render us, so we have to invalidate it
	if ( oParent && !this.isInvalidateSuppressed() ) {
		oParent.invalidate(this);
	}

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}

	return this;
};

/**
 * Returns the parent managed object or <code>null</code> if this object hasn't been added to a parent yet.
 *
 * @return {sap.ui.base.ManagedObject} The parent managed object or <code>null</code>
 * @public
 */
sap.ui.base.ManagedObject.prototype.getParent = function() {
	/* Be aware that internally this.oParent is used to reduce method calls. 
	 * Check for side effects when overriding this method */
	return this.oParent;
};


/**
 * Cleans up the resources associated with this object and all its aggregated children.
 *
 * After an object has been destroyed, it can no longer be used in!
 *
 * Applications should call this method if they don't need the object any longer.
 *
 * @param {boolean}
 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
 * @public
 */
sap.ui.base.ManagedObject.prototype.destroy = function(bSuppressInvalidate) {
	var that = this;

	// jQuery.sap.log.debug("destroying " + this);

	// set suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate++;
	}

	if (this.exit) {
		this.exit();
	}

	// TODO: generic concept for exit hooks?
	if ( this._exitCompositeSupport ) {
		this._exitCompositeSupport();
	}

	// ensure that also our children are destroyed!!
	for(var oAggr in this.mAggregations){
		this.destroyAggregation(oAggr, bSuppressInvalidate);
	}
	
	// Deregister, if available
	if (this.deregister) this.deregister();

	// remove this child from parent aggregation
	if (this.oParent && this.sParentAggregationName) {
		this.oParent._removeChild(this, this.sParentAggregationName, bSuppressInvalidate);
	}
	// for robustness only - should have been cleared by _removeChild already
	delete this.oParent;
	
	// Data Binding
	jQuery.each(this.mBindingInfos, function(sName, oBindingInfo) {
		if (oBindingInfo.factory) {
			that.unbindAggregation(sName, true);
		} else {
			that.unbindProperty(sName, true);
		}
	});

	// reset suppress invalidate flag
	if (bSuppressInvalidate) {
		this.iSuppressInvalidate--;
	}
	
	sap.ui.base.EventProvider.prototype.destroy.apply(this, arguments);

	// finally make the object unusable
	this.setParent = function(){
		throw Error("The object with ID "+that.getId()+" was destroyed and cannot be used anymore.");
	};

	// make visible that it's been destroyed.
	this.bIsDestroyed = true;

};


// DataBinding
/**
 * Binding parser to use.
 */
sap.ui.base.ManagedObject.bindingParser = sap.ui.base.BindingParser.simpleParser;

/**
 * Determines whether a given object contains binding information instead of a
 * value or aggregated controls. The method is used in applySettings for processing
 * the JSON notation of properties/aggregations in the constructor.
 *
 * @param {object} oValue the value
 * @param {object} oKeyInfo the metadata of the property
 *
 * @returns {boolean} whether the value contains binding information
 *
 * @private
 * @deprecated
 */
sap.ui.base.ManagedObject.prototype.isBinding = function(oValue, oKeyInfo) {
	return "object" === typeof this.extractBindingInfo(oValue, oKeyInfo.type === "object");
};

/**
 * Checks whether the given value can be interpreted as a binding info and 
 * returns that binding info or an unescaped string or undefined when it is not.
 *  
 * When the 'complex' binding syntax is enabled, the function might also return
 * a string value in case the given value was a string, did not represent a binding
 * but contained escaped special characters.
 * 
 * There are two possible notations for binding information in the object literal notation 
 * of the ManagedObject constructor and ManagedObject.applySettings:
 * <ul>
 *   <li>property: "{path}"
 *   This is used for property binding and can only contain the path.
 *   </li>
 *   <li>property:{path:"path", template:oTemplate}
 *   This is used for aggregation binding, where a template is required or can
 *   be used for property binding when additional data is required (e.g. formatter).
 *   </li>
 * </ul>
 * 
 * @param {object} oValue
 * @param {boolean} bIgnoreObjects
 * @param {object} oScope
 *
 * @returns {object} the binding info object or an unescaped string or undefined. 
 *     If a binding info is returned, it contains at least a path property
 *     or nested bindings (parts) and, dependant of the binding type, 
 *     additional properties
 *
 * @private
 */
sap.ui.base.ManagedObject.prototype.extractBindingInfo = function(oValue, bIgnoreObjects, oScope) {

	// property:{path:"path", template:oTemplate}
	if (oValue && typeof oValue === "object" && (oValue.path || oValue.parts) && !bIgnoreObjects) {
		// allow JSON syntax for templates
		if (oValue.template) {
			oValue.template = sap.ui.base.ManagedObject.create(oValue.template);
		}
		return oValue;
	}

	// property:"{path}" or "\{path\}"
	if (typeof oValue === "string") {
		// either returns a binding info or an unescaped string or undefined - depending on binding syntax 
		return sap.ui.base.ManagedObject.bindingParser(oValue, oScope, true);
	}

	// return undefined;
};

/**
 * Returns the binding infos for the given property or aggregation. The binding info contains information about path, binding object, format options,
 * sorter, filter etc. for the property or aggregation.
 *
 * @param {string} sName the name of the property or aggregation
 *
 * @returns {object} the binding info object, containing at least a path property
 *                   and, dependant of the binding type, additional properties
 *
 * @protected
 */
sap.ui.base.ManagedObject.prototype.getBindingInfo = function(sName) {
	return this.mBindingInfos[sName];
};

/**
 * Bind the object to the referenced entity in the model, which is used as the binding context
 * to resolve bound properties or aggregations of the object itself and all of its children
 * relatively to the given path.
 * If a relative binding path is used, this will be applied whenever the parent context changes.
 * @param {string} sPath the binding path
 * @param {object} [mParameters] map of additional parameters for this binding
 *
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public 
 */
sap.ui.base.ManagedObject.prototype.bindObject = function(sPath, mParameters) {
	var boundObject = {},
		oldBoundObject,
		sModelName,
		iSeparatorPos;
	// support object notation
	if (typeof sPath == "object") {
		var oBindingInfo = sPath;
		sPath = oBindingInfo.path;
		mParameters = oBindingInfo.parameters;
		sModelName = oBindingInfo.model;
		boundObject.events = oBindingInfo.events;
	}
	// if a model separator is found in the path, extract model name and path
	iSeparatorPos = sPath.indexOf(">");
	boundObject.sBindingPath = sPath;
	boundObject.mBindingParameters = mParameters;
	if (iSeparatorPos > 0) {
		sModelName = sPath.substr(0, iSeparatorPos);
		boundObject.sBindingPath = sPath.substr(iSeparatorPos + 1);
	} 
	
	//if old binding exists detach handler
	oldBoundObject = this.mBoundObjects[sModelName];
	if (oldBoundObject && oldBoundObject.binding) {
		oldBoundObject.binding.detachChange(oldBoundObject.fChangeHandler);
		oldBoundObject.binding.detachEvents(oldBoundObject.events);
	}
	this.mBoundObjects[sModelName] = boundObject;

	// if the models are already available, create the binding
	if (this.getModel(sModelName)) {
		this._bindObject(sModelName, boundObject);
	}
	return this;
};

/**
 * Create object binding
 * 
 * @private
 */
sap.ui.base.ManagedObject.prototype._bindObject = function(sModelName, oBoundObject) {
	var oBinding, 
		oParentContext, 
		oModel, 
		that = this;
	
	var fChangeHandler = function(oEvent) {
		that.setBindingContext(oBinding.getBoundContext(), sModelName);
	};
	
	oModel = this.getModel(sModelName);
	
	if (this.oParent && oModel == this.oParent.getModel(sModelName)) {
		oParentContext= this.oParent.getBindingContext(sModelName); 
	}
	
	oBinding = oModel.bindContext(oBoundObject.sBindingPath, oParentContext, oBoundObject.mBindingParameters);
	oBinding.attachChange(fChangeHandler);
	oBoundObject.binding = oBinding;
	oBoundObject.fChangeHandler = fChangeHandler;
	
	oBinding.attachEvents(oBoundObject.events);
	
	oBinding.initialize();
};

/**
 * Bind the object to the referenced entity in the model, which is used as the binding context
 * to resolve bound properties or aggregations of the object itself and all of its children
 * relatively to the given path. 
 * 
 * @deprecated Since 1.11.1, please use bindElement instead.
 * @param {string} sPath the binding path
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 */
sap.ui.base.ManagedObject.prototype.bindContext = function(sPath) {
	return this.bindElement(sPath);
};

/**
 * Removes the defined binding context of this object, all bindings will now resolve
 * relative to the parent context again.
 *
 * @deprecated Since 1.11.1, please use unbindElement instead.
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 */
sap.ui.base.ManagedObject.prototype.unbindContext = function(sModelName) {
	return this.unbindElement(sModelName);
};

/**
 * Removes the defined binding context of this object, all bindings will now resolve
 * relative to the parent context again.
 *
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 */
sap.ui.base.ManagedObject.prototype.unbindObject = function(sModelName) {
	//TODO detach changerHandler
	var oBoundObject = this.mBoundObjects[sModelName]; 
	if (oBoundObject) {
		if (oBoundObject.binding) {
			oBoundObject.binding.detachChange(oBoundObject.fChangeHandler)
			oBoundObject.binding.detachEvents(oBoundObject.events);
		}
		delete this.mBoundObjects[sModelName]
		delete this.oBindingContexts[sModelName];
		this.updateBindingContext(false, false, sModelName);
	}
	return this;
};

/**
 * Bind a property to the model.
 * The Setter for the given property will be called with the value retrieved
 * from the data model.
 * This is a generic method which can be used to bind any property to the
 * model. A managed object may flag properties in the metamodel with
 * bindable="bindable" to get typed bind methods for a property.
 *
 * @param {string} sName the name of the property
 * @param {object} oBindingInfo the binding information
 * @param {string} oBindingInfo.path the binding path
 * @param {string} [oBindingInfo.model] the model identifier
 * @param {function} [oBindingInfo.formatter] the formatter function
 * @param {boolean} [oBindingInfo.useRawValues] determines if the parameters in the formatter functions should be passed as raw values or not. In this case
 * 					the specified type for the binding is not used and the values are not formatted. Note: use this flag only when using multiple bindings.
 * 					If you use only one binding and want raw values then simply don't specify a type for that binding. 
 * @param {sap.ui.model.Type|string} [oBindingInfo.type] the sap.ui.model.Type object or class name
 * @param {object} [oBindingInfo.formatOptions] the format options to be used
 * @param {object} [oBindingInfo.constraints] the constraints for this value
 * @param {sap.ui.model.BindingMode} [oBindingInfo.mode=Default] the binding mode to be used for this property binding (e.g. one way)
 * @param {object} [oBindingInfo.parameters] a map of parameters which is passed to the binding
 *
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 */
sap.ui.base.ManagedObject.prototype.bindProperty = function(sName, oBindingInfo) {
	var sPath,
		oFormat,
		sMode,
		sModelName,
		fnFormatter,
		oType,
		iSeparatorPos,
		bAvailable = true,
		that = this,
		oMetadata = this.getMetadata(),
		oProperty = oMetadata.getAllProperties()[sName],
		oKeyInfo = oMetadata.getJSONKeys()[sName];

	// check whether property or alternative type on aggregation exists
	if (!oProperty && !(oKeyInfo && oKeyInfo.altTypes)) {
		throw new Error("Property \"" + sName + "\" does not exist in " + this);
	}

	// old API compatbility (sName, sPath, oFormat, sMode)
	if (typeof oBindingInfo == "string") {
		sPath = arguments[1];
		oFormat = arguments[2];
		sMode = arguments[3];

		// find out whether formatter or type has been provided
		if (typeof oFormat == "function") {
			fnFormatter = oFormat;
		}
		else if (oFormat instanceof sap.ui.model.Type) {
			oType = oFormat;
		}
		oBindingInfo = {formatter: fnFormatter, parts : [ {path: sPath, type: oType, mode: sMode} ]};
	}
	
	// only one binding object with one binding specified
	if (!oBindingInfo.parts) {
		oBindingInfo.parts = [];
		oBindingInfo.parts[0] = {
			path: oBindingInfo.path,
			type: oBindingInfo.type,
			formatOptions: oBindingInfo.formatOptions,
			constraints: oBindingInfo.constraints,
			model: oBindingInfo.model,
			mode: oBindingInfo.mode, 
		};
		delete oBindingInfo.path;
		delete oBindingInfo.mode;
		delete oBindingInfo.model;
	}
	
	jQuery.each(oBindingInfo.parts, function(i, oPart) {
		if (typeof oPart == "string") {
			oPart = { path: oPart };
			oBindingInfo.parts[i] = oPart;
		}
		// if a model separator is found in the path, extract model name and path
		iSeparatorPos = oPart.path.indexOf(">");
		if (iSeparatorPos > 0) {
			oPart.model = oPart.path.substr(0, iSeparatorPos);
			oPart.path = oPart.path.substr(iSeparatorPos + 1);
		}
		// if we have multiple bindings the binding mode can be one way only
		if (oBindingInfo.parts.length > 1) {
			oPart.mode = sap.ui.model.BindingMode.OneWay;
		}
		
		if (!that.getModel(oPart.model)) {
			bAvailable = false;
		}
		
	});
	
	// if property is already bound, unbind it first
	if (this.isBound(sName)){
		this.unbindProperty(sName, true);
	}

	// store binding info to create the binding, as soon as the model is available, or when the model is changed
	this.mBindingInfos[sName] = oBindingInfo;

	// if the models are already available, create the binding
	if (bAvailable) {
		this._bindProperty(sName, oBindingInfo);
	}
	return this;
};

sap.ui.base.ManagedObject.prototype._bindProperty = function(sName, oBindingInfo) {
	var oModel,
		sMode,
		oContext,
		oBinding,
		oType,
		clType,
		oPropertyInfo = this.getMetadata().getJSONKeys()[sName], // TODO fix handling of hidden entitites?
		that = this,
		aBindings = [],
		fModelChangeHandler = function() {
			try {			
				var oValue = oBinding.getExternalValue();
				oBindingInfo.skipModelUpdate = true;
				that[oPropertyInfo._sMutator](oValue);
				oBindingInfo.skipModelUpdate = false;
			}catch (oException) {
				if (oException instanceof sap.ui.model.FormatException) {
					that.fireFormatError({
						element : that,
						property : sName,
						type : oBinding.getType(),
						newValue : oBinding.getValue(),
						oldValue : that.getProperty(sName),
						exception: oException
					}, false, true); // bAllowPreventDefault, bEnableEventBubbling
				}else {
					throw oException;
				}
			}
		};

	// Only use context for bindings on the primary model
	oContext = this.getBindingContext(oBindingInfo.model);
	
	jQuery.each(oBindingInfo.parts, function(i, oPart) {
		// Only use context for bindings on the primary model
		oContext = that.getBindingContext(oPart.model);
		// Create binding object
		oModel = that.getModel(oPart.model);
		// Create type instance if needed
		oType = oPart.type;
		if (typeof oType == "string") {
			clType = jQuery.sap.getObject(oType);
			oType = new clType(oPart.formatOptions, oPart.constraints);
		}
		
		oBinding = oModel.bindProperty(oPart.path, oContext, oBindingInfo.parameters);
		oBinding.setType(oType, oPropertyInfo.type);
		oBinding.setFormatter(oPart.formatter);
		
		sMode = !oPart.mode ? oModel.getDefaultBindingMode() : oPart.mode; 
		oBinding.setBindingMode(sMode);
		
		aBindings.push(oBinding);
	});

	// check if we have a composite binding or a formatter function created by the BindingParser which has property textFragments
	if (aBindings.length > 1 || ( oBindingInfo.formatter && oBindingInfo.formatter.textFragments )) {
		// Create type instance if needed
		oType = oBindingInfo.type;
		if (typeof oType == "string") {
			clType = jQuery.sap.getObject(oType);
			oType = new clType(oBindingInfo.formatOptions, oBindingInfo.constraints);
		}
		oBinding = new sap.ui.model.CompositeBinding(aBindings, oBindingInfo.useRawValues);
		oBinding.setType(oType, oPropertyInfo.type);
		oBinding.setBindingMode(oBindingInfo.mode);
	} else {
		oBinding = aBindings[0];
	}
	
	oBinding.attachChange(fModelChangeHandler);
	
	// set only one formatter function if any
    // because the formatter gets the context of the element we have to set the context via proxy to ensure compatibility 
	// for formatter function which is now called by the property binding
	// proxy formatter here because "this" is the correct cloned object
	oBinding.setFormatter(jQuery.proxy(oBindingInfo.formatter, this));  
	
	// Set additional information on the binding info
	oBindingInfo.skipModelUpdate = false;
	oBindingInfo.binding = oBinding;
	oBindingInfo.modelChangeHandler = fModelChangeHandler;
	
	oBinding.attachEvents(oBindingInfo.events);

	oBinding.initialize();
	
	if (oBinding.getBindingMode() === sap.ui.model.BindingMode.OneTime) {
		oBinding.detachChange(fModelChangeHandler);
		oBinding.detachEvents(oBindingInfo.events);
	}
};

/**
 * Unbind the property from the model
 *
 * @param {String} sName the name of the property
 * @param {boolean} bSuppressReset whether the reset to the default value when unbinding should be suppressed
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 */
sap.ui.base.ManagedObject.prototype.unbindProperty = function(sName, bSuppressReset){
	var oBindingInfo = this.mBindingInfos[sName],
		oPropertyInfo = this.getMetadata().getJSONKeys()[sName];
	if(oBindingInfo) {
		if (oBindingInfo.binding) {
			oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
			oBindingInfo.binding.detachEvents(oBindingInfo.events);
		}
		delete this.mBindingInfos[sName];
		if (!bSuppressReset) {
			this[oPropertyInfo._sMutator](null);
		}
	}
	return this;
};

/**
 * Update the property in the model if two way data binding mode is enabled
 *
 * @param sName the name of the property to update
 * @param oValue the new value to set for the property in the model
 * @private
 */
sap.ui.base.ManagedObject.prototype.updateModelProperty = function(sName, oValue, oOldValue){
	if (this.isBound(sName)){
		var oBindingInfo = this.mBindingInfos[sName],
			oBinding = oBindingInfo.binding;
		// only one property binding should work with two way mode...composite binding does not work with two way binding 
		if (oBinding && oBinding.getBindingMode() == sap.ui.model.BindingMode.TwoWay
				&& !oBindingInfo.skipModelUpdate) {
			try {
				oBinding.setExternalValue(oValue);
				// Only fire validation success, if a type is used
				if (oBinding.getType()) {
					this.fireValidationSuccess({
						element : this,
						property : sName,
						type : oBinding.getType(),
						newValue : oValue,
						oldValue : oOldValue
					}, false, true); // bAllowPreventDefault, bEnableEventBubbling
				}
			}
			catch (oException) {
				if (oException instanceof sap.ui.model.ParseException) {
					this.fireParseError({
						element : this,
						property : sName,
						type : oBinding.getType(),
						newValue : oValue,
						oldValue : oOldValue,
						exception: oException
					}, false, true); // bAllowPreventDefault, bEnableEventBubbling
				}else if (oException instanceof sap.ui.model.ValidateException) {
					this.fireValidationError({
						element : this,
						property : sName,
						type : oBinding.getType(),
						newValue : oValue,
						oldValue : oOldValue,
						exception: oException
					}, false, true); // bAllowPreventDefault, bEnableEventBubbling
				}
				else {
					throw oException;
				}
			}
		}
	}
};

/**
 * Bind an aggregation to the model.
 * 
 * The bound aggregation will use the given template, clone it for each item
 * which exists in the bound list and set the appropriate binding context.
 * This is a generic method which can be used to bind any aggregation to the
 * model. A managed object may flag aggregations in the metamodel with
 * bindable="bindable" to get typed bind<i>Something</i> methods for those aggregations.
 *
 * @param {string} sName the aggregation to bind
 * @param {object} oBindingInfo the binding info
 * @param {string} oBindingInfo.path the binding path
 * @param {sap.ui.base.ManagedObject} oBindingInfo.template the template to clone for each item in the aggregation
 * @param {function} oBindingInfo.factory the factory function
 * @param {sap.ui.model.Sorter|sap.ui.model.Sorter[]} [oBindingInfo.sorter] the initial sort order (optional)
 * @param {sap.ui.model.Filter[]} [oBindingInfo.filters] the predefined filters for this aggregation (optional)
 * @param {object} [oBindingInfo.parameters] a map of parameters which is passed to the binding
 * @param {function} [oBindingInfo.groupHeaderFactory] a factory function to generate custom group visualization (optional)
 *
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 */
sap.ui.base.ManagedObject.prototype.bindAggregation = function(sName, oBindingInfo) {
	var sPath,
		oTemplate,
		aSorters,
		aFilters,
		oMetadata = this.getMetadata(),
		oAggregation = oMetadata.getAllAggregations()[sName];

	// check whether aggregation exists
	if (!oAggregation) {
		throw new Error("Aggregation \"" + sName + "\" does not exist in " + this);
	}
	
	// Old API compatibility (sName, sPath, oTemplate, oSorter, aFilters)
	if (typeof oBindingInfo == "string") {
		sPath = arguments[1];
		oTemplate = arguments[2];
		aSorters = arguments[3];
		aFilters = arguments[4];
		oBindingInfo = {path: sPath, sorter: aSorters, filters: aFilters};
		// allow either to pass the template or the factory function as 3rd parameter
		if (oTemplate instanceof sap.ui.base.ManagedObject) {
			oBindingInfo.template = oTemplate;
		} else if (typeof oTemplate === "function") {
			oBindingInfo.factory = oTemplate;
		}
	}
	
	// if aggregation is already bound, unbind it first
	if (this.isBound(sName)){
		this.unbindAggregation(sName, true);
	}
	
	// check whether a template has been provided, which is required for proper processing of the binding
	// If aggregation is marked correspondingly in the metadata, factory can be omitted (usually requires an updateXYZ method)
	if (!(oBindingInfo.template || oBindingInfo.factory)) {
		if ( oAggregation._doesNotRequireFactory ) {
			// add a dummy factory as property 'factory' is used to distinguish between property- and list-binding
			oBindingInfo.factory = function() { throw new Error("dummy factory called unexpectedly "); };
		} else {
			throw new Error("Missing template or factory function for aggregation " + sName + " of " + this + " !");
		}
	}
	
	// if we have a template we will create a factory function
	if (oBindingInfo.template) {
		oBindingInfo.factory = function(sId) {
			return oBindingInfo.template.clone(sId);
		} 
	}
	
	// if a model separator is found in the path, extract model name and path
	var iSeparatorPos = oBindingInfo.path.indexOf(">");
	if (iSeparatorPos > 0) {
		oBindingInfo.model = oBindingInfo.path.substr(0, iSeparatorPos);
		oBindingInfo.path = oBindingInfo.path.substr(iSeparatorPos + 1);
	}
	
	// store binding info to create the binding, as soon as the model is available, or when the model is changed
	this.mBindingInfos[sName] = oBindingInfo;

	// if the model is already available create the binding
	if (this.getModel(oBindingInfo.model)) {
		this._bindAggregation(sName, oBindingInfo);
	}
	return this;
};

sap.ui.base.ManagedObject.prototype._bindAggregation = function(sName, oBindingInfo) {
	var that = this,
		oBinding,
		fModelChangeHandler = function(oEvent){
			var sUpdater = "update" + sName.substr(0,1).toUpperCase() + sName.substr(1);
			if (that[sUpdater]) {
				var sChangeReason = oEvent && oEvent.getParameter("reason");
				if (sChangeReason) {
					that[sUpdater](sChangeReason);
				} else {
					that[sUpdater]();
				}
			} else {
				that.updateAggregation(sName);
			}
		},
		fModelRefreshHandler = function(oEvent){
			var sRefresher = "refresh" + sName.substr(0,1).toUpperCase() + sName.substr(1);
			if (that[sRefresher]) {
				that[sRefresher](oEvent.getParameter("reason"));
			} else {
				fModelChangeHandler(oEvent);
			}
		};
		var oModel = this.getModel(oBindingInfo.model);
		if (this.isTreeBinding(sName)) {
			oBinding = oModel.bindTree(oBindingInfo.path, this.getBindingContext(oBindingInfo.model), oBindingInfo.filters, oBindingInfo.parameters);
		} else {
			oBinding = oModel.bindList(oBindingInfo.path, this.getBindingContext(oBindingInfo.model), oBindingInfo.sorter, oBindingInfo.filters, oBindingInfo.parameters);
		}
		
	if (this.bUseExtendedChangeDetection === true) {
		oBinding.enableExtendedChangeDetection();
	}

	oBindingInfo.binding = oBinding;
	oBindingInfo.modelChangeHandler = fModelChangeHandler;
	oBindingInfo.modelRefreshHandler = fModelRefreshHandler;

	oBinding.attachChange(fModelChangeHandler);
	
	oBinding.attachRefresh(fModelRefreshHandler);
	
	oBinding.attachEvents(oBindingInfo.events);
	
	oBinding.initialize();
};

/**
 * Unbind the aggregation from the model
 *
 * @param {String} sName the name of the aggregation
 * @param {boolean} bSuppressReset whether the reset to empty aggregation when unbinding should be suppressed
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 */
sap.ui.base.ManagedObject.prototype.unbindAggregation = function(sName, bSuppressReset){
	var oBindingInfo = this.mBindingInfos[sName],
		oAggregationInfo = this.getMetadata().getJSONKeys()[sName];
	if(oBindingInfo) {
		if (oBindingInfo.binding) {
			oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
			oBindingInfo.binding.detachRefresh(oBindingInfo.modelRefreshHandler);
			oBindingInfo.binding.detachEvents(oBindingInfo.events);
		}
		delete this.mBindingInfos[sName];
		if (!bSuppressReset) {
			this[oAggregationInfo._sDestructor]();
		}
	}
	return this;
};

/**
 *  This method is used internally and should only be overridden by a tree managed object which utilizes the tree binding.
 *  In this case and if the aggregation is a tree node the overridden method should then return true.
 *  If true is returned the tree binding will be used instead of the list binding.
 *
 *  @param {string} sName the aggregation to bind (e.g. nodes for a tree managed object)
 *  @return {boolean} whether tree binding should be used or list binding. Default is false. Override method to change this behavior.
 *
 *  @protected
 */
sap.ui.base.ManagedObject.prototype.isTreeBinding = function(sName) {
	return false;
};

/**
 * Create or update local bindings.
 * 
 * Called when model or binding contexts have changed. Creates bindings when the model was not available 
 * at the time bindProperty or bindAggregation was called. Recreates the bindings when they exist already 
 * and when the model has changed.
 *
 * @param {boolean} bUpdateAll forces an update of all bindings, sModelName will be ignored
 * @param {string|undefined} sModelName name of a model whose bindings should be updated
 * 
 * @private
 */
sap.ui.base.ManagedObject.prototype.updateBindings = function(bUpdateAll, sModelName) {
	var that = this;

	/*
	 * Checks whether the binding for the given oBindingInfo became invalid because 
	 * of the current model change (as identified by bUpdateAll and sModelName). 
	 * 
	 * Precondition: oBindingInfo contains a 'binding' object
	 * 
	 * @param oBindingInfo 
	 * @returns {boolean}
	 */
	function becameInvalid(oBindingInfo) {
		var aParts = oBindingInfo.parts,
			i;
		
		if (aParts && aParts.length>1) {
			// composite binding: invalid when for any part the model has the same name (or updateall) and when the model instance for that part differs 
			for(i=0; i<aParts.length; i++) {
				if ( (bUpdateAll || aParts[i].model == sModelName) && !oBindingInfo.binding.aBindings[i].updateRequired(that.getModel(aParts[i].model)) ) {
					return true;
				}
			}
		} else if (oBindingInfo.factory) {
			// list binding: invalid when  the model has the same name (or updateall) and when the model instance differs 
			return (bUpdateAll || oBindingInfo.model == sModelName) && !oBindingInfo.binding.updateRequired(that.getModel(oBindingInfo.model));
		} else {
			// simple property binding: invalid when the model has the same name (or updateall) and when the model instance differs 
			return (bUpdateAll || aParts[0].model == sModelName) && !oBindingInfo.binding.updateRequired(that.getModel(aParts[0].model)); 
		}
		return false;
	}

	/*
	 * Checks whether a binding can be created for the given oBindingInfo 
	 * @param oBindingInfo
	 * @returns {boolean} 
	 */
	function canCreate(oBindingInfo) {
		var aParts = oBindingInfo.parts,
			i;
		
		if (aParts) {
			for(i=0; i<aParts.length; i++) {
				if ( !that.getModel(aParts[i].model) ) {
					return false;
				}
			}
			return true;
		} else if (oBindingInfo.factory) { // List binding check
			return !!that.getModel(oBindingInfo.model); 
		} 
		// there should be no other cases
		return false;
	}
	
	// create property and aggregation bindings if they don't exist yet
	jQuery.each(this.mBindingInfos, function(sName, oBindingInfo) {

		// if there is a binding and if it became invalid through the current model change, then remove it 
		if ( oBindingInfo.binding && becameInvalid(oBindingInfo) ) {
			oBindingInfo.binding.detachChange(oBindingInfo.modelChangeHandler);
			if (oBindingInfo.modelRefreshHandler) { // only list bindings currently have a refresh handler attached
				oBindingInfo.binding.detachRefresh(oBindingInfo.modelRefreshHandler);				
			}
			oBindingInfo.binding.detachEvents(oBindingInfo.events);
			delete oBindingInfo.binding;
		}

		// if there is no binding and if all required information is available, create a binding object
		if ( !oBindingInfo.binding && canCreate(oBindingInfo) ) {
			if (oBindingInfo.factory) {
				that._bindAggregation(sName, oBindingInfo);
			} else {
				that._bindProperty(sName, oBindingInfo);
			}
		}

	});
	
};

/**
 * Generic method which is called, whenever an aggregation binding is changed.
 * This method deletes all elements in this aggregation and recreates them
 * according to the data model.
 * In case a managed object needs special handling for a aggregation binding, it can create
 * a typed update-method (e.g. "updateRows") which will be used instead of the
 * default behaviour.
 *
 * @private
 */
sap.ui.base.ManagedObject.prototype.updateAggregation = function(sName) {
	var oBindingInfo = this.mBindingInfos[sName],
		oBinding = oBindingInfo.binding,
		fnFactory = oBindingInfo.factory,
		oAggregationInfo = this.getMetadata().getJSONKeys()[sName],  // TODO fix handling of hidden aggregations
		oClone,
		oNewGroup = null,
		sGroupFunction = null,
		bGrouped = null,
		sGroup = null,
		that = this;
	this[oAggregationInfo._sDestructor]();
	if (this.isTreeBinding(sName)) {
		var iNodeIndex = 0,
			update = function(aContexts, fnFactory, oBinding, oParent){
				jQuery.each(aContexts, function(iIndex, oContext) {
					var sId = that.getId() + "-" + iNodeIndex++;
					oClone = fnFactory(sId, oContext);
					oClone.setBindingContext(oContext, oBindingInfo.model);
					oParent[oAggregationInfo._sMutator](oClone); // also sets the Parent
					update(oBinding.getNodeContexts(oContext), fnFactory, oBinding, oClone);
				});
			};
		update(oBinding.getRootContexts(), fnFactory, oBinding, this);
	} 
	else {
		sGroupFunction = oAggregationInfo._sMutator + "Group";
		bGrouped = oBinding.isGrouped() && this[sGroupFunction];
		jQuery.each(oBinding.getContexts(), function(iIndex, oContext) {
			if (bGrouped && oBinding.aSorters.length > 0) {
				oNewGroup = oBinding.aSorters[0].fnGroup(oContext);
				if (typeof oNewGroup == "string") {
					oNewGroup = {
						key: oNewGroup
					};
				} 
				if (oNewGroup.key !== sGroup) {
					var oGroupHeader;
					//If factory is defined use it
					if (oBindingInfo.groupHeaderFactory) {
						oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
					}
					that[sGroupFunction](oNewGroup, oGroupHeader);
					sGroup = oNewGroup.key;
				}
			}
			var sId = that.getId() + "-" + iIndex;
			oClone = fnFactory(sId, oContext);
			oClone.setBindingContext(oContext, oBindingInfo.model);
			that[oAggregationInfo._sMutator](oClone);
		});
	}
};

/**
 * Find out whether a property or aggregation is bound
 *
 * @param {String} sName the name of the property or aggregation
 * @return {boolean} whether a binding exists for the given name
 * @public
 */
sap.ui.base.ManagedObject.prototype.isBound = function(sName){
	return (sName in this.mBindingInfos);
};

/**
 * Get the object binding object for a specific model
 *
 * @param {String} sModelName the name of the model
 * @return {Binding} the element binding for the given model name
 * @public
 */
sap.ui.base.ManagedObject.prototype.getObjectBinding = function(sModelName){
	return this.mBoundObjects[sModelName] && this.mBoundObjects[sModelName].binding;
};

/**
 * Returns the parent managed object as new eventing parent to enable control event bubbling
 * or <code>null</code> if this object hasn't been added to a parent yet. 
 * 
 * @return {sap.ui.base.EventProvider} the parent event provider
 * @protected
 */
sap.ui.base.ManagedObject.prototype.getEventingParent = function() {
	return this.oParent;
};

/**
 * Get the binding object for a specific aggregation/property
 *
 * @param {String} sName the name of the property or aggregation
 * @return {Binding} the binding for the given name
 * @public
 */
sap.ui.base.ManagedObject.prototype.getBinding = function(sName){
	return this.mBindingInfos[sName] && this.mBindingInfos[sName].binding;
};

/**
 * Get the binding path for a specific aggregation/property
 *
 * @param {String} sName the name of the property or aggregation
 * @return {String} the binding path for the given name
 * @protected
 */
sap.ui.base.ManagedObject.prototype.getBindingPath = function(sName){
	var oInfo = this.mBindingInfos[sName];
	return oInfo && (oInfo.path || (oInfo.parts && oInfo.parts[0] && oInfo.parts[0].path));
};

/**
 * Set the binding context for this ManagedObject for the model with the given name.
 *
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name. 
 *  
 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of an UIArea.
 *  
 * @param {Object} oContext the new binding context for this object
 * @param {string} [sName] the name of the model to set the context for or <code>undefined</code>
 *
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 */
sap.ui.base.ManagedObject.prototype.setBindingContext = function(oContext, sModelName){
	var oOldContext = this.oBindingContexts[sModelName];
	
	if (oOldContext != oContext) {
		this.oBindingContexts[sModelName] = oContext;
		this.updateBindingContext(true, true, sModelName);
		this.propagateProperties(sModelName);
	}
	return this;
};

/**
 * Update the binding context in this object and all aggregated children
 * @private
 */
sap.ui.base.ManagedObject.prototype.updateBindingContext = function(bSkipLocal, bSkipChildren, sModelName, bUpdateAll){

	var oModel,
		oModelNames= {},
		oParentContext,
		oBoundObject,
		that = this;
	
	// find models that need an context update
	if (bUpdateAll) {
		for(sModelName in this.oModels) {
			if ( this.oModels.hasOwnProperty(sModelName) ){
				oModelNames[sModelName] = sModelName;
			}
		}
		for(sModelName in this.oPropagatedProperties.oModels) {
			if ( this.oPropagatedProperties.oModels.hasOwnProperty(sModelName) ){
				oModelNames[sModelName] = sModelName;
			}
		}
	} else {
		oModelNames[sModelName] = sModelName;
	}

	for(sModelName in oModelNames ) {
		if ( oModelNames.hasOwnProperty(sModelName) ){
			sModelName = sModelName === "undefined" ? undefined : sModelName;
			oModel = this.getModel(sModelName); 
			oBoundObject = this.mBoundObjects[sModelName];
			
			if (oBoundObject && oBoundObject.sBindingPath && !bSkipLocal) {
				if(!oBoundObject.binding) {
					this._bindObject(sModelName, oBoundObject);
				} else {
					if (this.oParent && oModel == this.oParent.getModel(sModelName)) {
						oParentContext= this.oParent.getBindingContext(sModelName); 
					}
					if (oParentContext != oBoundObject.binding.getContext()) {
						oBoundObject.binding.setContext(oParentContext);
					}
				}
				continue;
			}			
			// update context in existing bindings
			jQuery.each(this.mBindingInfos, function(sName, oBindingInfo) {
				var oBinding = oBindingInfo.binding;
				var aParts = oBindingInfo.parts,
				 	i;
				if (!oBinding) {
					return;
				}
				if (aParts && aParts.length>1) {
					// composite binding: update required  when a part use the model with the same name
					for(i=0; i<aParts.length; i++) {
						if ( aParts[i].model == sModelName ) {
							oBinding.aBindings[i].setContext(that.getBindingContext(aParts[i].model));
						}
					}
				} else if (oBindingInfo.factory) {
					// list binding: update required when the model has the same name (or updateall) 
					if ( oBindingInfo.model == sModelName) { 
						oBinding.setContext(that.getBindingContext(oBindingInfo.model));
					}
					
				} else {
					// simple property binding: update required when the model has the same name 
					if ( aParts[0].model == sModelName) { 
						oBinding.setContext(that.getBindingContext(aParts[0].model));
					} 
				}
			});
			if (!bSkipChildren) {
				var oContext = this.getBindingContext(sModelName);
				// also update context in all child elements
				jQuery.each(this.mAggregations, function(sName, oAggregation) {
					if (oAggregation instanceof sap.ui.base.ManagedObject) {
						oAggregation.oPropagatedProperties.oBindingContexts[sModelName] = oContext;
						oAggregation.updateBindingContext(false,false,sModelName);
					} else if (oAggregation instanceof Array) {
						for (var i = 0; i < oAggregation.length; i++) {
							oAggregation[i].oPropagatedProperties.oBindingContexts[sModelName] = oContext;
							oAggregation[i].updateBindingContext(false,false,sModelName);
						}
					}
				});
			}
		}
	}
};


/**
 * Get the binding context of this object for the given model name.
 * 
 * If the object does not have a binding context set on itself and has no own Model set, 
 * it will use the first binding context defined in its parent hierarchy.
 *
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name. 
 *  
 * Note: A ManagedObject inherits binding contexts from the Core only when it is a descendant of an UIArea.
 *  
 * @param {string} [sName] the name of the model or <code>undefined</code>
 * @return {Object} the binding context of this object
 * @public
 */
sap.ui.base.ManagedObject.prototype.getBindingContext = function(sModelName){
	var oModel = this.getModel(sModelName);
	
	if (this.oBindingContexts[sModelName]) {
		return this.oBindingContexts[sModelName];
	} else if (oModel && this.oParent && this.oParent.getModel(sModelName) && oModel != this.oParent.getModel(sModelName)) {
		return undefined;
	} else {
		return this.oPropagatedProperties.oBindingContexts[sModelName];
	}
};

/**
 * Sets or unsets a model for the given model name for this ManagedObject. 
 * 
 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
 * When the name is omitted, the default model is set/unset. 
 * 
 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model 
 * with that name is removed from this ManagedObject. If an ancestor (parent, UIArea or Core) has a model 
 * with that name, this ManagedObject will immediately inherit that model from its ancestor.
 *  
 * All local bindings that depend on the given model name, are updated (created if the model references 
 * became complete now; updated, if any model reference has changed; removed if the model references 
 * became incomplete now).
 *  
 * Any change (new model, removed model, inherited model) is also applied to all aggregated descendants 
 * as long as a descendant doesn't have its own model set for the given name.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name. 
 *  
 * Note: By design, it is not possible to hide an inherited model by setting a <code>null</code> or 
 * <code>undefined</code> model. Applications can set an empty model to achieve the same. 
 * 
 * Note: A ManagedObject inherits models from the Core only when it is a descendant of an UIArea.
 *  
 * @param {sap.ui.model.Model} oModel the model to be set or <code>null</code> or <code>undefined</code>
 * @param {string} [sName] the name of the model or <code>undefined</code>
 * @return {sap.ui.base.ManagedObject} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.base.ManagedObject.prototype.setModel = function(oModel, sName) {
	jQuery.sap.assert(oModel == null || oModel instanceof sap.ui.model.Model, "oModel must be an instance of sap.ui.model.Model, null or undefined");
	jQuery.sap.assert(sName === undefined || (typeof sName === "string" && !/^(undefined|null)?$/.test(sName)), "sName must be a string or omitted");
	if (!oModel && this.oModels[sName]) {
		delete this.oModels[sName];
		// propagate Models to children
		// model changes are propagated until (including) the first descendant that has its own model with the same name 
		this.propagateProperties(sName);
		// if the model instance for a name changes, all bindings for that model name have to be updated
		this.updateBindings(false, sName);
	} else if ( oModel && oModel !== this.oModels[sName] ) { 
		//TODO: handle null!
		this.oModels[sName] = oModel;
		// propagate Models to children
		// model changes are propagated until (including) the first descendant that has its own model with the same name 
		this.propagateProperties(sName);
		// update binding context, for primary model only
		this.updateBindingContext(false, true, sName);
		// if the model instance for a name changes, all bindings for that model name have to be updated
		this.updateBindings(false, sName);
	} else {
		// nothing to do
	} 
	return this;
};

/**
 * Propagate Properties (models and bindingContext) to aggregated objects.
 * @param {string|undefined|true} sName when <code>true</code>, all bindings are updated.
 *           Otherwise only those for the given model name (undefined == name of default model)
 * 
 * @private
 */
sap.ui.base.ManagedObject.prototype.propagateProperties = function(vName) {
	var oProperties = this._getPropertiesToPropagate(),
		bUpdateAll = vName === true, // update all bindings when no model name parameter has been specified
		sName = bUpdateAll ? undefined : vName,
		that = this;
	jQuery.each(this.mAggregations, function(sAggregationName, oAggregation) {
		if (oAggregation instanceof sap.ui.base.ManagedObject) {
			that._propagateProperties(vName, oAggregation, oProperties, bUpdateAll, sName);
		} else if (oAggregation instanceof Array) {
			for (var i = 0; i < oAggregation.length; i++) {
				if (oAggregation[i] instanceof sap.ui.base.ManagedObject) {
					that._propagateProperties(vName, oAggregation[i], oProperties, bUpdateAll, sName);
				}
			}
		}
	});
};

sap.ui.base.ManagedObject.prototype._propagateProperties = function(vName, oObject, oProperties, bUpdateAll, sName) {
	if (!oProperties) {
		oProperties = this._getPropertiesToPropagate(),
		bUpdateAll = vName === true,
		sName = bUpdateAll ? undefined : vName;
	}
	oObject.oPropagatedProperties = oProperties;
	oObject.updateBindings(bUpdateAll,sName);
	oObject.updateBindingContext(false, true, sName, bUpdateAll);
	oObject.propagateProperties(vName);
};

/**
 * Get properties for propagation
 * @return {object} oProperties
 * @private
 */
sap.ui.base.ManagedObject.prototype._getPropertiesToPropagate = function() {
	var bNoOwnModels = jQuery.isEmptyObject(this.oModels),
		bNoOwnContexts = jQuery.isEmptyObject(this.oBindingContexts);

	function merge(empty,o1,o2) {
		return empty ? o1 : jQuery.extend({}, o1, o2);
	}
	
	if (bNoOwnContexts && bNoOwnModels) {
		//propagate the existing container
		return this.oPropagatedProperties;
	} else {
		//merge propagated and own properties
		return {
				oModels : merge(bNoOwnModels, this.oPropagatedProperties.oModels, this.oModels),
				oBindingContexts : merge(bNoOwnContexts, this.oPropagatedProperties.oBindingContexts, this.oBindingContexts)
		};
	}
};

/**
 * Get the model to be used for data bindings with the given model name.
 * If the object does not have a model set on itself, it will use the first 
 * model defined in its parent hierarchy.
 * 
 * The name can be omitted to reference the default model or it must be a non-empty string.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name. 
 * 
 * @param {string|undefined} [sName] name of the model to be retrieved
 * @return {sap.ui.model.Model} oModel
 * @public
 */
sap.ui.base.ManagedObject.prototype.getModel = function(sName) {
	jQuery.sap.assert(sName === undefined || (typeof sName === "string" && !/^(undefined|null)?$/.test(sName)), "sName must be a string or omitted");
	return this.oModels[sName] || this.oPropagatedProperties.oModels[sName];
};

/**
 * Check if any model is set to the ManagedObject or to one of its parents (including UIArea and Core).
 *
 * Note: A ManagedObject inherits models from the Core only when it is a descendant of an UIArea.
 * 
 * @return {boolean} whether a model reference exists or not
 * @public
 */
sap.ui.base.ManagedObject.prototype.hasModel = function() {
	return !(jQuery.isEmptyObject(this.oModels) && jQuery.isEmptyObject(this.oPropagatedProperties.oModels));
};

/**
 * Clones a tree of objects starting with the object on which clone is called first (root object).
 * 
 * The ids within the newly created clone tree are derived from the original ids by appending
 * the given <code>sIdSuffix</code> (if no suffix is given, one will be created; it will be 
 * unique across multiple clone calls).
 *  
 * The <code>oOptions</code> configuration object can have the following properties:
 * <ul>
 * <li>The boolean value <code>cloneChildren</code> specifies wether associations/aggregations will be cloned</li>
 * <li>The boolean value <code>cloneBindings</code> specifies if bindings will be cloned</li>
 * </ul>
 * 
 * For each cloned object the following settings are cloned based on the metadata of the object and the defined options:
 * <ul>
 * <li>all properties that are not bound. If cloneBinding is false even these properties will be cloned; 
 * the values are used by reference, they are not cloned</li>
 * <li>all aggregated objects that are not bound. If cloneBinding is false even the ones that are bound will be cloned;
 * they are all cloned recursively using the same <code>sIdSuffix</code></li>
 * <li>all associated controls; when an association points to an object inside the cloned object tree,
 *     then the cloned association will be modified to that it points to the clone of the target object.
 *     When the association points to a managed object outside of the cloned object tree, then its 
 *     target won't be changed.</li>  
 * <li>all models set via setModel(); used by reference </li>
 * <li>all property and aggregation bindings (if cloneBindings is true); the pure binding infos (path, model name) are 
 *     cloned, but all other information like template control or factory function, 
 *     data type or formatter function are copied by reference. The bindings themselves 
 *     are created anew as they are specific for the combination (object, property, model).
 *     As a result, any later changes to a binding of the original object are not reflected 
 *     in the clone, but changes to e.g the type or template etc. are.</li> 
 * </ul>
 *
 * Each clone is created by first collecting the above mentioned settings and then creating 
 * a new instance with the normal constructor function. As a result, any side effects of 
 * mutator methods (setProperty etc.) or init hooks are repeated during clone creation. 
 * There is no need to override <code>clone()</code> just to reproduce these internal settings!
 * 
 * Custom controls however can override <code>clone()</code> to implement additional clone steps. 
 * They usually will first call <code>clone()</code> on the super class and then modify the   
 * returned clone accordingly.  
 * 
 * Applications <b>must never provide</b> the second parameter <code>aLocaleIds</code>. 
 * It is determined automatically for the root object (and its non-existance also serves as 
 * an indicator for the root object). Specifying it will break the implementation of <code>clone()</code>. 
 * 
 * @param {String} [sIdSuffix] a suffix to be appended to the cloned object id
 * @param {Array} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @param {Object} [oOptions] configuration object 
 * @return {sap.ui.base.ManagedObject} reference to the newly created clone
 * @protected
 */
sap.ui.base.ManagedObject.prototype.clone = function(sIdSuffix, aLocalIds, oOptions) {
	var that = this,
		bCloneChildren = true, 
		bCloneBindings = true;
	
	if (oOptions) {
		bCloneChildren = !!oOptions.cloneChildren;
		bCloneBindings = !!oOptions.cloneBindings;
	}
	// if no id suffix has been provided use a generated UID
	if (!sIdSuffix) {
		sIdSuffix = sap.ui.base.ManagedObjectMetadata.uid("clone") || jQuery.sap.uid();
	}
	// if no local ID array has been passed, collect IDs of all aggregated objects to
	// be able to properly adapt associations, which are within the cloned object hierarchy
	if (!aLocalIds && bCloneChildren) {
		aLocalIds = jQuery.map(this.findAggregatedObjects(true), function(oObject) {return oObject.getId();});
	}

	var oMetadata = this.getMetadata(),
		oClass = oMetadata._oClass,
		sId = this.getId() + "-" + sIdSuffix,
		mSettings = {},
		mProps = this.mProperties,
		sKey,
		oClone;
	
	// Clone properties (only those with non-default value)
	for(sKey in mProps) {
		//do not clone properties if property is bound and bindings are cloned; Property is set on update
		if ( mProps.hasOwnProperty(sKey) && !(this.isBound(sKey) && bCloneBindings)){
			mSettings[sKey] = mProps[sKey];
		}
	}
	
	// Clone models		
	mSettings["models"] = this.oModels;		
	
	// Clone BindingContext
	mSettings["bindingContexts"] = this.oBindingContexts;

	if(bCloneChildren) {
		// Clone aggregations
		jQuery.each(this.mAggregations, function(sName, oAggregation) {
			//do not clone aggregation if aggregation is bound and bindings are cloned; aggregation is filled on update
			if (oMetadata.hasAggregation(sName) && !(that.isBound(sName) && bCloneBindings)) {
				if (oAggregation instanceof sap.ui.base.ManagedObject) {
					mSettings[sName] = oAggregation.clone(sIdSuffix, aLocalIds);
				} else if (jQuery.isArray(oAggregation)) {
					mSettings[sName] = [];
					for (var i = 0; i < oAggregation.length; i++) {
						mSettings[sName].push(oAggregation[i].clone(sIdSuffix, aLocalIds));
					}
				} else {
					// must be an alt type
					mSettings[sName] = oAggregation;
				}
			}
		});

		// Clone associations
		jQuery.each(this.mAssociations, function(sName, oAssociation) {
			// Check every associated ID against the ID array, to make sure associations within
			// the template are properly converted to associations within the clone
			if (jQuery.isArray(oAssociation)) {
				oAssociation = oAssociation.slice(0);
				for (var i = 0; i < oAssociation.length; i++) {
					if (jQuery.inArray(oAssociation[i], aLocalIds) >= 0) {
						oAssociation[i] += "-" + sIdSuffix;
					}
				}
			} else if (jQuery.inArray(oAssociation, aLocalIds) >= 0) {
				oAssociation += "-" + sIdSuffix;
			}
			mSettings[sName] = oAssociation;
		});
	}
	// Create clone instance
	oClone = new oClass(sId, mSettings);
	
	/* Clone element bindings: Clone the objects not the parameters
	 * Context will only be updated when adding the control to the control tree;
	 * Maybe we have to call updateBindingcontext() here?
	 */
	jQuery.each(this.mBoundObjects, function(sName, oBoundObject) {
		oClone.mBoundObjects[sName] = jQuery.extend({}, oBoundObject);
	});
	
	// Clone events
	jQuery.each(this.mEventRegistry, function(sName, aListeners) {
		oClone.mEventRegistry[sName] = aListeners.slice();
	});
	
	// Clone bindings
	if (bCloneBindings) {
		jQuery.each(this.mBindingInfos, function(sName, oBindingInfo) {
			var oCloneBindingInfo = jQuery.extend({}, oBindingInfo);
			delete oCloneBindingInfo.binding; // remove the runtime binding info (otherwise the property will not be connected again!)
			if (oBindingInfo.factory) {
				oClone.bindAggregation(sName, oCloneBindingInfo);
			} else {
				oClone.bindProperty(sName, oCloneBindingInfo);
			}
		});
	}
	return oClone;
};

/**
 * Update all localization dependant objects that this managedObject can reach,
 * except for its children (which will be updated from the Core).
 * 
 * To make the update work as smooth as possible, it happens in two phases:
 * <ol>
 *  <li>In phase 1 all known models are updated.
 *  <li>In phase 2 all bindings are updated.
 * </ol>
 * This separation is necessary as the models for the bindings might be updated 
 * in some ManagedObject or in the Core and the order in which the objects are visited 
 * is not defined (Core.mElements order)
 * 
 * @private
 */
sap.ui.base.ManagedObject._handleLocalizationChange = function(iPhase) {
	var i;
	
	if ( iPhase === 1 ) {
		
		/*
		 * phase 1: update the models
		 */
		jQuery.each(this.oModels, function(sName, oModel) {
			if ( oModel && oModel._handleLocalizationChange ) {
				oModel._handleLocalizationChange(); 
			}
		});
		
	} else if ( iPhase === 2 ) {
		
		/*
		 * phase 2: update bindings and types
		 */
		jQuery.each(this.mBindingInfos, function(sName, oBindingInfo) {
			var aParts = oBindingInfo.parts;
			if (aParts) {
				// property or composite binding: visit all parts 
				for(i=0; i<aParts.length; i++) {
					if ( oBindingInfo.type && oBindingInfo.type._handleLocalizationChange ) {
						oBindingInfo.type._handleLocalizationChange();
					}
				}
				if ( oBindingInfo.modelChangeHandler ) {
					oBindingInfo.modelChangeHandler();
				}
			} // else: don't update list bindings
			// Note: the template for a list binding will be visited by the core! 
		});
		
	}
}

/**
 * Maps the given aggregation with name <code>sOldAggrName</code>
 * on aggregation <code>sNewAggrName</code> (When calling an accessor function
 * of the old aggregation the call is forwarded to the corresponding accessor
 * function of the new aggregation).
 *
 * This function should help to perform a smooth transition for users of a managed object
 * when an aggregation must be renamed.
 *
 * Both aggregations must have a mutiple cardinality (0..n) and must have the same
 * aggregated type!
 *
 * @param {object} oPrototype prototype of the ManagedObject class for which a mapping should be defined
 * @param {string} sOldAggrName Name of the old deprecated aggregation
 * @param {string} sNewAggrName Name of the new aggregation
 * @deprecated
 */
sap.ui.base.ManagedObject._mapAggregation = function(oPrototype, sOldAggrName, sNewAggrName){
	var mKeys = oPrototype.getMetadata().getJSONKeys(); // TODO fix handling of hidden entitites?
	var oOldAggrInfo = mKeys[sOldAggrName];
	var oNewAggrInfo = mKeys[sNewAggrName];

	//Check whether aggregations exist and are multiple.
	if(!oOldAggrInfo || !oNewAggrInfo || oOldAggrInfo._iKind != 2 || oNewAggrInfo._iKind != 2) {
		return;
	}

	var mFunc = {"insert" : true, "add" : true, "remove" : true, "removeAll" : false, "indexOf" : true, "destroy" : false, "get" : false};

	function method(sPrefix, sName) {
		return sPrefix + sName.substring(0,1).toUpperCase() + sName.substring(1);
	}

	function fAggrDelegator(sFuncName){
		return function() {
			return this[sFuncName].apply(this, arguments);
		};
	}

	for(var sPrefix in mFunc){
		var sOldFuncName = method(sPrefix, mFunc[sPrefix] ? oOldAggrInfo.singularName : oOldAggrInfo._sName);
		var sNewFuncName = method(sPrefix, mFunc[sPrefix] ? oNewAggrInfo.singularName : oNewAggrInfo._sName);
		oPrototype[sOldFuncName] = fAggrDelegator(sNewFuncName);
	}
};

/**
 * Searches and returns an array of child elements and controls which are
 * referenced within an aggregation or aggregations of child elements/controls.
 * This can be either done recursive or not.
 * <br>
 * <b>Take care: this operation might be expensive.</b>
 * @param {boolean}
 *          bRecursive true, if all nested children should be returned.
 * @return {sap.ui.base.ManagedObject[]} array of child elements and controls
 * @public
 */
sap.ui.base.ManagedObject.prototype.findAggregatedObjects = function(bRecursive) {

	var aAggregatedObjects = [];
	function fFindObjects(oObject) {
		for (var n in oObject.mAggregations) {
			var a = oObject.mAggregations[n];
			if (jQuery.isArray(a)) {
				for (var i = 0; i < a.length; i++) {
					aAggregatedObjects.push(a[i]);
					if (bRecursive) {
						fFindObjects(a[i]);
					}
				}
			} else if (a instanceof sap.ui.base.ManagedObject) {
				aAggregatedObjects.push(a);
				if (bRecursive) {
					fFindObjects(a);
				}
			}
		}
	}
	fFindObjects(this);
	return aAggregatedObjects;

};

}; // end of sap/ui/base/ManagedObject.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Fragment') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.Fragment");







(function() {

	var mRegistry = {}, // the Fragment registry
	mTypes = {}; // the Fragment types registry, holding their implementations
	
	
	
	/**
	 * Fragments support the definition of light-weight stand-alone UI control trees.
	 * This class acts as factory which returns the UI control tree defined inside the Fragments. When used within declarative Views,
	 * the Fragment content is imported and seamlessly integrated into the View.
	 * 
	 * Fragments are used similar as sap.ui.core.mvc.Views, but Fragments do not have a Controller on their own (they may know one, though),
	 * they are not a Control, they are not part of the UI tree and they have no representation in HTML.
	 * By default, in contrast to declarative Views, they do not do anything to guarantee ID uniqueness.
	 * 
	 * But like Views they can be defined in several Formats (XML, declarative HTML, JavaScript; support for other types can be plugged in),
	 * the declaration syntax is the same as in declarative Views and the name and location of the Fragment files is similar to Views. 
	 * Controller methods can also be referenced in the declarations, but as Fragments do not have their own controllers, 
	 * this requires the Fragments to be used within a View which does have a controller.
	 * That controller is used, then.
	 * 
	 * Do not call the Fragment constructor directly!
	 *
	 *
	 * Use-cases for Fragments are e.g.:
	 * - Modularization of UIs without fragmenting the controller structure
	 * - Re-use of UI parts
	 * - 100%-declarative definition of Views
	 *
	 * @class Fragment
	 * @extends sap.ui.base.ManagedObject
	 * @author SAP
	 * @version 1.18.9
	 * @public
	 * @name sap.ui.core.Fragment
	 * @experimental Since 1.15.0. The entire Fragment concept is experimental. API and behavior may change without notice. 
	 */
	sap.ui.base.ManagedObject.extend("sap.ui.core.Fragment", {
		metadata: {
			properties: {
				type: "string"
			}
		},
		
		constructor: function(sId, mSettings) {
			sap.ui.base.ManagedObject.apply(this, arguments);
			
			// in case of only one control, return it directly
			if (this._aContent && this._aContent.length == 1){
				return this._aContent[0];
			} else {
				return this._aContent;
			}
		}
	});
	
	
	/**
	 * Registers a new Fragment type
	 * 
	 * @param {string} sType the Fragment type. Types "XML", "HTML" and JS" are built-in and always available.
	 * @param {object} oFragmentImpl an object having a property "init" of type "function" which is called on Fragment instantiation with the settings map as argument
	 * @public
	 */
	sap.ui.core.Fragment.registerType = function(sType, oFragmentImpl) {
		if (!typeof(sType) === "string") {
			jQuery.sap.log.error("Ignoring non-string Fragment type: " + sType);
			return;
		}
		
		if (mTypes[sType]) {
			jQuery.sap.log.warning("sap.ui.core.Fragment.registerType(): Fragment type '" + sType + "' is already defined. Overriding this type now!");
		}
		
		mTypes[sType] = oFragmentImpl;
	};
	
	
	sap.ui.core.Fragment.prototype._initCompositeSupport = function(mSettings) {
		if (!mSettings) {
			throw new Error("Settings must be set");
		}
		if (!(mSettings.fragmentName || mSettings.fragmentContent)){
			throw new Error("Please provide a fragment name");
		}
		if (mSettings.oController) {
			this.oController = mSettings.oController;
		}
		
		// remember the ID which has been explicitly given in the factory function
		this._sExplicitId = mSettings.sId || mSettings.id;
		
		// remember the name of this Fragment
		this._sFragmentName = mSettings.fragmentName;

		var oFragmentImpl = mTypes[mSettings.type];
		if (oFragmentImpl) {
			oFragmentImpl.init.apply(this, [mSettings]);
			
		} else { // Fragment type not found
			throw new Error("No type for the fragment has been specified: " + mSettings.type);
		}
	};
	
	
	/**
	 * 
	 * @returns the Controller connected to this Fragment, or null
	 * @private
	 */
	sap.ui.core.Fragment.prototype.getController = function() { // required for the parsers to find the specified Controller methods
		return this.oController;
	};

	
	/**
	 * Returns an Element/Control by its ID in the context of the Fragment with the given ID
	 *
	 * @param {string} sFragmentId 
	 * @param {string} sElementId 
	 * 
	 * @return Element by its ID and Fragment ID
	 * @public
	 * @static
	 */
	sap.ui.core.Fragment.byId = function(sFragmentId, sId) {
		if (!(typeof(sFragmentId) === "string" && typeof(sId) === "string")) {
			jQuery.sap.log.error("sap.ui.core.Fragment.byId: two strings must be given as parameters, but are: " + sFragmentId + " and " + sId);
			return undefined;
		}
		return sap.ui.getCore().byId(sFragmentId + "--" + sId);
	};
	
	/**
	 * Returns the ID which a Control with the given ID in the context of the Fragment with the given ID would have
	 *
	 * @param {string} sFragmentId 
	 * @param {string} sElementId 
	 * 
	 * @return the prefixed ID
	 * @public
	 * @static
	 */
	sap.ui.core.Fragment.createId = function(sFragmentId, sId) {
		if (!(typeof(sFragmentId) === "string" && typeof(sId) === "string")) {
			jQuery.sap.log.error("sap.ui.core.Fragment.createId: two strings must be given as parameters, but are: " + sFragmentId + " and " + sId);
			return undefined;
		}
		return sFragmentId + "--" + sId;
	};

	
	/**
	 * Creates an id for an Element prefixed with the Fragment id.
	 * This method only adds a prefix when an ID was explicitly given when instantiating this Fragment.
	 * If the ID was generated, it returns the unmodified given ID.
	 *
	 * @param {string} sId
	 * @return {string} prefixed id
	 */
	sap.ui.core.Fragment.prototype.createId = function(sId) {
		var id = this._sExplicitId ? this._sExplicitId + "--" + sId : sId; // no ID Prefixing by Fragments! This is called by the template parsers, but only if there is not a View which defines the prefix.
		
		if (this._oContainingView && this._oContainingView != this) {
			// if Fragment ID is added to the control ID and Fragment ID already contains the View prefix, the View prefix does not need to be added again
			// (this will now be checked inside the createId function already!)
			id = this._oContainingView.createId(id);
		}
		
		return id;
	};

	
	/**
	 * Always return true in case of fragment
	 *
	 * @returns {boolean}
	 * @private
	 */
	sap.ui.core.Fragment.prototype.isSubView = function(){
		return true;
	};
	
	
	
	// ###   Factory functions   ###

	/**
	 * Instantiate a Fragment - this method loads the Fragment content, instantiates it, and returns this content.
	 * The Fragment object itself is not an entity which has further significance beyond this constructor.
	 * 
	 * To instantiate an existing Fragment, call this method as:
	 *    sap.ui.fragment(sName, sType, [oController]);
	 * The sName must correspond to an XML Fragment which can be loaded
	 * via the module system (fragmentName + suffix ".fragment.[typeextension]") and which defines the Fragment content.
	 * If oController is given, the (event handler) methods referenced in the Fragment will be called on this controller.
	 * Note that Fragments may require a Controller to be given and certain methods to be available.
	 * 
	 * The Fragment types "XML", "JS" and "HTML" are available by default; additional Fragment types can be implemented 
	 * and added using the sap.ui.core.Fragment.registerType() function.
	 *
	 *
	 * Advanced usage:
	 * To instantiate a Fragment and give further configuration options, call this method as:
	 *     sap.ui.fragment(oFragmentConfig, [oController]);
	 * The oFragmentConfig object can have the following properties:
	 * - "fragmentName": the name of the Fragment, as above
	 * - "fragmentContent": the definition of the Fragment content itself. When this property is given, any given name is ignored.
	 *         The type of this property depends on the Fragment type, e.g. it could be a string for XML Fragments.
	 * - "type": the type of the Fragment, as above (mandatory)
	 * - "id": the ID of the Fragment (optional)
	 * Further properties may be supported by future or custom Fragment types. Any given properties 
	 * will be forwarded to the Fragment implementation.
	 *
	 * If you want to give a fixed ID for the Fragment, please use the advanced version of this method call with the 
	 * configuration object or use the typed factories like sap.ui.xmlfragment(...) or sap.ui.jsfragment(...). 
	 * Otherwise the Fragment ID is generated. In any case, the Fragment ID will be used as prefix for the ID of 
	 * all contained controls.
	 * 
	 * @param {string} sName the Fragment name
	 * @param {string} sType the Fragment type, e.g. "XML", "JS", or "HTML"
	 * @param {sap.ui.core.Controller} [oController] the Controller which should be used by the controls in the Fragment. Note that some Fragments may not need a Controller and other may need one - and even rely on certain methods implemented in the Controller.
	 * @public
	 * @static
	 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the Fragment content
	 */
	sap.ui.fragment = function(sName, sType, oController) {

		var mSettings = {};
		if (typeof(sName) === "string") { // normal call
			mSettings.fragmentName = sName;
			mSettings.oController = oController;
			mSettings.type = sType;
			
		} else if (typeof(sName) === "object") { // advanced call with config object
			mSettings = sName; // pass all config parameters to the implementation
			if (sType) { // second parameter "sType" is in this case the optional Controller
				mSettings.oController = sType;
			}
		} else {
			jQuery.sap.log.error("sap.ui.fragment() must be called with Fragment name or config object as first parameter, but is: " + sName);
		}

		return new sap.ui.core.Fragment(mSettings);
	};



	/**
	 * Instantiates an XML-based Fragment.
	 *
	 * To instantiate a Fragment, call this method as:
	 *    sap.ui.xmlfragment([sId], sFragmentName, [oController]);
	 * The Fragment instance ID is optional (generated if not given) and will be used as prefix for the ID of all
	 * contained controls. The sFragmentName must correspond to an XML Fragment which can be loaded
	 * via the module system (fragmentName + ".fragment.xml") and which defines the Fragment.
	 * If oController is given, the methods referenced in the Fragment will be called on this controller.
	 * Note that Fragments may require a Controller to be given and certain methods to be available.
	 * 
	 * 
	 * Advanced usage:
	 * To instantiate a Fragment and optionally directly give the XML definition instead of loading it from a file,
	 * call this method as:
	 *     sap.ui.xmlfragment(oFragmentConfig, [oController]);
	 * The oFragmentConfig object can have a either a "fragmentName" or a "fragmentContent" property. 
	 * fragmentContent is optional and can hold the Fragment definition as XML string; if not
	 * given, fragmentName must be given and the Fragment content definition is loaded by the module system.
	 * Again, if oController is given, the methods referenced in the Fragment will be called on this controller.
	 *
	 * @param {string} [sId] id of the newly created Fragment
	 * @param {string | object} sFragmentName name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired)
	 * @param {sap.ui.core.mvc.Controller} [oController] a Controller to be used for event handlers in the Fragment
	 * @public
	 * @static
	 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the created Fragment instance
	 */
	sap.ui.xmlfragment = function(sId, vFragment, oController) {

		if (typeof(sId) === "string") { // basic call
			if (typeof(vFragment) === "string") { // with ID
				return sap.ui.fragment({fragmentName: vFragment, sId: sId, type: "XML"}, oController);
				
			} else { // no ID, sId is actually the name and vFragment the optional Controller
				return sap.ui.fragment(sId, "XML", vFragment);
			}
		} else { // advanced call
			sId.type = "XML";
			return sap.ui.fragment(sId, vFragment); // second parameter "vFragment" is the optional Controller
		}
	};

	
	/**
	 * Defines OR instantiates an HTML-based Fragment.
	 * 
	 * To define a JS Fragment, call this method as:
	 *    sap.ui.jsfragment(sName, oFragmentDefinition)
	 * Where:
	 * - "sName" is the name by which this fragment can be found and instantiated. If defined in its own file,
	 *    in order to be found by the module loading system, the file location and name must correspond to sName 
	 *    (path + file name must be: fragmentName + ".fragment.js").
	 * - "oFragmentDefinition" is an object at least holding the "createContent(oController)" method which defines
	 *    the Fragment content. If given during instantiation, the createContent method receives a Controller
	 *    instance (otherwise oController is undefined) and the return value must be one sap.ui.core.Control
	 *    (which could have any number of children).
	 * 
	 * 
	 * To instantiate a JS Fragment, call this method as:
	 *    sap.ui.jsfragment([sId], sFragmentName, [oController]);
	 * The Fragment ID is optional (generated if not given) and the Fragment implementation CAN use it
	 * to make contained controls unique (this depends on the implementation: some JS Fragments may choose 
	 * not to support multiple instances within one application and not use the ID prefixing).
	 * The sFragmentName must correspond to a JS Fragment which can be loaded
	 * via the module system (fragmentName + ".fragment.js") and which defines the Fragment.
	 * If oController is given, the methods referenced in the Fragment will be called on this controller.
	 * Note that Fragments may require a Controller to be given and certain methods to be available.
	 * 
	 * 
	 * @param {string} [sId] id of the newly created Fragment
	 * @param {string | object} sFragmentName name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired)
	 * @param {sap.ui.core.mvc.Controller} [oController] a Controller to be used for event handlers in the Fragment
	 * @public
	 * @static
	 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the created Fragment instance
	 */
	sap.ui.jsfragment = function(sName, oFragmentDefinition) { // definition of a JS Fragment

		if (typeof(sName) === "string" && typeof(oFragmentDefinition) === "object") {
			if (oFragmentDefinition.createContent) { 
				// Fragment DEFINITON
				mRegistry[sName] = oFragmentDefinition;
				jQuery.sap.declare({modName: sName, type:"fragment"}, false);
				// TODO: return value?
				
			} else { 
				// plain instantiation: name[+oController]
				return sap.ui.fragment(sName, "JS", oFragmentDefinition);
			}
			
		} else if (typeof(sName) === "string" && oFragmentDefinition === undefined) {
			// plain instantiation: name only
			return sap.ui.fragment(sName, "JS");
			
		} else { // ID+name[+Controller]  or  oConfig+[oController]
			if (typeof(sName) === "object") { 
				// advanced mode: oConfig+[oController]
				sName.type = "JS";
				return sap.ui.fragment(sName, oFragmentDefinition);
				
			} else if (arguments && arguments.length >= 3) {
				// must be plain instantiation mode: ID+Name[+Controller]
				return sap.ui.fragment({id: sName, fragmentName: oFragmentDefinition, type: "JS"}, arguments[2]);
			} else {
				jQuery.sap.log.error("sap.ui.jsfragment() was called with wrong parameter set: " + sName + " + " + oFragmentDefinition);
			}
		}
	};


	/**
	 * Instantiates an HTML-based Fragment.
	 *
	 * To instantiate a Fragment, call this method as:
	 *    sap.ui.htmlfragment([sId], sFragmentName, [oController]);
	 * The Fragment instance ID is optional (generated if not given) and will be used as prefix for the ID of all
	 * contained controls. The sFragmentName must correspond to an HTML Fragment which can be loaded
	 * via the module system (fragmentName + ".fragment.html") and which defines the Fragment.
	 * If oController is given, the methods referenced in the Fragment will be called on this controller.
	 * Note that Fragments may require a Controller to be given and certain methods to be available.
	 * 
	 * 
	 * Advanced usage:
	 * To instantiate a Fragment and optionally directly give the HTML definition instead of loading it from a file, 
	 * call this method as:
	 *     sap.ui.htmlfragment(oFragmentConfig, [oController]);
	 * The oFragmentConfig object can have a either a "fragmentName" or a "fragmentContent" property. 
	 * fragmentContent is optional and can hold the Fragment definition as XML string; if not
	 * given, fragmentName must be given and the Fragment content definition is loaded by the module system.
	 * Again, if oController is given, the methods referenced in the Fragment will be called on this controller.
	 *
	 * @param {string} [sId] id of the newly created Fragment
	 * @param {string | object} sFragmentName name of the Fragment (or Fragment configuration as described above, in this case no sId may be given. Instead give the id inside the config object, if desired.)
	 * @param {sap.ui.core.mvc.Controller} [oController] a Controller to be used for event handlers in the Fragment
	 * @public
	 * @static
	 * @return {sap.ui.core.Control|sap.ui.core.Control[]} the root Control(s) of the created Fragment instance
	 */
	sap.ui.htmlfragment = function(sId, vFragment, oController) {

		if (typeof(sId) === "string") { // basic call
			if (typeof(vFragment) === "string") { // with ID
				return sap.ui.fragment({fragmentName: vFragment, sId: sId, type: "HTML"}, oController);
				
			} else { // no ID, sId is actually the name and vFragment the optional Controller
				return sap.ui.fragment(sId, "HTML", vFragment);
			}
		} else { // advanced call
			sId.type = "HTML";
			return sap.ui.fragment(sId, vFragment); // second parameter "vFragment" is the optional Controller
		}
	};




	// ###   FRAGMENT TYPES   ###
	
	
	// ###   XML Fragments   ###
	
	sap.ui.core.Fragment.registerType("XML" , {
		init: function(mSettings) {
			this._xContent = mSettings.fragmentContent ? 
					((typeof(mSettings.fragmentContent) === "string") ? jQuery.parseXML(mSettings.fragmentContent).documentElement : mSettings.fragmentContent) : 
					sap.ui.core.XMLTemplateProcessor.loadTemplate(mSettings.fragmentName, "fragment"); // use specified content or load the content definition

			this._oContainingView = this._sExplicitId ? this : (mSettings.containingView || this);
			if ((this._oContainingView === this) ) {
				this._oContainingView.oController = (mSettings.containingView && mSettings.containingView.oController) || mSettings.oController;
			}

			var that = this;
			// unset any preprocessors (e.g. from an enclosing JSON view)
			sap.ui.base.ManagedObject.runWithPreprocessors(function() {
				// parse the XML tree
				
				var xmlNode = that._xContent;
				// if sub ID is given, find the node and parse it
				// TODO: for sub-fragments   if () {
				//	xmlNode = jQuery(that._xContent).find("# ")
				//}
				that._aContent = sap.ui.core.XMLTemplateProcessor.parseTemplate(that._xContent, that);
			});
		}
	});
	
	
	
	// ###   JS Fragments   ###
	
	sap.ui.core.Fragment.registerType("JS", {
		init: function(mSettings) {
			/*** require fragment definition if not yet done... ***/
			if (!mRegistry[mSettings.fragmentName]) {
				jQuery.sap.require({modName: mSettings.fragmentName, type: "fragment"});
			}
			/*** Step 2: extend() ***/
			jQuery.extend(this, mRegistry[mSettings.fragmentName]);
			
			this._oContainingView = mSettings.containingView || this;

			var that = this;
			// unset any preprocessors (e.g. from an enclosing JSON view)
			sap.ui.base.ManagedObject.runWithPreprocessors(function() {

				var content = that.createContent(mSettings.oController || that._oContainingView.oController);
				that._aContent = [];
				that._aContent = that._aContent.concat(content);

			});
		}
	});
	
	
	
	// ###   HTML Fragments   ###
	
	(function() {
		
		/**
		 * The template cache. Templates are only loaded once.
		 * 
		 * @private
		 * @static
		 */
		var _mHTMLTemplates = {};
		
		/**
		 * Loads and returns a template for the given template name. Templates are only loaded once.
		 * 
		 * @param {string} sTemplateName The name of the template
		 * @return {string} the template data
		 * @private
		 */
		var _getHTMLTemplate = function(sTemplateName) {
			var sUrl = jQuery.sap.getModulePath(sTemplateName, ".fragment.html");
			var sHTML = _mHTMLTemplates[sUrl];
			var sResourceName;
			
			if (!sHTML) {
				sResourceName = jQuery.sap.getResourceName(sTemplateName, ".fragment.html");
				sHTML = jQuery.sap.loadResource(sResourceName);
				// TODO discuss 
				// a) why caching at all (more precise: why for HTML fragment although we refused to do it for other view/fragment types - risk of a memory leak!)
				// b) why cached via URL instead of via name? Any special scenario in mind?
				_mHTMLTemplates[sUrl] = sHTML;
			}
			return sHTML;
		};
	
		sap.ui.core.Fragment.registerType("HTML", {
			init: function(mSettings) {
				// DeclarativeSupport automatically uses set/getContent, but Fragment should not have such an aggregation and should not be parent of any control
				// FIXME: the other aggregation methods are not implemented. They are currently not used, but who knows... 
				this._aContent = [];
				this.getContent = function() {
					return this._aContent;
				};
				this.addContent = function(oControl) {
					this._aContent.push(oControl);
				};
				
				this._oContainingView = mSettings.containingView || this;
				
				var sHTML = mSettings.fragmentContent || _getHTMLTemplate(mSettings.fragmentName);
				this._oTemplate = document.createElement("div");
				var vHTML = sap.ui.core.RenderManager.prepareHTML5(sHTML);
	
				if (typeof vHTML === "string") {
					this._oTemplate.innerHTML = vHTML;
				} else {
					var oNodeList = vHTML;
					var oFragment = document.createDocumentFragment();
					for (var i=0; i<oNodeList.length;i++) {
						oFragment.appendChild(oNodeList.item(i));
					}
					this._oTemplate.appendChild(oFragment);
				}
	
				var oMetaElement = this._oTemplate.getElementsByTagName("template")[0];
				var oProperties = this.getMetadata().getAllProperties();
	
				if (oMetaElement) {
					var self = this;
					var DeclarativeSupport = sap.ui.core.DeclarativeSupport;
					jQuery.each(oMetaElement.attributes, function(iIndex, oAttr) {
						var sName = DeclarativeSupport.convertAttributeToSettingName(oAttr.name, self.getId());
						var sValue = oAttr.value;
						var oProperty = oProperties[sName];
						if (!mSettings[sName]) {
							if (oProperty) {
								mSettings[sName] = DeclarativeSupport.convertValueToType(DeclarativeSupport.getPropertyDataType(oProperty),sValue);
							} else if (sap.ui.core.mvc.HTMLView._mAllowedSettings[sName]){
								mSettings[sName] = sValue;	
							}
						}
					});
					this._oTemplate = oMetaElement;
				}
				// This is a fix for browsers that support web components
				if (this._oTemplate.content) {
					var oFragment = this._oTemplate.content;
					// Create a new template, as innerHTML would be empty for TemplateElements when the fragment is appended directly
					this._oTemplate = document.createElement("div");
					// Make the shadow DOM available in the DOM
					this._oTemplate.appendChild(oFragment);
				}
	
				// unset any preprocessors (e.g. from an enclosing HTML view)
				var self = this;
				sap.ui.base.ManagedObject.runWithPreprocessors(function() {
					sap.ui.core.DeclarativeSupport.compile(self._oTemplate, self);
	
					// FIXME declarative support automatically inject the content into self through "self.addContent()"
					var content = self.getContent();
					if (content && content.length === 1){
						self._aContent = [content[0]];	
					} else {
						// TODO: error
					}
				});
			}
		});

	}()); // end of HTML Fragment stuff

}());

}; // end of sap/ui/core/Fragment.js
if ( !jQuery.sap.isDeclared('sap.ui.core.routing.Router') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
/*global crossroads *///declare unusual global vars for JSLint/SAPUI5 validation

jQuery.sap.declare("sap.ui.core.routing.Router");


jQuery.sap.require('sap.ui.thirdparty.signals'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.crossroads'); // unlisted dependency retained




(function(){
	
	var oRouters = {};

	/**
	 * Instantiates a SAPUI5 Router
	 * 
	 * @class
	 *
	 * @param {object or array} optional - may contain many Route configurations as @see sap.ui.core.routing.Route#constructor.<br/>
	 * Each of the routes contained in the array/object will be added to the router.<br/>
	 * The values that may be provided are the same as in @see sap.ui.core.routing.Route#constructor
	 * 
	 * @param {object} optional - Default values for route configuration - also takes the same parameters as @see sap.ui.core.routing.Route#constructor<br/>
	 * Eg: the config object specifies : { viewType : "XML" }<br/>
	 * The Routes look like this: [ { name : "xmlRoute" }, { name : "jsRoute" , viewType : "JS" } ]<br/>
	 * <br/>
	 * Then the effective config will look like this: <br/>
	 * [ { name : "xmlRoute" , viewType : "XML" }, { name : "jsRoute" , viewType : "JS" } ]<br/>
	 * <br/>
	 * Since the xmlRoute does not specify its viewType, XML is taken from the config object. The jsRoute is specifying it, so the viewType will be JS.
	 * 
	 * @param {sap.ui.core.UIComponent} optional - The owner of all the views that will be created by this Router.
	 * @public
	 * @name sap.ui.core.routing.Router
	 */
	sap.ui.base.EventProvider.extend("sap.ui.core.routing.Router", /** @lends sap.ui.core.routing.Router */ {

		constructor : function(oRoutes, oConfig, oOwner) {
			sap.ui.base.EventProvider.apply(this);

			this._oConfig = oConfig;
			this._oRouter = crossroads.create();
			this._oRouter.ignoreState = true;
			this._oRoutes = {};
			this._oViews = {};
			this._oOwner = oOwner;

			var that = this;

			if (!oRoutes) {
				oRoutes = {};
			}

			if (jQuery.isArray(oRoutes)) {
				//Convert route object
				var aRoutes = oRoutes;
				oRoutes = {};
				jQuery.each(aRoutes, function(iRouteIndex, oRouteConfig) {
					oRoutes[oRouteConfig.name] = oRouteConfig;
				});
			}

			jQuery.each(oRoutes, function(sRouteName, oRouteConfig) {
				if (oRouteConfig.name == undefined) {
					oRouteConfig.name = sRouteName;
				}
				that.addRoute(oRouteConfig);
			});

		},
		metadata : {
			publicMethods: ["initialize", "getURL", "register"]
		}

	});
	
	sap.ui.core.routing.Router.M_EVENTS = {
		RouteMatched : "routeMatched",
		RoutePatternMatched : "routePatternMatched",
		ViewCreated : "viewCreated"
	};
	
	/**
	 * Adds a route to the router
	 * 
	 * @param {object} oConfig configuration object for the route @see sap.ui.core.routing.Route#constructor
	 * @param {sap.ui.core.routing.Route} oParent the parent of the route
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.addRoute = function (oConfig, oParent) {
		if (!oConfig.name) {
			jQuery.sap.log.error("A name has to be specified for every route");
		}

		if (this._oRoutes[oConfig.name]) {
			jQuery.sap.log.error("Route with name " + oConfig.name + " already exists");
		}
		this._oRoutes[oConfig.name] = new sap.ui.core.routing.Route(this, oConfig, oParent);
	};

	sap.ui.core.routing.Router.prototype.parse = function (sNewHash, sOldHash) {
		this._oRouter.parse(sNewHash);
	};
	
	/**
	 * Attaches the router to the hash changer @see sap.ui.core.routing.HashChanger
	 *
	 * @public
	 * @returns { sap.ui.core.routing.Router } this for chaining.
	 */
	sap.ui.core.routing.Router.prototype.initialize = function () {
		var that = this,
			oHashChanger = this.oHashChanger = sap.ui.core.routing.HashChanger.getInstance();

		if(this._isInitialized) {
			jQuery.sap.log.warning("Router is already initialized.");
			return this;
		}

		this._bIsInitialized = true;

		this.fnHashChanged = function(oEvent) {
			that.parse(oEvent.getParameter("newHash"), oEvent.getParameter("oldHash"));
		};

		oHashChanger.attachEvent("hashChanged", this.fnHashChanged);

		if(!oHashChanger.init()) {
			this.parse(oHashChanger.getHash());
		}

		return this;
	};
	
	/**
	 * @public
	 * Stops to listen to the hashChange of the browser.</br>
	 * If you want the router to start again, call initialize again.
	 * @returns { sap.ui.core.routing.Router } this for chaining.
	 */
	sap.ui.core.routing.Router.prototype.stop = function () {

		if (!this._bIsInitialized) {
			jQuery.sap.log.warning("Router is not initialized. But it got stopped");
		} 

		if(this.fnHashChanged) {
			this.oHashChanger.detachEvent("hashChanged", this.fnHashChanged);
		}

		this._bIsInitialized = false;

		return this;

	};

	/**
	 * Removes the router from the hash changer @see sap.ui.core.routing.HashChanger
	 *
	 * @public
	 * @returns { sap.ui.core.routing.Router } this for chaining.
	 */
	sap.ui.core.routing.Router.prototype.destroy = function () {
		sap.ui.base.EventProvider.prototype.destroy.apply(this);

		if (!this._bIsInitialized) {
			jQuery.sap.log.info("Router is not initialized, but got destroyed.");
		}

		if(this.fnHashChanged) {
			this.oHashChanger.detachEvent("hashChanged", this.fnHashChanged);
		}

		this._oOwner = null;

		//will remove all the signals attached to the routes - all the routes will not be useable anymore
		this._oRouter.removeAllRoutes();
		this._oRouter = null;

		return this;
	};
	
	/**
	 * Returns the URL for the route and replaces the placeholders with the values in oParameters
	 * 
	 * @param {String} Name of the route
	 * @param {object} Parameters for the route
	 * @return {string} the unencoded pattern with interpolated arguments
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.getURL = function (sName, oParameters) {
		if(oParameters === undefined) {
			//even if there are only optional parameters crossroads cannot navigate with undefined
			oParameters = {};
		}
		
		var oRoute = this._oRoutes[sName];
		if (!oRoute) {
			jQuery.sap.log.warning("Route with name " + sName + " does not exist");
			return;
		}
		return oRoute.getURL(oParameters);
	};
	
	/**
	 * Returns a cached view for a given name or creates it if it does not yet exists
	 * 
	 * @param {String} sViewName Name of the view
	 * @param {String} sViewType Type of the view
	 * @param {String} sViewId Optional view id
	 * @return {sap.ui.core.mvc.View} the view instance
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.getView = function (sViewName, sViewType, sViewId) {
		if (!sViewName) {
			jQuery.sap.log.error("A name for the view has to be defined");
		}
		
		if (!this._oViews[sViewName]) {
			var fnCreateView = function() {
				var oViewOptions = { 
					type: sViewType,
					viewName: sViewName,
				};
				if (sViewId) {
					oViewOptions.id = sViewId;
				}
				return sap.ui.view(oViewOptions);
			};
			if (this._oOwner) {
				var that = this;
				sap.ui.base.ManagedObject.runWithOwner(function() {
					that._oViews[sViewName] = fnCreateView();
				}, this._oOwner);
			} else {
				this._oViews[sViewName] = fnCreateView();
			}
			this.fireViewCreated({
				view: this._oViews[sViewName],
				viewName: sViewName,
				type: sViewType
			});
		}
		return this._oViews[sViewName];
	};
	
	/**
	 * Navigates to a specific route defining a set of parameters
	 * 
	 * @param {String} sName Name of the route
	 * @param {object} oParameters Parameters for the route
	 * @param {boolean} bReplace Defines if the hash should be replaced (no browser history entry) or set (browser history entry)
	 * @return {string} the unencoded pattern with interpolated arguments
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.navTo = function (sName, oParameters, bReplace) {		
		if (bReplace) {
			this.oHashChanger.replaceHash(this.getURL(sName, oParameters));
		} else {
			this.oHashChanger.setHash(this.getURL(sName, oParameters));
		}
	};
	
	/**
	 * Attach event-handler <code>fnFunction</code> to the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
	 *
	 *
	 * @param {object}
	 *            [oData] The object, that should be passed along with the event-object when firing the event.
	 * @param {function}
	 *            fnFunction The function to call, when the event occurs. This function will be called on the
	 *            oListener-instance (if present) or in a 'static way'.
	 * @param {object}
	 *            [oListener] Object on which to call the given function. If empty, this Model is used.
	 *
	 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.attachRouteMatched = function(oData, fnFunction, oListener) {
		this.attachEvent("routeMatched", oData, fnFunction, oListener);
		return this;
	};
	
	/**
	 * Detach event-handler <code>fnFunction</code> from the 'routeMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
	 *
	 * The passed function and listener object must match the ones previously used for event registration.
	 *
	 * @param {function}
	 *            fnFunction The function to call, when the event occurs.
	 * @param {object}
	 *            oListener Object on which the given function had to be called.
	 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.detachRouteMatched = function(oData, fnFunction, oListener) {
		this.detachEvent("routeMatched", oData, fnFunction, oListener);
		return this;
	};
	
	/**
	 * Fire event routeMatched to attached listeners.
	 *
	 * @param {object} [mArguments] the arguments to pass along with the event.
	 * 
	 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
	 * @protected
	 */
	sap.ui.core.routing.Router.prototype.fireRouteMatched = function(mArguments) {
		this.fireEvent("routeMatched", mArguments);
		return this;
	};
	
	/**
	 * Attach event-handler <code>fnFunction</code> to the 'viewCreated' event of this <code>sap.ui.core.routing.Router</code>.<br/>
	 *
	 *
	 * @param {object}
	 *            [oData] The object, that should be passed along with the event-object when firing the event.
	 * @param {function}
	 *            fnFunction The function to call, when the event occurs. This function will be called on the
	 *            oListener-instance (if present) or in a 'static way'.
	 * @param {object}
	 *            [oListener] Object on which to call the given function. If empty, this Model is used.
	 *
	 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.attachViewCreated = function(oData, fnFunction, oListener) {
		this.attachEvent("viewCreated", oData, fnFunction, oListener);
		return this;
	};
	
	/**
	 * Detach event-handler <code>fnFunction</code> from the 'viewCreated' event of this <code>sap.ui.core.routing.Router</code>.<br/>
	 *
	 * The passed function and listener object must match the ones previously used for event registration.
	 *
	 * @param {function}
	 *            fnFunction The function to call, when the event occurs.
	 * @param {object}
	 *            oListener Object on which the given function had to be called.
	 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.detachViewCreated = function(oData, fnFunction, oListener) {
		this.detachEvent("viewCreated", oData, fnFunction, oListener);
		return this;
	};
	
	/**
	 * Fire event viewCreated to attached listeners.
	 *
	 * @param {object} [mArguments] the arguments to pass along with the event.
	 * 
	 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
	 * @protected
	 */
	sap.ui.core.routing.Router.prototype.fireViewCreated = function(mArguments) {
		this.fireEvent("viewCreated", mArguments);
		return this;
	};
	
	
	/**
	 * Attach event-handler <code>fnFunction</code> to the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
	 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
	 *
	 * @param {object}
	 *            [oData] The object, that should be passed along with the event-object when firing the event.
	 * @param {function}
	 *            fnFunction The function to call, when the event occurs. This function will be called on the
	 *            oListener-instance (if present) or in a 'static way'.
	 * @param {object}
	 *            [oListener] Object on which to call the given function. If empty, this Model is used.
	 *
	 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.attachRoutePatternMatched = function(oData, fnFunction, oListener) {
		this.attachEvent("routePatternMatched", oData, fnFunction, oListener);
		return this;
	};
	
	/**
	 * Detach event-handler <code>fnFunction</code> from the 'routePatternMatched' event of this <code>sap.ui.core.routing.Router</code>.<br/>
	 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
	 *
	 * The passed function and listener object must match the ones previously used for event registration.
	 *
	 * @param {function}
	 *            fnFunction The function to call, when the event occurs.
	 * @param {object}
	 *            oListener Object on which the given function had to be called.
	 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.detachRoutePatternMatched = function(oData, fnFunction, oListener) {
		this.detachEvent("routePatternMatched", oData, fnFunction, oListener);
		return this;
	};
	
	/**
	 * Fire event routePatternMatched to attached listeners.
	 * This event is similar to route matched. But it will only fire for the route that has a matching pattern, not for its parent Routes <br/>
	 *
	 * @param {object} [mArguments] the arguments to pass along with the event.
	 * 
	 * @return {sap.ui.core.routing.Router} <code>this</code> to allow method chaining
	 * @protected
	 */
	sap.ui.core.routing.Router.prototype.fireRoutePatternMatched = function(mArguments) {
		this.fireEvent("routePatternMatched", mArguments);
		return this;
	};
	
	/**
	 * Registers the router to access it from another context. Use sap.ui.routing.Router.getRouter() to receive the instance
	 * 
	 * @param {String} Name of the router
	 * @public
	 */
	sap.ui.core.routing.Router.prototype.register = function (sName) {
		oRouters[sName] = this;
		return this;
	};
	
	/**
	 * Get a registered router
	 * 
	 * @param {String} Name of the router
	 * @return {sap.ui.core.routing.Router} The router with the specified name, else undefined
	 * @public
	 */
	sap.ui.core.routing.Router.getRouter = function (sName) {
		return oRouters[sName];
	};

}());

}; // end of sap/ui/core/routing/Router.js
if ( !jQuery.sap.isDeclared('sap.ui.core.tmpl.Template') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides base class sap.ui.core.tmpl.Template for all templates
jQuery.sap.declare("sap.ui.core.tmpl.Template");



/**
 * Creates and initializes a new template with the given <code>sId</code> and
 * settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. 
 * 
 * @param {string}
 *            [sId] optional id for the new template; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * 
 * @class Base Class for Template.
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.tmpl.Template
 * @experimental Since 1.15.0. The Template concept is still under construction, so some implementation details can be changed in future.
 */
sap.ui.base.ManagedObject.extend("sap.ui.core.tmpl.Template", /** @lends sap.ui.core.tmpl.Template */
{
	
	constructor : function(sId, mSettings) {
		sap.ui.base.ManagedObject.apply(this, arguments);
	},

	metadata : {
		stereotype : "template",
		"abstract" : true,
		properties : {
			"content" : {type : "string", group : "Data", defaultValue : null}
		},
		publicMethods : [
			// methods
			"declareControl", /* protected */
			"createControl",  /* protected */
			"placeAt", 
			"createMetadata", 
			"createRenderer"
		],
		library : "sap.ui.core"
	}

});


/**
 * @see sap.ui.base.Object#getInterface
 * @public
 */
sap.ui.core.tmpl.Template.prototype.getInterface = function() {
	return this;
};


/**
 * Creates a new subclass of class sap.ui.core.tmpl.Template with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.tmpl.Template.extend
 * @function
 */


/**
 * Getter for property <code>content</code>.
 * The Template definition as String.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>content</code>
 * @public
 * @name sap.ui.core.tmpl.Template#getContent
 * @function
 */

/**
 * Setter for property <code>content</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sContent  new value for property <code>content</code>
 * @return {sap.ui.core.tmpl.Template} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.Template#setContent
 * @function
 */


/**
 * registry for supported template types
 * @private
 */
sap.ui.core.tmpl.Template._mSupportedTypes = {};


/**
 * Registers a new Template type which is used to compile the template.
 * 
 * @param {string} sType type of the template
 * @param {string} sClass the class of the specifc Template element
 * 
 * @static
 */
sap.ui.core.tmpl.Template.registerType = function(sType, sClass) {
	sap.ui.core.tmpl.Template._mSupportedTypes[sType] = sClass;
};

/**
 * Unregisters a Template type which is used to compile the template.
 * 
 * @param {string} sType type of the template
 * 
 * @static
 */
sap.ui.core.tmpl.Template.unregisterType = function(sType) {
	delete sap.ui.core.tmpl.Template._mSupportedTypes[sType];
};


/**
 * parses the given path and extracts the model and path
 * 
 * @param {string} sPath the path
 * @return {object} the model and the path 
 *
 * @protected
 * @static
 */
sap.ui.core.tmpl.Template.parsePath = function(sPath) {

	// TODO: wouldn't this be something central in ManagedObject?

	// parse the path
	var sModelName = undefined, 
	    iSeparatorPos = sPath.indexOf(">");

	// if a model name is specified in the binding path
	// we extract this binding path
	if (iSeparatorPos > 0) {
		sModelName = sPath.substr(0, iSeparatorPos);
		sPath = sPath.substr(iSeparatorPos + 1);
	}
	
	// returns the path information 
	return {
		path: sPath,
		model: sModelName
	};
		
};
					
/*
 * overriden to prevent instantiation of Template
 */
sap.ui.core.tmpl.Template.prototype.init = function(mSettings, oScope) {
	if (this.getMetadata().getName() === "sap.ui.core.tmpl.Template") {
		throw new Error("The class 'sap.ui.core.tmpl.Template' is abstract and must not be instantiated!");
	}
	// check for complex binding syntax
	if (sap.ui.base.ManagedObject.bindingParser === sap.ui.base.BindingParser.complexParser) {
		/*
		 * we disable the complex binding parser for Templates
		 * TODO: reconsider a better solution later
		 */
		sap.ui.core.tmpl.Template.prototype.extractBindingInfo = function(oValue, bIgnoreObjects, oScope) {
			sap.ui.base.ManagedObject.bindingParser = sap.ui.base.BindingParser.simpleParser;
			var oReturnValue = sap.ui.core.Control.prototype.extractBindingInfo.apply(this, arguments);
			sap.ui.base.ManagedObject.bindingParser = sap.ui.base.BindingParser.complexParser;
			return oReturnValue;
		};
	};
};


/**
 * Declares a new control based on this template and returns the created 
 * class / constructor function. The class is based on the information coming 
 * from the abstract functions <code>createMetadata</code> and 
 * <code>createRenderer</code>.
 * 
 * @param {string} sControl the fully qualified name of the control
 * @return {function} the created class / constructor function
 * @public
 */
sap.ui.core.tmpl.Template.prototype.declareControl = function(sControl) {

	jQuery.sap.assert(!!sControl, "A fully qualified name must be specified!");
	
	if (sControl) {
		
		// create the new control type
		var oMetadata = this.createMetadata(),
		    fnRenderer = this.createRenderer(),
		    that = this;
		jQuery.sap.require("sap.ui.core.tmpl.TemplateControl");
		sap.ui.core.tmpl.TemplateControl.extend(sControl, {
			
			// the new control metadata
			metadata: oMetadata,
			
			// set the reference to the template
			init: function() {
				sap.ui.core.tmpl.TemplateControl.prototype.init.apply(this, arguments);
				// link to the template
				this.setTemplate(that);
			},

			// add the custom renderer function
			renderer: {
				renderTemplate: fnRenderer
			}
			
		});
		
		// returns the constructor function
		return jQuery.sap.getObject(sControl);
				
	}

};


/**
 * Creates an anonymous TemplateControl for the Template.
 * 
 * @param {string} sId the control ID
 * @param {object} [oContext] the context for the renderer/templating
 * @return {sap.ui.core.tmpl.TemplateControl} the created control instance
 * @public
 */
sap.ui.core.tmpl.Template.prototype.createControl = function(sId, oContext, oView) {
	
	// create the anonymous control instance
	jQuery.sap.require("sap.ui.core.tmpl.TemplateControl");
	var oControl = new sap.ui.core.tmpl.TemplateControl({
	  id: sId,
	  template: this,
	  context: oContext
	});
	
	// for anonymous controls the renderer functions is added to the control instance
	oControl.setTemplateRenderer(this.createRenderer(oView));
	
	// return the control
	return oControl;
		
};


/**
 * Creates an anonymous TemplateControl for the Template and places the control 
 * into the specified DOM element.
 * 
 * @param {string|DomRef} oRef the id or the DOM reference where to render the template
 * @param {object} [oContext] The context to use to evaluate the Template. It will be applied as value for the context property of the created control.
 * @param {string|int} [oPosition] Describes the position where the control should be put into the container
 * @return {sap.ui.core.tmpl.TemplateControl} the created control instance
 * @public
 */
sap.ui.core.tmpl.Template.prototype.placeAt = function(oRef, oContext, vPosition, bInline) {

	// parameter fallback
	if (typeof oContext === "string" || typeof oContext === "number") {
		vPosition = oContext;
		oContext = undefined;
	}
	
	// if the oRef is an ID or DomRef and the template should be rendered
	// inline we lookup the context from DOM element and mark the template
	// as an inline template to avoid additional elements around the template.
	var sId;
	if (!(oRef instanceof sap.ui.core.Control) && bInline) {
		
		// lookup the DOM element in which to place the template
		var $this = typeof oRef === "string" ? jQuery.sap.byId(oRef) : jQuery(oRef);

		// the DOM element must exist
		if ($this.length > 0) {

			// reuse the id for the template control
			sId = $this.attr("id");
			oRef = $this.get(0);
			
			// by default the context coming from sap.ui.template method will be used   
			// but it can be also defined on the root DOM element for inline templates
			// in case of inline templates we mark them
			var sContext = $this.attr("data-context");
			oContext = oContext || sContext && jQuery.parseJSON(sContext);

			// mark the template as inline template (to avoid extra DOM for the TemplateControl)
			// for inline templates the UIArea and the TemplateControl are the same DOM element  
			sap.ui.core.RenderManager.markInlineTemplate($this);
			
		}
		
	}
	
	// create the control (ID will be generated if not inline)
	var oControl = this.createControl(sId, oContext);

	// render the control into the specified domref
	oControl.placeAt(oRef, vPosition);
	
	// return the control
	return oControl;
		
};


/**
 * Returns the metadata object for the new Control class. 
 * This function needs to be implemented by sub classes of the Template.
 * 
 * @return {object} the metadata object of the new control class
 * @abstract
 */
sap.ui.core.tmpl.Template.prototype.createMetadata = function() {
	jQuery.sap.log.error("The function createMetadata is an abstract function which needs to be implemented by subclasses.");
};


/**
 * Returns the renderer function for the new Control class.
 * This function needs to be implemented by sub classes of the Template.
 * 
 * @return {any} the renderer function for the new Control class.
 * @abstract
 */
sap.ui.core.tmpl.Template.prototype.createRenderer = function() {
	jQuery.sap.log.error("The function createRenderer is an abstract function which needs to be implemented by subclasses.");
};



/**
 * Creates a Template for the given id, dom reference or a configuration object.
 * If no parameter is defined this function makes a lookup of DOM elements 
 * which are specifying a type attribute. If the value of this type attribute
 * matches an registered type then the content of this DOM element will be 
 * used to create a new <code>Template</code> instance.
 * 
 * If you want to lookup all kind of existing and known templates and parse them
 * directly you can simply call:
 * <pre> 
 *   sap.ui.template();
 * </pre>
 * 
 * To parse a concrete DOM element you can do so by using this function in the 
 * following way:
 * <pre>
 *   sap.ui.template("theTemplateId");
 * </pre>
 * 
 * Or you can pass the reference to a DOM element and use this DOM element as 
 * a source for the template:
 * <pre>
 *   sap.ui.template(oDomRef);
 * </pre>
 * 
 * The last option to use this function is to pass the information via a 
 * configuration object. This configuration object can be used to pass a 
 * context for the templating framework when compiling the template:
 * <pre>
 *   var oTemplateById = sap.ui.template({
 *     id: "theTemplateId",
 *     context: { ... }
 *   });
 *
 *   var oTemplateByDomRef = sap.ui.template({
 *     domref: oDomRef,
 *     context: { ... }
 *   });
 * </pre>
 * 
 * It can also be used to load a template from another file:
 * <pre>
 *   var oTemplate = sap.ui.template({
 *     id: "myTemplate",
 *     src: "myTemplate.tmpl"
 *   });
 * 
 *   var oTemplateWithContext = sap.ui.template({
 *     id: "myTemplate",
 *     src: "myTemplate.tmpl",
 *     context: { ... }
 *   });
 * </pre>
 *
 * The properties of the configuration object are the following:
 * <ul>
 * <li><code>id</code> - the ID of the Template / the ID  of the DOM element containing the source of the Template</li>
 * <li><code>domref</code> - the DOM element containing the source of the Template</li>
 * <li><code>type</code> - the type of the Template</li>
 * <li><code>src</code> - the URL to lookup the template</li> (<i>experimental!</i>)
 * <li><code>control</code> - the fully qualified name of the control to declare</li> (<i>experimental!</i>)
 * </ul>
 * 
 * @param {string|DomRef|object} [oTemplate] the id or the DOM reference to the template to lookup or an configuration object containing the src, type and eventually the id of the Template.
 * @return {sap.ui.core.tmpl.Template | sap.ui.core.tmpl.Template[]} the created Template instance 
 *         or in case of usage without parametes any array of templates is returned
 * 
 * @public
 * @static
 */
sap.ui.template = function(oTemplate) {

	// when no oTemplate is defined we need to lookup the elements in the document
	// and retrieve elements which have a type attribute which contains a value
	// of the supported types: 
	if (!oTemplate) {
	
		// lookup all kind of DOM elements for having a type which is supported
		var aTemplates = [];
		jQuery.each(sap.ui.core.tmpl.Template._mSupportedTypes, function(sType, sClass) {
			jQuery("script[type='" + sType + "'], [data-type='" + sType + "']").each(function(iIndex, oElement) {
				aTemplates.push(sap.ui.template({
					id: oElement.id,
					domref: oElement,
					type: sType,
					_class: sClass /* helper to save lookup time in the supported types */
				}));
			});
		});
		return aTemplates;
		
	} else {
	
		// check the settings for being a string or a DOM element
		if (typeof oTemplate === "string") {
			return sap.ui.template({
				id: oTemplate
			});
		} else if (oTemplate && oTemplate.tagName && oTemplate.nodeName && oTemplate.ownerDocument && oTemplate.nodeType === 1) {
			// instanceof HTMLElement only works for modern browsers!
			return sap.ui.template({
				id: oTemplate.id,
				domref: oTemplate
			});
		} 

		// apply the default values
		oTemplate = jQuery.extend({
			type: sap.ui.core.tmpl.Template.DEFAULT_TEMPLATE
		}, oTemplate);

		// in case of specifiying a src attribute for the configuration object
		// we load the template from a remote resource 
		var sId, sType, sControl, sContent, bRender, sController = false,
		    bLoadTemplate = typeof oTemplate.src === "string";
		if (bLoadTemplate) {
		
			// load the template from the specified URL
			var oResponse = jQuery.sap.sjax({
				url : oTemplate.src,
				dataType: "text"
			});
			
			// apply the content as template content
			// set the id, type and control if defined in the object
			if (oResponse.success) {
				sId = oTemplate.id,
				sType = oTemplate.type,
				sControl = oTemplate.control,
				sContent = oResponse.data;
				
				//Check for inline template information
				var rTmplInfo = /^<!--\sUI5:Template\stype=([a-z\/\-]*)\s(?:controller=([A-Za-z.]*)\s)?-->/,
					aTmplInfo = sContent.match(rTmplInfo);
				if (aTmplInfo) {
					sType = aTmplInfo[1];
					if (aTmplInfo.length == 3) {
						sController = aTmplInfo[2];
					}
					sContent = sContent.substr(aTmplInfo[0].length);
				}
			} else {
				throw new Error("The template could not be loaded from " + oTemplate.src + "!");
			}
		
		} else {
			
			// retrieve the required properties
			var oElement = oTemplate.domref || jQuery.sap.domById(oTemplate.id),
					$element = jQuery(oElement),
					bInline = false;

			// lookup the missing properties
			sId = oTemplate.id || oElement && oElement.id;
			sType = $element.attr("type") || oTemplate.type,
			sControl = $element.attr("data-control") || oTemplate.control;
					
			// lookup if the template for the current id and check this element for
			// beeing a subclass of sap.ui.core.tmpl.Template and return the existing
			// instance if found
			if (sId) {
				var theTemplate = sap.ui.getCore().getTemplate(sId);
				if (!theTemplate instanceof sap.ui.core.tmpl.Template) {
					throw new Error("Object for id \"" + sId + "\" is no sap.ui.core.tmpl.Template!");
				} else {
					if (theTemplate) {
						return theTemplate;
					}
				}
			}
			
			// the element to parse must exist
			if ($element.length === 0) {
				throw new Error("DOM element for the Template with the id \"" + sId + "\" not found!");
			}
			
			// retrieve the content 
			sContent = $element.html();

			// check the preconditions for rendering and set the render property
			// if the DOM ref is part of the documents body
			var sTagName = oElement.tagName.toLowerCase();
			if (sTagName !== "script") {
				bInline = $element.parents("body").length === 1;
			}
			
		}
		
		// if not class is given we fallback to the type attribute on the 
		// template defintion.
		var sClass = oTemplate._class;
		if (!sClass) {
			sClass = sap.ui.core.tmpl.Template._mSupportedTypes[sType];
			if (!sClass) {
				//sType = sap.ui.core.tmpl.Template.DEFAULT_TEMPLATE;
				throw new Error("The type \"" + sType + "\" is not supported.");
			}
		}

		// require and instantiate the proper template
		jQuery.sap.require(sClass);
		var oClass = jQuery.sap.getObject(sClass);
		    
		// create a new instance of the template
		var oInstance = new oClass({
			id: sId,
			content: sContent
		});
		
		// declare the control if specified
		if (sControl) {
			oInstance.declareControl(sControl);
		}

		// render inline templates immediately
		if (sController) {
			oInstance._sControllerName = sController
		}

		// render inline templates immediately
		if (bInline) {
			oInstance.placeAt(sId, oTemplate.context, undefined, true);
		}

		// return the template instance
		return oInstance;
		
	}
	
};

// define and register the default template
sap.ui.core.tmpl.Template.DEFAULT_TEMPLATE = "text/x-handlebars-template";
sap.ui.core.tmpl.Template.registerType(sap.ui.core.tmpl.Template.DEFAULT_TEMPLATE, "sap.ui.core.tmpl.HandlebarsTemplate");

}; // end of sap/ui/core/tmpl/Template.js
if ( !jQuery.sap.isDeclared('sap.ui.core.util.MockServer') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.util.MockServer for mocking a server
jQuery.sap.declare("sap.ui.core.util.MockServer");


jQuery.sap.require('sap.ui.thirdparty.sinon'); // unlisted dependency retained


if (!!sap.ui.Device.browser.internet_explorer) {
	jQuery.sap.require('sap.ui.thirdparty.sinon-ie'); // unlisted dependency retained

}

/*global URI *///declare unusual global vars for JSLint/SAPUI5 validation

(function() {
	

	/**
	 * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without
	 * changing the application code. This class can also be used for qunit tests.
	 * 
	 * @param {string} [sId] id for the new server object; generated automatically if no non-empty id is given
	 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
	 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new object
	 * @param {object} [oScope] scope object for resolving string based type and formatter references in bindings
	 * 
	 * @class Class to mock a server
	 * @extends sap.ui.base.ManagedObject
	 * @abstract
	 * @author SAP
	 * @version 1.18.9
	 * @public
	 * @name sap.ui.core.util.MockServer
	 * @experimental Since 1.15.1. The mock server is still under construction, so some implementation details can be changed in future.
	 */
	sap.ui.base.ManagedObject.extend("sap.ui.core.util.MockServer", /** @lends sap.ui.core.util.MockServer */
	{
		constructor : function(sId, mSettings, oScope) {
			sap.ui.base.ManagedObject.apply(this, arguments);
			sap.ui.core.util.MockServer._aServers.push(this);
		},

		metadata : {
			properties : {
				/**
				 * Setter for property <code>rootUri</code>. All request path URI are prefixed with this root URI if set.
				 *
				 * Default value is empty/<code>undefined</code>
				 * @param {string} rootUri new value for property <code>rootUri</code>
				 * @public
				 * @name sap.ui.core.util.MockServer#setRootUri
				 * @function
				 */

				/**
				 * Getter for property <code>rootUri</code>.
				 *
				 * Default value is empty/<code>undefined</code>
				 *
				 * @return {string} the value of property <code>rootUri</code>
				 * @public
				 * @name sap.ui.core.util.MockServer#getRootUri
				 * @function
				 */
				rootUri : "string",

				/**
				 * Setter for property <code>requests</code>.
				 * 
				 * Default value is is <code>[]</code>
				 * 
				 * Each array entry should consist of an array with the following properties / values:
				 *
				 * <ul>
				 * <li><b>method <string>: "GET"|"POST"|"DELETE|"PUT"</b>
				 * <br>
				 * (any HTTP verb)
				 * </li>
				 * <li><b>path <string>: "/path/to/resource"</b>
				 * <br> 
				 * The path is converted to a regular expression, so it can contain normal regular expression syntax.
				 * All regular expression groups are forwarded as arguments to the <code>response</code> function.
				 * In addition to this, parameters can be written in this notation: <code>:param</code>. These placeholder will be replaced by regular expression groups.
				 * </li>
				 * <li><b>response <function>: function(xhr, param1, param2, ...) { }</b>
				 * <br>
				 * The xhr object can be used to respond on the request. Supported methods are:
				 * <br>
				 * <code>xhr.respond(iStatusCode, mHeaders, sBody)</code>
				 * <br>
				 * <code>xhr.respondJSON(iStatusCode, mHeaders, oJsonObjectOrString)</code>. By default a JSON header is set for response header
				 * <br>
				 * <code>xhr.respondXML(iStatusCode, mHeaders, sXmlString)</code>. By default a XML header is set for response header
				 * <br>
				 * <code>xhr.respondFile(iStatusCode, mHeaders, sFileUrl)</code>. By default the mime type of the file is set for response header
				 * </li>
				 * </ul>
				 * 
				 * @param {object[]} requests new value for property <code>requests</code>
				 * @public
				 * @name sap.ui.core.util.MockServer#setRequests
				 * @function
				 */

				/**
				 * Getter for property <code>requests</code>.
				 *
				 * Default value is <code>[]</code>
				 *
				 * @return {object[]} the value of property <code>rootUri</code>
				 * @public
				 * @name sap.ui.core.util.MockServer#getRequests
				 * @function
				 */
				requests : {type:"object[]", defaultValue:[]}
			}
		},

		_oServer : null,
		_aFilter : null,
		_oMockdata: null,
		_oMetadata: null,
		_sMetadataUrl: null,
		_sMockdataBaseUrl: null
		
	});


	/**
	 * Starts the server.
	 * @public
	 */
	sap.ui.core.util.MockServer.prototype.start = function() {
		this._oServer = sap.ui.core.util.MockServer._getInstance();
		this._aFilters = [];
		var aRequests = this.getRequests();
		var iLength = aRequests.length;
		for (var i = 0; i < iLength; i++) {
			var oRequest = aRequests[i];
			this._addRequestHandler(oRequest.method, oRequest.path, oRequest.response);
		}
	};


	/**
	 * Stops the server.
	 * @public
	 */
	sap.ui.core.util.MockServer.prototype.stop = function() {
		if (this.isStarted()) {
			this._removeAllRequestHandlers();
			this._removeAllFilters();
			this._oServer = null;
		}
	};


	/**
	 * Returns whether the server is started or not.
	 * 
	 * @return {boolean} whether the server is started or not.
	 * @public
	 */
	sap.ui.core.util.MockServer.prototype.isStarted = function() {
		return !!this._oServer;
	};


	/**
	 * Refreshes the service metadata document and the mockdata
	 * 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._refreshData = function() {
		var that = this;
		
		// load the metadata
		this._loadMetadata(this._sMetadataUrl);
		
		// here we need to analyse the EDMX and identify the entity sets
		var mEntitySets = this._findEntitySets(this._oMetadata) 

		if (this._sMockdataBaseUrl == null) {
			// load the mockdata
			this._generateMockdata(mEntitySets, this._oMetadata);
		} else {
			// check the mockdata base URL to end with a slash
			if (!jQuery.sap.endsWith(this._sMockdataBaseUrl, "/") && !jQuery.sap.endsWith(this._sMockdataBaseUrl, ".json")) {
				this._sMockdataBaseUrl += "/";
			}
			// load the mockdata
			this._loadMockdata(mEntitySets, this._sMockdataBaseUrl);
		}
	};

	
	/**
	 * Returns the root URI without query or hash parameters
	 * @return {string} the root URI without query or hash parameters
	 */
	sap.ui.core.util.MockServer.prototype._getRootUri = function() {
		var sUri = this.getRootUri();
		sUri = sUri && /([^?#]*)([?#].*)?/.exec(sUri)[1]; // remove URL parameters or anchors
		return sUri;
	};
	
	
	/**
	 * Loads the service metadata for the given url
	 * @param {string} sMetadataUrl url to the service metadata document
	 * @return {XMLDocument} the xml document object 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._loadMetadata = function(sMetadataUrl) {
		
		// load the metadata
		var oMetadata = jQuery.sap.sjax({url: sMetadataUrl, dataType: "xml"}).data;
		jQuery.sap.assert(oMetadata !== undefined, "The metadata for url \"" + sMetadataUrl + "\" could not be found!");
		this._oMetadata = oMetadata;
		
		return oMetadata;
		
	};
	

	/**
	 * find the entity sets in the metadata XML document
	 * @param {XMLDocument} oMetadata the metadata XML document
	 * @return {map} map of entity sets 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._findEntitySets = function(oMetadata) {
		
		// here we need to analyse the EDMX and identify the entity sets
		var mEntitySets = {};
		jQuery(oMetadata).find("EntitySet").each(function(iIndex, oEntitySet) {
			var $EntitySet = jQuery(oEntitySet);
			// split the namespace and the name of the entity type (namespace could have dots inside)
			var aEntityTypeParts =/((.*)\.)?(.*)/.exec($EntitySet.attr("EntityType"));
			mEntitySets[$EntitySet.attr("Name")] = {
				"name": $EntitySet.attr("Name"), 
				"schema": aEntityTypeParts[2],
				"type": aEntityTypeParts[3],
				"keys": [],
				"navprops": {}
			};
		});
		
		// helper function to find the entity set and property reference
		// for the given role name
		var fnResolveNavProp = function(sRole, bFrom) {
			var sEntitySet = jQuery(jQuery(oMetadata).find("End[Role=" + sRole + "][EntitySet]")).attr("EntitySet");
			var aPropRef = [];
			jQuery(oMetadata).find("[Role=" + sRole + "]").find("PropertyRef").each(function(iIndex, oPropRef) {
				aPropRef.push(jQuery(oPropRef).attr("Name"));
			});
			return {
				"role": sRole,
				"entitySet": sEntitySet,
				"propRef": aPropRef
			};
		};
		
		// find the navigation properties of the entity types
		jQuery.each(mEntitySets, function(sEntitySetName, oEntitySet) {
			// find the keys
			var aKeys = jQuery(oMetadata).find("EntityType[Name=" + oEntitySet.type + "] PropertyRef");
			jQuery.each(aKeys, function(iIndex, oPropRef) {
				oEntitySet.keys.push(jQuery(oPropRef).attr("Name"));
			});
			// resolve the navigation properties
			var aNavProps = jQuery(oMetadata).find("EntityType[Name=" + oEntitySet.type + "] NavigationProperty");
			jQuery.each(aNavProps, function(iIndex, oNavProp) {
				var $NavProp = jQuery(oNavProp);
				oEntitySet.navprops[$NavProp.attr("Name")] = {
					"name": $NavProp.attr("Name"),
					"from": fnResolveNavProp($NavProp.attr("FromRole")),
					"to": fnResolveNavProp($NavProp.attr("ToRole"))
				};
			})
		});

		// return the entity sets
		return mEntitySets;

	};
	
	
	/**
	 * find the entity types in the metadata XML document
	 * @param {XMLDocument} oMetadata the metadata XML document
	 * @return {map} map of entity types
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._findEntityTypes = function (oMetadata) {
		var mEntityTypes = {};
		jQuery(oMetadata).find("EntityType").each(function (iIndex, oEntityType) {
			var $EntityType = jQuery(oEntityType);
			mEntityTypes[$EntityType.attr("Name")] = {
				"name": $EntityType.attr("Name"),
				"properties": [],
				"keys": []
			};
			$EntityType.find("Property").each(function (iIndex, oProperty) {
				var $Property = jQuery(oProperty);
				var aPropertyTypeParts = $Property.attr("Type").split(".");
				mEntityTypes[$EntityType.attr("Name")].properties.push({
					"schema": aPropertyTypeParts[0],
					"type": aPropertyTypeParts[1],
					"name": $Property.attr("Name"),
					"precision": $Property.attr("Precision"),
					"scale": $Property.attr("Scale")
				})
			});
			$EntityType.find("PropertyRef").each(function (iIndex, oKey) {
				var $Key = jQuery(oKey);
				var sPropertyName = $Key.attr("Name");
				mEntityTypes[$EntityType.attr("Name")].keys.push(sPropertyName);
			});
		});
		return mEntityTypes;
	};

	
	/**
	 * find the complex types in the metadata XML document
	 * @param {XMLDocument} oMetadata the metadata XML document
	 * @return {map} map of complex types
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._findComplexTypes = function (oMetadata) {
		var mComplexTypes = {};
		jQuery(oMetadata).find("ComplexType").each(function (iIndex, oComplexType) {
			var $ComplexType = jQuery(oComplexType);
			mComplexTypes[$ComplexType.attr("Name")] = {
				"name": $ComplexType.attr("Name"),
				"properties": []
			};
			$ComplexType.find("Property").each(function (iIndex, oProperty) {
				var $Property = jQuery(oProperty);
				var aPropertyTypeParts = $Property.attr("Type").split(".");
				mComplexTypes[$ComplexType.attr("Name")].properties.push({
					"schema": aPropertyTypeParts[0],
					"type": aPropertyTypeParts[1],
					"name": $Property.attr("Name"),
					"precision": $Property.attr("Precision"),
					"scale": $Property.attr("Scale")
				})
			});
		});
		return mComplexTypes;
	};


	/**
	 * creates a key string for the given keys and entry
	 * @param {array} aKeys string array of key names
	 * @param {object} oEntry entity set entry which contains the keys as properties
	 * @return {string} the keys string
	 * @private 
	 */
	sap.ui.core.util.MockServer.prototype._createKeysString = function(aKeys, oEntry) {
		// creates the key string for an entity
		var sKeys = "";
		if (oEntry) {
			jQuery.each(aKeys, function(iIndex, sKey) {
				if (sKeys) {
					sKeys += ",";
				}
				sKeys += sKey + "='" + oEntry[sKey] + "'"; // TODO: consider datatype
			});
		}
		return sKeys;
	};
	
	
	/**
	 * loads the mock data for the given entity sets and tries to load them from
	 * the files inside the given base url. The name of the JSON files containing the
	 * mock data should be the same as the name of the underlying entity type. As
	 * an alternative you could also specify the url to a single JSON file containing
	 * the mock data for all entity types.
	 * @param {map} mEntitySets map of entity sets
	 * @param {string} sBaseUrl the base url which contains the mock data in JSON files or if the url is pointing to a JSON file containing all entity types
	 * @return {array} the mockdata arary containing the data for the entity sets
	 * @private 
	 */
	sap.ui.core.util.MockServer.prototype._loadMockdata = function(mEntitySets, sBaseUrl) {
		// load the entity sets (map the entity type data to the entity set)
		var that = this,
		    mEntityTypesData = {};
		this._oMockdata = {};
		// load the entity types data 
		if (jQuery.sap.endsWith(sBaseUrl, ".json")) {
			// all entity types are in one file
			var oResponse = jQuery.sap.sjax({url: sBaseUrl, dataType: "json"});
			if (oResponse.success) {
				mEntityTypesData = oResponse.data;
			} else {
				jQuery.sap.log.error("The mockdata for all the entity types could not be found at \"" + sBaseUrl + "\"!");
			}
		} else {
			// load the entity types individually
			jQuery.each(mEntitySets, function(sEntitySetName, oEntitySet) {
				if (!mEntityTypesData[oEntitySet.type]) {
					var sEntityTypeUrl = sBaseUrl + oEntitySet.type + ".json";
					var oResponse = jQuery.sap.sjax({url: sEntityTypeUrl, dataType: "json"});
					if (oResponse.success) {
						mEntityTypesData[oEntitySet.type] = oResponse.data;
					} else {
						jQuery.sap.log.error("The mockdata for entity type \"" + oEntitySet.type + "\" could not be found at \"" + sBaseUrl + "\"!");
					}
				}
			});
		}
		// create the mock data for the entity sets and enhance the mock data with metadata
		jQuery.each(mEntitySets, function(sEntitySetName, oEntitySet) {
			// TODO: should we clone here or not? right now we clone because of unique metadata for 
			//       individual entity sets otherwise the data of the entity types would be a 
			//       reference and thus it overrides the metadata from the other entity type.
			//       this happens especially then when we have two entity sets for the same
			//       entity type => maybe we move the metdata generation to the response creation!
			that._oMockdata[sEntitySetName] = [];
			if (mEntityTypesData[oEntitySet.type]) {
				jQuery.each(mEntityTypesData[oEntitySet.type], function(iIndex, oEntity) {
					that._oMockdata[sEntitySetName].push(jQuery.extend(true, {}, oEntity));
				});
			}
			// enhance with OData metadata if exists
			if (that._oMockdata[sEntitySetName].length > 0) {
				that._enhanceWithMetadata(oEntitySet, that._oMockdata[sEntitySetName]);
			}
		});
		// return the new mockdata
		return this._oMockdata;
	};

	
	/**
	 * enhances the mock data for the given entity set with the necessary metadata.
	 * Important is at least to have a metadata entry incl. uri for the entry and 
	 * for the navigation property it is required to have a deferred infor in case
	 * of not expanding it.
	 * @param {object} oEntitySet the entity set info
	 * @param {object} oMockData mock data for the entity set
	 * @private 
	 */
	sap.ui.core.util.MockServer.prototype._enhanceWithMetadata = function(oEntitySet, oMockData) {
		if (oMockData) {
			var that = this,
			    sRootUri = this._getRootUri(),
			    sEntitySetName = oEntitySet && oEntitySet.name;
			jQuery.each(oMockData, function(iIndex, oEntry) {
				// add the metadata for the entry (type is pointing to the EntityType which is required by datajs to resolve properties)
				oEntry.__metadata = {
					id: sRootUri + sEntitySetName + "(" + that._createKeysString(oEntitySet.keys, oEntry) + ")",
					type: oEntitySet.schema + "." + oEntitySet.type, 
					uri: sRootUri + sEntitySetName + "(" + that._createKeysString(oEntitySet.keys, oEntry) + ")"
				};
				// add the navigation properties
				jQuery.each(oEntitySet.navprops, function(sKey, oNavProp) {
					oEntry[sKey] = {
							__deferred: {
									uri: sRootUri + sEntitySetName + "(" + that._createKeysString(oEntitySet.keys, oEntry) + ")/" + sKey
							}
					};
				});
			});
		}
	};

	
	/**
	 * Takes a string '<poperty1>=<value1>, <poperty2>=<value2>,...' and creates an
	 * object (hash map) out of it.
	 * 
	 * @param {sKeys}
	 *            the string of porperty/value pairs
	 * @param {object}
	 *            object consisting of the parsed properties
	 */	
	sap.ui.core.util.MockServer.prototype._parseKeys = function(sKeys) {
	    var oResult = {}; // default is an empty hash map
	    var sToBeSplit = sKeys.slice(1, sKeys.length-1);
	    var aProps = sToBeSplit.split(",");
	    for (var i=0; i<aProps.length; i++) {
	        var aPair = aProps[i].split("=");
	        if (aPair.length === 2) {
	            oResult[aPair[0]] = aPair[1].slice(1,aPair[1].length-1);
	        }
	    };
	    return oResult;
	};
	
	
	/**
	 * This method takes over the already existing key values from oKeys and
	 * adds values for all remaining keys specified by oEntitySet.
	 * The result is merged into oEntity.
	 * 
	 * @param {object}
	 *            oEntitySet description of the entity set, conatins the full list of key fields
	 * @param {oKeys}
	 *            oKeys contains already defined key values
	 * @param {oEntity}
	 *            oEntity the result object, where the key property/value pairs merged into
	 */
	sap.ui.core.util.MockServer.prototype._completeKey = function(oEntitySet,
			oKeys, oEntity) {
		if (oEntity) {
			jQuery.each(oEntitySet.keys, function(iIndex, sKey) {
				if (oKeys[sKey]) {
					// take over the specified key value
					oEntity[sKey] = oKeys[sKey];
				} else {
					// create a new key value
					if (!oEntitySet.iSequence) {
						oEntitySet.iSequence = 0;
					}
					oEntitySet.iSequence++;
					oEntity[sKey] = oEntitySet.type + "_" + oEntity.type + "_" + oEntitySet.iSequence.toString();
				}
			});
		}
	};
	
	/**
	 * Generate some mock data for a specific entityType. String value will be
	 * based on the property name and an index Integer / Decimal value will be
	 * generated randomly Date / Time / DateTime value will also be generated
	 * randomly
	 * 
	 * @param {object}
	 *            oEntityType the entity type used to generate the data
	 * @param {int}
	 *            iIndex index of this particular object in the parent
	 *            collection
	 * @param {map}
	 *            mComplexTypes map of the complex types
	 * @return {object} the mocked entity
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._generateDataFromEntity = function(oEntityType, iIndex, mComplexTypes) {
		var oEntity = {};
		for (var i = 0; i < oEntityType.properties.length; i++) {
			var oProperty = oEntityType.properties[i];
			var oPropertyValue = "";
			if (oProperty.schema == "Edm") {
				if (oProperty.type == "String") {
					oPropertyValue = oEntityType.name + "_" + iIndex + "_" + oProperty.name;
				} else if (oProperty.type == "DateTime") {
					var date = new Date();
					date.setFullYear(2000 + Math.floor(Math.random() * 20));
					date.setDate(Math.floor(Math.random() * 30));
					date.setMonth(Math.floor(Math.random() * 12));
					oPropertyValue = "/Date(" + date.getTime() + ")/";
				} else if (oProperty.type == "Int32") {
					oPropertyValue = Math.floor(Math.random() * 10000);
				} else if (oProperty.type == "Decimal") {
					oPropertyValue = Math.floor(Math.random() * 1000000) / 100;
				}
			} else {
				oPropertyValue = this._generateDataFromEntity(mComplexTypes[oProperty.type], iIndex)
			}
			oEntity[oProperty.name] = oPropertyValue;
		}
		return oEntity;
	};
	

	/**
	 * Generate some mock data for a specific entityset.
	 * @param {object} oEntitySet the entity set for which we want to generate the data
	 * @param {map} mEntityTypes map of the entity types
	 * @param {map} mComplexTypes map of the complex types
	 * @return {array} the array of mocked data
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._generateDataFromEntitySet = function(oEntitySet, mEntityTypes, mComplexTypes) {
		var oEntityType = mEntityTypes[oEntitySet.type];
		var aMockedEntries = [];
		for ( var i = 0; i < 100; i++) {
			aMockedEntries.push(this._generateDataFromEntity(oEntityType, i, mComplexTypes));
		}
		return aMockedEntries;
	};
	

	/**
	 * Generate some mock data based on the metadata specified for the odata service.
	 * @param {map} mEntitySets map of the entity sets
	 * @param {object} oMetadata the complete metadata for the service
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._generateMockdata = function(mEntitySets, oMetadata) {
		// load the entity sets (map the entity type data to the entity set)
		var that = this, sRootUri = this._getRootUri(), oMockData = {};

		// here we need to analyse the EDMX and identify the entity types and complex types
		var mEntityTypes = this._findEntityTypes(oMetadata);
		var mComplexTypes = this._findComplexTypes(oMetadata);

		jQuery.each(mEntitySets, function(sEntitySetName, oEntitySet) {
			oMockData[sEntitySetName] = that._generateDataFromEntitySet(oEntitySet, mEntityTypes, mComplexTypes);
			jQuery.each(oMockData[sEntitySetName], function(iIndex, oEntry) {
				// add the metadata for the entry
				oEntry.__metadata = {
					uri : sRootUri + sEntitySetName + "(" + that._createKeysString(oEntitySet.keys, oEntry) + ")",
					type : oEntitySet.schema + "." + oEntitySet.type
				};
				// add the navigation properties
				jQuery.each(oEntitySet.navprops, function(sKey, oNavProp) {
					oEntry[sKey] = {
						__deferred : {
							uri : sRootUri + sEntitySetName + "(" + that._createKeysString(oEntitySet.keys, oEntry) + ")/" + sKey
						}
					};
				});
			});
		});
		this._oMockdata = oMockData;
	};


	
	/**
	 * Simulates an existing OData service by sepcifiying the metadata URL and the base URL for the mockdata. The server
	 * configures the request handlers depending on the service metadata. The mockdata needs to be stored individually for
	 * each entity type in a separate JSON file. The name of the JSON file needs to match the name of the entity type. If
	 * no base url for the mockdata is specified then the mockdata are generated from the metadata
	 * 
	 * @param {string} sMetadataUrl url to the service metadata document
	 * @param {string} sMockdataBaseUrl base url which contains the mockdata as single .json files or the .json file containing the complete mock data 
	 * 
	 * @experimental functionality might be enhanced in future - right now only read is supported
	 * @since 1.13.2
	 * @public
	 */
	sap.ui.core.util.MockServer.prototype.simulate = function(sMetadataUrl, sMockdataBaseUrl) {

		var that = this;
		this._sMetadataUrl = sMetadataUrl;
		this._sMockdataBaseUrl = sMockdataBaseUrl;
		
		this._refreshData();
		
		var mEntitySets = this._findEntitySets(this._oMetadata);
		
		// helper to find the entity set entry for a given entity set name and the keys of the entry
		var fnGetEntitySetEntry = function(sEntitySetName, sKeys) {
			var oFoundEntry;
			jQuery.each(that._oMockdata[sEntitySetName], function(iIndex, oEntry) {
				// TODO - consider to implement a proper check
				if (sKeys === "(" + that._createKeysString(mEntitySets[sEntitySetName].keys, oEntry) + ")") {
					oFoundEntry = {index: iIndex, entry: oEntry};
					return false; // = break
				}
			});
			return oFoundEntry;
		};
		
		// helper function to resolve a navigation and return the matching entities
		var fnResolveNavigation = function(sEntitySetName, oFromRecord, sNavProp) {
			var oNavProp = mEntitySets[sEntitySetName].navprops[sNavProp];
			// maybe we can do symbolic links with a function to handle the navigation properties 
			// instead of copying the data into the nested structures
			if (oNavProp && oNavProp.to) {
				var aEntries = [];
				jQuery.each(that._oMockdata[oNavProp.to.entitySet], function(iIndex, oToRecord) {
					
					// check for property ref being identical
					var bEquals = true;
					for (var i = 0, l = oNavProp.from.propRef.length; i < l; i++) {
						if (oFromRecord[oNavProp.from.propRef[i]] != oToRecord[oNavProp.to.propRef[i]]) {
							bEquals = false;
							break;
						}
					}
					
					// if identical we add the to record
					if (bEquals) {
						aEntries.push(oToRecord);
					}
					
				});
				return aEntries;
			}
		};
		

		// helper to resolve an entity set for insert/delete/update operations
		var fnResolveTargetEntityName = function(oEntitySet, sKeys, sUrlParams) {
			// Set the default entity name
			var sSetName = oEntitySet.name;
			// If there are sUrlParams try to find a navigation property
			if (sUrlParams) {
				var navProp = oEntitySet.navprops[sUrlParams];
			}
			if (navProp) {
				// instead of the default entity name use the endpoints entity
				// name
				sSetName = navProp.to.entitySet;
			}
			return sSetName;
		};

		var initNewEntity = function(oXhr, sTargetEntityName, sKeys, sUrlParams) {
			var oEntity = JSON.parse(oXhr.requestBody);
			if (oEntity) {
				var oKeys = that._parseKeys(sKeys);
				that._completeKey(mEntitySets[sTargetEntityName], oKeys, oEntity);
				that._enhanceWithMetadata(mEntitySets[sTargetEntityName], [oEntity]);
				return oEntity;
			}
			return null;
		};
		
		// create the request handlers
		var aRequests = [];
		
		// add the CSRF-token request
        aRequests.push({
            method : "GET",
            path : "",
            response : function(oXhr) {
                if (oXhr.requestHeaders["x-csrf-token"] == "Fetch" ) {
                    oXhr.respond(200, { "X-CSRF-Token": "42424242424242424242424242424242" });
                } else {
                    oXhr.respond(404);
                }
            }
        });
		
		// add the $metadata request
		aRequests.push({
			method : "GET",
			path : new RegExp("\\$metadata([?#].*)?"),
			response : function(oXhr) {
				jQuery.sap.require("jquery.sap.xml");
				oXhr.respond(200, { "Content-Type": "application/xml;charset=utf-8" }, jQuery.sap.serializeXML(that._oMetadata));
			}
		});
		
		// add entity sets
		jQuery.each(mEntitySets, function(sEntitySetName, oEntitySet) {
			
			// navigation property support
			jQuery.each(oEntitySet.navprops, function(sKey, oNavProp) {
				
				// support $count requests on navigation properties
				aRequests.push({
					method : "GET",
					path : new RegExp("(" + sEntitySetName + ")(\\([^/\\?#]+\\))/(" + sKey + ")/\\$count/?(.*)?"),
					response : function(oXhr, sEntitySetName, sKeys, sNavProp, sUrlParams) {
						var oEntry = fnGetEntitySetEntry(sEntitySetName, sKeys);
						if (oEntry) {
							var aEntries = fnResolveNavigation(sEntitySetName, oEntry.entry, sNavProp);
							oXhr.respond(200, { "Content-Type": "text/plain;charset=utf-8" }, "" + aEntries.length);
						} else {
							oXhr.respond(404);
						}
					}
				});
				
				// support access of the entity set navigation property (collection)
				aRequests.push({
					method : "GET",
					path : new RegExp("(" + sEntitySetName + ")(\\([^/\\?#]+\\))/(" + sKey + ")/?(.*)?"),
					response : function(oXhr, sEntitySetName, sKeys, sNavProp, sUrlParams) {
						var oEntry = fnGetEntitySetEntry(sEntitySetName, sKeys);
						if (oEntry) {
							var aEntries = fnResolveNavigation(sEntitySetName, oEntry.entry, sNavProp);
							oXhr.respond(200, { "Content-Type": "application/json;charset=utf-8" }, JSON.stringify({d: {results: aEntries }}));
						} else {
							oXhr.respond(404);
						}
					}
				});
				
			});

			// support $count requests on entity set
			aRequests.push({
				method : "GET",
				path : new RegExp("(" + sEntitySetName + ")/\\$count/?(.*)?"),
				response : function(oXhr, sEntitySetName, sUrlParams) {
					oXhr.respond(200, { "Content-Type": "text/plain;charset=utf-8" }, "" + that._oMockdata[sEntitySetName].length);
				}
			});
			
			
			// support access of the entry of an entity set (collection)
			aRequests.push({
				method : "GET",
				path : new RegExp("(" + sEntitySetName + ")"),
				response : function(oXhr, sEntitySetName, sKeys, sUrlParams) {
					oXhr.respond(200, { "Content-Type": "application/json;charset=utf-8" }, JSON.stringify({d : { results : that._oMockdata[sEntitySetName]}}));
				}
			});
			
			
			
			// support access of the entry of an entity set (collection)
			aRequests.push({
				method : "GET",
				path : new RegExp("(" + sEntitySetName + ")(\\([^/\\?#]+\\))/?(.*)?"),
				response : function(oXhr, sEntitySetName, sKeys, sUrlParams) {
					var oEntry = fnGetEntitySetEntry(sEntitySetName, sKeys);
					if (oEntry) {
						oXhr.respond(200, { "Content-Type": "application/json;charset=utf-8" }, JSON.stringify({d: oEntry.entry}));
					} else {
						oXhr.respond(404);
					}
				}
			});
			
			// support creation of an entity of a specific type
			aRequests.push({
				method : "POST",
				path : new RegExp("(" + sEntitySetName + ")(\\([^/\\?#]+\\))/?(.*)?"),
				response : function(oXhr, sEntitySetName, sKeys, sUrlParams) {
					var sRespondData = null;
					var sRespondContentType = null;
					var iResult = 405; // default: method not allowed
					var sTargetEntityName = fnResolveTargetEntityName(oEntitySet, sKeys, sUrlParams);
					if (sTargetEntityName) {
						var oEntity = initNewEntity(oXhr, sTargetEntityName, sKeys, sUrlParams);
						if (oEntity) {
							var sUri = that._getRootUri() + sTargetEntityName + "(" + that._createKeysString(mEntitySets[sTargetEntityName].keys, oEntity) + ")";
							sRespondData = '{"uri": "' + sUri + '" }';
							sRespondContentType = {"Content-Type": "application/json;charset=utf-8"};
							that._oMockdata[sTargetEntityName] = that._oMockdata[sTargetEntityName].concat([oEntity]);
							iResult = 201; 
						}
					}
					oXhr.respond(iResult, sRespondContentType, sRespondData); 
				}
			});
			
			// support creation/update of an entity of a specific type
			aRequests.push({
				method : "PUT",
				path : new RegExp("(" + sEntitySetName + ")(\\([^/\\?#]+\\))/?(.*)?"),
				response : function(oXhr, sEntitySetName, sKeys, sUrlParams) {
					
					var iResult = 405; // default: method not allowed 
					var sRespondData = null;
					var sRespondContentType = null;
					
					var sTargetEntityName = fnResolveTargetEntityName(oEntitySet, sKeys, sUrlParams);
					if (sTargetEntityName) {
						var oEntity = initNewEntity(oXhr, sTargetEntityName, sKeys, sUrlParams);
						if (oEntity) {
							var sUri = that._getRootUri() + sTargetEntityName + "(" + that._createKeysString(mEntitySets[sTargetEntityName].keys, oEntity) + ")";
							sRespondData = '{"uri": "' + sUri + '" }';
							sRespondContentType = {"Content-Type": "application/json;charset=utf-8"};
							
							var oExistingEntry = fnGetEntitySetEntry(sEntitySetName, sKeys);
							if (oExistingEntry) { // Overwrite existing
								that._oMockdata[sEntitySetName][oExistingEntry.index] = oEntity;
							} else { // really new
								that._oMockdata[sTargetEntityName] = that._oMockdata[sTargetEntityName].concat([oEntity]);
							}
							iResult = 201; 
						}
					} 
					oXhr.respond(iResult, sRespondContentType, sRespondData);  
				}
			});
			
			
			// support creation of an entity of a specific type
			aRequests.push({
				method : "DELETE",
				path : new RegExp("(" + sEntitySetName + ")(\\([^/\\?#]+\\))/?(.*)?"),
				response : function(oXhr, sEntitySetName, sKeys, sUrlParams) {
					var iResult = 204; // default: method not allowed 
					var oEntry = fnGetEntitySetEntry(sEntitySetName, sKeys);
					if (oEntry) {
						delete that._oMockdata[sEntitySetName][oEntry.index];
						iResult = 200;
					}
					oXhr.respond(iResult, null, null); 
				}
			});
			
			// support access of the entity set (collection)
			aRequests.push({
				method : "GET",
				path : new RegExp("(" + sEntitySetName + ")(\\?\\$)(filter|skip)/?(.*)?"),
				response : function(oXhr, sEntitySetName, sUrlParams) {
					// sUrlParams should not contains ?, but only & in its stead
					// TODO: make this more mature - it is hacky right now
					sUrlParams = sUrlParams && sUrlParams.replace("?", "&");
					var parsedQuery = URI.parseQuery(sUrlParams);
					var aMockData = that._oMockdata[sEntitySetName];
					var aFilteredData = aMockData;
					
					if (parsedQuery.hasOwnProperty("$filter")) {
						// The data needs to be filtered for the moment only simple filters can be used
						var sODataFilterExpression = parsedQuery["$filter"],
						    sODataFilterMethod = sODataFilterExpression.split("(")[0],
						    aODataFilterValues, 
						    sPath,
						    sValue,
						    oMockData = that._oMockdata;
						switch (sODataFilterMethod) {
							case "substringof" :
								aODataFilterValues = sODataFilterExpression.split("(")[1].split(")")[0].split(",");
								sValue = aODataFilterValues[0].substr(1, aODataFilterValues[0].length - 2);
								sPath = aODataFilterValues[1];
								aFilteredData = jQuery.grep(aMockData, function(oMockData) {
									return (oMockData[sPath].indexOf(sValue) != -1);
								});
								break;
							case "startswith" :
								aODataFilterValues = sODataFilterExpression.split("(")[1].split(")")[0].split(",");
								sValue = aODataFilterValues[1].substr(1, aODataFilterValues[0].length - 2);
								sPath = aODataFilterValues[0];
								aFilteredData = jQuery.grep(aMockData, function(oMockData) {
									return (oMockData[sPath].indexOf(sValue) == 0);
								});
								break;
							case "endswith" :
								aODataFilterValues = sODataFilterExpression.split("(")[1].split(")")[0].split(",");
								sValue = aODataFilterValues[1].substr(1, aODataFilterValues[0].length - 2);
								sPath = aODataFilterValues[0];
								aFilteredData = jQuery.grep(aMockData, function(oMockData) {
									var sMockDataValue = oMockData[sPath];
									return (oMockData[sPath].indexOf(sValue) == (sMockDataValue.length - sValue.length));
								});
								break;

						}
					}
					
					if (parsedQuery.hasOwnProperty("$count")) {
						oXhr.respond(200, {	"Content-Type" : "text/plain;charset=utf-8"	}, "" + aFilteredData.length);
					} else {
						oXhr.respond(200, {	"Content-Type" : "application/json;charset=utf-8"	}, JSON.stringify({	d : { results : aFilteredData	}	}));
					}

				}
			});

		});
		
		// apply the request handlers
		this.setRequests(aRequests);
		
	};


	/**
	 * Removes all request handlers.
	 * 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._removeAllRequestHandlers = function() {
		var aRequests = this.getRequests();
		var iLength = aRequests.length;
		for (var i = 0; i < iLength; i++) {
			sap.ui.core.util.MockServer._removeResponse(aRequests[i].response);
		}
	};


	/**
	 * Removes all filters.
	 * 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._removeAllFilters = function() {
		for (var i = 0; i < this._aFilters.length; i++) {
			sap.ui.core.util.MockServer._removeFilter(this._aFilters[i]);
		}
		this._aFilters = null;
	};


	/**
	 * Adds a request handler to the server, based on the given configuration.
	 * 
	 * @param {string}
	 *          sMethod HTTP verb to use for this method (e.g. GET, POST, PUT, DELETE...)
	 * @param {string|regexp}
	 *          sPath the path of the URI (will be concatenated with the rootUri)
	 * @param {function}
	 *          fnResponse the response function to call when the request occurs
	 * 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._addRequestHandler = function(sMethod, sPath, fnResponse) {
		sMethod = sMethod ? sMethod.toUpperCase() : sMethod;
		if (typeof sMethod !== "string") {
			throw new Error("Error in request configuration: value of 'method' has to be a string");
		}
		if (!(typeof sPath === "string" || sPath instanceof RegExp)) {
			throw new Error("Error in request configuration: value of 'path' has to be a string or a regular expression");
		}
		if (typeof fnResponse !== "function") {
			throw new Error("Error in request configuration: value of 'response' has to be a function");
		}

		var sUri = this._getRootUri();
		
		// create the URI regexp (will be escaped)
		sUri = sUri && new RegExp(this._escapeStringForRegExp(sUri));
		
		// create the path regexp (will have the special regexp encoding)
		if (sPath && !(sPath instanceof RegExp)) {
			sPath = new RegExp(this._createRegExpPattern(sPath));
		}
		
		// create the regexp for the request handler (concat root uri and path)
		var oRegExp = this._createRegExp(sUri ? sUri.source + sPath.source : sPath.source);

		this._addFilter(this._createFilter(sMethod, oRegExp));
		this._oServer.respondWith(sMethod, oRegExp, fnResponse);

		// some debug logging to see what is registered and how the regex look like
		jQuery.sap.log.debug("MockServer: adding " + sMethod + " request handler for pattern " + oRegExp);
		
	};


	/**
	 * Creates a regular expression based on a given pattern.
	 * 
	 * @param {string} sPattern the pattern to use for the regular expression.
	 * @return {RegExp} the created regular expression.
	 * 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._createRegExp = function(sPattern) {
		return new RegExp("^" + sPattern + "$");
	};


	/**
	 * Creates a regular expression pattern. All <code>:param</code> are replaced 
	 * by regular expression groups.
	 * 
	 * @return {string} the created regular expression pattern.
	 * 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._createRegExpPattern = function(sPattern) {
		return sPattern.replace(/:([\w\d]+)/g, "([^\/]+)");
	};

	/**
	 * Converts a string into a regular expression. Escapes all regexp critical 
	 * characters.
	 * 
	 * @return {string} the created regular expression pattern.
	 * 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._escapeStringForRegExp = function(sString) {
		return sString.replace(/[\\\/\[\]\{\}\(\)\-\*\+\?\.\^\$\|]/g, "\\$&");
	};

	/**
	 * Adds a filter function. The filter determines whether to fake a response or not. When the filter function
	 * returns true, the request will be faked.
	 * 
	 * @param {function} fnFilter the filter function to add
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._addFilter = function(fnFilter) {
		this._aFilters.push(fnFilter)
		sap.ui.core.util.MockServer._addFilter(fnFilter);
	};


	/**
	 * Creates and returns a filter filter function.
	 * 
	 * @param {string} sRequestMethod HTTP verb to use for this method (e.g. GET, POST, PUT, DELETE...)
	 * @param {RegExp} oRegExp the regular expression to use for this filter
	 * 
	 * @private
	 */
	sap.ui.core.util.MockServer.prototype._createFilter = function(sRequestMethod, oRegExp) {
		return function(sMethod, sUri, bAsync, sUsername, sPassword) {
			return sRequestMethod === sMethod && oRegExp.test(sUri);
		}
	};


	/**
	 * Cleans up the resources associated with this object and all its aggregated children.
	 *
	 * After an object has been destroyed, it can no longer be used in!
	 *
	 * Applications should call this method if they don't need the object any longer.
	 *
	 * @see sap.ui.base.ManagedObject#destroy
	 * @param {boolean}
	 *            [bSuppressInvalidate] if true, this ManagedObject is not marked as changed
	 * @public
	 */
	sap.ui.core.util.MockServer.prototype.destroy = function(bSuppressInvalidate) {
		sap.ui.base.ManagedObject.prototype.destroy.apply(this, arguments);
		this.stop();
		var aServers = sap.ui.core.util.MockServer._aServers;
		var iIndex = jQuery.inArray(this, aServers);
		aServers.splice(iIndex, 1);
	};


	// =======
	// STATICS
	// =======
	
	sap.ui.core.util.MockServer._aFilters = [];
	sap.ui.core.util.MockServer._oServer = null;
	sap.ui.core.util.MockServer._aServers = [];

	/**
	 * Returns the instance of the sinon fake server.
	 * 
	 * @return {object} the server instance
	 * @private
	 */
	sap.ui.core.util.MockServer._getInstance = function() {
		// We can not create many fake servers, see bug https://github.com/cjohansen/Sinon.JS/issues/211
		// This is why we reuse the server and patch it manually
		if (!this._oServer) {
			this._oServer = window.sinon.fakeServer.create();
			this._oServer.autoRespond = true;
		}
		return this._oServer;
	};


	/**
	 * Global configuration of all mock servers.
	 * 
	 * @param {object} mConfig the configuration object.
	 * @param {boolean} [mConfig.autoRespond=true] If set true, all mock servers will respond automatically. If set false you have to call {@link sap.ui.core.util.MockServer#respond} method for response.
	 * @param {int} [mConfig.autoRespondAfter=0] the time in ms after all mock servers should send their response. 
	 * @param {boolean} [mConfig.fakeHTTPMethods=false] If set to true, all mock server will find <code>_method</code> parameter in the POST body and use this to override the the actual method. 
	 */
	sap.ui.core.util.MockServer.config = function(mConfig) {
		var oServer = this._getInstance();

		oServer.autoRespond = mConfig.autoRespond === false ? false : true;
		oServer.autoRespondAfter = mConfig.autoRespondAfter || 0;
		oServer.fakeHTTPMethods = mConfig.fakeHTTPMethods || false;
	};


	/**
	 * Respond to a request, when the servers are configured not to automatically respond.
	 */
	sap.ui.core.util.MockServer.respond = function() {
		this._getInstance().respond();
	};


	/**
	 * Starts all registered servers.
	 */
	sap.ui.core.util.MockServer.startAll = function() {
		for (var i=0; i < this._aServers.length; i++) {
			this._aServers[i].start();
		}
	};


	/**
	 * Stops all registered servers.
	 */
	sap.ui.core.util.MockServer.stopAll = function() {
		for (var i=0; i < this._aServers.length; i++) {
			this._aServers[i].stop();
		}
		this._getInstance().restore();
		this._oServer = null;
	};


	/**
	 * Stops and calls destroy on all registered servers. Use this method for cleaning up.
	 */
	sap.ui.core.util.MockServer.destroyAll = function() {
		this.stopAll();
		for (var i=0; i < this._aServers.length; i++) {
			this._aServers[i].destroy();
		}
	};


	/**
	 * Adds a filter function. The filter determines whether to fake a response or not. When the filter function
	 * returns true, the request will be faked.
	 * 
	 * @param {function} fnFilter the filter function to add
	 * @private
	 */
	sap.ui.core.util.MockServer._addFilter = function(fnFilter) {
		this._aFilters.push(fnFilter);
	};


	/**
	 * Removes a filter function.
	 * 
	 * @param {function} fnFilter the filter function to remove
	 * @return {boolean} whether the filter was removed or not
	 * @private
	 */
	sap.ui.core.util.MockServer._removeFilter = function(fnFilter) {
		var iIndex = jQuery.inArray(fnFilter, this._aFilters);
		if (iIndex !== -1) {
			this._aFilters.splice(iIndex, 1);
		}
		return iIndex !== -1;
	};


	/**
	 * Removes a response from the real sinon fake server object
	 *
	 * @param {function} fnResponse the response function to remove
	 * @return {boolean} whether the response was removed or not
	 * @private
	 */
	sap.ui.core.util.MockServer._removeResponse = function(fnResponse) {
		var aResponses = this._oServer.responses;
		var iLength = aResponses.length;
		for (var i = 0; i < iLength; i++) {
			if (aResponses[i].response === fnResponse) {
				aResponses.splice(i, 1);
				return true;
			}
		}
		return false;
	};

	// ================================
	// SINON CONFIGURATON AND EXTENSION
	// ================================

	window.sinon.FakeXMLHttpRequest.useFilters = true;

	window.sinon.FakeXMLHttpRequest.addFilter(function(sMethod, sUri, bAsync, sUsername, sPassword) {
		var aFilters = sap.ui.core.util.MockServer._aFilters;
		for (var i = 0; i < aFilters.length; i++) {
			var fnFilter = aFilters[i];
			if (fnFilter(sMethod, sUri, bAsync, sUsername, sPassword)) {
				return false;
			}
		}
		return true;
	});

	var getMimeType = function(sFileName) {
		if (/.*\.json$/i.test(sFileName)) {
			return "JSON";
		}
		if (/.*\.xml$/i.test(sFileName)) {
			return "XML";
		}
		if (/.*metadata$/i.test(sFileName)) {
			// This is needed in case the metadata comes from a
			// local file otherwise it's interpreted as octetstream
			return "XML";
		}
		return null;
	};

	/**
	 * @public
	 */
	window.sinon.FakeXMLHttpRequest.prototype.respondFile = function(iStatus, mHeaders, sFileUrl) {
		var oResponse = jQuery.sap.sjax({url:sFileUrl, dataType:"text"});
		if (!oResponse.success) throw new Error("Could not load file from: " + sFileUrl);

		var oData = oResponse.data;
		var sMimeType = getMimeType(sFileUrl);

		if (this["respond" + sMimeType]) {
			this["respond" + sMimeType](iStatus, mHeaders, oData);
		} else {
			this.respond(iStatus, mHeaders, oData);
		}
	};

	/**
	 * @public
	 */
	window.sinon.FakeXMLHttpRequest.prototype.respondJSON = function(iStatus, mHeaders, oJSONData) {
		mHeaders = mHeaders || {};
		mHeaders["Content-Type"] = mHeaders["Content-Type"] || "application/json";
		this.respond(iStatus, mHeaders, typeof oJSONData === "string" ? oJSONData : JSON.stringify(oJSONData));
	};

	/**
	 * @public
	 */
	window.sinon.FakeXMLHttpRequest.prototype.respondXML = function(iStatus, mHeaders, sXmlData) {
		mHeaders = mHeaders || {};
		mHeaders["Content-Type"] = mHeaders["Content-Type"] || "application/xml";
		this.respond(iStatus, mHeaders, sXmlData);
	};
	
})();

}; // end of sap/ui/core/util/MockServer.js
if ( !jQuery.sap.isDeclared('sap.ui.model.ClientModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * client-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.json
 * @public
 */

// Provides the JSON object based model implementation
jQuery.sap.declare("sap.ui.model.ClientModel");






/**
 * Constructor for a new ClientModel.
 *
 * @class
 * @abstract
 * Model implementation for Client models
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @param {object} oData URL where to load the data from
 * @constructor
 * @public
 * @name sap.ui.model.ClientModel
 */
sap.ui.model.Model.extend("sap.ui.model.ClientModel", /** @lends sap.ui.model.ClientModel */ {
	
	constructor : function(oData) {
		sap.ui.model.Model.apply(this, arguments);
		
		this.bCache = true;
		
		if (typeof oData == "string"){
			this.loadData(oData);
		}
	},

	metadata : {
		publicMethods : ["loadData", "setData", "getData", "setProperty", "forceNoCache"]
	}

});

/**
 * Creates a new subclass of class sap.ui.model.ClientModel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.ClientModel.extend
 * @function
 */

/**
 * Returns the current data of the model.
 * Be aware that the returned object is a reference to the model data so all changes to that data will also change the model data.
 *
 * @return the data object
 * @public
 */
sap.ui.model.ClientModel.prototype.getData = function(){
	return this.oData;
};

/**
 * Private method iterating the registered bindings of this model instance and initiating their check for update
 *
 * @param {boolean} bForceupdate
 *
 * @private
 */
sap.ui.model.ClientModel.prototype.checkUpdate = function(bForceupdate) {
	var aBindings = this.aBindings.slice(0);
	jQuery.each(aBindings, function(iIndex, oBinding) {
		oBinding.checkUpdate(bForceupdate);
	});
};

/**
 * @see sap.ui.model.Model.prototype.bindElement
 *
 */
/**
 * @see sap.ui.model.Model.prototype.createBindingContext
 *
 */
sap.ui.model.ClientModel.prototype.createBindingContext = function(sPath, oContext, mParameters, fnCallBack) {
	// optional parameter handling
	if (typeof oContext == "function") {
		fnCallBack = oContext;
		oContext = null;
	}
	if (typeof mParameters == "function") {
		fnCallBack = mParameters;
		mParameters = null;
	}
	// resolve path and create context
	var sContextPath = this.resolve(sPath, oContext),
		oNewContext = (sContextPath == undefined) ? undefined : this.getContext(sContextPath ? sContextPath : "/");
	fnCallBack(oNewContext);
};

/**
 * @see sap.ui.model.Model.prototype.destroyBindingContext
 *
 */
sap.ui.model.ClientModel.prototype.destroyBindingContext = function(oContext) {
	// TODO: what todo here?
};

/**
 * @see sap.ui.model.Model.prototype.bindContext
 */
sap.ui.model.ClientModel.prototype.bindContext = function(sPath, oContext, mParameters) {
	var oBinding = new sap.ui.model.ClientContextBinding(this, sPath, oContext, mParameters);
	return oBinding;
};

/**
 * update all bindings
 * @param {boolean} bForceUpdate true/false: Default = false. If set to false an update 
 * 					will only be done when the value of a binding changed.   
 * @public
 */
sap.ui.model.ClientModel.prototype.updateBindings = function(bForceUpdate) {
	this.checkUpdate(bForceUpdate);
};

/**
 * Force no caching
 * @param {boolean} force no cache true/false: Default = true  
 * @public
 */
sap.ui.model.ClientModel.prototype.forceNoCache = function(bForceNoCache) {
	this.bCache = !bForceNoCache; 
};

}; // end of sap/ui/model/ClientModel.js
if ( !jQuery.sap.isDeclared('sap.ui.model.json.JSONModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * JSON-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.json
 * @public
 */

// Provides the JSON object based model implementation
jQuery.sap.declare("sap.ui.model.json.JSONModel");





/**
 * Constructor for a new JSONModel.
 *
 * @class
 * Model implementation for JSON format
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @param {object} oData either the URL where to load the JSON from or a JS object
 * @constructor
 * @public
 * @name sap.ui.model.json.JSONModel
 */
sap.ui.model.ClientModel.extend("sap.ui.model.json.JSONModel", /** @lends sap.ui.model.json.JSONModel */ {
	
	constructor : function(oData) {
		sap.ui.model.ClientModel.apply(this, arguments);
		
		if (oData && typeof oData == "object"){
			this.setData(oData);
		}
	},

	metadata : {
		publicMethods : ["setJSON", "getJSON"]
	}

});

/**
 * Creates a new subclass of class sap.ui.model.json.JSONModel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * For a detailed description of <code>oClassInfo</code> or <code>FNMetaImpl</code> 
 * see {@link sap.ui.base.Object.extend Object.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] alternative constructor for a metadata object
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.model.json.JSONModel.extend
 * @function
 */

/**
 * Sets the JSON encoded data to the model.
 *
 * @param {object} oData the data to set on the model
 * @param {boolean} [bMerge=false] whether to merge the data instead of replacing it
 *
 * @public
 */
sap.ui.model.json.JSONModel.prototype.setData = function(oData, bMerge){
	if (bMerge) {
		// do a deep copy
		this.oData = jQuery.extend(true, {}, this.oData, oData);
	} else {
		this.oData = oData;
	}
	this.checkUpdate();
};

/**
 * Sets the JSON encoded string data to the model.
 *
 * @param {string} sJSONText the string data to set on the model
 * @param {boolean} [bMerge=false] whether to merge the data instead of replacing it
 *
 * @public
 */
sap.ui.model.json.JSONModel.prototype.setJSON = function(sJSONText, bMerge){
	var oJSONData;
	try {
		oJSONData = jQuery.parseJSON(sJSONText);
		this.setData(oJSONData, bMerge);
	} catch (e) {
		jQuery.sap.log.fatal("The following problem occurred: JSON parse Error: " + e);
		this.fireParseError({url : "", errorCode : -1,
			reason : "", srcText : e, line : -1, linepos : -1, filepos : -1});
	}
};

/**
 * Serializes the current JSON data of the model into a string.
 * Note: May not work in Internet Explorer 8 because of lacking JSON support (works only if IE 8 mode is enabled)
 *
 * @return the JSON data serialized as string
 * @public
 */
sap.ui.model.json.JSONModel.prototype.getJSON = function(){
	return JSON.stringify(this.oData);
};

/**
 * Load JSON-encoded data from the server using a GET HTTP request and store the resulting JSON data in the model.
 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
 *
 * @param {string} sURL A string containing the URL to which the request is sent.
 * @param {object | string}[oParameters] A map or string that is sent to the server with the request.
 * Data that is sent to the server is appended to the URL as a query string.
 * If the value of the data parameter is an object (map), it is converted to a string and
 * url-encoded before it is appended to the URL.
 * @param {boolean} [async=true] By default, all requests are sent asynchronous
 * (i.e. this is set to true by default). If you need synchronous requests, set this option to false.
 * Cross-domain requests do not support synchronous operation. Note that synchronous requests may
 * temporarily lock the browser, disabling any actions while the request is active.
 * @param {string} [sType=GET] The type of request to make ("POST" or "GET"), default is "GET".
 * Note: Other HTTP request methods, such as PUT and DELETE, can also be used here, but
 * they are not supported by all browsers.
 * @param {boolean} [bMerge=false] whether the data should be merged instead of replaced
 * @param {string} [bCache=false] force no caching if false. Default is false
 * @param {object} mHeaders An object of additional header key/value pairs to send along with the request
 *
 * @public
 */
sap.ui.model.json.JSONModel.prototype.loadData = function(sURL, oParameters, bAsync, sType, bMerge, bCache, mHeaders){
	var that = this;
	if (bAsync !== false) {
		bAsync = true;
	}
	if (!sType)	{
		sType = "GET";
	}
	if (bCache === undefined) {
		bCache = this.bCache;
	}
	
	this.fireRequestSent({url : sURL, type : sType, async : bAsync, headers: mHeaders, info : "cache="+bCache+";bMerge=" + bMerge});
	jQuery.ajax({
	  url: sURL,
	  async: bAsync,
	  dataType: 'json',
	  cache: bCache,
	  data: oParameters,
	  headers: mHeaders,
	  type: sType,
	  success: function(oData) {
		if (!oData) {
			jQuery.sap.log.fatal("The following problem occurred: No data was retrieved by service: " + sURL);
		}
		that.setData(oData, bMerge);
		that.fireRequestCompleted({url : sURL, type : sType, async : bAsync, headers: mHeaders, info : "cache=false;bMerge=" + bMerge, success: true});
	  },
	  error: function(XMLHttpRequest, textStatus, errorThrown){
        var oError = { message : textStatus, statusCode : XMLHttpRequest.status, statusText : XMLHttpRequest.statusText, responseText : XMLHttpRequest.responseText};
		jQuery.sap.log.fatal("The following problem occurred: " + textStatus, XMLHttpRequest.responseText + ","
					+ XMLHttpRequest.status + "," + XMLHttpRequest.statusText);

		that.fireRequestCompleted({url : sURL, type : sType, async : bAsync, headers: mHeaders, info : "cache=false;bMerge=" + bMerge, success: false, errorobject: oError});
		that.fireRequestFailed(oError);
	  }
	});
};

/**
 * @see sap.ui.model.Model.prototype.bindProperty
 *
 */
sap.ui.model.json.JSONModel.prototype.bindProperty = function(sPath, oContext, mParameters) {
	var oBinding = new sap.ui.model.json.JSONPropertyBinding(this, sPath, oContext, mParameters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindList
 *
 */
sap.ui.model.json.JSONModel.prototype.bindList = function(sPath, oContext, aSorters, aFilters, mParameters) {
	var oBinding = new sap.ui.model.json.JSONListBinding(this, sPath, oContext, aSorters, aFilters, mParameters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindTree
 *
 * @param {object}
 *         [mParameters=null] additional model specific parameters (optional)
 *         If the mParameter <code>arrayNames</code> is specified with an array of string names this names will be checked against the tree data structure
 *         and the found data in this array is included in the tree but only if also the parent array is included.
 *         If this parameter is not specified then all found arrays in the data structure are bound.
 *         If the tree data structure doesn't contain an array you don't have to specify this parameter.
 *         
 */
sap.ui.model.json.JSONModel.prototype.bindTree = function(sPath, oContext, aFilters, mParameters) {
	var oBinding = new sap.ui.model.json.JSONTreeBinding(this, sPath, oContext, aFilters, mParameters);
	return oBinding;
};

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model.
 * If the model value changed all interested parties are informed.
 *
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @public
 */
sap.ui.model.json.JSONModel.prototype.setProperty = function(sPath, oValue, oContext) {
	var sObjectPath = sPath.substring(0, sPath.lastIndexOf("/")),
		sProperty = sPath.substr(sPath.lastIndexOf("/")+1);
	
	// check if path / context is valid
	if (!this.resolve(sPath, oContext)) {
		return;
	}
	
	if (!sObjectPath && !oContext) {
		oContext = this.oData;
	}

	var oObject = this._getObject(sObjectPath, oContext);
	if (oObject) {
		oObject[sProperty] = oValue;
		this.checkUpdate();
	}
};

/**
* Returns the value for the property with the given <code>sPropertyName</code>
*
* @param {string} sPath the path to the property
* @param {object} [oContext=null] the context which will be used to retrieve the property
* @type any
* @return the value of the property
* @public
*/
sap.ui.model.json.JSONModel.prototype.getProperty = function(sPath, oContext) {
	return this._getObject(sPath, oContext);

};

/**
 * @param sPath
 * @param oContext
 * @returns the node of the specified path/context
 */
sap.ui.model.json.JSONModel.prototype._getObject = function (sPath, oContext) {
	var oNode = this.isLegacySyntax() ? this.oData : null;
	if (oContext instanceof sap.ui.model.Context){
		oNode = this._getObject(oContext.getPath());
	}
	else if (oContext){
		oNode = oContext;
	}
	if (!sPath) {
		return oNode;
	}
	var aParts = sPath.split("/"),
		iIndex = 0;
	if (!aParts[0]) {
		// absolute path starting with slash
		oNode = this.oData;
		iIndex++;
	}
	while(oNode && aParts[iIndex]) {
		oNode = oNode[aParts[iIndex]];
		iIndex++;
	}
	return oNode;
};

sap.ui.model.json.JSONModel.prototype.isList = function(sPath, oContext) {
	var sAbsolutePath = this.resolve(sPath, oContext);
	return jQuery.isArray(this._getObject(sAbsolutePath));
};

}; // end of sap/ui/model/json/JSONModel.js
if ( !jQuery.sap.isDeclared('sap.ui.model.xml.XMLModel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * XML-based DataBinding
 *
 * @namespace
 * @name sap.ui.model.xml
 * @public
 */

// Provides the XML object based model implementation
jQuery.sap.declare("sap.ui.model.xml.XMLModel");






/**
 * Constructor for a new XMLModel.
 *
 * @class
 * Model implementation for XML format
 *
 * @extends sap.ui.model.Model
 *
 * @author SAP AG
 * @version 1.18.9
 *
 * @param {object} oData either the URL where to load the XML from or a XML
 * @constructor
 * @public
 * @name sap.ui.model.xml.XMLModel
 */
sap.ui.model.ClientModel.extend("sap.ui.model.xml.XMLModel", /** @lends sap.ui.model.xml.XMLModel */ {
	
	constructor : function (oData) {
		sap.ui.model.ClientModel.apply(this, arguments);
		this.oNameSpaces = null;
		
		if (oData && oData.documentElement) {
			this.setData(oData);
		}
	},
	
	metadata : {
		publicMethods : ["setXML", "getXML", "setNameSpace"]
	}

});

/**
 * Sets the specified XML formatted string text to the model
 *
 * @param {string} sXMLText the XML data as string
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.setXML = function(sXMLText){
	var oXMLDocument = jQuery.sap.parseXML(sXMLText);

	if (oXMLDocument.parseError.errorCode != 0){
		var oParseError = oXMLDocument.parseError;
		jQuery.sap.log.fatal("The following problem occurred: XML parse Error for " + oParseError.url + " code: " + oParseError.errorCode + " reason: " +
				oParseError.reason +  " src: " + oParseError.srcText + " line: " +  oParseError.line +  " linepos: " + oParseError.linepos +  " filepos: " + oParseError.filepos);
		this.fireParseError({url : oParseError.url, errorCode : oParseError.errorCode,
			reason : oParseError.reason, srcText : oParseError.srcText, line : oParseError.line, linepos : oParseError.linepos,
			filepos : oParseError.filepos});
	}
	this.setData(oXMLDocument);
};

/**
 * Serializes the current XML data of the model into a string.
 *
 * @return the XML document serialized as string
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.getXML = function(){
	return jQuery.sap.serializeXML(this.oData);
};

/**
 * Sets the provided XML encoded data object to the model
 *
 * @param {object} oData the data to set to the model
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.setData = function(oData){
	this.oData = oData;
	this.checkUpdate();
};

/**
 * Load XML-encoded data from the server using a GET HTTP request and store the resulting XML data in the model.
 * Note: Due to browser security restrictions, most "Ajax" requests are subject to the same origin policy,
 * the request can not successfully retrieve data from a different domain, subdomain, or protocol.
 *
 * @param {string} sURL A string containing the URL to which the request is sent.
 * @param {object | string}[oParameters] A map or string that is sent to the server with the request.
 * @param {boolean} [bAsync=true] if the request should be asynchron or not. Default is true.
 * @param {string} [sType=GET] of request. Default is 'GET'
 * @param {string} [bCache=false] force no caching if false. Default is false
 * @param {object} mHeaders An object of additional header key/value pairs to send along with the request
 *
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.loadData = function(sURL, oParameters, bAsync, sType, bCache, mHeaders){
	var that = this;
	if (bAsync !== false) {
		bAsync = true;
	}
	if (!sType)	{
		sType = "GET";
	}
	if (bCache === undefined) {
		bCache = this.bCache;
	}
	
	this.fireRequestSent({url : sURL, type : sType, async : bAsync, headers: mHeaders, info : "cache="+bCache});
	jQuery.ajax({
	  url: sURL,
	  async: bAsync,
	  cache: bCache,
	  dataType: 'xml',
	  data: oParameters,
	  headers: mHeaders,
	  type: sType,
	  success: function(oData) {
		if (!oData) {
			jQuery.sap.log.fatal("The following problem occurred: No data was retrieved by service: " + sURL);
		}
		that.setData(oData);
		that.fireRequestCompleted({url : sURL, type : sType, async : bAsync, headers: mHeaders, info : "cache=false", success: true});
	  },
	  error: function(XMLHttpRequest, textStatus, errorThrown){
		var oError = { message : textStatus, statusCode : XMLHttpRequest.status, statusText : XMLHttpRequest.statusText, responseText : XMLHttpRequest.responseText};
		jQuery.sap.log.fatal("The following problem occurred: " + textStatus, XMLHttpRequest.responseText + ","
					+ XMLHttpRequest.status + "," + XMLHttpRequest.statusText);
		that.fireRequestCompleted({url : sURL, type : sType, async : bAsync, headers: mHeaders, info : "cache=false", success: false, errorobject: oError});
		that.fireRequestFailed(oError);
	  }
	});
};

/**
 * Sets an XML namespace to use in the binding path
 *
 * @param {string} sNameSpace the namespace URI
 * @param {string} [sPrefix=null] the prefix for the namespace (optional)
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.setNameSpace = function(sNameSpace, sPrefix){
	if (!sPrefix) {
		sPrefix = "";
	}
	if (!this.oNameSpaces) {
		this.oNameSpaces = {};
	}
	this.oNameSpaces[sPrefix] = sNameSpace;
};

/**
 * @see sap.ui.model.Model.prototype.bindProperty
 */
sap.ui.model.xml.XMLModel.prototype.bindProperty = function(sPath, oContext, mParameters) {
	var oBinding = new sap.ui.model.xml.XMLPropertyBinding(this, sPath, oContext, mParameters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindList
 */
sap.ui.model.xml.XMLModel.prototype.bindList = function(sPath, oContext, aSorters, aFilters, mParameters) {
	var oBinding = new sap.ui.model.xml.XMLListBinding(this, sPath, oContext, aSorters, aFilters, mParameters);
	return oBinding;
};

/**
 * @see sap.ui.model.Model.prototype.bindTree
 */
sap.ui.model.xml.XMLModel.prototype.bindTree = function(sPath, oContext, aFilters, mParameters) {
	var oBinding = new sap.ui.model.xml.XMLTreeBinding(this, sPath, oContext, aFilters, mParameters);
	return oBinding;
};

/**
 * Sets a new value for the given property <code>sPropertyName</code> in the model.
 * If the model value changed all interested parties are informed.
 *
 * @param {string}  sPath path of the property to set
 * @param {any}     oValue value to set the property to
 * @param {object} [oContext=null] the context which will be used to set the property
 * @public
 */
sap.ui.model.xml.XMLModel.prototype.setProperty = function(sPath, oValue, oContext) {
	var sObjectPath = sPath.substring(0, sPath.lastIndexOf("/") + 1),
		sProperty = sPath.substr(sPath.lastIndexOf("/")+1);
	
	// check if path / context is valid
	if (!this.resolve(sPath, oContext)) {
		return;
	}
	
	if (!this.oData.documentElement) {
		jQuery.sap.log.warning("Trying to set property " + sPath + ", but no document exists.")
		return;
	}
	var oObject;
	if (sProperty.indexOf("@") == 0) {
		oObject = this._getObject(sObjectPath, oContext);
		if (oObject[0]) {
			oObject[0].setAttribute(sProperty.substr(1), oValue);
			this.checkUpdate();
		}
	} else {
		oObject = this._getObject(sPath, oContext);
		if (oObject[0]) {
			jQuery(oObject[0]).text(oValue);
			this.checkUpdate();
		}
	}
	
};

/**
* Returns the value for the property with the given <code>sPropertyName</code>
*
* @param {string} sPath the path to the property
* @param {object} [oContext=null] the context which will be used to retrieve the property
* @type any
* @return the value of the property
* @public
*/
sap.ui.model.xml.XMLModel.prototype.getProperty = function(sPath, oContext) {
	var oResult = this._getObject(sPath, oContext);
	if (oResult && typeof oResult != "string") {
		oResult = jQuery(oResult[0]).text(); // TODO is this right? shouldn't we return the object?!
	}
	return oResult;
};

/**
* Returns the object for the given <code>path</code>
*
* @param {string} sPath the path to the object
* @param {object} [oContext=null] the context which will be used to retrieve the object
* @type any
* @return the object
* @public
*/
sap.ui.model.xml.XMLModel.prototype.getObject = function(sPath, oContext) {
	var oObject = this._getObject(sPath, oContext);
	if (jQuery.isArray(oObject)) {
		oObject = oObject[0];
	}
	return oObject;
};

/**
 * @param {string} sPath
 * @param {object} oContext
 * @returns {any} the node of the specified path/context
 */
sap.ui.model.xml.XMLModel.prototype._getObject = function (sPath, oContext) {
	var oRootNode = this.oData.documentElement;
	if (!oRootNode) {
		return null;
	}
	var oNode = this.isLegacySyntax() ? [oRootNode] : [];
	if (oContext instanceof sap.ui.model.Context){
		oNode = this._getObject(oContext.getPath());
	} else if (oContext) {
		oNode = [oContext];
	}
	if (!sPath) {
		return oNode;
	}
	var aParts = sPath.split("/"),
		sPart,
		iIndex = 0;
	if (!aParts[0]) {
		// absolute path starting with slash
		oNode = oRootNode;
		iIndex++;
	}
	
	oNode = oNode.length == undefined ? [oNode] : oNode;
	oNode = oNode[0] ? oNode : null;
			
	while(oNode && oNode.length > 0 && aParts[iIndex]) {
		sPart = aParts[iIndex];
		if (sPart.indexOf("@") == 0) {
			oNode = this._getAttribute(oNode[0], sPart.substr(1));
		} else if (sPart == "text()") {
			oNode = jQuery(oNode[0]).text();
		} else if (isNaN(sPart)) {
			oNode = this._getChildElementsByTagName(oNode[0], sPart);
		} else {
			oNode = [ oNode[sPart] ];
		}
		iIndex++;
	}
	return oNode;
};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getAttribute = function (oNode, sName) {
	if (!this.oNameSpaces || sName.indexOf(":") == -1) {
		return oNode.getAttribute(sName);
	}
	var sNameSpace = this._getNameSpace(sName),
		sLocalName = this._getLocalName(sName);
	if (oNode.getAttributeNS) {
		return oNode.getAttributeNS(sNameSpace, sLocalName);
	}
	else { // IE8
		if (!this.oDocNSPrefixes) {
			this.oDocNSPrefixes = this._getDocNSPrefixes();
		}
		var sPrefix = this.oDocNSPrefixes[sNameSpace];
		sName = (sPrefix ? sPrefix + ":" : "") + sLocalName;
		return oNode.getAttribute(sName);
	}
};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getChildElementsByTagName = function (oNode, sName) {
	var aChildNodes = oNode.childNodes,
		aResult = [];

	if (this.oNameSpaces) {
		var sNameSpace = this._getNameSpace(sName),
			sLocalName = this._getLocalName(sName),
			sChildLocalName;
		jQuery.each(aChildNodes, function(i, oChild){
			sChildLocalName =  oChild.localName || oChild.baseName;
			if (oChild.nodeType == 1 && sChildLocalName == sLocalName && oChild.namespaceURI == sNameSpace) {
				aResult.push(oChild);
			}
		});
	} else {
		jQuery.each(aChildNodes, function(i, oChild){
			if (oChild.nodeType == 1 && oChild.nodeName == sName) {
				aResult.push(oChild);
			}
		});
	}

	return aResult;
};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getNameSpace = function (sName) {
	var iColonPos = sName.indexOf(":"),
		sPrefix = "";
	if (iColonPos > 0){
		sPrefix = sName.substr(0, iColonPos);
	}
	return this.oNameSpaces[sPrefix];
};

/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getLocalName = function (sName) {
	var iColonPos = sName.indexOf(":"),
		sLocalName = sName;
	if (iColonPos > 0){
		sLocalName = sName.substr(iColonPos + 1);
	}
	return sLocalName;
};


/**
 * @param sPath
 * @param oContext
 * @returns
 */
sap.ui.model.xml.XMLModel.prototype._getDocNSPrefixes = function () {
	var oPrefixes = {},
		oDocumentElement = this.oData && this.oData.documentElement;
	if (!oDocumentElement) {
		return oPrefixes;
	}
	var aAttributes = oDocumentElement.attributes;
	jQuery.each(aAttributes, function(i, oAttribute) {
		var name = oAttribute.name,
			value = oAttribute.value;
		if (name == "xmlns") {
			oPrefixes[value] = "";
		}
		else if (name.indexOf("xmlns") == 0) {
			oPrefixes[value] = name.substr(6);
		}
	});
	return oPrefixes;
};

/**
 * Resolve the path relative to the given context
 */
sap.ui.model.xml.XMLModel.prototype._resolve = function(sPath, oContext) {
	var bIsRelative = !jQuery.sap.startsWith(sPath, "/"),
		sResolvedPath = sPath;
	if (bIsRelative) {
		if (oContext) {
			sResolvedPath = oContext.getPath() + "/" + sPath;
		}
		else {
			sResolvedPath = this.isLegacySyntax() ? "/" + sPath : undefined;
		}
	}
	return sResolvedPath;
};

sap.ui.model.xml.XMLModel.prototype.isList = function(sPath, oContext) {
	return false;
};

}; // end of sap/ui/model/xml/XMLModel.js
if ( !jQuery.sap.isDeclared('sap.ui.app.Application') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.app.Application");



(function(window, undefined) {

	/**
	 * Abstract application class. Extend this class to create a central application class.
	 * 
	 * Only one instance is allowed.
	 * 
	 * @param {string}
	 *            [sId] optional id for the application; generated automatically if
	 *            no non-empty id is given Note: this can be omitted, no matter
	 *            whether <code>mSettings</code> will be given or not!
	 * @param {object}
	 *            [mSettings] optional map/JSON-object with initial settings for the
	 *            new application instance
	 * 
	 * @public
	 * 
	 * @class Base class for application classes
	 * @extends sap.ui.base.ManagedObject
	 * @abstract
	 * @author SAP
	 * @version 1.18.9
	 * @name sap.ui.app.Application
	 * @experimental Since 1.11.1. The Application class is still under construction, so some implementation details can be changed in future.
	 * @deprecated Since 1.15.1. The Component class is enhanced to take care about the Application code.
	 */
	sap.ui.base.ManagedObject.extend("sap.ui.app.Application", /** @lends sap.ui.app.Application.prototype */ { 

		metadata : {
			"abstract": true,
			properties: {
				root : "string",
				config : "any"
			},
			aggregations : {
				rootComponent : {
					type : "sap.ui.core.UIComponent",
					multiple : false
				}
			},
			publicMethods: [
			  "getView"
			],
			deprecated: true
		},

		_fnErrorHandler : null,
		_fnBeforeExit : null, 
		_fnExit : null,
		_mMockServers : null,

		constructor : function(sId, mSettings) {

			// existence check (only one instance is allowed!)
			if (sap.ui.getApplication) {
				throw new Error("Only one instance of sap.ui.app.Application is allowed");
			}

			// install shortcut
			sap.ui.getApplication = jQuery.proxy(this._getInstance, this);

			// mock server registry
			this._mMockServers = {};

			// error handler (if exists)
			if (this.onError) {
				this._fnErrorHandler = jQuery.proxy(function(oEvt) {
					var oError = oEvt.originalEvent;
					this.onError(oError.message, oError.filename, oError.lineno);
				}, this);
				jQuery(window).bind("error", this._fnErrorHandler);
			}

			// super
			sap.ui.base.ManagedObject.apply(this, arguments);

			// register the application instance
			this.register();

			// wait until Core is initialized to create the models & root component 
			sap.ui.getCore().attachInit(jQuery.proxy(function() {
				
				// load the models and services
				this._initApplicationModels();
				
				// init the root component
				this._initRootComponent();
				
				// call the application controller
				this.main();
				
			}, this));

			// before exit handler
			this._fnBeforeExit = jQuery.proxy(this.onBeforeExit, this);
			jQuery(window).bind("beforeunload", this._fnBeforeExit);

			// exit handler
			this._fnExit = jQuery.proxy(this.onExit, this);
			jQuery(window).bind("unload", this._fnExit);
			
		},


		/**
		 * Internal function to initialize the root component.
		 * 
		 * @private
		 */
		_initRootComponent : function() {
			var oRootComponent = this.createRootComponent();
			// only if a root component exits we load the models and services
			// and place it into a container
			if (oRootComponent) {
				
				// set the root component
				this.setRootComponent(oRootComponent);
				
				// place the component 
				var oContainer = new sap.ui.core.ComponentContainer({
					component: oRootComponent
				});
				oContainer.placeAt(this.getRoot() || document.body);
			}
		},


		/**
		 * Creates and returns the root component. Override this method in your application implementation, if you want to override the default creation by metadata.
		 * 
		 * @return {sap.ui.core.UIComponent} the root component
		 * @protected
		 */
		createRootComponent : function() {
			var sRootComponent = this.getMetadata().getRootComponent();
			var oRootComponent;
			if (sRootComponent) {
				// create the root component
				oRootComponent = sap.ui.component({
					name: sRootComponent
				});
			}
			return oRootComponent;
		},


		/**
		 * Returns the application root component. 
		 * 
		 * @return {sap.ui.core.Control} The root component
		 * 
		 * @since 1.13.1
		 * @public
		 * @deprecated
		 */
		getView : function() {
			return this.getRootComponent();
		},


		/**
		 * Returns the application instance
		 * 
		 * return {sap.ui.app.Application} The application instance
		 * 
		 * @private
		 */
		_getInstance : function() {
			return this;
		},


		/**
		 * The main method is called when the DOM and UI5 is completely loaded. Override this method in your Application class implementation to execute code which relies on a loaded DOM / UI5.
		 * 
		 * @public
		 */
		main : function() {},


		/**
		 * On before exit application hook. Override this method in your Application class implementation, to handle cleanup before the real exit or to prompt a question to the user,
		 * if the application should be exited.
		 * 
		 * @return {string} return a string if a prompt should be displayed to the user confirming closing the application (e.g. when the application is not yet saved).
		 * @public
		 */
		onBeforeExit : function() {},


		/**
		 * On exit application hook. Override this method in your Application class implementation, to handle cleanup of the application.
		 * 
		 * @public
		 */
		onExit : function() {},


		/**
		 * On error hook. Override this method in your Application class implementation to listen to unhandled errors.
		 * 
		 * @param {string} sMessage The error message.
		 * @param {string} sFile The file where the error occurred
		 * @param {number} iLine The line number of the error
		 * @public
		 * @function
		 */
		onError : null, // function(sMessage, sFile, iLine) - function not added directly as it might result in bad stack traces in older browsers


		/**
		 * Sets the configuration model.
		 * 
		 * @param {string|object|sap.ui.model.Model} vConfig the configuration model, the configuration object or a URI string to load a JSON configuration file.
		 * @since 1.13.1
		 * @public
		 */
		setConfig : function(vConfig) {
			if (typeof vConfig === "string") {
				var sUri = vConfig;
				var vConfig = new sap.ui.model.json.JSONModel();
				var oResponse = jQuery.sap.sjax({url:sUri, dataType:'json'});
				if (oResponse.success) {
					vConfig.setData(oResponse.data);
				} else {
					throw new Error("Could not load config file: " + sUri);
				}
			}
			if (typeof vConfig === "object" && !vConfig instanceof sap.ui.model.Model) {
				vConfig = new sap.ui.model.JSONModel(vConfig);
			}
			jQuery.sap.assert(vConfig instanceof sap.ui.model.Model, "the config property value must be a string, an object or an instance of sap.ui.model.Model");
			this.setProperty("config", vConfig);
		},


		/**
		 * Initializes the application models and services.
		 * 
		 * @private
		 */
		_initApplicationModels : function() {
			
			var oMetadata = this.getMetadata();
			
			// get the application configuration
			var oModelsConfig = oMetadata.getModels(),
			    oServicesConfig = oMetadata.getServices();

			// iterate over the model configurations and create and register the 
			// models base on the configuration if available
			if (oModelsConfig) {
				
				// create and start the mock server
				var fnCreateMockServer = function(sName, sUri, sMetadataUrl, sMockdataBaseUrl) {
					
					// kill the existing mock server
					if (this._mMockServers[sName]) {
						this._mMockServers[sName].stop();
					}
					
					// start the mock server
					jQuery.sap.require("sap.ui.app.MockServer");
					this._mMockServers[sName] = new sap.ui.app.MockServer({
						rootUri: sUri
					});
					
					this._mMockServers[sName].simulate(sMetadataUrl, sMockdataBaseUrl);
					this._mMockServers[sName].start();
						
				};
				
				// helper to create a model depending on the type
				// TODO: models could have generic instantiation to pass the JSON object 
				//       of the configuration directly instead of individual handling 
				var fnCreateModel = function(sName, oConfig) {
					
					// extract uri and type
					var sUri = oConfig.uri, sType = oConfig.type;
					
					// require the model and instantiate it
					jQuery.sap.require(sType);
					var oClass = jQuery.sap.getObject(sType);
					jQuery.sap.assert(oClass !== undefined, "The specified model type \"" + sType + "\" could not be found!");
					
					// create the model and apply the configuration
					var oModel;
					if (sType === "sap.ui.model.resource.ResourceModel") {
						oModel = new oClass({bundleUrl: sUri});
					} else if (sType === "sap.ui.model.odata.ODataModel") {
						// check for a mock server configuration and start the mock server
						if (oConfig.mockserver) {
							fnCreateMockServer.call(this, sName, sUri, oConfig.mockserver.model, oConfig.mockserver.data);
						}
						// create the model
						oModel = new oClass(sUri, oConfig.settings);
					} else if (sType === "sap.ui.model.json.JSONModel" || sType === "sap.ui.model.xml.XMLModel") {
						oModel = new oClass();
						if (sUri) {
							oModel.loadData(sUri);
						}
					}

					// check the model to be an instance of sap.ui.model.Model
					jQuery.sap.assert(oModel instanceof sap.ui.model.Model, "The specified model type \"" + sType + "\" must be an instance of sap.ui.model.Model!");
					return oModel;

				};
				
				// create the models
				var that = this;
				jQuery.each(oModelsConfig, function(sKey, oModelConfig) {
					
					// if the model refer to a service configuration we use the service configuration 
					var sService = oModelConfig.service, 
					    oModel;
					if (sService) {
						var oServiceConfig = oServicesConfig[sService]; 
						jQuery.sap.assert(oServiceConfig, "The service configuration for service \"" + sService + "\" is not available!");
						oModel = fnCreateModel.call(that, sKey, oServiceConfig);
					} else if (oModelConfig.type) {
						oModel = fnCreateModel.call(that, sKey, oModelConfig);
					}
					
					// we apply the model to the root component if created
					if (oModel) {
						that.setModel(oModel, sKey || undefined);
					}
					
				});
				
			}
			
		},


		/**
		 * @see sap.ui.base.ManagedObject#destroy
		 * @public
		 */
		destroy : function(bSuppressInvalidate) {
			// kill the mock servers
			if (this._mMockServers) {
				jQuery.each(this._mMockServers, function(sName, oMockServer) {
					oMockServer.stop();
				});
			}
			this._oMockServers = [];
			// remove the event handlers
			if (this._fnErrorHandler) {
				jQuery(window).unbind("error", this._fnErrorHandler);
				this._fnErrorHandler = null;
			}
			if (this._fnBeforeExit) {
				jQuery(window).unbind("beforeunload", this._fnBeforeExit);
				this._fnBeforeExit = null; 
			}
			if (this._fnExit) {
				jQuery(window).unbind("unload", this._fnExit);
				this._fnExit = null;
			}

			delete sap.ui.getApplication;

			sap.ui.base.ManagedObject.prototype.destroy.apply(this, arguments);
		}
		
		
		/**
		 * Registers this instance of sap.ui.app.Application with the Core.
		 *
		 * The implementation of this method is provided with "friend" access by Core.
		 * @see sap.ui.core.Core.constructor
		 *
		 * @function
		 * @name sap.ui.app.Application.prototype.register
		 * @private
		 */
		//register : function() {...}

		
	}, /* Metadata constructor */ sap.ui.app.ApplicationMetadata);
})(window);
}; // end of sap/ui/app/Application.js
if ( !jQuery.sap.isDeclared('sap.ui.app.MockServer') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.app.MockServer for mocking a server
jQuery.sap.declare("sap.ui.app.MockServer");


(function() {
	

	/**
	 * Creates a mocked server. This helps to mock all or some backend calls, e.g. for OData/JSON Models or simple XHR calls, without
	 * changing the application code. This class can also be used for qunit tests.
	 * 
	 * @param {string} [sId] id for the new server object; generated automatically if no non-empty id is given
	 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
	 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new object
	 * @param {object} [oScope] scope object for resolving string based type and formatter references in bindings
	 * 
	 * @class Class to mock a server
	 * @extends sap.ui.base.ManagedObject
	 * @abstract
	 * @author SAP
	 * @version 1.18.9
	 * @public
	 * @name sap.ui.app.MockServer
	 * @experimental Since 1.13.0. The mock server is still under construction, so some implementation details can be changed in future.
	 * @deprecated Since 1.15.1. The mock server code has been moved to sap.ui.core.util - see {@link sap.ui.core.util.MockServer}
	 */
	sap.ui.app.MockServer = sap.ui.core.util.MockServer;


})();

}; // end of sap/ui/app/MockServer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.tmpl.HandlebarsTemplate') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
/*global Handlebars *///declare unusual global vars for JSLint/SAPUI5 validation

jQuery.sap.declare("sap.ui.core.tmpl.HandlebarsTemplate");




/**
 * Creates and initializes a new handlebars template with the given <code>sId</code> 
 * and settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. 
 * 
 * @param {string}
 *            [sId] optional id for the new template; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * 
 * @class The class for Handlebars Templates.
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.tmpl.HandlebarsTemplate
 * @experimental Since 1.15.0. The Template concept is still under construction, so some implementation details can be changed in future.
 */
sap.ui.core.tmpl.Template.extend("sap.ui.core.tmpl.HandlebarsTemplate", /** @lends sap.ui.core.tmpl.HandlebarsTemplate */
{
	
	constructor : function(sId, mSettings) {
		sap.ui.core.tmpl.Template.apply(this, arguments);
	}

});


// register this template type (as it is the default we do it also in the Template)
sap.ui.core.tmpl.Template.registerType("text/x-handlebars-template", "sap.ui.core.tmpl.HandlebarsTemplate");


/**
 * Handlebars helpers for the rendering phase!
 * @private
 */
sap.ui.core.tmpl.HandlebarsTemplate.RENDER_HELPERS = (function() {

	// TODO: ERROR HANDLING!!!
	// TODO: implement support for "if", "unless", "with", ...

	// extended helpers:
	//   - each
	//   - with   (TODO)
	//   - if     (TODO)
	//   - unless (TODO)
	
	// custom helpers:
	//   - control: allows to declare a UI5 control
	//   - element
	//   - attribute
	//   - property
	//   - aggregation

	// define the options to render the properties, aggregations, events, ...
	var fnEach = Handlebars.helpers["each"],
	    fnWith = Handlebars.helpers["with"],
	    fnIf = Handlebars.helpers["if"],
	    fnUnless = Handlebars.helpers["unless"],
	    fnParsePath = sap.ui.core.tmpl.Template.parsePath;
	    
	var oHelpers = {
		
		"each": function(context, options) {
			options = options || context;
			if (!options.hash.path) {
				// call the original function
				return fnEach.apply(this, arguments);
			} else {
				
				// parse the path & find the model
				var oRM = options.data.renderManager,
				    oRootControl = options.data.rootControl,
				    sParentPath = options.data.path,
				    oParentControl = options.data.parentControl,
				    sPath = (jQuery.sap.startsWith(options.hash.path, "/") ? "" : (sParentPath || "")) + options.hash.path,
				    oProperty = oRootControl.bindList(sPath),
				    aHTML = [],
				    data;
				
				// frame the data (isolation)
				if (options.data) {
					data = Handlebars.createFrame(options.data);
				}
			  
				// iterate through the entries of the property
				if (oProperty) {
					jQuery.each(oProperty, function(sKey, oValue) {
						if (data) {
							data.renderManager = oRM;
							data.rootControl = oRootControl;
							data.path = sPath + "/" + sKey + "/";
							data.parentControl = oParentControl;
						}
						// pass the current value as context to allow nested 
						// usage of the standard placeholders 
						//aHTML.push(options.fn(oValue, { data: data }));
						// we do not pass a context since the expressions for UI5 are 
						// based on the models
						aHTML.push(options.fn({}, { data: data }));
					});
				}
					
				// let's return the markup
				if (!oParentControl) {
					return new Handlebars.SafeString(aHTML.join(""));
				}
				
			}
		},
		
		"with": function(context, options) {
			options = options || context;
			if (!options.hash.path) {
				// call the original function
				return fnWith.apply(this, arguments);
			} else {
			}	
		},
		
		"if": function(conditional, options) {
			options = options || conditional;
			if (!options.hash.path) {
				// call the original function
				return fnIf.apply(this, arguments);
			} else {
			}	
		},
		
		"unless": function(conditional, options) {
			options = options || conditional;
			if (!options.hash.path) {
				// call the original function
				return fnUnless.apply(this, arguments);
			} else {
			}	
		},
		
		"text": function(context, options) {
			options = options || context;
			
			// lookup the required infos
			var oRootControl = options.data.rootControl,
	        sParentPath = options.data.path,
	        sPath = (jQuery.sap.startsWith(options.hash.path, "/") ? "" : (sParentPath || "")) + options.hash.path;
			
			// only in case of a path is specified the handler can work
			if (sPath) {
				// bind and return the text
				var oValue = oRootControl.bindProp(sPath);
				return oValue && new Handlebars.SafeString(oValue);
			} else {
				throw new Error("The expression \"text\" requires the option \"path\"!");
			}

		},
			
		"element": function(context, options) {
			options = options || context;
			
			// create and return the DOM element
			var oRM = options.data.renderManager,
			    oRootControl = options.data.rootControl,
			    oElement = oRootControl.createDOMElement(options.hash, options.data.path),
			    oParentElement = options.data.parentElement;

			// Example for defining nested elements:
			// {{#element ...}}
			//   {{element ...}}   <-- nested element
			// {{/element}} 
			if (options.fn) {
				var oChild = options.fn({}, {
					data: {
						renderManager: oRM,
						rootControl: oRootControl,
						parentElement: oElement
					}
				});
			}
			
			// in case of having a parent DOM element, we add the DOM element to 
			// the parent and do not return an HTML string
			if (oParentElement) {
				oParentElement.addElement(oElement);
				return;
			}
			
			// create the HTML markup and return it
			return new Handlebars.SafeString(oRM.getHTML(oElement));
			
		},
			
		"control": function(context, options) {
			options = options || context;
			
			// extract the data information
			var oRM = options.data.renderManager,
			    oControl = options.data.control;
			
			// aggregation support to render the control only (to support markup)
			// e.g.:
			// {{#aggregation name="content" type="sap.ui.core.Control" multiple="true"}}
			//   <div>
			//   {{control}}     <== place where to render the control!
			//   </div>
			// {{/aggregation}}
			if (oControl) {
				return new Handlebars.SafeString(oRM.getHTML(oControl));
			}
			
			// extract the rest of the information which is required now
			var oRootControl = options.data.rootControl,
			    sParentPath = options.data.path,
			    mParentChildren = options.data.children,
			    sType = options.hash["sap-ui-type"],
			    oMetadata = jQuery.sap.getObject(sType).getMetadata(),
			    sDefaultAggregation = options.hash["sap-ui-default-aggregation"] || oMetadata.getDefaultAggregationName(),
			    oView = options.data.view;
			
			// Nested controls will get the reference to the parent control in order
			// to add them to the defined aggregation. Example of nested controls:
			// {{#control ...}}
			//   {{control ...}}   <-- nested control
			// {{/control}}
			var mChildren = {};
			if (options.fn) {
				options.fn({}, {
					data: {
						rootControl: oRootControl,
						path: sParentPath,
						children: mChildren,
						defaultAggregation: sDefaultAggregation,
						view: oView
					}
				});
			}
			
			// remove the found nested children from the mSettings because they will
			// be handled after the creation of the new control instance
			var mSettings = jQuery.extend({}, options.hash);
			jQuery.each(mSettings, function(sKey, oValue) {
				if (mChildren[sKey]) {
					delete mSettings[sKey];
				}
			});
			
			// create the new control (out of the hash information)
			var oNewControl = oRootControl.createControl(mSettings, options.data.path, !!mParentChildren, oView);
			
			// add the created children to current control instance either as template
			// in case of a binding has been found or as aggregation in case of no
			// binding was found
			if (!jQuery.isEmptyObject(mChildren)) {
				mSettings = options.hash;
				var oAllAggregation = oMetadata.getAllAggregations();
				jQuery.each(mChildren, function(sAggregationName, aChildAggregation) {
					for (var i = 0, l = aChildAggregation.length; i < l; i++) {
						var oChildControl = aChildAggregation[i],
						    oAggregation = oAllAggregation[sAggregationName],
						    bMultiple = oAggregation && oAggregation.multiple;
						if (typeof mSettings[sAggregationName] === "string") {
							// the aggregation is bound => so we create a binding info object 
							// which is used in the createControl function of the TemplateControl
							// to create a proper binding
							var oBindingInfo = sap.ui.base.ManagedObject.bindingParser(mSettings[sAggregationName], oView && oView.getController());
							oBindingInfo.template = oChildControl;
							oNewControl.bindAggregation(sAggregationName, oBindingInfo);
						} else {
							// the aggregation is not bound => so we add nested controls to the aggregation
							if (bMultiple) {
								oNewControl.addAggregation(sAggregationName, oChildControl);
							} else {
								oNewControl.setAggregation(sAggregationName, oChildControl);
							}
						}
					}
				});
			}
			
			// if we find a parent children map the control will not return 
			// the markup - furthermore the control will be added to the parent
			// control in the section above into the desired aggregation
			if (mParentChildren) {
				var sAggregationName = options.hash["sap-ui-aggregation"] || options.data.defaultAggregation;
				mParentChildren[sAggregationName] = mParentChildren[sAggregationName] || [];
				mParentChildren[sAggregationName].push(oNewControl);
				return;
			}
			
			// in case of the root control we return the markup
			return new Handlebars.SafeString(oRM.getHTML(oNewControl));
			
		},
		
		"property": function(context, options) {
			options = options || context;
			
			// use the getter to access the property
			var oRootControl = options.data.rootControl,
			    oMetadata = oRootControl.getMetadata(),
			    sPropertyName = options.hash.name,
			    sGetter = oMetadata.getAllProperties()[sPropertyName]._sGetter;
			return oRootControl[sGetter]();
			
		},
		
		"aggregation": function(context, options) {
			options = options || context;
			
			// extract the required info
			var oRM = options.data.renderManager,
	        oRootControl = options.data.rootControl,
	        oMetadata = oRootControl.getMetadata(),
	        sAggregationName = options.hash.name,
	        sGetter = oMetadata.getAllAggregations()[sAggregationName]._sGetter,
	        aHTML = [];
			
			// retrieve the child elements via the specific getter
			// and create the markup for the nested elements
			var aChildren = oRootControl[sGetter]();
			if (aChildren) {
				for (var i = 0, l = aChildren.length; i < l; i++) {
					// if the aggregation contains nested content => execute it!
					if (options.fn) {
						aHTML.push(options.fn({}, {
							data: {
								renderManager: oRM,
							  rootControl: oRootControl,
								control: aChildren[i]
							}
						}));
					} else {
						// simply render the control
						aHTML.push(oRM.getHTML(aChildren[i]));
					}
				}
			}
			
			// return the markup
			return new Handlebars.SafeString(aHTML.join(""));
			
		},
		
		"event": function(context, options) {
			options = options || context;
		}
			
	};
	return oHelpers;

}());



sap.ui.core.tmpl.HandlebarsTemplate.prototype.createMetadata = function() {

	// compile the template 
	// (TODO - think about avoid to compile the template multiple times)
	var sTemplate = this.getContent(),
	    fnTemplate = this._fnTemplate = this._fnTemplate || Handlebars.compile(sTemplate);
	
	// identify the control metadata: properties, aggregations, ... 
	// the template will be executed with specific options
	var oMetadata = {},
	    mJSONKeys = sap.ui.core.tmpl.TemplateControl.getMetadata().getJSONKeys(),
	    mPrivateAggregations = sap.ui.core.tmpl.TemplateControl.getMetadata().getAllPrivateAggregations();
	
	// the options to identify the properties, aggregations, events, ...
	var oHelpers = {
		"property": function(context, options) {
			options = options || context;
			// identify the property and register non standard properties (anything else than id, style, class)
			var sName = options.hash.name;
			if (sName && sName !== "id" && !mJSONKeys[sName]) {
				oMetadata.properties = oMetadata.properties || {};
				oMetadata.properties[sName] = jQuery.extend({}, {type: "string"}, options.hash);
			} else {
				throw new Error("The property name \"" + sName + "\" is reserved.");
			}
		},
		"aggregation": function(context, options) {
			options = options || context;
			// identify the aggregations and register non standard aggregations (anything else than tooltip, customData, layoutData)
			var sName = options.hash.name;
			if (sName && !mJSONKeys[sName] && !mPrivateAggregations[sName]) {
				options.hash.multiple = options.hash.multiple == "true"; // type correction
				oMetadata.aggregations = oMetadata.aggregations || {};
				oMetadata.aggregations[sName] = jQuery.extend({}, options.hash);
			} else {
				throw new Error("The aggregation name \"" + sName + "\" is reserved.");
			}
		},
		"event": function(context, options) {
			options = options || context;
		}
	};
	
	// ignore the following block helper
	jQuery.each(["each", "if", "unless", "with"], function(iIndex, sValue) {
		oHelpers[sValue]= function() {}; 
	});
	
	// execute the templates with the above options
	fnTemplate({}, {
		helpers: oHelpers
	});
	
	// return the new control metadata
	return oMetadata;

};


sap.ui.core.tmpl.HandlebarsTemplate.prototype.createRenderer = function(oView) {
	
	// compile the template 
	// (TODO - think about avoid to compile the template multiple times)
	var sTemplate = this.getContent(),
	    fnTemplate = this._fnTemplate = this._fnTemplate || Handlebars.compile(sTemplate);
	
	// create the renderer for the control
	var fnRenderer = function(rm, oControl) {
		
		// execute the template with the above options
		var sHTML = fnTemplate(oControl.getContext() || {}, {
			data: {
				renderManager: rm,
				rootControl: oControl,
				view: oView
			},
			helpers: sap.ui.core.tmpl.HandlebarsTemplate.RENDER_HELPERS
		});
		
		// write the markup
		rm.write(sHTML);
		
	};
	
	return fnRenderer;
	
};
}; // end of sap/ui/core/tmpl/HandlebarsTemplate.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Core') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the real core class sap.ui.core.Core of SAPUI5
jQuery.sap.declare("sap.ui.core.Core");













if ( !jQuery.sap.isDeclared('sap.ui.core.Element') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides the base class for all controls and UI elements.
jQuery.sap.declare("sap.ui.core.Element");






/**
 * Constructs and initializes an UI Element with the given <code>sId</code> and settings.
 *
 * If the optional <code>mSettings</code> are given, they must be a JSON-like object (object literal)
 * that defines values for properties, aggregations, associations or events keyed by their name.
 *
 * <b>Valid Names:</b>
 *
 * The property (key) names supported in the object literal are exactly the (case sensitive)
 * names documented in the JSDoc for the properties, aggregations, associations and events
 * of the control and its base classes. Note that for  0..n aggregations and associations this
 * usually is the plural name, whereas it is the singular name in case of 0..1 relations.
 *
 * If a key name is ambiguous for a specific control class (e.g. a property has the same
 * name as an event), then this method prefers property, aggregation, association and
 * event in that order. To resolve such ambiguities, the keys can be prefixed with
 * <code>aggregation:</code>, <code>association:</code> or <code>event:</code>.
 * In that case the keys must be quoted due to the ':'.
 *
 * Each subclass should document the set of supported names in its constructor documentation.
 *
 * <b>Valid Values:</b>
 *
 * <ul>
 * <li>for normal properties, the value has to be of the correct simple type (no type conversion occurs)
 * <li>for 0..1 aggregations, the value has to be an instance of the aggregated control or element type
 * <li>for 0..n aggregations, the value has to be an array of instances of the aggregated type
 * <li>for 0..1 associations, an instance of the associated type or an id (string) is accepted
 * <li>0..n associations are not supported yet
 * <li>for events either a function (event handler) is accepted or an array of length 2
 *     where the first element is a function and the 2nd element is an object to invoke the method on.
 * </ul>
 *
 * @param {string} [sId] id for the new control; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial property values, aggregated objects etc. for the new element
 *
 * @class Base Class for Elements.
 * @extends sap.ui.base.ManagedObject
 * @author SAP
 * @version 1.18.9
 * @public
 * @name sap.ui.core.Element
 */
sap.ui.base.ManagedObject.extend("sap.ui.core.Element", {

	metadata : {
		stereotype : "element",
	  "abstract" : true,
	  publicMethods : [ "getId", "getMetadata", "getTooltip_AsString", "getTooltip_Text", "getModel", "setModel", "hasModel", "bindElement", "unbindElement", "getElementBinding", "prop", "getLayoutData", "setLayoutData" ],
	  library : "sap.ui.core",
	  properties : {
		// TODO can't yet declare id as a property: would show up in ControlTree and applySettings would allow to modify id
		// id : {name : "id", type : "string", group : "Identification", defaultValue : '', readOnly : true}
	  },
	  aggregations : {
		tooltip : {name : "tooltip", type : "sap.ui.core.TooltipBase", altTypes : ["string"], multiple : false},
		customData : {name : "customData", type : "sap.ui.core.CustomData", multiple : true, singularName : "customData"},
		layoutData : {name : "layoutData", type : "sap.ui.core.LayoutData", multiple : false, singularName : "layoutData"}
	  },
	  associations : {},
	  events : {}
	},

	constructor : function(sId, mSettings) {
		sap.ui.base.ManagedObject.apply(this, arguments);
	},

	renderer : null // Element has no renderer

}, /* Metadata constructor */ sap.ui.core.ElementMetadata);

/**
 * Creates a new subclass of class sap.ui.core.Element with name <code>sClassName</code>
 * and enriches it with the information contained in <code>oClassInfo</code>.
 *
 * <code>oClassInfo</code> might contain the following:
 * <ul>
 * <li><code>metadata:</code> an (optional) object literal containing meta information about the class.
 * The information in the object literal will be wrapped by an instance of ElementMetadata
 * and might contain the following information:
 * <ul>
 * <li>all values accepted for metadata as documented for the {@link sap.ui.base.Object.extend Object.extend} method</li>
 * <li>library: {string} (optional) name of the library that contains the element/control
 * <li>properties: a map of property info objects, mapped by the property name
 *     Each info object should be a simple object literal and may contain the following information
 *     <ul>
 *     <li>type {string} optional type of the property, defaults to type "string"
 *     <li>[defaultValue] {any} default value of the property. When omitted, defaults to the default value for the type
 *     <li>group {string} optional semantic group of the property. Defaults to "Misc"
 *     </ul>
 *     If the property info object is not an object literal, it is assumed to be a string and
 *     interpreted as the type of the property. All other informations use their default values.
 * <li>aggregations: a map of aggregation info objects, mapped by the aggregation name
 *     By convention, the name should be a singular name for aggregations of cardinality 0..1 and
 *     should be a plural name for aggregations of cardinality 0..n.
 *
 *     The info object should contain the following information
 *     <ul>
 *     <li>type {string} (optional) type of the aggregated controls/elements, defaults to sap.ui.core.Control
 *     <li>altTypes {string[]} (optional) alternative primitive types that the aggregation can have (like string etc.). Defaults to no alternative types.
 *     <li>multiple {boolean} (optional) information about the cardinality, defaults to true (multiple aggregation)
 *     <li>singularName {string} (optional) singular name for 0..n aggregations. If not specified, a singular name is guessed from the plural name.
 *     </ul>
 *     If the aggregation info object is not an object literal, it is assumed to be a string and
 *     interpreted as the type of the aggregation. All other informations use their default values.
 * <li>associations: a map of association info objects, mapped by the association name
 *     By convention, the name should be a singular name for aggregations of cardinality 0..1 and
 *     should be a plural name for aggregations of cardinality 0..n.
 *
 *     The info object should contain the following information
 *     <ul>
 *     <li>type {string} type of the associated controls/elements, defaults to sap.ui.core.Control
 *     <li>multiple {boolean} (optional) information about the cardinality, defaults to false (single aggregation)
 *     <li>singularName {string} (optional) singular name for 0..n aggregations. If not specified, a singular name is guessed from the plural name.
 *     </ul>
 *     If the association info object is not an object literal, it is assumed to be a string and
 *     interpreted as the type of the aggregation. All other informations then use their default values.
 * <li>events: a map of event info objects, mapped by the event name
 *     The info object can contain the following information
 *     <ul>
 *     <li><code>allowPreventDefault:</code> {boolean} whether the control allows to prevent its default behavior for this event (defaults to false) </li>
 *     </ul>
 * </ul>
 * For all properties, aggregations, associations and events, the usual access methods are created and added to the public facade.
 * They don't need to be listed in the publicMethods array.
 * </li>
 *
 * <li><code>constructor:</code> a function that serves as a constructor function for the new element class.
 * If no constructor function is given, the framework creates a default implementation that delegates all
 * its arguments to the constructor function of the base class.
 * <b>Note:</b> most of the time, subclasses of Element don't need to specify their own constructor function.
 * They should use the symmetric {@link #init} and {@link #exit} hooks instead.
 * </li>
 *
 * <li><code>renderer:</code> definition of a renderer. This can be any of the following
 * <ul>
 * <li>the class name of a renderer class (a string)</li>
 * <li>a render function with signature <code>function(oRenderManager, oControl)</code> that implements the rendering for the new class</li>
 * <li>an object literal that contains functions/properties that should be mixed into a new render class which is
 * created as a subclass of the renderer of the current class.</li>
 * </ul>
 * <b>Note:</b> usually only controls have a renderer. But to keep the control creation APIs simple and to honor future
 * extensions of the current policy, the definition of a renderer is supported for direct subclasses of Element as well.
 * </li>
 *
 * <li><i>any-other-name:</i> any other property in the <code>oClassInfo</code> is copied into the prototype
 * object of the newly created class. Callers can thereby add methods or properties to all instances of the
 * class. But be aware that the given values are shared between all instances of the class. Usually, it doesn't
 * make sense to use primitive values here other than to declare public constants.
 *
 * All methods added this way and whose name is not 'init' nor 'exit' nor does it start with an underscore ('_')
 * nor with the prefix 'on' are assumed to be public methods and are automatically added to the list of public facade methods.
 * </ul>
 *
 * The prototype object of the newly created class uses the same prototype as instances of the base class
 * (prototype chaining).
 *
 * A metadata object is always created, even if there is no <code>metadata</code> entry in the <code>oClassInfo</code>
 * object. A getter for the metadata is always attached to the prototype and to the class (constructor function)
 * itself.
 *
 * Last but not least, with the third argument <code>FNMetaImpl</code> the constructor of a metadata class
 * can be specified. Instances of that class will be used to represent metadata for the newly created class
 * and for any subclass created from it. Typically, only frameworks will use this parameter to enrich the
 * metadata for a new class hierarchy they introduce (as done by  {@link sap.ui.core.Element Element}).
 *
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] structured object with informations about the class
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.Element.extend
 * @function
 * @since 1.3.1
 */

/**
 * Creates metadata for an UI Element by extending the Object Metadata.
 *
 * In addition to the entries defined by {@link sap.ui.base.Object.defineClass}, the following
 * entries can be specified in the static info object:
 *
 * <ul>
 * <li>library: {string} name of the library that contains the element/control
 * <li>properties: a map of property info objects, mapped by the property name
 *     Info object should contain the following information
 *     <ul>
 *     <li>name {string} name of the property (redundant to map key)
 *     <li>type {string} type of the property
 *     <li>[defaultValue] {any} default value of the property. Can be omitted
 *     </ul>
 * <li>aggregations: a map of aggregation info objects, mapped by the aggregation name
 *     Info object should contain the following information
 *     <ul>
 *     <li>name {string} name of the aggregation, singular for 0..1, plural for 0..n
 *     <li>type {string} type of the aggregated controls/elements
 *     <li>multiple {boolean}
 *     <li>singularName {string} singular name for 0..n aggregations
 *     </ul>
 * <li>associations: a map of association info objects, mapped by the association name
 *     Info object should contain the following information
 *     <ul>
 *     <li>name {string} name of the association, singular for 0..1, plural for 0..n
 *     <li>type {string} type of the associated controls/elements
 *     <li>multiple {boolean}
 *     <li>singularName {string} singular name for 0..n associations
 *     </ul>
 * <li>events: map from event names to event names
 * </ul>
 *
 * @see sap.ui.core.Object.defineClass
 *
 * @param {string} sClassName name of the class to build the metadata for
 * @param {object} oStaticInfo static information used to build the metadata
 * @param {function} [fnMetaImpl] constructor to be used for the metadata
 * @return {object} the created metadata
 * @static
 * @public
 * @deprecated Since 1.3.1. Use the static <code>extend</code> method of the desired base class (e.g. {@link sap.ui.core.Element.extend})
 */
sap.ui.core.Element.defineClass = function(sClassName, oStaticInfo, fnMetaImpl) {
	// create and attach metadata but with an Element specific implementation
	return sap.ui.base.Object.defineClass(sClassName, oStaticInfo, fnMetaImpl || sap.ui.core.ElementMetadata);
};

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 */
sap.ui.core.Element.prototype.getInterface = function() {
	return this;
};

/**
 * Handles the given browser event.
 * @private
 */
sap.ui.core.Element.prototype._handleEvent = function (oEvent) {
	var sHandlerName = "on" + oEvent.type;
	this._callEventHandles(this.aBeforeDelegates, sHandlerName, oEvent, true);
	this._callEventHandles([this], sHandlerName, oEvent);
	this._callEventHandles(this.aDelegates, sHandlerName, oEvent, true);
};

/**
 * Calls event handler of the given event handles with the given browser event.
 * @private
 */
sap.ui.core.Element.prototype._callEventHandles = function (aHandles, sHandlerName, oEvent, bDelegateHolder) {
	if (aHandles.length > 0) {
		for (var i = 0; i < aHandles.length; i++) {
			if (oEvent.isImmediateHandlerPropagationStopped()) {
				break;
			}
			var oHandle = bDelegateHolder ? aHandles[i].oDelegate : aHandles[i];
			var oThis = (bDelegateHolder && aHandles[i].vThis) ? aHandles[i].vThis : oHandle;
			if (oThis === true) { // special case, means the control should be the context
				oThis = this;
			}
			if (oHandle[sHandlerName]) {
				oHandle[sHandlerName].call(oThis, oEvent);
			}
		}
	}
};


// Element is granted "friend" access by Core for (de-)registration
/**
 * Registers this instance of sap.ui.core.Element with the Core.
 *
 * The implementation of this method is provided with "friend" access by Core.
 * @see sap.ui.core.Core.constructor
 *
 * @function
 * @name sap.ui.core.Element.prototype.register
 * @private
 */
//sap.ui.core.Element.prototype.register = function() {...}

/**
 * Deregisters this instance of sap.ui.core.Element from the Core.
 *
 * The implementation of this method is provided with "friend" access by Core.
 * @see sap.ui.core.Core.constructor
 *
 * @function
 * @name sap.ui.core.Element.prototype.deregister
 * @private
 */
//sap.ui.core.Element.prototype.deregister = function() {...}

/**
 * Initializes the element instance after creation.
 *
 * Applications must not call this hook method directly, it is called by the framework
 * while the constructor of an element is executed.
 *
 * Subclasses of Element should override this hook to implement any necessary initialization.
 *
 * @function
 * @name sap.ui.core.Element.prototype.init
 * @protected
 */
//sap.ui.core.Element.prototype.init = function() {};

/**
 * Cleans up the element instance before destruction.
 *
 * Applications must not call this hook method directly, it is called by the framework
 * when the element is {@link #destroy destroyed}.
 *
 * Subclasses of Element should override this hook to implement any necessary cleanup.
 *
 * @function
 * @name sap.ui.core.Element.prototype.exit
 * @protected
 */
//sap.ui.core.Element.prototype.exit = function() {};

/**
 * Creates a new Element from the given data.
 *
 * If vData is an Element already, that element is returned.
 * If vData is an object (literal), then a new element is created with vData as settings.
 * The type of the element is either determined by a "Type" entry in the vData or
 * by a type information in the oKeyInfo object
 * @param {sap.ui.core.Element|object} vData the data to create the element from
 * @param {object} [oKeyInfo] an entity information (e.g. aggregation info)
 * @param {string} [oKeyInfo.type] type info for the entity
 * @public
 * @static
 */
sap.ui.core.Element.create = function(vData, oKeyInfo) {
	if ( !vData || vData instanceof sap.ui.core.Element || typeof vData !== "object" || vData instanceof String) {
		return vData;
	}

	function getClass(vType) {
		if ( typeof vType === "function" ) {
			return vType;
		} 
		if (typeof vType === "string" ) {
			return jQuery.sap.getObject(vType);
		}
	}

	var fnClass = getClass(vData.Type) || getClass(oKeyInfo && oKeyInfo.type);
	if ( typeof fnClass === "function" ) {
		return new fnClass(vData);
	}

	// we don't know how to create the Element from vData, so fail
	// extension points could be integrated here
	var message = "Don't know how to create an Element from " + vData + " (" + (typeof vData) + ")";
	jQuery.sap.log.fatal(message);
	throw new Error(message);
};


/**
 * Returns a simple string representation of this element.
 *
 * Mainly useful for tracing purposes.
 * @public
 * @return {string} a string descripition of this element
 */
sap.ui.core.Element.prototype.toString = function() {
	if ( this.getMetadata ) {
		return "Element " + this.getMetadata().getName() + "#" + this.sId;
	}
	else {
		return "Element {unknown class}#" + this.sId;
	}
};


/**
 * Returns the best suitable DOM Element that represents this UI5 Element.
 * By default the DOM Element with the same ID as this Element is returned.
 * Subclasses should override this method if the lookup via id is not sufficient.
 *
 * Note that such a DOM Element does not necessarily exist in all cases.
 * Some elements or controls might not have a DOM representation at all (e.g.
 * a naive FlowLayout) while others might not have one due to their current
 * state (e.g. an initial, not yet rendered control).
 *
 * If an ID suffix is given, the ID of this Element is concatenated with the suffix 
 * (separated by a single dash) and the DOM node with that compound ID will be returned.
 * This matches the UI5 naming convention for named inner DOM nodes of a control. 
 * 
 * @param {string} [sSuffix] ID suffix to get the DOMRef for
 * @return {Element} The Element's DOM Element sub DOM Element or null
 * @protected
 */
sap.ui.core.Element.prototype.getDomRef = function(sSuffix) {
	return jQuery.sap.domById(sSuffix ? this.getId() + "-" + sSuffix : this.getId());
};

/**
 * Returns the best suitable DOM node that represents this Element wrapped as jQuery object.
 * I.e. the element returned by {@link sap.ui.core.Element#getDomRef} is wrapped and returned.
 *
 * If an ID suffix is given, the ID of this Element is concatenated with the suffix 
 * (separated by a single dash) and the DOM node with that compound ID will be wrapped by jQuery.
 * This matches the UI5 naming convention for named inner DOM nodes of a control. 
 * 
 * @param {string} [sSuffix] ID suffix to get a jQuery object for
 * @return {jQuery} The jQuery wrapped element's DOM reference
 * @protected
 */

sap.ui.core.Element.prototype.$ = function(sSuffix) {
	return jQuery(this.getDomRef(sSuffix));
};

/**
 * Checks whether this element has an active parent.
 *
 * @type boolean
 * @return true if this element has an active parent
 * @private
 */
sap.ui.core.Element.prototype.isActive = function() {
	return this.oParent && this.oParent.isActive();
};

/**
 * This function either calls set[sPropertyName] or get[sPropertyName] with the specified property name
 * depending if an <code>oValue</code> is provided or not.
 *
 * @param {string}  sPropertyName name of the property to set
 * @param {any}     [oValue] value to set the property to
 * @return {any|sap.ui.core.Element} Returns <code>this</code> to allow method chaining in case of setter and the property value in case of getter
 * @public
 */
sap.ui.core.Element.prototype.prop = function(sPropertyName, oValue) {

	var oPropertyInfo = this.getMetadata().getJSONKeys()[sPropertyName];
	if (oPropertyInfo) {
		if (arguments.length == 1) {
			// getter
			return this[oPropertyInfo._sGetter]();
		} else {
			// setter
			this[oPropertyInfo._sMutator](oValue);
			return this;
		}
	}
};


/**
 * Getter for aggregation <code>customData</code>.<br/>
 *
 * @return {sap.ui.core.CustomData[]}
 * @function
 * @name sap.ui.core.Element.prototype.getCustomData
 * @public
 */

/**
 * Inserts a CustomData element into the aggregation named <code>customData</code>.
 *
 * @param {sap.ui.core.CustomData}
 *          oCustomData the customData to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the customData should be inserted at; for
 *             a negative value of <code>iIndex</code>, the customData is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the customData is inserted at
 *             the last position
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @function
 * @name sap.ui.core.Element.prototype.insertCustomData
 * @public
 */

/**
 * Adds some customData element <code>oCustomData</code>
 * to the aggregation named <code>customData</code>.
 *
 * @param {sap.ui.core.CustomData}
 *            oCustomData the customData to add; if empty, nothing is inserted
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @function
 * @name sap.ui.core.Element.prototype.addCustomData
 * @public
 */

/**
 * Removes a CustomData element from the aggregation named <code>customData</code>.
 *
 * @param {int | string | sap.ui.core.CustomData} vCustomData the customData to remove or its index or id
 * @return {sap.ui.core.CustomData} the removed customData element or null
 * @function
 * @name sap.ui.core.Element.prototype.removeCustomData
 * @public
 */

/**
 * Removes all the data elements in the aggregation named <code>customData</code>.<br/>
 *
 * @return {sap.ui.core.CustomData[]} an array of the removed data elements (might be empty)
 * @function
 * @name sap.ui.core.Element.prototype.removeAllCustomData
 * @public
 */

/**
 * Checks for the provided <code>sap.ui.core.CustomData</code> in the aggregation named <code>customData</code>
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.CustomData}
 *            oCustomData the customData whose index is looked for.
 * @return {int} the index of the provided customData element in the aggregation if found, or -1 otherwise
 * @function
 * @name sap.ui.core.Element.prototype.indexOfCustomData
 * @public
 */

/**
 * Destroys all the customData elements in the aggregation
 * named <code>customData</code>.
 * @return {sap.ui.core.Element} <code>this</code> to allow method chaining
 * @function
 * @name sap.ui.core.Element.prototype.destroyCustomData
 * @public
 */


/// cyclic dependency
//jQuery.sap.require("sap.ui.core.TooltipBase"); /// cyclic dependency


/**
 * This triggers immediate rerendering of its parent and thus of itself and its children.<br/> As <code>sap.ui.core.Element</code> "bubbles up" the
 * rerender, changes to child-<code>Elements</code> will also result in immediate rerendering of the whole sub tree.
 * @protected
 */
sap.ui.core.Element.prototype.rerender = function() {
	if (this.oParent) {
		this.oParent.rerender();
	}
};


/**
 * Returns the UI area of this element, if any.
 *
 * @return {sap.ui.core.UIArea} The UI area of this element or null
 * @private
 */
sap.ui.core.Element.prototype.getUIArea = function() {
	return this.oParent ? this.oParent.getUIArea() : null;
};

/**
 * Cleans up the resources associated with this element and all its children.
 *
 * After an element has been destroyed, it can no longer be used in the UI!
 *
 * Applications should call this method if they don't need the element any longer.
 *
 * @param {boolean}
 *            [bSuppressInvalidate] if true, the UI element is not marked for redraw
 * @public
 */
sap.ui.core.Element.prototype.destroy = function(bSuppressInvalidate) {

	sap.ui.base.ManagedObject.prototype.destroy.call(this, bSuppressInvalidate);

	// remove this control from DOM, e.g. if there is no parent (e.g. Dialog or already removed control) or this.sParentAggregationName is not properly set
	this.$().remove();
};


/**
 * Fires the given event and notifies all listeners. Listeners must not change
 * the content of the event.
 *
 * @param {string} sEventId the event id
 * @param {object} mParameters the parameter map
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Element.prototype.fireEvent = function(sEventId, mParameters) {
	// clone 'arguments' and modify clone to be strict mode compatible
	var aArgs = Array.prototype.slice.apply(arguments);
	// TODO 'id' is somewhat redundant to getSource(), but it is commonly used - fade out with next major release?
	aArgs[1] = mParameters = mParameters || {};
	mParameters.id = mParameters.id || this.getId();
	// 'aArgs' is necessary, as the EventProvider.fireEvent signature has more parameters
	return sap.ui.base.EventProvider.prototype.fireEvent.apply(this, aArgs);
};


/**
 * Adds a delegate that listens to the events of this element.
 * 
 * Note that the default behavior (delegate attachments are not cloned when a control is cloned) is usually the desired behavior in control development 
 * where each control instance typically creates a delegate and adds it to itself. (As opposed to application development where the application may add 
 * one delegate to a template and then expects aggregation binding to add the same delegate to all cloned elements.)
 *
 * To avoid double registrations, all registrations of the given delegate are first removed and then the delegate is added.
 * 
 * @param {object} oDelegate the delegate object
 * @param {boolean} [bCallBefore=false] if true, the delegate event listeners are called before the event listeners of the element; default is "false". In order to also set bClone, this parameter must be given.
 * @param {object} [oThis] if given, this object will be the "this" context in the listener methods; default is the delegate object itself
 * @param {boolean} [bClone=false] if true, this delegate will also be attached to any clones of this element; default is "false"
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @private
 */
sap.ui.core.Element.prototype.addDelegate = function (oDelegate, bCallBefore, oThis, bClone) {
	this.removeDelegate(oDelegate);
	
	// shift parameters
	if (typeof bCallBefore === "object") {
		bClone = oThis;
		oThis = bCallBefore;
		bCallBefore = false;
	}
	
	if (typeof oThis === "boolean") {
		bClone = oThis;
		oThis = undefined;
	}

	(bCallBefore ? this.aBeforeDelegates : this.aDelegates).push({oDelegate:oDelegate, bClone: !!bClone, vThis: ((oThis === this) ? true : oThis)}); // special case: if this element is the given context, set a flag, so this also works after cloning (it should be the cloned element then, not the given one)
	return this;
};

/**
 * Removes the given delegate from this element.
 *
 * This method will remove all registrations of the given delegate, not only one.
 * If the delegate was marked to be cloned and this element has been cloned, the delegate will not be removed from any clones.
 * 
 * @param {object} oDelegate the delegate object
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @private
 */
sap.ui.core.Element.prototype.removeDelegate = function (oDelegate) {
	for (var i=0;i<this.aDelegates.length;i++) {
		if (this.aDelegates[i].oDelegate==oDelegate) {
			this.aDelegates.splice(i,1);
		}
	}
	for (var i=0;i<this.aBeforeDelegates.length;i++) {
		if (this.aBeforeDelegates[i].oDelegate==oDelegate) {
			this.aBeforeDelegates.splice(i,1);
		}
	}
	return this;
};


/**
 * Adds a delegate that listens to the events that are fired on this element (as opposed to events which are fired BY this element).
 * 
 * When this element is cloned, the same delegate will be added to all clones. This behavior is well-suited for applications which want to add delegates
 * that also work with templates in aggregation bindings.
 * For control development the internal "addDelegate" method which does not clone delegates by default may be more suitable, as typically each control instance takes care of its own delegates.
 *
 * To avoid double registrations, all registrations of the given delegate are first
 * removed and then the delegate is added.
 *
 * @param {object} oDelegate the delegate object
 * @param {object} [oThis] if given, this object will be the "this" context in the listener methods; default is the delegate object itself
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @since 1.9.0
 * @public
 */
sap.ui.core.Element.prototype.addEventDelegate = function (oDelegate, oThis) {
	return this.addDelegate(oDelegate, false, oThis, true);
};

/**
 * Removes the given delegate from this element.
 *
 * This method will remove all registrations of the given delegate, not only one.
 * 
 * @param {object} oDelegate the delegate object
 * @return {sap.ui.core.Element} Returns <code>this</code> to allow method chaining
 * @since 1.9.0
 * @public
 */
sap.ui.core.Element.prototype.removeEventDelegate = function (oDelegate) {
	return this.removeDelegate(oDelegate);
};

/**
 * Returns the DOM reference that should get the focus.
 * 
 * To be overwritten by the specific control method.
 * 
 * @return {DOMNode} Returns the DOM reference that should get the focus
 * @protected
 */
sap.ui.core.Element.prototype.getFocusDomRef = function () {
	return this.getDomRef() || null;
};

/**
 * Sets the focus to the stored focus DOM reference
 * @private
 */
sap.ui.core.Element.prototype.focus = function () {
	var oFocusDomRef = this.getFocusDomRef();

	if(oFocusDomRef) {
		try {
			oFocusDomRef.focus();
		} catch (ex) { // IE8 fails on focusing certain elements; IE9+10 and all other current browsers don't fail
			// the element does not exist or is not focusable; there is no information what to focus instead
			var id = oFocusDomRef.id ? " (id: " + oFocusDomRef.id + ")" : " ";
			jQuery.sap.log.warning("DOM element" + id + " in " + this.toString() + " which should be focused cannot be focused: " + ex.message);
		}
	}
};

/**
 * Returns an object representing the serialized focus information
 * To be overwritten by the specific control method
 * @type object
 * @return an object representing the serialized focus information
 * @protected
 */
sap.ui.core.Element.prototype.getFocusInfo = function () {
	return {id:this.getId()};
};

/**
 * Applies the focus info.
 * 
 * To be overwritten by the specific control method.
 * 
 * @param {object} oFocusInfo
 * @protected
 */
sap.ui.core.Element.prototype.applyFocusInfo = function (oFocusInfo) {
	this.focus();
	return this;
};


/**
 * @see sap.ui.core.Element#setTooltip
 * @private
 */
sap.ui.core.Element.prototype._refreshTooltipBaseDelegate = function (oTooltip) {
	var oOldTooltip = this.getTooltip();
	// if the old tooltip was a Tooltip object, remove it as a delegate
	if (oOldTooltip instanceof sap.ui.core.TooltipBase){
		this.removeDelegate(oOldTooltip);
	}
	// if the new tooltip is a Tooltip object, add it as a delegate
	if (oTooltip instanceof sap.ui.core.TooltipBase){
		oTooltip._currentControl = this;
		this.addDelegate(oTooltip);
	}
};


/**
 * Sets a new tooltip for this object. The tooltip can either be a simple string
 * (which in most cases will be rendered as the <code>title</code> attribute of this
 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
 *
 * If a new tooltip is set, any previously set tooltip is deactivated.
 *
 * @param {string|sap.ui.core.TooltipBase} oTooltip.
 * @public
 */
sap.ui.core.Element.prototype.setTooltip = function(oTooltip) {

	this._refreshTooltipBaseDelegate(oTooltip);
	this.setAggregation("tooltip", oTooltip);

	return this;
};

/**
 * Returns the tooltip for this element if any or an undefined value.
 * The tooltip can either be a simple string or a subclass of
 * {@link sap.ui.core.TooltipBase}.
 *
 * Callers that are only interested in tooltips of type string (e.g. to render
 * them as a <code>title</code> attribute), should call the convenience method
 * {@link #getTooltip_AsString} instead. If they want to get a tooltip text no
 * matter where it comes from (be it a string tooltip or the text from a TooltipBase
 * instance) then they could call {@link #getTooltip_Text} instead.
 *
 * @return {string|sap.ui.core.TooltipBase} The tooltip for this Element.
 * @public
 */
sap.ui.core.Element.prototype.getTooltip = function() {
	return this.getAggregation("tooltip");
};

sap.ui.core.Element.runWithPreprocessors = sap.ui.base.ManagedObject.runWithPreprocessors;

/**
 * Returns the tooltip for this element but only if it is a simple string.
 * Otherwise an undefined value is returned.
 *
 * @return {string} string tooltip or undefined
 * @public
 */
sap.ui.core.Element.prototype.getTooltip_AsString = function() {
	var oTooltip = this.getTooltip();
	if (typeof oTooltip === "string" || oTooltip instanceof String ) {
		return oTooltip;
	}
	return undefined;
};

/**
 * Returns the main text for the current tooltip or undefined if there is no such text.
 * If the tooltip is an object derived from sap.ui.core.Tooltip, then the text property
 * of that object is returned. Otherwise the object itself is returned (either a string
 * or undefined or null).
 *
 * @return {string} text of the current tooltip or undefined
 * @public
 */
sap.ui.core.Element.prototype.getTooltip_Text = function() {
	var oTooltip = this.getTooltip();
	if (oTooltip && typeof oTooltip.getText === "function" ) {
		return oTooltip.getText();
	}
	return oTooltip;
};

/**
 * Returns the runtime metadata for this UI element.
 *
 * When using the defineClass method, this function is automatically created and returns
 * a runtime representation of the design time metadata.
 *
 * @function
 * @name sap.ui.core.Element.prototype.getMetadata
 * @return {object} runtime metadata
 * @public
 */
// sap.ui.core.Element.prototype.getMetadata = sap.ui.base.Object.ABSTRACT_METHOD;

//data container

(function(){

	/**
	 * Returns the data object with the given key
	 */
	var getDataObject = function(element, key) {
		var aData = element.getAggregation("customData");
		if (aData) {
			for (var i = 0; i < aData.length; i++) {
				if (aData[i].getKey() == key) {
					return aData[i];
				}
			}
		}
		return null;
	};

	/**
	 * Contains the data modification logic
	 */
	var setData = function(element, key, value, writeToDom) {

		// DELETE
		if (value === null) { // delete this property
			var dataObject = getDataObject(element, key);
			if (!dataObject) {
				return;
			}

			var dataCount = element.getAggregation("customData").length;
			if (dataCount == 1) {
				element.destroyAggregation("customData", true); // destroy if there is no other data
			} else {
				element.removeAggregation("customData", dataObject, true);
				dataObject.destroy();
			}

			// ADD or CHANGE
		} else {
			var dataObject = getDataObject(element, key);
			if (dataObject) {
				dataObject.setValue(value);
				dataObject.setWriteToDom(writeToDom);
			} else {
				var dataObject = new sap.ui.core.CustomData({key:key,value:value, writeToDom:writeToDom});
				element.addAggregation("customData", dataObject, true);
			}
		}
	};

	/**
	 * Attaches custom data to an Element or retrieves attached data.
	 *
	 * Usage:
	 *    data("myKey", myData)
	 * attaches myData (which can be any JS data type, e.g. a number, a string, an object, or a function) to this element, under the given key "myKey". If the key already exists,the value will be updated.
	 *
	 *    data("myKey", myData, writeToDom)
	 * attaches myData to this element, under the given key "myKey" and (if writeToDom is true) writes key and value to the HTML. If the key already exists,the value will be updated. While oValue can be any JS data type to be attached, it must be a string to be also written to DOM. The key must also be a valid HTML attribute name (it must conform to sap.ui.core.ID and may contain no colon) and may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
	 *
	 *    data("myKey")
	 * retrieves whatever data has been attached to this Element (using the key "myKey") before
	 *
	 *    data("myKey", null)
	 * removes whatever data has been attached to this Element (using the key "myKey") before
	 *
	 *    data(null)
	 * removes all data
	 *
	 *    data()
	 * returns all data, as a map
	 *
	 * @public
	 */
	sap.ui.core.Element.prototype.data = function() {
		var argLength = arguments.length;

		if (argLength == 0) {                    // return ALL data as a map
			var aData = this.getAggregation("customData"),
				result = {};
			if (aData) {
				for (var i = 0; i < aData.length; i++) {
					result[aData[i].getKey()] = aData[i].getValue();
				}
			}
			return result;

		} else if (argLength == 1) {
			var arg0 = arguments[0];

			if (arg0 === null) {                  // delete ALL data
				this.destroyAggregation("customData", true); // delete whole map
				return this;

			} else if (typeof arg0 == "string") { // return requested data element
				var dataObject = getDataObject(this, arg0);
				return dataObject ? dataObject.getValue() : null;

			} else if (typeof arg0 == "object") { // should be a map - set multiple data elements
				for (var key in arg0) { // TODO: improve performance and avoid executing setData multiple times
					setData(this, key, arg0[key]);
				}
				return this;

			} else {
				// error, illegal argument
				throw new Error("When data() is called with one argument, this argument must be a string, an object or null, but is " + (typeof arg0) + ":" + arg0 + " (on UI Element with ID '" + this.getId() + "')");
			}

		} else if (argLength == 2) {            // set or remove one data element
			setData(this, arguments[0], arguments[1]);
			return this;

		} else if (argLength == 3) {            // set or remove one data element
			setData(this, arguments[0], arguments[1], arguments[2]);
			return this;

		} else {
			// error, illegal arguments
			throw new Error("data() may only be called with 0-3 arguments (on UI Element with ID '" + this.getId() + "')");
		}
	};

})();

/** 
 * Clone delegates
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned element id
 * @param {Astring[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @return {sap.ui.base.ManagedObject} reference to the newly created clone
 * @protected
 */
sap.ui.core.Element.prototype.clone = function(sIdSuffix, aLocalIds){

	var oClone = sap.ui.base.ManagedObject.prototype.clone.apply(this, arguments);
	// Clone delegates
	for ( var i = 0; i < this.aDelegates.length; i++) {
		if (this.aDelegates[i].bClone) {
			oClone.aDelegates.push(this.aDelegates[i]);
		}
	}
	for ( var i = 0; i < this.aBeforeDelegates.length; i++) {
		if (this.aBeforeDelegates[i].bClone) {
			oClone.aBeforeDelegates.push(this.aBeforeDelegates[i]);
		}
	}

	return oClone;
};

/**
* Searches and returns an array of child elements and controls which are
* referenced within an aggregation or aggregations of child elements/controls.
* This can be either done recursive or not.
* <br>
* <b>Take care: this operation might be expensive.</b>
* @param {boolean}
*          bRecursive true, if all nested children should be returned.
* @return {sap.ui.core.Element[]} array of child elements and controls
* @public
*/
sap.ui.core.Element.prototype.findElements = function(bRecursive) {
	var aControls = sap.ui.base.ManagedObject.prototype.findAggregatedObjects.call(this, bRecursive);
	return aControls;
};

/**
 * Sets the {@link sap.ui.core.LayoutData} defining the layout constraints 
 * for this control when it is used inside a layout.
 *
 * @function
 * @name sap.ui.core.Element.prototype.setLayoutData
 * @public
 */
sap.ui.core.Element.prototype.setLayoutData = function(oLayoutData) {
	this.setAggregation("layoutData", oLayoutData, true); // No invalidate because layout data changes does not affect the control / element itself
	var oLayout = this.getParent();
	if(oLayout){
		var oEvent = jQuery.Event("LayoutDataChange");
		oEvent.srcControl = this;
		oLayout._handleEvent(oEvent);
	}
	return this;
};

/**
 * Returns the {@link sap.ui.core.LayoutData} defining the layout constraints 
 * for this control when it is used inside a layout.
 *
 * @function
 * @name sap.ui.core.Element.prototype.getLayoutData
 * @public
 */

/**
 * Allows the parent of a control to enhance the aria information while rendering
 *
 * This function is called in RenderManager writeAccessibilityState for the parent
 * of the control if the function is implemented by the parent.
 *
 * @function
 * @name sap.ui.core.Element.prototype.enhanceAccessibilityState
 * @param {element} oElement the control/element for taht aria properties are rendered
 * @param {array} mAriaProps array of aria properties
 * @return {array} array of aria properties
 * @protected
 * @abstract
 */

/**
 * Bind the object to the referenced entity in the model, which is used as the binding context
 * to resolve bound properties or aggregations of the object itself and all of its children
 * relatively to the given path.
 * If a relative binding path is used, this will be applied whenever the parent context changes.
 * @param {string} sPath the binding path
 * @param {object} [mParameters] map of additional parameters for this binding
 *
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public 
 */
sap.ui.core.Element.prototype.bindElement = function(sPath, mParameters) {
	return this.bindObject(sPath, mParameters);
};

/**
 * Removes the defined binding context of this object, all bindings will now resolve
 * relative to the parent context again.
 *
 * @return {sap.ui.base.ManagedObject} reference to the instance itself
 * @public
 */
sap.ui.core.Element.prototype.unbindElement = function(sModelName) {
	return this.unbindObject(sModelName);
};

/**
 * Get the element binding object for a specific model
 *
 * @param {String} sModelName the name of the model
 * @return {Binding} the element binding for the given model name
 * @public
 */
sap.ui.core.Element.prototype.getElementBinding = function(sModelName){
	return this.getObjectBinding(sModelName);
};


}; // end of sap/ui/core/Element.js

if ( !jQuery.sap.isDeclared('sap.ui.core.Control') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides base class sap.ui.core.Control for all controls
jQuery.sap.declare("sap.ui.core.Control");

//jQuery.sap.require("sap.ui.core.RenderManager"); // cyclic

/**
 * Creates and initializes a new control with the given <code>sId</code> and settings.
 *
 * The set of allowed entries in the <code>mSettings</code> object depends on the concrete
 * subclass and is described there. See {@link sap.ui.core.Element} for a general description of this
 * argument.
 *
 * @param {string} [sId] optional id for the new control; generated automatically if no non-empty id is given
 *      Note: this can be omitted, no matter whether <code>mSettings</code> will be given or not!
 * @param {object} [mSettings] optional map/JSON-object with initial settings for the new control
 * @public
 *
 * @class Base Class for Controls.
 * @extends sap.ui.core.Element
 * @abstract
 * @author Martin Schaus, Daniel Brinkmann
 * @version 1.18.9
 * @name sap.ui.core.Control
 */
sap.ui.core.Element.extend("sap.ui.core.Control", /* @lends sap.ui.core.Control */ {

	metadata : {
		stereotype : "control",
		"abstract" : true,
		publicMethods: ["placeAt", "attachBrowserEvent", "detachBrowserEvent"],
		library: "sap.ui.core",
		properties : {
			"busy" : {type: "boolean", defaultValue: false},
			"busyIndicatorDelay" : {type: "int", defaultValue: 1000}
		},
		aggregations : {},
		associations : {},
		events : {}
	},

	constructor : function(sId, mSettings) {

		// TODO initialization should happen in init
		// but many of the existing controls don't call super.init()
		// As a workaround I moved the initialization of bAllowTextSelection here
		// so that it doesn't overwrite settings in init() (e.g. ListBox)
		this.bAllowTextSelection = true;

		sap.ui.core.Element.apply(this,arguments);
		this.bOutput = this.getDomRef() != null; // whether this control has already produced output
		
		if (this._sapUiCoreLocalBusy_initBusyIndicator) {
			this._sapUiCoreLocalBusy_initBusyIndicator();
		}
	},

	renderer : null // Control has no renderer

});

/**
 * Creates a new subclass of class sap.ui.core.Control with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.Control.extend
 * @function
 */

/**
 * Overrides {@link sap.ui.core.Element#clone Element.clone} to clone additional 
 * internal state.
 * 
 * The additionally cloned information contains:
 * <ul>
 * <li>browser event handlers attached with {@link #attachBrowserEvent}
 * <li>text selection behavior
 * <li>style classes added with {@link #addStyleClass}
 * </ul>
 * 
 * @param {string} [sIdSuffix] a suffix to be appended to the cloned element id
 * @param {string[]} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
 * @return {sap.ui.core.Element} reference to the newly created clone
 * @protected
 */
sap.ui.core.Control.prototype.clone = function() {
	var oClone = sap.ui.core.Element.prototype.clone.apply(this, arguments);

	if ( this.aBindParameters ) {
		for(var i=0, l=this.aBindParameters.length; i<l; i++) {
			var aParams = this.aBindParameters[i];
			oClone.attachBrowserEvent(aParams.sEventType, aParams.fnHandler, aParams.oListener !== this ? aParams.oListener : undefined);
		}
	}
	oClone.bAllowTextSelection = this.bAllowTextSelection;
	return oClone;
};

// must appear after clone() method and metamodel definition
if ( !jQuery.sap.isDeclared('sap.ui.core.CustomStyleClassSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides helper sap.ui.core.CustomStyleClassSupport
jQuery.sap.declare("sap.ui.core.CustomStyleClassSupport");

/**
 * If called on the prototype of a sap.ui.core.Element, the Element (and its prototype) is extended
 * to support custom style classes.
 *
 * WARNING: only to be used WITHIN a control implementation. An application cannot add style class support by calling this method!
 *
 * The methods "addStyleClass", "removeStyleClass", toggleStyleClass and "hasStyleClass" are added to the Element and the clone() method
 * is extended to also clone the custom classes.
 *
 * Usage example:
 * jQuery.sap.require("sap.ui.core.CustomStyleClassSupport");
 * sap.ui.core.CustomStyleClassSupport.apply(sap.ui.commons.layout.MatrixLayoutCell.prototype);
 *
 * Each renderer handling the given Element MUST then call
 * renderManager.writeClasses(oElement);
 * when writing the root tag of the Element. This makes sure the classes are written to the HTML.
 *
 * @public
 */
sap.ui.core.CustomStyleClassSupport = function () {
	// "this" is the prototype now when called with apply()

	// Ensure only Elements are enhanced
	if(!(this instanceof sap.ui.core.Element)) {
		return;
	}

	// enrich original clone function
	var fOriginalClone = this.clone;
	this.clone = function() {
		// call original clone function
		var oClone = fOriginalClone.apply(this, arguments);

		// add the style classes of "this" to the clone
		if (this.aCustomStyleClasses) {
			oClone.aCustomStyleClasses = this.aCustomStyleClasses.slice();
		}
		return oClone;
	};


	this.addStyleClass = function(sStyleClass, bSuppressRerendering) { // bSuppressRerendering is experimental and hence undocumented
		jQuery.sap.assert(sStyleClass && typeof sStyleClass === "string", "sStyleClass must be a string");

		if (!this.aCustomStyleClasses) {
			this.aCustomStyleClasses = [];
		}
		if (sStyleClass) {
			// ensure the "class" attribute is not closed
			if (sStyleClass.indexOf("\"") > -1) {
				return this;
			}
			if (sStyleClass.indexOf("'") > -1) {
				return this;
			} // TODO: maybe check for quotes in different charsets or encodings

			// multiple calls should not add the class multiple times
			for (var i = this.aCustomStyleClasses.length-1; i >= 0; i--) {
				if (this.aCustomStyleClasses[i] == sStyleClass) {
					return this;
				}
			}

			this.aCustomStyleClasses.push(sStyleClass);
			var oRoot = this.getDomRef();
			if (oRoot) { // non-rerendering shortcut
				jQuery(oRoot).addClass(sStyleClass);
			} else if (bSuppressRerendering === false) {
				this.invalidate();
			}
		}

		return this;
	};


	this.removeStyleClass = function(sStyleClass, bSuppressRerendering) { // bSuppressRerendering is experimental and hence undocumented
		jQuery.sap.assert(sStyleClass && typeof sStyleClass === "string", "sStyleClass must be a string");

		if (sStyleClass && this.aCustomStyleClasses) {
			for (var i = this.aCustomStyleClasses.length-1; i >= 0; i--) {
				if (this.aCustomStyleClasses[i] == sStyleClass) {
					this.aCustomStyleClasses.splice(i, 1);
					var oRoot = this.getDomRef();
					if (oRoot) { // non-rerendering shortcut
						jQuery(oRoot).removeClass(sStyleClass);
					} else if (bSuppressRerendering === false) {
						this.invalidate();
					}
				}
			}
		}

		return this;
	};


	this.toggleStyleClass = function(sStyleClass, bAdd) {
		jQuery.sap.assert(sStyleClass && typeof sStyleClass === "string", "sStyleClass must be a string");
		
		if (sStyleClass && typeof sStyleClass === "string") {
			if (bAdd === true) {
				this.addStyleClass(sStyleClass);
			} else if (bAdd === false) {
				this.removeStyleClass(sStyleClass);
			} else if (bAdd === undefined) {
				this.hasStyleClass(sStyleClass) ? this.removeStyleClass(sStyleClass) : this.addStyleClass(sStyleClass);
			} else {
				jQuery.sap.log.warning(this.toString() + "- toggleStyleClass(): bAdd should be a boolean or undefined, but is '" + bAdd + "'");
			}
		}
		
		return this; // we could (depending on bAdd) return either this or the boolean result of removeStyleClass, but at least in the bAdd===undefined case the caller wouldn't even know which return type to expect...
	};


	this.hasStyleClass = function(sStyleClass) {
		jQuery.sap.assert(sStyleClass && typeof sStyleClass === "string", "sStyleClass must be a string");

		if (sStyleClass && this.aCustomStyleClasses) {
			for (var i = this.aCustomStyleClasses.length-1; i >= 0; i--) {
				if (this.aCustomStyleClasses[i] == sStyleClass) {
					return true;
				}
			}
		}
		return false;
	};

	this.getMetadata().addPublicMethods(["addStyleClass", "removeStyleClass", "toggleStyleClass", "hasStyleClass"]);

};

// moved here to fix the cyclic dependency CustomStyleClassSupport, Element, Core, Control


}; // end of sap/ui/core/CustomStyleClassSupport.js

sap.ui.core.CustomStyleClassSupport.apply(sap.ui.core.Control.prototype);


/**
 * Checks whether the control is still active (part of the active DOM)
 *
 * @return {boolean} whether the control is still in the active DOM
 * @private
 */
sap.ui.core.Control.prototype.isActive = function() {
	return jQuery.sap.domById(this.sId) != null;
};

/**
 * Triggers rerendering of this element and its children.
 *
 * As <code>sap.ui.core.Element</code> "bubbles up" the invalidate, changes to children
 * potentially result in rerendering of the whole sub tree.
 * @protected
 */
sap.ui.core.Control.prototype.invalidate = function(oOrigin) {
	var oUIArea;
	if ( this.bOutput && (oUIArea = this.getUIArea()) ) {
		// if this control has been rendered before (bOutput)
		// and if it is contained in an UIArea (!!oUIArea)
		// then control re-rendering can be used (see UIArea.rerender() for details)
		//
		// The check for bOutput is necessary as the control
		// re-rendering needs to identify the previous rendering results.
		// Otherwise it wouldn't be able to replace them.
		oUIArea.addInvalidatedControl(this);
	} else {
		// else we bubble up the hierarchy
		var oParent = this.getParent();
		if (oParent && (
				this.bOutput /* && !this.getUIArea() */ ||
				/* !this.bOutput && */ !(this.getVisible && this.getVisible() === false))) {

			// Note: the two comments in the condition above show additional conditions
			//       that help to understand the logic. As they are always fulfilled,
			//       they have been omitted for better performance.
			//
			// If this control has a parent but either
			//  - has produced output before ('this.bOutput') but is not part of an UIArea (!this.getUIArea())
			//  - or if it didn't produce output (!this.bOutput') before and is/became visible
			// then invalidate the parent to request re-rendering
			//
			// The first commented condition is always true, otherwise the initial if condition
			// in this method would have been met. The second one must be true as well because of the
			// short evaluation logic of JavaScript. When bOutput is true the second half of the Or won't be processed.

			oParent.invalidate(this);
		}
	}
};

/**
 * Tries to replace its DOM reference by re-rendering.
 * @protected
 */
sap.ui.core.Control.prototype.rerender = function() {
	sap.ui.core.UIArea.rerenderControl(this);
};

/**
 * Defines whether the user can select text inside this control.
 * Defaults to <code>true</code> as long as this method has not been called.
 *
 * <b>Note:</b>This only works in IE and Safari; for Firefox the element's style must
 * be set to:
 * <pre>
 *   -moz-user-select: none;
 * </pre>
 * in order to prevent text selection.
 *
 * @param {boolean} whether to allow text selection or not
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Control.prototype.allowTextSelection = function(bAllow) {
	this.bAllowTextSelection = bAllow;
	return this;
};

/**
 * The string given as "sStyleClass" will be added to the "class" attribute of this control's root HTML element.
 *
 * This method is intended to be used to mark controls as being of a special type for which
 * special styling can be provided using CSS selectors that reference this style class name.
 *
 * <pre>
 * Example:
 *    myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
 *
 * ...and in CSS:
 *    .myRedTextButton {
 *       color: red;
 *    }
 * </pre>
 *
 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
 * make the text in this particular button red.
 *
 * Only characters allowed inside HTML attributes are allowed.
 * Quotes are not allowed and this method will ignore any strings containing quotes.
 * Strings containing spaces are interpreted as ONE custom style class (even though CSS selectors interpret them
 * as different classes) and can only removed later by calling removeStyleClass() with exactly the
 * same (space-containing) string as parameter.
 * Multiple calls with the same sStyleClass will have no different effect than calling once.
 * If sStyleClass is null, the call is ignored.
 *
 * @name sap.ui.core.Control.prototype.addStyleClass
 * @function
 *
 * @param {string} sStyleClass the CSS class name to be added
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */

/**
 * Removes the given string from the list of custom style classes that have been set previously.
 * Regular style classes like "sapUiBtn" cannot be removed.
 *
 * @name sap.ui.core.Control.prototype.removeStyleClass
 * @function
 *
 * @param {string} sStyleClass the style to be removed
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */

/**
 * The string given as "sStyleClass" will be be either added to or removed from the "class" attribute of this control's root HTML element,
 * depending on the value of "bAdd": if bAdd is true, sStyleClass will be added.
 * If bAdd is not given, sStyleClass will be removed if it is currently present and will be added if not present.
 * If sStyleClass is null, the call is ignored.
 * 
 * See addStyleClass and removeStyleClass for further documentation.
 *
 * @name sap.ui.core.Control.prototype.toggleStyleClass
 * @function
 *
 * @param {string} sStyleClass the CSS class name to be added or removed
 * @param {boolean} bAdd whether sStyleClass should be added (or removed); when this parameter is not given, sStyleClass will be toggled (removed, if present, and added if not present) 
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */

/**
 * Returns true if the given style class string is valid and if this control has this style class set
 * via a previous call to addStyleClass().
 *
 * @name sap.ui.core.Control.prototype.hasStyleClass
 * @function
 *
 * @param {string} sStyleClass the style to check for
 * @type boolean
 * @return whether the given style has been set before
 * @public
 */


/**
 * Allows binding handlers for any native browser event to the root HTML element of this Control. This internally handles
 * DOM element replacements caused by re-rendering.
 *
 * IMPORTANT:
 * This should be only used as FALLBACK when the Control events do not cover a specific use-case! Always try using
 * SAPUI5 control events, as e.g. accessibility-related functionality is then provided automatically.
 * E.g. when working with a sap.ui.commons.Button, always use the Button's "press" event, not the native "click" event, because
 * "press" is also guaranteed to be fired when certain keyboard activity is supposed to trigger the Button.
 *
 * In the event handler, "this" refers to the Control - not to the root DOM element like in jQuery. While the DOM element can
 * be used and modified, the general caveats for working with SAPUI5 control DOM elements apply. In particular the DOM element
 * may be destroyed and replaced by a new one at any time, so modifications that are required to have permanent effect may not
 * be done. E.g. use Control.addStyleClass() instead if the modification is of visual nature.
 *
 * Use detachBrowserEvent() to remove the event handler(s) again.
 *
 * @param {string} [sEventType] A string containing one or more JavaScript event types, such as "click" or "blur".
 * @param {function} [fnHandler] A function to execute each time the event is triggered.
 * @param {object} [oListener] The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Control.prototype.attachBrowserEvent = function(sEventType, fnHandler, oListener) {
	if (sEventType && (typeof(sEventType) === "string")) { // do nothing if the first parameter is empty or not a string
		if (fnHandler && typeof(fnHandler) === "function") {   // also do nothing if the second parameter is not a function
			// store the parameters for bind()
			if (!this.aBindParameters) {
				this.aBindParameters = [];
			}
			oListener = oListener || this;

			// FWE jQuery.proxy can't be used as it breaks our contract when used with same function but different listeners
			var fnProxy=function() { fnHandler.apply(oListener, arguments); };

			this.aBindParameters.push({
				sEventType: sEventType,
				fnHandler: fnHandler,
				oListener: oListener,
				fnProxy : fnProxy
			});

			// if control is rendered, directly call bind()
			this.$().bind(sEventType, fnProxy);
		}
	}

	return this;
};


/**
 * Removes event handlers which have been previously attached using {@link #attachBrowserEvent}.
 *
 * Note: listeners are only removed, if the same combination of event type, callback function 
 * and context object is given as in the call to <code>attachBrowserEvent</code>.
 *  
 * @param {string} [sEventType] A string containing one or more JavaScript event types, such as "click" or "blur".
 * @param {function} [fnHandler] The function that is to be no longer executed.
 * @param {object} [oListener] The context object that was given in the call to attachBrowserEvent.
 * @public
 */
sap.ui.core.Control.prototype.detachBrowserEvent = function(sEventType, fnHandler, oListener) {
	if (sEventType && (typeof(sEventType) === "string")) { // do nothing if the first parameter is empty or not a string
		if (fnHandler && typeof(fnHandler) === "function") {   // also do nothing if the second parameter is not a function
			var $ = this.$(),i,oParamSet;
			oListener=oListener || this;

			// remove the bind parameters from the stored array
			if (this.aBindParameters) {
				for (i = this.aBindParameters.length - 1; i >= 0; i--) {
					oParamSet = this.aBindParameters[i];
					if ( oParamSet.sEventType === sEventType  && oParamSet.fnHandler === fnHandler  &&  oParamSet.oListener === oListener ) {
						this.aBindParameters.splice(i, 1);
						// if control is rendered, directly call unbind()
						$.unbind(sEventType, oParamSet.fnProxy);
					}
				}
			}

		}
	}

	return this;
};



/**
 * Returns a renderer for this control instance.
 *
 * It is retrieved using the RenderManager as done during rendering.
 *
 * @return {object} a Renderer suitable for this Control instance.
 * @protected
 */
sap.ui.core.Control.prototype.getRenderer = function () {
	//TODO introduce caching?
	return sap.ui.core.RenderManager.getRenderer(this);
};

/**
 * Puts <code>this</code> control into the specified container (<code>oRef</code>) at the given
 * position (<code>oPosition</code>).
 *
 * First it is checked whether <code>oRef</code> is a container element / control (has a
 * multiple aggregation with type <code>sap.ui.core.Control</code> and name 'content') or is an Id String
 * of such an container.
 * If this is not the case <code>oRef</code> can either be a Dom Reference or Id String of the UIArea
 * (if it does not yet exist implicitly a new UIArea is created),
 *
 * The <code>oPosition</code> can be one of the following:
 *
 * <ul>
 *  <li>"first": The control is added as the first element to the container.</li>
 *  <li>"last": The control is added as the last element to the container (default).</li>
 *  <li>"only": All existing children of the container are removed (not destroyed!) and the control is added as new child.</li>
 *  <li><i>index</i>: The control is added at the specified <i>index</i> to the container.</li>
 * </ul>
 * 
 * @param {string|DomRef|sap.ui.core.Control} oRef container into which the control should be put
 * @param {string|int} oPosition Describes the position where the control should be put into the container
 * @return {sap.ui.core.Control} Returns <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Control.prototype.placeAt = function(oRef, oPosition) {
	var oCore = sap.ui.getCore();
	if(oCore.isInitialized()){
		// core already initialized, do it now

		// 1st try to resolve the oRef as a Container control
		var oContainer = oRef;
		if(typeof oContainer === "string"){
			oContainer = oCore.byId(oRef);
		}
		// if no container control is found use the corresponding UIArea
		var bIsUIArea = false;
		if(!(oContainer instanceof sap.ui.core.Element)) {
			oContainer = oCore.createUIArea(oRef);
			bIsUIArea = true;
		}

		if(!oContainer) {
			return;
		}

		if(!bIsUIArea){
			var oContentAggInfo = oContainer.getMetadata().getAllAggregations()["content"];
			var bContainerSupportsPlaceAt = true;
			if(oContentAggInfo){
				if(!oContentAggInfo.multiple || oContentAggInfo.type != "sap.ui.core.Control"){
					bContainerSupportsPlaceAt = false;
				}
			}else{
				//Temporary workaround for sap.ui.commons.AbsoluteLayout to enable placeAt even when no content aggregation is available. TODO: Find a proper solution
				if(!oContainer.addContent || !oContainer.insertContent || !oContainer.removeAllContent) {
					bContainerSupportsPlaceAt = false;
				}
			}
			if(!bContainerSupportsPlaceAt) {
				jQuery.sap.log.warning("placeAt cannot be processed because container "+oContainer+" does not have an aggregation 'content'.");
				return;
			}
		}

		if(typeof oPosition === "number"){
			oContainer.insertContent(this, oPosition);
		}else{
			oPosition = oPosition || "last"; //"last" is default
			switch(oPosition){
				case "last":
					oContainer.addContent(this);
					break;
				case "first":
					oContainer.insertContent(this, 0);
					break;
				case "only":
					oContainer.removeAllContent();
					oContainer.addContent(this);
					break;
				default:
					jQuery.sap.log.warning("Position "+oPosition+" is not supported for function placeAt.");
			}
		}
	}else{
		// core not yet initialized, defer execution
		var that = this;
		oCore.attachInitEvent(function () {
			that.placeAt(oRef, oPosition);
		});
	}
	return this;
};

/*
 * Event handling
 */

/**
 * Cancels user text selection if text selection is disabled for this control.
 * See the {@link #allowTextSelection} method.
 * @private
 */
sap.ui.core.Control.prototype.onselectstart = function (oBrowserEvent) {
	if(!this.bAllowTextSelection) {
		oBrowserEvent.preventDefault();
		oBrowserEvent.stopPropagation();
	}
};

/*
 * Rendering
 */

/**
 * Function is called before the rendering of the control is started.
 *
 * Applications must not call this hook method directly, it is called by the framework.
 *
 * Subclasses of Control should override this hook to implement any necessary actions before the rendering.
 *
 * @function
 * @name sap.ui.core.Control.prototype.onBeforeRendering
 * @protected
 */
//sap.ui.core.Control.prototype.onBeforeRendering = function() {};

/**
 * Function is called when the rendering of the control is completed.
 *
 * Applications must not call this hook method directly, it is called by the framework.
 *
 * Subclasses of Control should override this hook to implement any necessary actions after the rendering.
 *
 * @function
 * @name sap.ui.core.Control.prototype.onAfterRendering
 * @protected
 */
//sap.ui.core.Control.prototype.onAfterRendering = function() {};

/**
 * Returns the DOMNode Id to be used for the "labelFor" attribute of the label.
 * 
 * By default, this is the Id of the control itself.
 * 
 * @return {string} Id to be used for the <code>labelFor</code> 
 * @public
 */
sap.ui.core.Control.prototype.getIdForLabel = function () {
	return this.getId();
};

sap.ui.core.Control.prototype.destroy = function(bSuppressInvalidate) {
	//Cleanup Busy Indicator
	this._cleanupBusyIndicator();
	
	sap.ui.core.ResizeHandler.deregisterAllForControl(this.getId());

	sap.ui.core.Element.prototype.destroy.call(this, bSuppressInvalidate);
};

(function() {
	var sPreventedEvents = "focusin focusout keydown keypress keyup",
		oBusyIndicatorDelegate = {
			onAfterRendering: function() {
				if (this.getProperty("busy") === true && this.$()) {
					fnAppendBusyIndicator.apply(this);
				}
			}
		},
		fnAppendBusyIndicator = function() {
			var $this = this.$(),
				aForbiddenTags = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"];
			

			//If there is a pending delayed call to append the busy indicator, we can clear it now
			if (this._busyIndicatorDelayedCallId) {
				jQuery.sap.clearDelayedCall(this._busyIndicatorDelayedCallId);
				delete this._busyIndicatorDelayedCallId;
			}

			//Check if DOM Element where the busy indicator is supposed to be placed can handle content
			var sTag = $this.get(0) && $this.get(0).tagName;
			if (sTag && jQuery.inArray(sTag.toLowerCase(), aForbiddenTags) >= 0) {
				jQuery.sap.log.warning("Busy Indicator cannot be placed in elements with tag " + sTag);
				return;
			}
			
			//check if the control has static position, if this is the case we need to change it,
			//because we relay on relative/absolute/fixed positioning
			if ($this.css('position') == 'static') {
				this._busyStoredPosition = 'static';
				$this.css('position', 'relative');
			}

			//Append busy indicator to control DOM
			var $BusyIndicator = jQuery('<div class="sapUiLocalBusyIndicator"><div class="sapUiLocalBusyIndicatorAnimation"><div class="sapUiLocalBusyIndicatorBox"></div><div class="sapUiLocalBusyIndicatorBox"></div><div class="sapUiLocalBusyIndicatorBox"></div></div></div>');
			$BusyIndicator.attr("id",this.getId() + "-busyIndicator")
			$this.append($BusyIndicator);
			this._busyDelayedCallId = jQuery.sap.delayedCall(1200, this, fnAnimate);
			fnHandleInteraction.apply(this, [true]);
		},
		fnHandleInteraction = function(bBusy) {
			if (bBusy) {
				var $this = this.$(),
					$TabRefs = $this.find('[tabindex]'),
					that = this;
				this._busyTabIndices = [];
				$TabRefs.each(function(iIndex, oObject) {
					var $Ref = jQuery(oObject),
						iTabIndex = $Ref.attr('tabindex');
					
					if (iTabIndex < 0) return true;
					
					that._busyTabIndices.push({
						ref: $Ref,
						tabindex: iTabIndex
					});
					$Ref.attr('tabindex', -1);
					$Ref.bind(sPreventedEvents, fnPreserveEvents);
				});
			} else {
				if (this._busyTabIndices) {
					jQuery.each(this._busyTabIndices, function(iIndex, oObject) {
						oObject.ref.attr('tabindex', oObject.tabindex);
						oObject.ref.unbind(sPreventedEvents, fnPreserveEvents);
					});
				}
				this._busyTabIndices = [];
			}
		},
		fnPreserveEvents = function(oEvent) {
			oEvent.preventDefault();
			oEvent.stopImmediatePropagation();
		},
		fnAnimate = function() {
			var $bubbles = this.$().children('.sapUiLocalBusyIndicator').children('.sapUiLocalBusyIndicatorAnimation');
			var that = this;
			that._busyAnimationTimer1 = setTimeout(function() {
				$bubbles.children(":eq(0)").addClass('active');
				$bubbles.children(":not(:eq(0))").removeClass('active');
				that._busyAnimationTimer2 = setTimeout(function() {
					$bubbles.children(":eq(1)").addClass('active');
					$bubbles.children(":not(:eq(1))").removeClass('active');
					that._busyAnimationTimer3 = setTimeout(function() {
						$bubbles.children(":eq(2)").addClass('active');
						$bubbles.children(":not(:eq(2))").removeClass('active');
						that._busyAnimationTimer4 = setTimeout(function() {
							$bubbles.children().removeClass('active');
						}, 150)
					}, 150);
				}, 150);
			}, 150);
			this._busyDelayedCallId = jQuery.sap.delayedCall(1200, this, fnAnimate);
		};

	/**
	 * Set the controls busy state
	 * 
	 * @public
	 * @param boolean The state to be set
	 * @return {Control} reference to control for chaining
	 */
	sap.ui.core.Control.prototype.setBusy = function (bBusy) {
		var $this = this.$();

		//If the new state is already set, we don't need to do anything
		if (bBusy == this.getProperty("busy")) {
			return;
		}

		//No rerendering
		this.setProperty("busy", bBusy, true);
		
		if (bBusy) {
			this.addDelegate(oBusyIndicatorDelegate, false, this);
		} else {
			this.removeDelegate(oBusyIndicatorDelegate);
		}
		
		//If no domref exists stop here.
		if (!this.getDomRef()) {
			return;
		}
		
		if (bBusy) {
			if (this.getBusyIndicatorDelay() <= 0) {
				fnAppendBusyIndicator.apply(this);
			} else {
				this._busyIndicatorDelayedCallId = jQuery.sap.delayedCall(this.getBusyIndicatorDelay(), this, fnAppendBusyIndicator);
			}
		} else {
			//If there is a pending delayed call we clear it
			if (this._busyIndicatorDelayedCallId) {
				jQuery.sap.clearDelayedCall(this._busyIndicatorDelayedCallId);
				delete this._busyIndicatorDelayedCallId;
			}
			
			//Remove the busy indicator from the DOM
			jQuery.sap.byId(this.getId() + "-busyIndicator").remove();
			
			//Reset the position style to its original state
			if (this._busyStoredPosition) {
				$this.css('position', this._busyStoredPosition);
				delete this._busyStoredPosition;
			}
			fnHandleInteraction.apply(this, [false]);
			if (this._busyDelayedCallId) {
				jQuery.sap.clearDelayedCall(this._busyDelayedCallId);
				delete this._busyDelayedCallId;
			}
		}
	};
	
	/**
	 * Check if the control is currently in busy state
	 * 
	 * @public
	 * @deprecated Use getBusy instead
	 * @return boolean
	 */
	sap.ui.core.Control.prototype.isBusy = function() {
		return this.getProperty("busy");
	};
	
	/**
	 * Define the delay, after which the busy indicator will show up
	 * 
	 * @public
	 * @param int The delay in ms
	 * @return {Control} reference to control for chaining
	 */
	sap.ui.core.Control.prototype.setBusyIndicatorDelay = function(iDelay) {
		this.setProperty("busyIndicatorDelay", iDelay, true);
		return this;
	};
	
	/**
	 * Cleanup all timers which might have been created by the busy indicator
	 * 
	 * @private
	 */
	sap.ui.core.Control.prototype._cleanupBusyIndicator = function() {
		if (this._busyIndicatorDelayedCallId) {
			jQuery.sap.clearDelayedCall(this._busyIndicatorDelayedCallId);
			delete this._busyIndicatorDelayedCallId;
		}
		if (this._busyDelayedCallId) {
			jQuery.sap.clearDelayedCall(this._busyDelayedCallId);
			delete this._busyDelayedCallId;
		}
		if (this._busyAnimationTimer1) {
			clearTimeout(this._busyAnimationTimer1);
			delete this._busyAnimationTimer1;
		}
		if (this._busyAnimationTimer2) {
			clearTimeout(this._busyAnimationTimer2);
			delete this._busyAnimationTimer2;
		}
		if (this._busyAnimationTimer3) {
			clearTimeout(this._busyAnimationTimer3);
			delete this._busyAnimationTimer3;
		}
		if (this._busyAnimationTimer4) {
			clearTimeout(this._busyAnimationTimer4);
			delete this._busyAnimationTimer4;
		}
	}
})();

}; // end of sap/ui/core/Control.js




if ( !jQuery.sap.isDeclared('sap.ui.core.UIArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.UIArea
jQuery.sap.declare("sap.ui.core.UIArea");





/**
 * @class An area in a page that hosts a tree of UI elements.
 *
 * Provides means for event-handling, rerendering, etc.
 *
 * @extends sap.ui.base.ManagedObject
 * @author SAP AG
 * @version 1.18.9
 * @param {sap.ui.Core} oCore internal API of the <core>Core</code> that manages this UIArea
 * @param {object} [oRootNode] reference to the Dom Node that should be 'hosting' the UI Area.
 * @public
 */
sap.ui.base.ManagedObject.extend("sap.ui.core.UIArea", {
	constructor: function(oCore, oRootNode) {
		if(arguments.length === 0) {
			return;
		}

		// Note: UIArea has a modifiable Id. This doesn't perfectly match the default behavior of ManagedObject
		// But UIArea overrides getId().
		sap.ui.base.ManagedObject.apply(this);

		//TODO we could get rid of oCore here, if we wanted to...
		this.oCore = oCore;
		this.bLocked = false;
		this.bInitial = true;
		this.aContentToRemove = [];
		
		this.bNeedsRerendering = false;
		if (oRootNode != null) {
			this.setRootNode(oRootNode);
			// Figure out whether UI Area is pre-rendered (server-side JS rendering)!
			this.bNeedsRerendering = this.bNeedsRerendering && !jQuery.sap.domById(oRootNode.id + "-Init");
		}
		this.mInvalidatedControls = {};

		if(!this.bNeedsRerendering) {
			this.oRenderControl = null;
		} else {
			// Core needs to be notified about an invalid UIArea
			this.oCore.addInvalidatedUIArea(this);
		}

	},
	metadata: {
		// ---- object ----
		publicMethods : ["setRootNode", "getRootNode", "setRootControl", "getRootControl", "lock","unlock", "isLocked"],
		aggregations : {
			"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
		}
	}
});

/**
 * Returns whether rerendering is currently suppressed on this UIArea
 * @return boolean
 * @protected
 */
sap.ui.core.UIArea.prototype.isInvalidateSuppressed = function() {
	return this.iSuppressInvalidate > 0;
};

/**
 * Returns this <code>UIArea</code>'s id (as determined from provided RootNode).
 * @return {string} id of this UIArea
 * @public
 *
 * TODO what is this needed for? ID can change and getRootNode() is also there...
 * Is this part of "UI area is like an Element" contract?
 */
sap.ui.core.UIArea.prototype.getId = function() {
	return this.oRootNode ? this.oRootNode.id : null;
};

/**
 * Returns this UI area. Needed to stop recursive calls from an element to its parent.
 *
 * @return {sap.ui.core.UIArea} this
 * @protected
 */
sap.ui.core.UIArea.prototype.getUIArea = function() {
	return this;
};

/**
 * Allows setting the Root Node hosting this instance of <code>UIArea</code>.<br/> The Dom Ref must have an Id that
 * will be used as Id for this instance of <code>UIArea</code>.
 *
 * @param {object}
 *            oRootNode the hosting Dom Ref for this instance of <code>UIArea</code>.
 * @public
 */
sap.ui.core.UIArea.prototype.setRootNode = function(oRootNode) {
	if(this.oRootNode === oRootNode) {
		return;
	}

	// oRootNode must either be empty or must be a DOMElement and must not be root node of some other UIArea
	jQuery.sap.assert(!oRootNode || (oRootNode.nodeType === 1 && !jQuery(oRootNode).attr("data-sap-ui-area")), "UIArea root node must be a DOMElement");

	//TODO IS there something missing
	if(this.oRootNode) {
		this._ondetach();
	}

	this.oRootNode = oRootNode;
	if ( this.getContent().length > 0 ) {
	  this.invalidate();
	}

	if(this.oRootNode) {
		// prepare eventing
		this._onattach();
	}
};

/**
 * Returns the Root Node hosting this instance of <code>UIArea</code>.
 *
 * @return {DOMNode} the Root Node hosting this instance of <code>UIArea</code>.
 * @public
 */
sap.ui.core.UIArea.prototype.getRootNode = function() {
	return this.oRootNode;
};

/**
 * Sets the root control to be displayed in this UIArea.
 *
 * First, all old content controls (if any) will be detached from this UIArea (e.g. their parent
 * relationship to this UIArea will be cut off). Then the parent relationship for the new
 * content control (if not empty) will be set to this UIArea and finally, the UIArea will
 * be marked for re-rendering.
 *
 * The real re-rendering happens whenever the re-rendering is called. Either implicitly
 * at the end of any control event or by calling sap.ui.getCore().applyChanges().
 *
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oRootControl the Control that should be the Root for this <code>UIArea</code>.
 * @public
 * @deprecated use functions <code>removeAllContent</code> and <code>addContent</code> instead
 */
sap.ui.core.UIArea.prototype.setRootControl = function(oRootControl) {
	this.removeAllContent();
	this.addContent(oRootControl);
};

/**
 * Returns the content control of this <code>UIArea</code> at the specified index.
 * If no index is given the first content control is returned.
 *
 * @param {int} idx index of the control in the content of this <code>UIArea</code>
 * @return {sap.ui.core.Control} the content control of this <code>UIArea</code> at the specified index.
 * @public
 * @deprecated use function <code>getContent</code> instead
 */
sap.ui.core.UIArea.prototype.getRootControl = function(idx) {
	var aContent = this.getContent();
	if(aContent.length > 0){
		if(idx >=0 && idx < aContent.length) {
			return aContent[idx];
		}
		return aContent[0];
	}
	return null;
};

sap.ui.core.UIArea.prototype._addRemovedContent = function(oDomRef) {
	if(this.oRootNode && oDomRef) {
		this.aContentToRemove.push(oDomRef);
	}
};

/**
 * Getter for aggregation <code>content</code>.<br/>
 *
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.core.UIArea.prototype.getContent
 */

/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *			iIndex the <code>0</code>-based index the content should be inserted at; for
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the content is inserted at
 *             the last position
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.UIArea.prototype.insertContent
 */

/**
 * Adds some content <code>oContent</code>
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.UIArea.prototype.addContent = function(oContent, _bSuppressInvalidate) {
	this.addAggregation("content", oContent, _bSuppressInvalidate);
	// TODO this remains here just to make the UX3 Shell work which doesn't invalidate properly
	if ( _bSuppressInvalidate !== true ) {
		this.invalidate();
	}
	return this;
};

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed element or null
 * @public
 */
sap.ui.core.UIArea.prototype.removeContent = function(vContent, _bSuppressInvalidate) {
	var oContent = this.removeAggregation("content", vContent, _bSuppressInvalidate);
	if ( !_bSuppressInvalidate ) {
		var oDomRef;
		if(oContent && oContent.getDomRef) {
			oDomRef = oContent.getDomRef();
		}
		this._addRemovedContent(oDomRef);
		//this.invalidate();
	}
	return oContent;
};

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 */
sap.ui.core.UIArea.prototype.removeAllContent = function() {
	var aContent = this.removeAllAggregation("content");
	for(var idx=0; idx<aContent.length; idx++){
		var oDomRef;
		var oContent = aContent[idx];
		if(oContent && oContent.getDomRef) {
			oDomRef = oContent.getDomRef();
		}
		this._addRemovedContent(oDomRef);
	}
	//this.invalidate();
	return aContent;
};

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code>
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.core.UIArea.prototype.indexOfContent
 */

/**
 * Destroys all the content in the aggregation
 * named <code>content</code>.
 * @return {sap.ui.core.UIArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.UIArea.prototype.destroyContent = function() {
	var aContent = this.getContent();
	for(var idx=0; idx<aContent.length; idx++){
		var oDomRef;
		var oContent = aContent[idx];
		if(oContent && oContent.getDomRef) {
			oDomRef = oContent.getDomRef();
		}
		this._addRemovedContent(oDomRef);
	}
	this.destroyAggregation("content");
	//this.invalidate();
	return this;
};

/**
 * Locks this instance of UIArea.
 *
 * Rerendering and eventing will not be active as long as no
 * {@link #unlock} is called.
 *
 * @public
 */
sap.ui.core.UIArea.prototype.lock = function() {
	this.bLocked = true;
};

/**
 * Un-Locks this instance of UIArea.
 *
 * Rerendering and eventing will now be enabled again.
 *
 * @public
 */
sap.ui.core.UIArea.prototype.unlock = function() {
	if ( this.bLocked && this.bNeedsRerendering ) {
		// While being locked, we might have ignored a call to rerender()
		// Therefore notify the Core (again)
		this.oCore.addInvalidatedUIArea(this);
	}
	this.bLocked = false;
};

/**
 * Returns the locked state of the <code>sap.ui.core.UIArea</code>
 * @type boolean
 * @return locked state
 * @public
 */
sap.ui.core.UIArea.prototype.isLocked = function () {
	return this.bLocked;
};

/**
 * Provide getBindingContext, as UIArea can be parent of an element.
 * Always returns null.
 *
 * @protected
 */
sap.ui.core.UIArea.prototype.getBindingContext = function(){
	return null;
};

/**
 * Returns the Core as new eventing parent to enable control event bubbling to the core to ensure compatibility with the core validation events. 
 * 
 * @return {sap.ui.base.EventProvider} the parent event provider
 * @protected
 */
sap.ui.core.UIArea.prototype.getEventingParent = function() {
	return this.oCore;
};

// ###########################################################################
// Convenience for methods
// e.g. Process Events for inner Controls
// or figure out whether control is part of this area.
// ###########################################################################

/**
 * Checks whether the control is still valid (is in the DOM)
 *
 * @return {boolean} True if the control is still in the active DOM
 * @protected
 */
sap.ui.core.UIArea.prototype.isActive = function() {
	return jQuery.sap.domById(this.getId()) != null;
};

/**
 * Will be used as end-point for invalidate-bubbling from controls up their hierarchy.<br/> Triggers re-rendering of
 * the UIAreas content.
 * @protected
 */
sap.ui.core.UIArea.prototype.invalidate = function() {
	this.addInvalidatedControl(this);
};

/**
 * Notifies the UIArea about an just invalidated control.
 *
 * The UIArea internally decides whether to re-render just the modified
 * controls or the complete content. It also informs the Core when it
 * becomes invalid the first time.
 *
 * TODO this.oRenderControl is either NULL or THIS. change to boolean?!
 * @protected
 */
sap.ui.core.UIArea.prototype.addInvalidatedControl = function(oControl){
	if (this.oRenderControl == this) {
		return;
	}

	// inform the Core, if we are getting invalid now
	if ( !this.bNeedsRerendering ) {
		this.oCore.addInvalidatedUIArea(this);
	}

	var sId = oControl.getId();
	//check whether the control is already invalidated
	if (/*jQuery.inArray(oControl, this.getContent()) || */oControl == this ) {
		this.oRenderControl = this; //everything in this UIArea
		this.bNeedsRerendering = true;
		return;
	}
	if (this.mInvalidatedControls[sId]) {
		return;
	}
	if (!this.oRenderControl) {
		//add it to the list of controls
		this.mInvalidatedControls[sId] = oControl;
		this.bNeedsRerendering = true;
	}
};

/**
 * TODO review and maybe refactor this complex algorithm
 * TODO documentation
 * TODO detach current "rerendering infos" before starting rerendering. Necessary to properly deal with concurrent modifications 
 * @param force {boolean} true, if the rerendering of the UI area should be forced
 * @return {boolean} whether a redraw was necessary or not
 * @private
 */
sap.ui.core.UIArea.prototype.rerender = function(force){
	if (force) {
		this.bNeedsRerendering = true;
	}
	if ( this.bLocked || !this.bNeedsRerendering ) {
		return false;
	}
	
	var that = this;

	// pause performance measurement for all UI Areas
	jQuery.sap.measure.pause("rerenderAllUIAreas");
	// start performance measurement
	jQuery.sap.measure.start(this.getId()+"---rerender","Rerendering of "+this.getMetadata().getName());

	if (this.oRenderControl == this) {
		if (this.oRootNode) {
			jQuery.sap.log.info("Rerendering of UI area: " + this.getId());

			// save old content
			sap.ui.core.RenderManager.preserveContent(this.oRootNode, /* bPreserveRoot */ false, /* bPreserveNodesWithId */ this.bInitial);
			this.bInitial = false;
			
			var cleanUpDom = function(aCtnt, bCtrls){
				var len = aCtnt.length;
				var oDomRef;
				for(var i=0; i<len; i++) {
					oDomRef = bCtrls ? aCtnt[i].getDomRef() : aCtnt[i];
					if ( oDomRef && !sap.ui.core.RenderManager.isPreservedContent(oDomRef) && that.oRootNode === oDomRef.parentNode) {
						jQuery(oDomRef).remove();
					}
				}
				return len;
			}

			//First remove the old Dom nodes and then render the controls again
			cleanUpDom(this.aContentToRemove);
			this.aContentToRemove = [];

			var aContent = this.getContent();
			var len = cleanUpDom(aContent, true);

			for(var i=0; i<len; i++){
				this.oCore.oRenderManager.render(aContent[i], this.oRootNode, true);
			}
		} else { // cannot re-render now; wait!
			// end performance measurement
			jQuery.sap.measure.end(this.getId()+"---rerender");
			// resume performance measurement for all UI Areas
			jQuery.sap.measure.resume("rerenderAllUIAreas");
			return false;
		}
	} else {
		var isAncestorInvalidated = function(oAncestor) {
			while ( oAncestor && oAncestor !== that ) {
				if ( that.mInvalidatedControls.hasOwnProperty(oAncestor.getId()) ) {
					return true;
				}
				oAncestor = oAncestor.getParent();
			}
			return false;
		}
		for (var n in this.mInvalidatedControls) { // TODO for in skips some names in IE8!
			var oControl = this.oCore.byId(n);
			// CSN 0000834961 2011: control may have been destroyed since invalidation happened
			if ( oControl && !isAncestorInvalidated(oControl.getParent()) ) {
				oControl.rerender();
			}
		}

	}

	this.oRenderControl = null;
	this.mInvalidatedControls = {};
	this.bNeedsRerendering = false;

	// end performance measurement
	jQuery.sap.measure.end(this.getId()+"---rerender");
	// resume performance measurement for all UI Areas
	jQuery.sap.measure.resume("rerenderAllUIAreas");
	return true;

};

/**
 * Rerenders the given control
 * @see sap.ui.core.Control.rerender()
 * @param oControl
 * @private
 */
sap.ui.core.UIArea.rerenderControl = function(oControl){
	var oDomRef = oControl ? oControl.getDomRef() : null;
	var oParentDomRef = oDomRef && oDomRef.parentNode; // remember parent here as preserveContent() might move the node!
	if(oParentDomRef){
		var uiArea = oControl.getUIArea();
		var rm = uiArea ? uiArea.oCore.oRenderManager : sap.ui.getCore().createRenderManager();
		jQuery.sap.log.info("Rerendering of control (using Core-RenderManager: "+(!!uiArea)+"): " + oControl.getId());
		sap.ui.core.RenderManager.preserveContent(oDomRef, /* bPreserveRoot */ true, /* bPreserveNodesWithId */ false);
		rm.render(oControl, oParentDomRef);
	} else {
		jQuery.sap.log.warning("Couldn't rerender '" + oControl.getId() + "', as its DOM location couldn't be determined");
	}
};

/**
 * Handles all incoming DOM events centrally and dispatches the event to the
 * registered event handlers.
 * @param {jQuery.Event} oEvent the jQuery event object
 * @private
 */
sap.ui.core.UIArea.prototype._handleEvent = function(/**event*/oEvent) {

	// execute the registered event handlers
	var oElement = null;

	// TODO: this should be the 'lowest' SAPUI5 Control of this very
	// UIArea instance's scope -> nesting scenario
	oElement = jQuery(oEvent.target).control(0);
	
	jQuery.sap.act.refresh();
	
	if(oElement === null){
		return;
	}
	
	//if event is already handled by inner UIArea (as we use the bubbling phase now), returns.
	//if capturing phase would be used, here means event is already handled by outer UIArea.
	if((oEvent.originalEvent || oEvent)._sapui_handledByUIArea){
		(oEvent.originalEvent || oEvent)._sapui_firstUIArea = false;
		return;
	}
	(oEvent.originalEvent || oEvent)._sapui_firstUIArea = true;

	// store the element on the event (aligned with jQuery syntax)
	oEvent.srcControl = oElement;

	// forward the control event:
	// if the control propagation has been stopped or the default should be
	// prevented then do not forward the control event.
	this.oCore._handleControlEvent(oEvent, this.getId());

	// if the UIArea or the Core is locked then we do not dispatch
	// any event to the control => but they will still be dispatched
	// as control event afterwards!
	if (this.bLocked || this.oCore.isLocked()) {
		return;
	}

	// retrieve the pseudo event types
	var aEventTypes = [];
	if(oEvent.getPseudoTypes){
		aEventTypes = oEvent.getPseudoTypes();
	}
	aEventTypes.push(oEvent.type);

	// dispatch the event to the controls (callback methods: onXXX)
	while (oElement && oElement instanceof sap.ui.core.Element && oElement.isActive() && !oEvent.isPropagationStopped()) {

		// for each event type call the callback method
		// if the execution should be stopped immediately
		// then no further callback method will be executed
		for (var i = 0, is = aEventTypes.length; i < is; i++) {
			var sType = aEventTypes[i];
			oEvent.type = sType;
			// ensure currenTarget is the DomRef of the handling Control
			oEvent.currentTarget = oElement.getDomRef();
			oElement._handleEvent(oEvent);
			if(oEvent.isImmediatePropagationStopped()) {
				break;
			}
		}

		// if the propagation is stopped do not bubble up further
		if(oEvent.isPropagationStopped()) {
			break;
		}

		// Secret property on the element to allow to cancel bubbling of all events.
		// This is a very special case, so there is no API method for this in the control. 
		if (oElement.bStopEventBubbling) {
			break;
		}
		
		// This is the (not that common) situation that the element was deleted in its own event handler.
		// i.e. the Element became 'inactive' (see Element#isActive())
		var oDomRef = oElement.getDomRef();
		if(!oDomRef) {
			break;
		}

		// bubble up to the parent
		oDomRef = oDomRef.parentNode;
		oElement = null;

		// ensure we do not bubble the control tree higher than our rootNode
		while (oDomRef && oDomRef !== this.getRootNode()) {
			if (oDomRef.id) {
				oElement = jQuery(oDomRef).control(0);
				if (oElement) {
					break;
				}
			}
			oDomRef = oDomRef.parentNode;
		}

	}

	// reset previously changed currentTarget
	oEvent.currentTarget = this.getRootNode();
	
	// mark on the event that it's already handled by this UIArea
	(oEvent.originalEvent || oEvent)._sapui_handledByUIArea = true;

	// TODO: rethink about logging levels!

	// logging: propagation stopped
	if (oEvent.isPropagationStopped()) {
		jQuery.sap.log.debug("'" + oEvent.type + "' propagation has been stopped");
	}

	// logging: prevent the logging of some events and for others do some
	//          info logging into the console
	var sName = oEvent.type;
	if (sName!="mousemove" && sName!="mouseover" && sName!="scroll" && sName!="mouseout") {
		var oElem = jQuery(oEvent.target).control(0);
		if(oElem) {
			jQuery.sap.log.debug("Event fired: '" + oEvent.type + "' on " + oElem, "", "sap.ui.core.UIArea");
		}
		else {
			jQuery.sap.log.debug("Event fired: '" + oEvent.type + "'", "", "sap.ui.core.UIArea");
		}
	}

};

/*
* The onattach function is called when the Element is attached to the DOM
* @private
*/
sap.ui.core.UIArea.prototype._onattach = function() {

// TODO optimizations for 'matching event list' could be done here.
//	// create the events string (space separated list of event names):
//	// the first time a control is attached - it will determine the required
//	// events and store this information in the controls metadata which is
//	// shared across the control instances.
//	if (!this.getMetadata().sEvents) {
//
//		// shorten the access to the array of events and pseudo events
//		var aEv = jQuery.sap.ControlEvents;
//		var oPsEv = jQuery.sap.PseudoEvents;
//
//		// create the data structures for the event handler registration
//		this.sEvents = "";
//		var aEvents = [];
//
//		// check for pseudo events and register them for their relevant types
//		for (var evt in oPsEv) {
//				for (j = 0, js = oPsEv[evt].aTypes.length; j < js; j++) {
//					var type = oPsEv[evt].aTypes[j];
//					if (jQuery.inArray(type, aEvents) == -1) {
//						aEvents.push(type);
//					}
//				}
//		}
//
//		// check for events and register them
//		for (var i = 0, is = aEv.length; i < is; i++) {
//			var type = aEv[i];
//				if (jQuery.inArray(type, aEvents) == -1) {
//					aEvents.push(type);
//				}
//		}
//
//		// keep the list of events for the jQuery bind/unbind method
//		this.sEvents = aEvents.join(" ");
//
//		// cache the event handlers registry map
//		this.getMetadata().sEvents = this.sEvents;
//
//	} else {
//		// use the cached map of event handlers
//		this.sEvents = this.getMetadata().sEvents;
//	}

	// check for existing root node
	var oDomRef = this.getRootNode();
	if (oDomRef == null) {
		return;
	}

	//	mark the DOM as UIArea and bind the required events
	jQuery(oDomRef).attr("data-sap-ui-area", oDomRef.id).bind(jQuery.sap.ControlEvents.join(" "), jQuery.proxy(this._handleEvent, this));

};

/**
* The ondetach function is called when the Element is detached out of the DOM
* @private
*/
sap.ui.core.UIArea.prototype._ondetach = function() {

	// check for existing root node
	var oDomRef = this.getRootNode();
	if (oDomRef == null) {
		return;
	}

	// remove UIArea marker and unregister all event handlers of the control
	jQuery(oDomRef).removeAttr("data-sap-ui-area").unbind();

	// TODO: when optimizing the events => take care to unbind only the
	//       required. additionally consider not to remove other event handlers.
//	var ojQRef = jQuery(oDomRef);
//	if (this.sEvents) {
//		ojQRef.unbind(this.sEvents, this._handleEvent);
//	}
//
//	var oFH = this.oCore.oFocusHandler;
//	ojQRef.unbind("focus",oFH.onfocusin);
//	ojQRef.unbind("blur", oFH.onfocusout);

};

/**
 * An UIArea can't be cloned and throws an error when trying to do so.
 */
sap.ui.core.UIArea.prototype.clone = function() {
	throw new Error("UIArea can't be cloned");
};


}; // end of sap/ui/core/UIArea.js


if ( !jQuery.sap.isDeclared('sap.ui.core.Component') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides base class sap.ui.core.Component for all components
jQuery.sap.declare("sap.ui.core.Component");



//jQuery.sap.require("sap.ui.model.json.JSONModel");

/**
 * Creates and initializes a new component with the given <code>sId</code> and
 * settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. See {@link sap.ui.core.Component}
 * for a general description of this argument.
 * 
 * @param {string}
 *            [sId] optional id for the new control; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * 
 * @class Base Class for Component.
 * @extends sap.ui.base.ManagedObject
 * @abstract
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.Component
 * @experimental Since 1.9.2. The Component concept is still under construction, so some implementation details can be changed in future.
 */
sap.ui.base.ManagedObject.extend("sap.ui.core.Component", /** @lends sap.ui.core.Component */

{
	constructor : function(sId, mSettings) {

		sap.ui.base.ManagedObject.apply(this, arguments);

	},

	metadata : {
		stereotype : "component",
		"abstract": true,
		version : "0.0",
		includes : [],  // css, javascript files that should be used in the component
		dependencies : { // external dependencies
			libs : [],
			components : [],
			ui5version : ""
		},
		config: {}, // static configuration
		customizing: { // component/view customizing
			// TODO: custom customizing data? not prefixed with sap.ui.
			//       e.g. sap.ext.viewExtensions => to be handled by custom hook!
			/*
			"sap.ui.viewReplacements": {
				"sap.xx.org.Main": {
					viewName: "sap.xx.new.Main",
					type: "XML"
				}
			},
			"sap.ui.controllerReplacements": {
				"sap.xx.org.Main": "sap.xx.new.Main"
			},
			"sap.ui.viewExtensions": {
				"sap.xx.new.Main": { // TODO: global or view dependant names for extensions? ==> locally in the view / use the new name!
					"extensionX": {
						name: "sap.xx.new.Fragment1",
						type: "sap.ui.core.XMLFragment"
					},
					"extensionY": {
						...
					}
				}
			},
			"sap.ui.viewModification": { // ?????
				"sap.xx.new.Main": {
					"myControlId": {
						text: "{i18n_custom>mytext}"
					}
				}
			}
			*/
		},
		/*
		properties: {
			config : "any"
		},
		*/
		library: "sap.ui.core"
	}

}, /* Metadata constructor */ sap.ui.core.ComponentMetadata);


/**
 * Activates the customizing configuration for the given component.
 * @param {string} sComponentName the name of the component to activate
 * @private
 */
sap.ui.core.Component.activateCustomizing = function(sComponentName) {
	// noop since it will be handled by component instantiation
};

/**
 * Deactivates the customizing configuration for the given component.
 * @param {string} sComponentName the name of the component to activate
 * @private
 */
sap.ui.core.Component.deactivateCustomizing = function(sComponentName) {
	// noop since it will be handled by component termination
};

/**
 * Returns the ID of the owner component in which the given ManagedObject has been
 * created. 
 * @param {sap.ui.core.ManagedObject} oObject the ManagedObject to return the owner component ID for
 * @return {string} the owner component ID
 * @static
 * @protected
 * @experimental Since 1.15.1. The location of this function might change.
 */
sap.ui.core.Component.getOwnerIdFor = function(oObject) {
	// the owner id is only supported for Components and Views
	if (oObject && (oObject instanceof sap.ui.core.Component ||
			            oObject instanceof sap.ui.core.mvc.View)) {
		return sap.ui.base.ManagedObject.getOwnerIdFor(oObject);
	} 
};

/**
 * @see sap.ui.base.Object#getInterface
 * @public
 */
sap.ui.core.Component.prototype.getInterface = function() {
	return this;
};

/*
 * initialize the Component and keep the component data
 */
sap.ui.core.Component.prototype._initCompositeSupport = function(mSettings) {

	// registry of mock servers
	this._mMockServers = {};
	
	// register the component instance
	this.getMetadata().onInitComponent();
	
	// make user specific data available during component instantiation
	this.oComponentData = mSettings && mSettings.componentData;

	// static initialization
	this.getMetadata().init();
	
	// init the component models
	this.initComponentModels();
	
	// error handler (if exists)
	if (this.onWindowError) {
		this._fnWindowErrorHandler = jQuery.proxy(function(oEvent) {
			var oError = oEvent.originalEvent;
			this.onWindowError(oError.message, oError.filename, oError.lineno);
		}, this);
		jQuery(window).bind("error", this._fnWindowErrorHandler);
	}

	// before unload handler (if exists)
	if (this.onWindowBeforeUnload) {
		this._fnWindowBeforeUnloadHandler = jQuery.proxy(this.onWindowBeforeUnload, this);
		jQuery(window).bind("beforeunload", this._fnWindowBeforeUnloadHandler);
	}

	// unload handler (if exists)
	if (this.onWindowUnload) {
		this._fnWindowUnloadHandler = jQuery.proxy(this.onWindowUnload, this);
		jQuery(window).bind("unload", this._fnWindowUnloadHandler);
	}
	
};

/*
 * clean up mock server and event handlers
 */
sap.ui.core.Component.prototype.destroy = function() {
	
	// kill the mock servers
	if (this._mMockServers) {
		jQuery.each(this._mMockServers, function(sName, oMockServer) {
			oMockServer.stop();
		});
		delete this._mMockServers;
	}
	
	// remove the event handlers
	if (this._fnWindowErrorHandler) {
		jQuery(window).unbind("error", this._fnWindowErrorHandler);
		delete this._fnWindowErrorHandler;
	}
	if (this._fnWindowBeforeUnloadHandler) {
		jQuery(window).unbind("beforeunload", this._fnWindowBeforeUnloadHandler);
		delete this._fnWindowBeforeUnloadHandler; 
	}
	if (this._fnWindowUnloadHandler) {
		jQuery(window).unbind("unload", this._fnWindowUnloadHandler);
		delete this._fnWindowUnloadHandler;
	}
	
	// destroy the object
	sap.ui.base.ManagedObject.prototype.destroy.apply(this, arguments);
	
	// unregister the component instance
	this.getMetadata().onExitComponent();
	
};


/**
 * Returns user specific data object
 *
 * @return object componentData
 * @public
 * @since 1.15.0
 */
sap.ui.core.Component.prototype.getComponentData = function() {
	return this.oComponentData;
};


/**
 * Initializes the component models and services.
 * 
 * @private
 */
sap.ui.core.Component.prototype.initComponentModels = function(mModels, mServices) {
	
	var oMetadata = this.getMetadata();
	
	// get the application configuration
	var oModelsConfig = mModels || oMetadata.getModels(),
	    oServicesConfig = mServices || oMetadata.getServices();

	// iterate over the model configurations and create and register the 
	// models base on the configuration if available
	if (oModelsConfig) {
		
		// create and start the mock server
		var fnCreateMockServer = function(sName, sUri, sMetadataUrl, sMockdataBaseUrl) {
			
			// kill the existing mock server
			if (this._mMockServers[sName]) {
				this._mMockServers[sName].stop();
			}
			
			// start the mock server
			jQuery.sap.require("sap.ui.core.util.MockServer");
			this._mMockServers[sName] = new sap.ui.core.util.MockServer({
				rootUri: sUri
			});
			
			this._mMockServers[sName].simulate(sMetadataUrl, sMockdataBaseUrl);
			this._mMockServers[sName].start();
				
		};
		
		// helper to create a model depending on the type
		// TODO: models could have generic instantiation to pass the JSON object 
		//       of the configuration directly instead of individual handling 
		var fnCreateModel = function(sName, oConfig) {
			
			// extract uri and type
			var sUri = oConfig.uri, sType = oConfig.type;
			
			// require the model and instantiate it
			jQuery.sap.require(sType);
			var oClass = jQuery.sap.getObject(sType);
			jQuery.sap.assert(oClass !== undefined, "The specified model type \"" + sType + "\" could not be found!");
			
			// create the model and apply the configuration
			var oModel;
			if (sType === "sap.ui.model.resource.ResourceModel") {
				oModel = new oClass({bundleUrl: sUri});
			} else if (sType === "sap.ui.model.odata.ODataModel") {
				// check for a mock server configuration and start the mock server
				if (oConfig.mockserver) {
					fnCreateMockServer.call(this, sName, sUri, oConfig.mockserver.model, oConfig.mockserver.data);
				}
				// create the model
				oModel = new oClass(sUri, oConfig.settings);
			} else if (sType === "sap.ui.model.json.JSONModel" || sType === "sap.ui.model.xml.XMLModel") {
				oModel = new oClass();
				if (sUri) {
					oModel.loadData(sUri);
				}
			} /* else {
				TODO: what about custom models / analog to ODataModel & setting? 
			} */

			// check the model to be an instance of sap.ui.model.Model
			jQuery.sap.assert(oModel instanceof sap.ui.model.Model, "The specified model type \"" + sType + "\" must be an instance of sap.ui.model.Model!");
			return oModel;

		};
		
		// create the models
		var that = this;
		jQuery.each(oModelsConfig, function(sKey, oModelConfig) {
			
			// if the model refer to a service configuration we use the service configuration 
			var sService = oModelConfig.service, 
			    oModel;
			if (sService) {
				var oServiceConfig = oServicesConfig[sService]; 
				jQuery.sap.assert(oServiceConfig, "The service configuration for service \"" + sService + "\" is not available!");
				oModel = fnCreateModel.call(that, sKey, oServiceConfig);
			} else if (oModelConfig.type) {
				oModel = fnCreateModel.call(that, sKey, oModelConfig);
			}
			
			// we apply the model to the root component if created
			if (oModel) {
				that.setModel(oModel, sKey || undefined);
			}
			
		});
		
	}
	
};


/* * TODO: RETHINK THIS CONCEPT!
 * Sets the configuration model. The configuration model is named "config" and
 * can be accessed via <code>getModel("config")</code>.
 * 
 * @param {string|object|sap.ui.model.Model} vConfig the configuration model, the configuration object or a URI string to load a JSON configuration file.
 * @since 1.15.1
 * @public
 */
/* 
sap.ui.core.Component.prototype.setConfig = function(vConfig) {
	this.setProperty("config", vConfig);
	if (typeof vConfig === "string") {
		var sUri = vConfig;
		var vConfig = new sap.ui.model.json.JSONModel();
		var oResponse = jQuery.sap.sjax({url:sUri, dataType:'json'});
		if (oResponse.success) {
			vConfig.setData(oResponse.data);
		} else {
			throw new Error("Could not load config file: " + sUri);
		}
	}
	if (typeof vConfig === "object" && !vConfig instanceof sap.ui.model.Model) {
		vConfig = new sap.ui.model.json.JSONModel(vConfig);
	}
	jQuery.sap.assert(vConfig === undefined || vConfig instanceof sap.ui.model.Model, "the config property value must be a string, an object or an instance of sap.ui.model.Model");
	this.setModel("config", vConfig);
},
*/


/**
 * Initializes the Component instance after creation.
 *
 * Applications must not call this hook method directly, it is called by the
 * framework while the constructor of an Component is executed.
 *
 * Subclasses of Component should override this hook to implement any necessary
 * initialization.
 *
 * @function
 * @name sap.ui.core.Component.prototype.init
 * @protected
 */
//sap.ui.core.Component.prototype.init = function() {};

/**
 * Cleans up the component instance before destruction.
 *
 * Applications must not call this hook method directly, it is called by the
 * framework when the element is {@link #destroy destroyed}.
 * 
 * Subclasses of Component should override this hook to implement any necessary
 * cleanup.
 *
 * @function
 * @name sap.ui.core.Component.prototype.exit
 * @protected
 */
//sap.ui.core.Component.prototype.exit = function() {};


/**
 * The window before unload hook. Override this method in your Component class 
 * implementation, to handle cleanup before the real unload or to prompt a question 
 * to the user, if the component should be exited.
 * 
 * @return {string} return a string if a prompt should be displayed to the user 
 *                  confirming closing the component (e.g. when the component is not yet saved).
 * @public
 * @since 1.15.1
 * @name sap.ui.core.Component.prototype.onWindowBeforeUnload
 * @function
 */
//onWindowBeforeUnload : function() {},


/**
 * The window unload hook. Override this method in your Component class 
 * implementation, to handle cleanup of the component once the window
 * will be unloaded (e.g. closed).
 * 
 * @public
 * @since 1.15.1
 * @name sap.ui.core.Component.prototype.onWindowUnload
 * @function
 */
//onWindowUnload : function() {},


/**
 * The window error hook. Override this method in your Component class implementation 
 * to listen to unhandled errors.
 * 
 * @param {string} sMessage The error message.
 * @param {string} sFile The file where the error occurred
 * @param {number} iLine The line number of the error
 * @public
 * @since 1.15.1
 * @name sap.ui.core.Component.prototype.onError
 * @function
 */
//onWindowError : null, // function(sMessage, sFile, iLine) - function not added directly as it might result in bad stack traces in older browsers


/**
 * The hook which gets called when the static configuration of the component 
 * has been changed by some configuration extension.
 * 
 * @param {string} sConfigKey The error message.
 * @public
 * @since 1.15.1
 * @name sap.ui.core.Component.prototype.onConfigChange
 * @function
 */
//onConfigChange : null, // function(sConfigKey)


/**
 * Creates a new instance of a <code>Component</code> or returns the instance
 * of an existing <code>Component</code>.
 * 
 * If you want to lookup all an existing <code>Component</code> you can call
 * this function with a component ID as parameter:
 * <pre> 
 *   var oComponent = sap.ui.component(sComponentId);
 * </pre>
 * 
 * To create a new instance of a component you pass a component configuration
 * object into this function:
 * <pre>
 *   var oComponent = sap.ui.component({
 *     name: "my.Component",
 *     url: "my/component/location",
 *     id: "myCompId1"
 *   });
 * </pre>
 * 
 * @param {string|object} oComponent the id of an existing Component or the configuration object to create the Component
 * @param {string} oComponent.name the name of the Component to load
 * @param {string} [oComponent.url] an alternate location from where to load the Component
 * @param {object} [oComponent.componentData] initial data of the Component (@see sap.ui.core.Component#getComponentData)
 * @param {string} [oComponent.id] the sId of the new Component
 * @param {object} [oComponent.settings] the mSettings of the new Component 
 * @return {sap.ui.core.Component} the Component instance 
 * 
 * @public
 * @static
 * @since 1.15.0
 */
sap.ui.component = function(oComponent) {
	
	// a parameter must be given!
	if (!oComponent) {
		throw new Error("sap.ui.component cannot be called without parameter!");
	}
	
	// when only a string is given then this function behaves like a 
	// getter and returns an existing component instance
	if (typeof oComponent === "string") {
		
		// lookup and return the component
		return sap.ui.getCore().getComponent(oComponent);
		
	} else {
		
		// retrieve the required properties
		var sName = oComponent.name,
		    sId = oComponent.id,
		    oComponentData = oComponent.componentData,
		    sController = sName + ".Component",
		    mSettings = oComponent.settings;
		
		// load the component class 
		var oClass = sap.ui.component.load(oComponent);
		
		// create an instance
		var oInstance = new oClass(jQuery.extend({}, mSettings, {
			id: sId,
			componentData: oComponentData
		}));
		jQuery.sap.assert(oInstance instanceof sap.ui.core.Component, "The specified component \"" + sController + "\" must be an instance of sap.ui.core.Component!");
		jQuery.sap.log.info("Component instance Id = " + oInstance.getId());
		return oInstance;
		
	}
	
};

/**
 * Load a component without instantiating it.
 * 
 * @experimental since 1.16.3
 * @static
 * @public
 */
sap.ui.component.load = function(oComponent) {

	var sName = oComponent.name,
		sUrl = oComponent.url,
		sController = sName + ".Component",
		sPreloadModule = sController + "-preload",
		sPreloadMode = sap.ui.getCore().getConfiguration().getComponentPreload();
		
	// check for an existing name
	if (!sName) {
		throw new Error("The name of the component is undefined.");
	}
	
	// check the type of the name
	jQuery.sap.assert(typeof sName === "string", "sName must be a string");

	// if a URL is given we register this URL for the name of the component:
	// the name is the package in which the component is located (dot separated)
	if (sUrl) {
		jQuery.sap.registerModulePath(sName, sUrl);
	}

	if ( sPreloadMode === "sync" || sPreloadMode === "async" ) {
		try {
			// only load the Component-preload file if the Component module is not yet available
			if ( !jQuery.sap.isDeclared(sController, /* bIncludePreloaded=*/ true) ) {
				jQuery.sap.require(sPreloadModule);
			}
		} catch(e) {
			jQuery.sap.log.warning("couldn't preload component from " + sPreloadModule + ": " + ((e && e.message) || e));
		}
  }
	
	// require the component controller
	jQuery.sap.require(sController);
	var oClass = jQuery.sap.getObject(sController);

	jQuery.sap.assert(oClass !== undefined, "The specified component \"" + sController + "\" could not be found!");
	
	return oClass;
}

}; // end of sap/ui/core/Component.js





/**
 * @class Core Class of the SAP UI Library.
 *
 * This class boots the Core framework and makes it available for the Application
 * via the method <code>sap.ui.getCore()</code>.
 *
 * Example:<br/>
 * <pre>   var oCore = sap.ui.getCore();</pre><br/>
 *
 * It provides events where the Application can attach to.<br/>
 * Example:<br/>
 * <pre>
 * oCore.attachInit(function () {
 *   //do the needful, do it lean
 * });
 * </pre><br/>
 *
 * It registers the Browser Eventing.
 *
 * @extends sap.ui.base.EventProvider
 * @final
 * @author SAP
 * @version 1.18.9
 * @constructor
 * @name sap.ui.core.Core 
 * @public
 */
sap.ui.base.EventProvider.extend("sap.ui.core.Core", /** @lends sap.ui.core.Core */ {
	constructor : function() {
	
		//make this class only available once
		if(sap.ui.getCore && sap.ui.getCore()) {
			return sap.ui.getCore();
		}
	
		var that=this,
			log = jQuery.sap.log,
			METHOD="sap.ui.core.Core";
	
		//inheritance to be able to fire internal events
		sap.ui.base.EventProvider.apply(this);
	
		/**
		 * Whether the core has been booted
		 * @private
		 */
		this.bBooted = false;
	
		/**
		 * Whether the core has been initialized
		 * @private
		 */
		this.bInitialized = false;
	
		/**
		 * Available plugins in the order of registration.
		 * @private
		 */
		this.aPlugins = [];
	
		/**
		 * Collection of loaded libraries, keyed by their name.
		 * @private
		 */
		this.mLibraries = {};
	
		/**
		 * Already loaded resource bundles keyed by library and locale.
		 * @private
		 * @see sap.ui.core.Core.getLibraryResourceBundle
		 */
		this.mResourceBundles = {};
	
		/**
		 * Currently created UIAreas keyed by their id.
		 * @private
		 * FIXME how can a UI area ever be removed?
		 */
		this.mUIAreas = {};
	
		/**
		 * Default model used for databinding
		 * @private
		 */
		this.oModels = {};
		
		/**
		 * The event bus (initialized lazily)
		 * @private
		 */
		this.oEventBus = null;
		
		/**
		 * The instance of the application (defined in the application config)
		 * @private
		 */
		this.oApplication = null;
	
		/**
		 * Map of of created Elements keyed by their id.
		 *
		 * Each element registers itself in its constructor and deregisters itself in its
		 * destroy method.
		 *
		 * @private
		 * TODO get rid of this collection as it represents a candidate for memory leaks
		 */
		this.mElements = {};
	
		/**
		 * Map of of created objects structured by their type which contains a map
		 * containing the created objects keyed by their type.
		 *
		 * Each object registers itself in its constructor and deregisters itself in its
		 * destroy method.
		 * 
		 * @private
		 * TODO get rid of this collection as it represents a candidate for memory leaks
		 */
		this.mObjects = {
			"component": {}, 
			"template": {}
		};
	
		/**
		 * The instance of the root component (defined in the configuration {@link sap.ui.core.Configuration#getRootComponent})
		 * @private
		 */
		this.oRootComponent = null;
	
		/**
		 * Ordered collection of initEvent listeners
		 * Moved here (before boot()) so that the libraries can be registered for lazy load!!
		 * @private
		 */
		this.aInitListeners = [];
	
		/**
		 * Whether the legacy library has to be loaded.
		 * @private
		 */
		this.bInitLegacyLib = false;
	
		log.info("Creating Core",null,METHOD);
	
		/**
		 * Object holding the interpreted configuration
		 * Initialized from the global "sap-ui-config" object and from Url parameters
		 * @private
		 */
		this.oConfiguration = new sap.ui.core.Configuration(this);
	
		// enable complex bindings if configured
		if ( this.oConfiguration["xx-bindingSyntax"] === "complex" ) {
			sap.ui.base.ManagedObject.bindingParser = sap.ui.base.BindingParser.complexParser;
		}
		// switch bindingParser to designTime mode if configured 
		if (this.oConfiguration["xx-designMode"] == true ) {
			sap.ui.base.BindingParser._keepBindingStrings = true;
		}	
		// grant ElementMetadata "friend" access to Core for registration
		sap.ui.core.ElementMetadata.prototype.register = function(oMetadata) {
			that.registerElementClass(oMetadata);
		};
		// grant Element "friend" access to Core for (de-)registration
		sap.ui.core.Element.prototype.register = function() {
			that.registerElement(this);
		};
		sap.ui.core.Element.prototype.deregister = function() {
			that.deregisterElement(this);
		};
	
		// grant Component "friend" access to Core for (de-)registration
		sap.ui.core.Component.prototype.register = function() {
			that.registerObject(this);
		};
		sap.ui.core.Component.prototype.deregister = function() {
			that.deregisterObject(this);
		};
	
		// grant Template "friend" access to Core for (de-)registration
		sap.ui.core.tmpl.Template.prototype.register = function() {
			that.registerObject(this);
		};
		sap.ui.core.tmpl.Template.prototype.deregister = function() {
			that.deregisterObject(this);
		};
	
		// grant Application "friend" access to Core for (de-)registration
		sap.ui.app.Application.prototype.register = function() {
			that.setApplication(this);
		};
		
		// handle modules
		var aModules = this.oConfiguration.modules;
		if ( this.oConfiguration.getDebug() ) {
			// add debug module if configured
			aModules.unshift("sap-ui-debug");
		}
		// enforce the core library as the first loaded module
		var i=jQuery.inArray("sap.ui.core.library", aModules);
		if ( i!=0 ) {
			if ( i>0 ) {
				aModules.splice(i,1);
			}
			aModules.unshift("sap.ui.core.library");
		}
		
		log.info("Declared modules: " + aModules, METHOD);
	
		var oCfgData = window["sap-ui-config"];
		// Configuration might have a themeRoot, if so integrate it in themeroots
		if ( this.oConfiguration.themeRoot ) {
			oCfgData = oCfgData || {};
			oCfgData.themeroots = oCfgData.themeroots || {};
			oCfgData.themeroots[this.oConfiguration.getTheme()] = this.oConfiguration.themeRoot;
		}
		if (oCfgData) {
			// read themeRoots configuration
			if (oCfgData.themeroots) {
				for (var themeName in oCfgData.themeroots) {
					var themeRoot = oCfgData.themeroots[themeName];
					if (typeof themeRoot === "string") {
						this.setThemeRoot(themeName, themeRoot);
					} else {
						for (var lib in themeRoot) {
							if (lib.length > 0) {
								this.setThemeRoot(themeName, [lib], themeRoot[lib]);
							} else {
								this.setThemeRoot(themeName, themeRoot[lib]);
							}
						}
					}
				}
			}
		}
	
		// set CSS class for the theme name
		this.sTheme = this.oConfiguration.getTheme();
		jQuery(document.documentElement).addClass("sapUiTheme-" + this.sTheme);
		log.info("Declared theme " + this.sTheme,null,METHOD);
	
		if (this.oConfiguration.getRTL()) {
			jQuery(document.documentElement).attr("dir", "rtl"); // webkit does not allow setting document.dir before the body exists
			log.info("RTL mode activated",null,METHOD);
		}
	
	
		//set the browser for css attribute selectors. do not move this to the onload function because sf and ie do not
		//use the classes
		var $html = jQuery("html");
		
		var b = sap.ui.Device.browser;
		var id = b.name;
		
		if(id === b.BROWSER.CHROME){
			jQuery.browser.safari = false;
			jQuery.browser.chrome = true;
		}else if(id === b.BROWSER.SAFARI){
			jQuery.browser.safari = true;
			jQuery.browser.chrome = false;
			if(b.mobile){
				id = "m"+id;
			}
		}
		
		if(id){
			jQuery.browser.fVersion = b.version;
			jQuery.browser.mobile = b.mobile;
			
			id = id + Math.floor(b.version);
			$html.attr("data-sap-ui-browser", id);
			log.debug("Browser-Id: " + id, null, METHOD);
		}
		
	
		$html.attr("data-sap-ui-os", sap.ui.Device.os.name + sap.ui.Device.os.versionStr);
		var osCSS = null;
		switch(sap.ui.Device.os.name){
			case sap.ui.Device.os.OS.IOS:
				osCSS = "sap-ios";
				break;
			case sap.ui.Device.os.OS.ANDROID:
				osCSS = "sap-android";
				break;
			case sap.ui.Device.os.OS.BLACKBERRY:
				osCSS = "sap-bb";
				break;
			case sap.ui.Device.os.OS.WINDOWS_PHONE:
				osCSS = "sap-winphone";
				break;
		}
		if(osCSS){
			$html.addClass(osCSS);
		}
	
		//if weinre id is set, load weinre target script
		if (this.oConfiguration.getWeinreId()) {
			log.info("Starting WEINRE Remote Web Inspector");
			var sWeinreScript = "<script src=\"";
			sWeinreScript += this.oConfiguration.getWeinreServer();
			sWeinreScript += "/target/target-script-min.js#";
			sWeinreScript += jQuery.sap.encodeURL(this.oConfiguration.getWeinreId());
			sWeinreScript += "\"></script>";
			document.write(sWeinreScript);
		}
	
		// create accessor to the Core API early so that initLibrary and others can use it
		/**
		 * Retrieve the {@link sap.ui.core.Core SAPUI5 Core} instance for the current window.
		 * @returns the API of the current SAPUI5 Core instance.
		 * @public
		 * @function
		 */
		sap.ui.getCore = jQuery.sap.getter(this.getInterface());
	
		//Init the HTML5 support if necessary before initialize the RenderManager
		sap.ui.core.RenderManager.initHTML5Support();
		// create the RenderManager so it can be used already
		this.oRenderManager = new sap.ui.core.RenderManager();
	
		// sync point 1 synchronizes document ready and rest of UI5 boot
		var oSyncPoint1 = jQuery.sap.syncPoint("UI5 Document Ready", function(iOpenTasks, iFailures) {
			that.handleLoad();
		});
		var iDocumentReadyTask = oSyncPoint1.startTask("document.ready");
		var iCoreBootTask = oSyncPoint1.startTask("preload and boot");
	
		// task 1 is to wait for document.ready 
		jQuery(function() {
			log.trace("document is ready");
			oSyncPoint1.finishTask(iDocumentReadyTask);
		}); 
		
		// sync point 2 synchronizes all preload script loads and the end of the bootstrap script
		var oSyncPoint2 = jQuery.sap.syncPoint("UI5 Core Preloads and Bootstrap Script", function(iOpenTasks, iFailures) {
			log.trace("Core loaded: open=" + iOpenTasks + ", failures=" + iFailures);
			that._boot();
			oSyncPoint1.finishTask(iCoreBootTask);
		});
	
		// when a boot task is configured, add it to syncpoint2
		var fnCustomBootTask = this.oConfiguration["xx-bootTask"]; 
		if ( fnCustomBootTask ) {
		    var iCustomBootTask = oSyncPoint2.startTask("custom boot task");
		    fnCustomBootTask( function(bSuccess) { 
					oSyncPoint2.finishTask(iCustomBootTask, typeof bSuccess === "undefined" || bSuccess === true );
		    });
		}

		/**
		 * Whether the current browser needs a polyfill as a fallback for flex box support
		 * @type {boolean}
		 * @private
		 * @name jQuery.support.useFlexBoxPolyfill
		 * @since 1.12.0
		 * @deprecated since version 1.16.0
		 *
		 * For backwards compatibility we can't remove the deprecated flexbox polyfill.
		 * However, if the compatibility version is 1.16 or higher then the polyfill
		 * should not be used.
		 */
		var useFlexBoxPolyfillCompatVersion = new jQuery.sap.Version(this.oConfiguration.getCompatibilityVersion("flexBoxPolyfill"));

		// Always false if version is >= 1.16
		if(useFlexBoxPolyfillCompatVersion.compareTo("1.16") >= 0) {
			jQuery.support.useFlexBoxPolyfill = false;
		} else if(!jQuery.support.flexBoxLayout && !jQuery.support.newFlexBoxLayout && !jQuery.support.ie10FlexBoxLayout) {
			jQuery.support.useFlexBoxPolyfill = true;
		} else {
			jQuery.support.useFlexBoxPolyfill = false;
		}

		// when the bootstrap script has finished, it calls sap.ui.getCore().boot() 
		var iBootstrapScriptTask = oSyncPoint2.startTask("bootstrap script");
		this.boot = function() {
			if (this.bBooted) {
				return;
			}
			this.bBooted = true;
			oSyncPoint2.finishTask(iBootstrapScriptTask);
		};
		
		// determine preload mode (e.g. resolve default or auto)
		var sPreloadMode = this.oConfiguration.preload;
		// if debug sources are requested, then the preload feature must be deactivated
		if ( window["sap-ui-debug"] ) {
			sPreloadMode = "";
		}
		// when the preload mode is 'auto', it will be set to 'sync' for optimized sources
		if ( sPreloadMode === "auto" ) {
			sPreloadMode = (window["sap-ui-optimized"] && !this.oConfiguration['xx-loadAllMode']) ? "sync" : "";
		}
		// write back the determined mode for later evaluation (e.g. loadLibrary)
		this.oConfiguration.preload = sPreloadMode;
		
		if ( sPreloadMode === "sync" || sPreloadMode === "async" ) {
			var bAsyncPreload = sPreloadMode !== "sync";
			jQuery.each(aModules, function(i,sModule) {
				if ( sModule.match(/\.library$/) ) {
					// Note: in async mode, all preloads together contribute to oSyncPoint2. 
					// Only after that SP2 has been reached, library modules will be required by the Core.
					jQuery.sap.preloadModules(sModule + "-preload", bAsyncPreload, oSyncPoint2);
				}
			});
		}
	
		// initializes the application cachebuster mechanism if configured
		var aACBConfig = this.oConfiguration.getAppCacheBuster();
		if (aACBConfig && aACBConfig.length > 0) {
			jQuery.sap.require("sap.ui.core.AppCacheBuster");
			sap.ui.core.AppCacheBuster.boot(oSyncPoint2);
		}
	
	},
	
	metadata : {
		publicMethods: ["boot", "isInitialized","isThemeApplied","attachInitEvent","attachInit","getRenderManager","createRenderManager",
						 "getConfiguration", "setRoot", "createUIArea", "getUIArea", "getUIDirty", "getElementById",
						 "getCurrentFocusedControlId", "getControl", "getComponent", "getTemplate", "lock", "unlock","isLocked",
						 "attachEvent","detachEvent","applyChanges", "getEventBus",
						 "applyTheme","setThemeRoot","attachThemeChanged","detachThemeChanged","getStaticAreaRef",
						 "registerPlugin","unregisterPlugin","getLibraryResourceBundle", "byId",
						 "getLoadedLibraries", "loadLibrary", "initLibrary",
						 "includeLibraryTheme", "setModel", "getModel", "hasModel", "isMobile", 
						 "attachControlEvent", "detachControlEvent", "attachIntervalTimer", "detachIntervalTimer",
						 "attachParseError", "detachParseError", "fireParseError",  
						 "attachValidationError", "detachValidationError", "fireValidationError",
						 "attachFormatError", "detachFormatError", "fireFormatError", 
						 "attachValidationSuccess", "detachValidationSuccess", "fireValidationSuccess",
						 "attachLocalizationChanged", "detachLocalizationChanged", 
						 "attachLibraryChanged", "detachLibraryChanged", 
						 "isStaticAreaRef", "createComponent", "getRootComponent", "getApplication"]
	}
	
});

/**
 * Map of event names and ids, that are provided by this class
 * @private
 */
sap.ui.core.Core.M_EVENTS = {ControlEvent: "ControlEvent", UIUpdated: "UIUpdated", ThemeChanged: "ThemeChanged", LocalizationChanged: "localizationChanged",
		LibraryChanged : "libraryChanged", 
		ValidationError : "validationError", ParseError : "parseError", FormatError : "formatError", ValidationSuccess : "validationSuccess"};

/**
 * Boots the core and injects the necessary css and js files for the library.
 * Applications shouldn't call this method. It is automatically called by the bootstrap scripts (e.g. sap-ui-core.js)
 *
 * @private
 */
sap.ui.core.Core.prototype._boot = function() {

	//do not allow any event processing until the Core is booting
	this.lock();

	// if a list of preloaded library CSS is configured, request a merged CSS (if application did not already do it)  
	var aCSSLibs = this.oConfiguration['xx-preloadLibCss'];
	if ( aCSSLibs.length > 0 ) {
		// a leading "!" denotes that the application has loaded the file already 
		var bAppManaged = aCSSLibs[0].slice(0,1) === "!";
		if ( bAppManaged ) {
			aCSSLibs[0] = aCSSLibs[0].slice(1); // also affect same array in this.oConfiguration!
		}
		if ( aCSSLibs[0] === "*" ) {
			// replace with configured libs
			aCSSLibs.splice(0,1); // remove *
			var pos=0;
			jQuery.each(this.oConfiguration.modules, function(i,mod) {
				var m = mod.match(/^(.*)\.library$/);
				if ( m ) {
					aCSSLibs.splice(pos,0,m[1]);
				}
			});
		}
		if ( !bAppManaged ) {
			this.includeLibraryTheme("sap-ui-merged", undefined, "?l=" + aCSSLibs.join(","));
		}
	}

	// load all modules now
	var that = this;
	jQuery.each(this.oConfiguration.modules, function(i,mod) {
		var m = mod.match(/^(.*)\.library$/);
		if ( m ) {
			that.loadLibrary(m[1]);
		} else {
			jQuery.sap.require(mod);
		}
	});

	//allow events again
	this.unlock();
		
};


/**
 * Applies the theme with the given name (by loading the respective style sheets, which does not disrupt the application).
 *
 * By default, the theme files are expected to be located at path relative to the respective control library ([libraryLocation]/themes/[themeName]).
 * Different locations can be configured by using the method setThemePath() or by using the second parameter "sThemeBaseUrl" of applyTheme().
 * Usage of this second parameter is a shorthand for setThemePath and internally calls setThemePath, so the theme location is then known.
 *
 * sThemeBaseUrl is a single URL to specify the default location of all theme files. This URL is the base folder below which the control library folders
 * are located. E.g. if the CSS files are not located relative to the root location of UI5, but instead they are at locations like
 *    http://my.server/myapp/resources/sap/ui/core/themes/my_theme/library.css
 * then the URL that needs to be given is:
 *    http://my.server/myapp/resources
 * All theme resources are then loaded from below this folder - except if for a certain library a different location has been registered.
 *
 * If the theme resources are not all either below this base location or  with their respective libraries, then setThemePath must be
 * used to configure individual locations.
 *
 * @param {string} sThemeName the name of the theme to be loaded
 * @param {string} [sThemeBaseUrl] the (optional) base location of the theme
 * @public
 */
sap.ui.core.Core.prototype.applyTheme = function(sThemeName, sThemeBaseUrl) {
	jQuery.sap.assert(typeof sThemeName === "string", "sThemeName must be a string");
	jQuery.sap.assert(typeof sThemeBaseUrl === "string" || typeof sThemeBaseUrl === "undefined", "sThemeBaseUrl must be a string or undefined");

	sThemeName = this.oConfiguration._normalizeTheme(sThemeName, sThemeBaseUrl);
	
	if (sThemeBaseUrl) {
		this.setThemeRoot(sThemeName, sThemeBaseUrl);
	}

	// only apply the theme if it is different from the active one
	if (sThemeName && this.sTheme != sThemeName) {
		var sCurrentTheme = this.sTheme;

		this._updateThemeUrls(sThemeName);
		this.sTheme = sThemeName;
		this.oConfiguration._setTheme(sThemeName);
		
		// modify the <html> tag's CSS class with the theme name
		jQuery(document.documentElement).removeClass("sapUiTheme-" + sCurrentTheme).addClass("sapUiTheme-" + sThemeName);

		// notify the listeners
		if ( this.oThemeCheck ) {
			this.oThemeCheck.fireThemeChangedEvent(false, true);
		}
	}
};

// modify style sheet URLs to point to the given theme, using the current RTL mode
sap.ui.core.Core.prototype._updateThemeUrls = function(sThemeName) {
	var that = this,
	sRTL = this.oConfiguration.getRTL() ? "-RTL" : "";

	// select "our" stylesheets
	jQuery("link[id^=sap-ui-theme-]").each(function() {
		var sLibName = this.id.slice(13), // length of "sap-ui-theme-"
			sLibFileName = this.href.slice(this.href.lastIndexOf("/") + 1),
			sStandardLibFilePrefix = "library", 
			sHref,
			pos;
		
		// handle 'variants'
		if ((pos = sLibName.indexOf("-[")) > 0) { // assumes that "-[" does not occur as part of a library name
			sStandardLibFilePrefix += sLibName.slice(pos+2, -1); // 2=length of "-]" 
			sLibName = sLibName.slice(0, pos);
		}
		
		// try to distinguish "our" library css from custom css included with the ':' notation in includeLibraryTheme
		if ( sLibFileName === (sStandardLibFilePrefix + ".css") || sLibFileName === (sStandardLibFilePrefix + "-RTL.css") ) {
			sLibFileName = sStandardLibFilePrefix + sRTL + ".css"; 
		}
		
		// set new URL
		sHref = that._getThemePath(sLibName, sThemeName) + sLibFileName
		if ( sHref != this.href ) {
			this.href = sHref;
			jQuery(this).removeAttr("sap-ui-ready");
		}
	});
};

/**
 * Returns the URL of the folder in which the CSS file for the given theme and the given library is located .
 * The returned URL ends with a slash.
 *
 * @param sLibName
 * @param sThemeName
 * @private
 */
sap.ui.core.Core.prototype._getThemePath = function(sLibName, sThemeName) {
	if (this._mThemeRoots) {
		var path =  this._mThemeRoots[sThemeName + " " + sLibName] || this._mThemeRoots[sThemeName];
		// check whether for this combination (theme+lib) a URL is registered or for this theme a default location is registered
		if (path) {
			path = path + sLibName.replace(/\./g, "/") + "/themes/" + sThemeName + "/";
			jQuery.sap.registerModulePath(sLibName + ".themes." + sThemeName, path);
			return path;
		}
	}

	// use the library location as theme location
	return jQuery.sap.getModulePath(sLibName + ".themes." + sThemeName, "/");
};


/**
 * Defines the root directory from below which UI5 should load the theme with the given name. 
 * Optionally allows restricting the setting to parts of a theme covering specific control libraries.
 *
 * Example:
 * <code>
 *   core.setThemeRoot("my_theme", "http://mythemeserver.com/allThemes");
 *   core.applyTheme("my_theme");
 * </code>
 * will cause the following file to be loaded:
 * <code>http://mythemeserver.com/allThemes/sap/ui/core/themes/my_theme/library.css</code>
 * (and the respective files for all used control libraries, like <code>http://mythemeserver.com/allThemes/sap/ui/commons/themes/my_theme/library.css</code>
 * if the sap.ui.commons library is used)
 *
 * If parts of the theme are at different locations (e.g. because you provide a standard theme like "sap_goldreflection" for a custom control library and
 * this self-made part of the standard theme is at a different location than the UI5 resources), you can also specify for which control libraries the setting
 * should be used, by giving an array with the names of the respective control libraries as second parameter:
 * <code>core.setThemeRoot("sap_goldreflection", ["my.own.library"], "http://mythemeserver.com/allThemes");</code>
 * This will cause the Gold Reflection theme to be loaded normally from the UI5 location, but the part for styling the "my.own.library" controls will be loaded from:
 * <code>http://mythemeserver.com/allThemes/my/own/library/themes/sap_goldreflection/library.css</code>
 *
 * If the custom theme should be loaded initially (via bootstrap attribute), the "themeRoots" property of the window["sap-ui-config"] object must be used instead
 * of Core.setThemeRoot(...) in order to configure the theme location early enough.
 *
 * @param {string} sThemeName the name of the theme for which to configure the location
 * @param {string[]} [aLibraryNames] the optional library names to which the configuration should be restricted
 * @param {string} sThemeBaseUrl the base URL below which the CSS file(s) will be loaded from
 * @return {sap.ui.core.Core} the Core, to allow method chaining
 * @since 1.10
 * @public
 */
sap.ui.core.Core.prototype.setThemeRoot = function(sThemeName, aLibraryNames, sThemeBaseUrl) {
	jQuery.sap.assert(typeof sThemeName === "string", "sThemeName must be a string");
	jQuery.sap.assert((jQuery.isArray(aLibraryNames) && typeof sThemeBaseUrl === "string") || (typeof aLibraryNames === "string" && sThemeBaseUrl === undefined), "either the second parameter must be a string (and the third is undefined), or it must be an array and the third parameter is a string");

	if (!this._mThemeRoots) {
		this._mThemeRoots = {};
	}

	// normalize parameters
	if (sThemeBaseUrl === undefined) {
		sThemeBaseUrl = aLibraryNames;
		aLibraryNames = undefined;
	}
	sThemeBaseUrl = sThemeBaseUrl + (sThemeBaseUrl.slice(-1) == "/" ? "" : "/");

	if (aLibraryNames) {
		// registration of URL for several libraries
		for (var i = 0; i < aLibraryNames.length; i++) {
			var lib = aLibraryNames[i];
			this._mThemeRoots[sThemeName + " " + lib] = sThemeBaseUrl;
		}

	} else {
		// registration of theme default base URL
		this._mThemeRoots[sThemeName] = sThemeBaseUrl;
	}
	
	return this;
};


/**
 * Initializes the Core after the initial page was loaded
 * @private
 */
sap.ui.core.Core.prototype.init = function() {

	if (this.bInitialized) {
		return;
	}

	var log = jQuery.sap.log,
		METHOD = "sap.ui.core.Core.init()";

	// ensure that the core is booted now (e.g. loadAllMode)
	this.boot();

	log.info("Initializing",null,METHOD);

	this.oFocusHandler = new sap.ui.core.FocusHandler(document.body, this);
	this.oResizeHandler = new sap.ui.core.ResizeHandler(this);
	this.oThemeCheck = new sap.ui.core.ThemeCheck(this);

	log.info("Initialized",null,METHOD);

	this.bInitialized = true;

	// start the plugins
	log.info("Starting Plugins",null,METHOD);
	this.startPlugins();
	log.info("Plugins started",null,METHOD);

	var oConfig = this.oConfiguration;
	// create any pre-configured UIAreas
//	if ( oConfig.areas && oConfig.areas.length > 0 ) {
	if ( oConfig.areas ) {
		// log.warning("deprecated config option '(data-sap-ui-)areas' used.");
		for (var i=0, l = oConfig.areas.length; i < l; i++) {
			this.createUIArea(oConfig.areas[i]);
		}
		oConfig.areas = undefined;
	}

	// execute a configured init hook
	if ( oConfig.onInit ) {
		if ( typeof oConfig.onInit === "function" ) {
			oConfig.onInit();
		} else {
			// DO NOT USE jQuery.globalEval as it executes async in FF!
			jQuery.sap.globalEval(oConfig.onInit);
		}
		oConfig.onInit = undefined;
	}
	
	this.oThemeCheck.fireThemeChangedEvent(true);

	// load the root component
	var sRootComponent = oConfig.getRootComponent();
	if (sRootComponent) {
		
		log.info("Loading Root Component: " + sRootComponent,null,METHOD);
		var oComponent = sap.ui.component({
			name: sRootComponent
		});
		this.oRootComponent = oComponent;
		
		var sRootNode = oConfig["xx-rootComponentNode"];
		if (sRootNode && oComponent instanceof sap.ui.core.UIComponent) {
			var oRootNode = jQuery.sap.domById(sRootNode);
			if (oRootNode) {
				log.info("Creating ComponentContainer for Root Component: " + sRootComponent,null,METHOD);
				var oContainer = new sap.ui.core.ComponentContainer({
					component: oComponent,
					propagateModel: true /* TODO: is this a configuration or do this by default? right now it behaves like the application */
				});
				oContainer.placeAt(oRootNode);
			}
		}
		
	} else {
		
		// DEPRECATED LEGACY CODE: load the application (TODO: remove when Application is removed!)
		var sApplication = oConfig.getApplication();
		if (sApplication) {
			log.warning("The configuration 'application' is deprecated. Please use the configuration 'component' instead! Please migrate from sap.ui.app.Application to sap.ui.core.Component.");
			log.info("Loading Application: " + sApplication,null,METHOD);
			jQuery.sap.require(sApplication);
			var oClass = jQuery.sap.getObject(sApplication);
			jQuery.sap.assert(oClass !== undefined, "The specified application \"" + sApplication + "\" could not be found!");
			var oApplication = new oClass();
			jQuery.sap.assert(oApplication instanceof sap.ui.app.Application, "The specified application \"" + sApplication + "\" must be an instance of sap.ui.app.Application!");
		}
		
	}

	// make sure that we have no concurrent modifications on the init listeners
	var aCallbacks = this.aInitListeners;
	// reset the init listener so that we are aware the listeners are already
	// executed and the initialization phase is over / follow up registration
	// would then immediately call the init event handler
	this.aInitListeners = undefined;

	// execute registered init event handlers
	if (aCallbacks && aCallbacks.length > 0) {
		// execute the callbacks
		log.info("Fire Loaded Event",null,METHOD);
		jQuery.each(aCallbacks, function(i,f) { f(); }); 
	}

	this._rerenderAllUIAreas(); // directly render without setTimeout, so rendering is guaranteed to be finished when init() ends
};

/**
 * Handles the load event of the browser to initialize the Core
 * @private
 */
sap.ui.core.Core.prototype.handleLoad = function () {

	//do not allow any event processing until the Core is initialized
	var bWasLocked = this.isLocked();
	if ( !bWasLocked ) {
		this.lock();
	}
	this.init();
	//allow event processing again
	if ( !bWasLocked ) {
		this.unlock();
	}

};

/**
 * Returns true if the Core has already been initialized. This means that instances 
 * of RenderManager etc. do already exist and the init event has already been fired 
 * (and will not be fired again).
 *
 * @return {boolean} whether the Core has already been initialized
 * @public
 */
sap.ui.core.Core.prototype.isInitialized = function () {
	return this.bInitialized;
};

/**
 * Returns true, if the styles of the current theme are already applied, false otherwise.
 * 
 * This function must not be used before the init event of the Core.
 * If the styles are not yet applied an theme changed event will follow when the styles will be applied.
 *
 * @return {boolean} whether the styles of the current theme are already applied
 * @public
 */
sap.ui.core.Core.prototype.isThemeApplied = function () {
	return sap.ui.core.ThemeCheck.themeLoaded;
};

/**
 * Attaches a given function to the <code>initEvent</code> event of the core.
 * 
 * This event will only be fired once; you can check if it has been fired already 
 * by calling {@link #isInitialized}.
 *
 * @param {function} fnFunction the function to be called on event firing.
 * @public
 * @deprecated since 1.13.2 Register to the more convenient {@link sap.ui.core.Core#attachInit init event} instead
 */
sap.ui.core.Core.prototype.attachInitEvent = function (fnFunction) {
	jQuery.sap.assert(typeof fnFunction === "function", "fnFunction must be a function");
	if (this.aInitListeners) {
		this.aInitListeners.push(fnFunction);
	}
};

/**
 * Attaches a given function to the <code>initEvent</code> event of the core. 
 * 
 * The given callback function will either be called once the Core has been initialized 
 * or, if it has been initialized already, it will be called immediately.
 *
 * @param {function} fnFunction the callback function to be called on event firing.
 * @public
 * @since 1.13.2
 */
sap.ui.core.Core.prototype.attachInit = function (fnFunction) {
	jQuery.sap.assert(typeof fnFunction === "function", "fnFunction must be a function");
	if (this.aInitListeners) {
		this.aInitListeners.push(fnFunction);
	} else {
		fnFunction();
	}
};

/**
 * Locks the Core. No browser events are dispatched to the controls.
 * 
 * Lock should be called before and after the dom is modified for rendering, roundtrips...
 * Exceptions might be the case for asynchronous UI behavior
 * @public
 */
sap.ui.core.Core.prototype.lock = function () {
	// TODO clarify it the documentation is really (stil?) true
	this.bLocked = true;
};

/**
 * Unlocks the Core. 
 * 
 * Browser events are dispatched to the controls again after this method is called.
 * @public
 */
sap.ui.core.Core.prototype.unlock = function () {
	this.bLocked = false;
};

/**
 * Returns the locked state of the <code>sap.ui.core.Core</code>
 * @return {boolean} locked state
 * @public
 */
sap.ui.core.Core.prototype.isLocked = function () {
	return this.bLocked;
};

/**
 * Returns the Configuration of the Core.
 *
 * @return {sap.ui.core.Configuration} the Configuration of the current Core.
 * @public
 */
sap.ui.core.Core.prototype.getConfiguration = function () {
	return this.oConfiguration;
};

/**
 * @public
 * @deprecated Since version 0.15.0. Replaced by <code>createRenderManager()</code>
 */
sap.ui.core.Core.prototype.getRenderManager = function() {
	return this.createRenderManager(); //this.oRenderManager;
};

/**
 * Returns a new instance of the RenderManager interface.
 *
 * @return {sap.ui.core.RenderManager} the new instance of the RenderManager interface.
 * @public
 */
sap.ui.core.Core.prototype.createRenderManager = function() {
	return (new sap.ui.core.RenderManager()).getInterface();
};

/**
 * Returns the Id of the control/element currently in focus.
 * @return {string} the Id of the control/element currently in focus.
 * @public
 */
sap.ui.core.Core.prototype.getCurrentFocusedControlId = function() {
	if(!this.isInitialized()){
		throw new Error("Core must be initialized");
	}
	return this.oFocusHandler.getCurrentFocusedControlId();
};

/**
 * Synchronously loads the given library and makes it available to the application.
 *
 * Loads the *.library module, which contains all preload modules (enums, types, content of a shared.js
 * if it exists). The library module will call initLibrary with additional metadata for the library.
 *
 * As a result, consuming applications can instantiate any control or element from that library
 * without having to write import statements for the controls or for the enums.
 *
 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
 * library will be redirected to the given Url. This is convenience for a call to
 * <pre>
 *   jQuery.sap.registerModulePath(sLibrary, sUrl);
 * </pre>
 *
 * When the given library has been loaded already, no further action will be taken.
 * Especially, a given Url will not be honored!
 *
 * Note: this method does not participate in the supported preload of libraries.
 *  
 * @param {string} sLibrary name of the library to import
 * @param {string} [sUrl] URL to load the library from
 * @public
 */
sap.ui.core.Core.prototype.loadLibrary = function(sLibrary, sUrl) {
	jQuery.sap.assert(typeof sLibrary === "string", "sLibrary must be a string");
	jQuery.sap.assert(sUrl === undefined || typeof sUrl === "string", "sUrl must be a string or empty");

	// load libraries only once
	if ( !this.mLibraries[sLibrary] ) {

		var sModule = sLibrary + ".library",
			sAllInOneModule;

		// if a sUrl is given, redirect access to it
		if ( sUrl ) {
			jQuery.sap.registerModulePath(sLibrary, sUrl);
		}

		// optimization: in all-in-one mode we are loading all modules of the lib in a single file
		if ( this.oConfiguration['xx-loadAllMode'] && !jQuery.sap.isDeclared(sModule) ) {
			sAllInOneModule = sModule + "-all";
			jQuery.sap.log.debug("load all-in-one file " + sAllInOneModule);
			jQuery.sap.require(sAllInOneModule);
		} else if ( this.oConfiguration.preload === 'sync' || this.oConfiguration.preload === 'async' ) { 					
			jQuery.sap.preloadModules(sModule + "-preload", /* force sync */ false);
		}

		// require the library module (which in turn will call initLibrary())
		jQuery.sap.require(sModule);

		// check for legacy code
		if ( !this.mLibraries[sLibrary] ) {
			jQuery.sap.log.warning("library " + sLibrary + " didn't initialize itself");
			this.initLibrary(sLibrary); // TODO redundant to generated initLibrary call....
		}
		
		if ( this.oThemeCheck && this.isInitialized() ) {
			this.oThemeCheck.fireThemeChangedEvent(true);
		}

	}

	// Note: return parameter is undocumented by intention! Structure of lib info might change
	return this.mLibraries[sLibrary];
};

/**
 * Creates a component with the provided id and settings.
 *
 * When the optional parameter <code>sUrl</code> is given, then all request for resources of the
 * library will be redirected to the given Url. This is convenience for a call to
 * <pre>
 *   jQuery.sap.registerModulePath(sName, sUrl);
 * </pre>
 *
 * @param {string|object} vComponent name of the component to import or object containing all needed parameters
 * @param {string} [vComponent.name] name of the component to import 
 * @param {string} [vComponent.url] URL to load the component from
 * @param {string} [vComponent.id] ID for the component instance
 * @param {object} [vComponent.settings] settings object for the component
 * @param {string} [vComponent.componentData] user specific data which is available during the whole lifecycle of the component
 * @param {string} [sUrl] the URL to load the component from
 * @param {string} [sId] the ID for the component instance
 * @param {object} [mSettings] the settings object for the component
 * @public
 */
sap.ui.core.Core.prototype.createComponent = function(vComponent, sUrl, sId, mSettings) {
	
	// convert the parameters into a configuration object
	if (typeof vComponent === "string") {
		vComponent = {
			name: vComponent,
			url: sUrl 
		};
		// parameter fallback (analog to ManagedObject)
		if (typeof sId === "object") {
			vComponent.settings = sId;
		} else {
			vComponent.id = sId;
			vComponent.settings = mSettings;
		}
	}
	
	// use the factory function
	return sap.ui.component(vComponent);
	
};

/**
 * Returns the instance of the root component (if exists).
 *
 * @return {sap.ui.core.Component} instance of the current root component
 * @public
 */
sap.ui.core.Core.prototype.getRootComponent = function() {
	return this.oRootComponent;
};

/**
 * Initializes a library for an already loaded library module.
 *
 * This method is intended to be called only from a library.js (e.g. generated code).
 * It includes the library specific stylesheet into the current page, and creates
 * lazy import stubs for all controls and elements in the library.
 *
 * As a result, consuming applications don't have to write import statements for the controls or for the enums.
 *
 * Synchronously loads any libraries that the given library depends on.
 *
 * @param {string|object} vLibInfo name of or info object for the library to import
 * @public
 */
sap.ui.core.Core.prototype.initLibrary = function(vLibInfo) {
	jQuery.sap.assert(typeof vLibInfo === "string" || typeof vLibInfo === "object", "vLibInfo must be a string or object");

	var bLegacyMode = typeof vLibInfo === "string",
		oLibInfo = bLegacyMode ? { name : vLibInfo } : vLibInfo,
		sLibName = oLibInfo.name,
		log = jQuery.sap.log,
		METHOD =  "sap.ui.core.Core.initLibrary()";

	if ( bLegacyMode ) {
		log.warning("[Deprecated] library " + sLibName + " uses old fashioned initLibrary() call (rebuild with newest generator)");
	}

	if ( !sLibName || this.mLibraries[sLibName] ) {
		return;
	}

	log.debug("Analyzing Library " + sLibName, null, METHOD);

	// Create lib info object. Also used as a marker that the library is loading/has been loaded
	this.mLibraries[sLibName] = oLibInfo = jQuery.extend({
	  dependencies : [],
	  types : [],
	  interfaces : [],
	  controls: [],
	  elements : []
	}, oLibInfo);

	// this code could be moved to a separate "legacy support" module
	function readLibInfoFromProperties() {

		// read library properties
		var oProperties = jQuery.sap.properties({url : sap.ui.resource(sLibName, "library.properties")});

		// version info
		oLibInfo.version = oProperties.getProperty(sLibName + "[version]");

		// dependencies
		var sDepInfo = oProperties.getProperty(sLibName + "[dependencies]");
		log.debug("Required Libraries: " + sDepInfo, null, METHOD);
		oLibInfo.dependencies = (sDepInfo && sDepInfo.split(/[,;| ]/)) || [];

		// collect types, controls and elements
		var aKeys = oProperties.getKeys(),
		  rPattern = /(.+)\.(type|interface|control|element)$/,
		  aMatch;
		for(var i=0; i<aKeys.length; i++) {
			var sEntityPath = oProperties.getProperty(aKeys[i]);
			if ( aMatch = sEntityPath.match(rPattern) ) {
				oLibInfo[aMatch[2]+"s"].push(aKeys[i]);
			}
		}
	}

	// (legacy) if only a string was given, read the library.properties instead
	if ( bLegacyMode ) {
		readLibInfoFromProperties();
	}

	// resolve dependencies
	for(var i=0; i<oLibInfo.dependencies.length; i++) {
		var sDepLib = oLibInfo.dependencies[i];
		log.debug("resolve Dependencies to " + sDepLib, null, METHOD);
		if ( !this.mLibraries[sDepLib] ) {
			log.warning("Dependency from " + sLibName + " to " + sDepLib + " has not been resolved by library itself", null, METHOD);
			this.loadLibrary(sDepLib);
		}
	}

	// register interface types
	sap.ui.base.DataType.registerInterfaceTypes(oLibInfo.interfaces);
	
	// create lazy imports for all controls and elements
	var aElements = oLibInfo.controls.concat(oLibInfo.elements);
	for(var i=0; i<aElements.length; i++) {
		sap.ui.lazyRequire(aElements[i], "new extend getMetadata"); // TODO don't create an 'extend' stub for final classes
	}

	// include the library theme, but only if it has not been suppressed in library metadata or by configuration
	if ( !oLibInfo.noLibraryCSS && jQuery.inArray(sLibName, this.oConfiguration['xx-preloadLibCss']) < 0 ) {
		this.includeLibraryTheme(sLibName);
	}

	// expose some legacy names
	oLibInfo.sName = oLibInfo.name;
	oLibInfo.aControls = oLibInfo.controls;

	// load and execute the library.js script
	if ( !jQuery.sap.isDeclared(sLibName + ".library") ) {
		// TODO redundant to generated require calls
		log.warning("Library Module " + sLibName + ".library" + " not loaded automatically", null, METHOD);
		jQuery.sap.require(sLibName + ".library");
	}

	this.fireLibraryChanged({name : sLibName, stereotype : "library", operation: "add", metadata : oLibInfo});
};

/**
 * Includes a library theme into the current page (if a variant is specified it
 * will include the variant library theme)
 * @param {string} sLibName the name of the UI library
 * @param {string} [sVariant] the variant to include (optional)
 * @param {string} [sQuery] to be used only by the Core
 * @public
 */
sap.ui.core.Core.prototype.includeLibraryTheme = function(sLibName, sVariant, sQuery) {
	jQuery.sap.assert(typeof sLibName === "string", "sLibName must be a string");
	jQuery.sap.assert(sVariant === undefined || typeof sVariant === "string", "sVariant must be a string or undefined");

	/*
	 * by specifiying a library name containing a colon (":") you can specify
	 * the file name of the CSS file to include (ignoring RTL)
	 */

	// include the stylesheet for the library (except for "classic" and "legacy" lib)
	if ((sLibName != "sap.ui.legacy") && (sLibName != "sap.ui.classic")) {

		// no variant?
		if (!sVariant) {
			sVariant = "";
		}

		// determine RTL
		var sRtl = (this.oConfiguration.getRTL() ? "-RTL" : "");

		// create the library file name
		var sLibFileName,
			sLibId = sLibName + (sVariant.length > 0 ? "-[" + sVariant + "]" : sVariant);
		if (sLibName && sLibName.indexOf(":") == -1) {
			sLibFileName = "library" + sVariant + sRtl;
		} else {
			sLibFileName = sLibName.substring(sLibName.indexOf(":") + 1) + sVariant;
			sLibName = sLibName.substring(0, sLibName.indexOf(":"));
		}

		// log and include
		var cssPathAndName = this._getThemePath(sLibName, this.sTheme) + sLibFileName + ".css" + (sQuery ? sQuery : "");
		jQuery.sap.log.info("Including " + cssPathAndName + " -  sap.ui.core.Core.includeLibraryTheme()");
		jQuery.sap.includeStyleSheet(cssPathAndName, "sap-ui-theme-" + sLibId);

		// if parameters have been used, update them with the new style sheet
		if (sap.ui.core.theming && sap.ui.core.theming.Parameters) {
			sap.ui.core.theming.Parameters._addLibraryTheme(cssPathAndName);
		}
	}

};

/**
 * Returns a map which contains the names of the loaded libraries as keys
 * and some additional information about each library as values.
 *
 * @experimental The details of the 'values' in the returned map are not yet specified!
 * Their structure might change in future versions without notice. So applications
 * can only rely on the set of keys as well as the pure existance of a value.
 *
 * @return {map} map of library names / controls
 * @public
 */
sap.ui.core.Core.prototype.getLoadedLibraries = function() {
	return jQuery.extend({}, this.mLibraries); // TODO deep copy or real Library object?
};

/**
 * Implicitly creates a new <code>UIArea</code> (or reuses an exiting one) for the given DOM reference and
 * adds the given control reference to the UIAreas content (existing content will be removed).
 *
 * @param {String,DomRef} oDomRef a Dom Reference or Id String of the UIArea
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oControl the Control that should be the added to the <code>UIArea</code>.
 * @public
 * @deprecated Use function <code>oControl.placeAt(oDomRef, "only")</code> of <code>sap.ui.core.Control</code> instead.
 */
sap.ui.core.Core.prototype.setRoot = function(oDomRef, oControl) {
	jQuery.sap.assert(typeof oDomRef === "string" || typeof oDomRef === "object", "oDomRef must be a string or object");
	jQuery.sap.assert(oControl instanceof sap.ui.base.Interface || oControl instanceof sap.ui.core.Control, "oControl must be a Control or Interface");

	if(oControl) {
		oControl.placeAt(oDomRef, "only");
	}
};

/**
 * Creates a new sap.ui.core.UIArea.
 *
 * @param {String,DomRef} oDomRef a DOM reference or ID string of the UIArea
 * @return {sap.ui.core.UIArea} a new UIArea
 * @public
 * @deprecated Use <code>setRoot()</code> instead!
 */
sap.ui.core.Core.prototype.createUIArea = function(oDomRef) {
	var that = this;
	jQuery.sap.assert(typeof oDomRef === "string" || typeof oDomRef === "object", "oDomRef must be a string or object");

	if (!oDomRef) {
		throw new Error("oDomRef must not be null");
	}

	// oDomRef might be (and actually IS in most cases!) a string (the ID of a DOM element)
	if (typeof(oDomRef) === "string") {
		var id = oDomRef;
		oDomRef = jQuery.sap.domById(oDomRef);
		if (!oDomRef) {
			throw new Error("DOM element with ID '" + id + "' not found in page, but application tries to insert content.");
		}
	}

	// if the domref does not have an ID or empty ID => generate one
	if (!oDomRef.id || oDomRef.id.length == 0) {
		oDomRef.id = jQuery.sap.uid();
	}

	// create a new or fetch an existing UIArea
	var sId = oDomRef.id;
	if (!this.mUIAreas[sId]) {
		this.mUIAreas[sId] = new sap.ui.core.UIArea(this, oDomRef);
		// propagate Models to newly created UIArea
		jQuery.each(this.oModels, function (sName, oModel){
			that.mUIAreas[sId].oPropagatedProperties.oModels[sName] = oModel;
		});
		this.mUIAreas[sId].propagateProperties(true);
	} else {
		// this should solve the issue of 'recreation' of a UIArea
		// e.g. via setRoot with a new domRef
		this.mUIAreas[sId].setRootNode(oDomRef);
	}
	return this.mUIAreas[sId];
};
 
/**
 * Returns a UIArea if the given ID/Element belongs to one.
 *
 * @public
 * @param {string|DomRef} o a DOM Reference or ID string of the UIArea
 * @return {sap.ui.core.UIArea} a UIArea with a given id or dom ref.
 */ 
sap.ui.core.Core.prototype.getUIArea = function(o) {
	jQuery.sap.assert(typeof o === "string" || typeof o === "object", "o must be a string or object");

	var sId = "";
	if (typeof(o)=="string") {
		sId = o;
	}
	else {
		sId = o.id;
	}

	if (sId) {
		return this.mUIAreas[sId];
	}

	return null;
};

/**
 * Informs the core about an UIArea that just became invalid.
 *
 * The core might use this information to minimize the set of
 * re-rendered UIAreas. But for the time being it just registers
 * a timer to trigger a re-rendering after the current event
 * has been processed.
 *
 * @param {sap.ui.core.UIArea} oUIArea UIArea that just became invalid
 * @private
 */
sap.ui.core.Core.prototype.addInvalidatedUIArea = function(oUIArea) {
	this.rerenderAllUIAreas(); // TODO: document why immediately rerender all??
};

/**
 * Retrieves a resource bundle for the given library and locale.
 *
 * If only one argument is given, it is assumed to be the libraryName. The locale
 * then falls back to the current {@link sap.ui.core.Configuration.prototype.getLanguage session locale}.
 * If no argument is given, the library also falls back to a default: "sap.ui.core".
 *
 * @param {string} [sLibraryName='sap.ui.core'] name of the library to retrieve the bundle for
 * @param {string} [sLocale] locale to retrieve the resource bundle for
 * @return {jQuery.sap.util.ResourceBundle} the best matching resource bundle for the given parameters or undefined
 * @public
 */
sap.ui.core.Core.prototype.getLibraryResourceBundle = function(sLibraryName, sLocale) {
	jQuery.sap.assert((sLibraryName === undefined && sLocale === undefined) || typeof sLibraryName === "string", "sLibraryName must be a string or there is no argument given at all");
	jQuery.sap.assert(sLocale === undefined || typeof sLocale === "string", "sLocale must be a string or omitted");

	// TODO move implementation together with similar stuff to a new class "UILibrary"?
	sLibraryName = sLibraryName || "sap.ui.core";
	sLocale = sLocale || this.getConfiguration().getLanguage();
	var sKey = sLibraryName + "/" + sLocale;
	if (!this.mResourceBundles[sKey]) {
		var sURL = sap.ui.resource(sLibraryName, 'messagebundle.properties');
		this.mResourceBundles[sKey] = jQuery.sap.resources({url : sURL, locale : sLocale});
	}
	return this.mResourceBundles[sKey];
};

sap.ui.core.Core.prototype.rerenderAllUIAreas = function() {
	if ( !this._sRerenderTimer ) {
		jQuery.sap.log.info("registering timer for delayed re-rendering");
		this._sRerenderTimer = jQuery.sap.delayedCall(0,this,"_rerenderAllUIAreas"); // decoupled for collecting several invalidations into one redraw
	}
};

sap.ui.core.Core.prototype._rerenderAllUIAreas = function() {

	// start performance measurement
	jQuery.sap.measure.start("rerenderAllUIAreas","Rerendering of all UIAreas");

	// clear the timer so that the next call to re-render will create a new timer
	if (this._sRerenderTimer) {
		jQuery.sap.clearDelayedCall(this._sRerenderTimer); // explicitly stop the timer, as this call might be synchronous while still a timer is running
		this._sRerenderTimer = undefined;
	}

	var bUIUpdated = false;
	// avoid 'concurrent modifications' as IE8 can't handle them
	var mUIAreas = this.mUIAreas;
	for (var sId in mUIAreas) {
		bUIUpdated = mUIAreas[sId].rerender() || bUIUpdated;
	}

	// TODO this only covers parts of the relevant changes, 
	// A full solution requires changes in UIArea.rerender, see TODO about rendering infos there
	jQuery.sap.assert(!this._sRerenderTimer, "invalidate() while rendering");

	// TODO: Provide information on what actually was re-rendered...
	if(bUIUpdated) {
		this.fireUIUpdated();
	}

	// end performance measurement
	jQuery.sap.measure.end("rerenderAllUIAreas");
};


/**
 * Returns "true" if the UI is marked as dirty and will be cleaned/re-rendered after a certain small timeout.
 *
 * @return {boolean} true if some UI part is marked as dirty and will be cleaned up/re-rendered
 * @public
 */
sap.ui.core.Core.prototype.getUIDirty = function() {
	return !!this._sRerenderTimer;
};

/**
 * @name sap.ui.core.Core#UIUpdated
 * @event
 * @private
 */

sap.ui.core.Core.prototype.attachUIUpdated = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, fnFunction, oListener);
};

sap.ui.core.Core.prototype.detachUIUpdated = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, fnFunction, oListener);
};

sap.ui.core.Core.prototype.fireUIUpdated = function(mParameters) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, mParameters);
};

/**
 * @name sap.ui.core.Core#ThemeChanged
 * @event
 * @param {string} theme name of the new theme
 */

sap.ui.core.Core.prototype.attachThemeChanged = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.ThemeChanged, fnFunction, oListener);
};

sap.ui.core.Core.prototype.detachThemeChanged = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.ThemeChanged, fnFunction, oListener);
};

sap.ui.core.Core.prototype.fireThemeChanged = function(mParameters) {
	jQuery.sap.scrollbarSize(true);
	
	// special hook for resetting theming parameters before the controls get 
	// notified (lightweight coupling to static Parameters module)
	if (sap.ui.core.theming && sap.ui.core.theming.Parameters) {
		sap.ui.core.theming.Parameters.reset(/* bOnlyWhenNecessary= */ true);
	}
	
	// notify all elements/controls via a pseudo browser event
	var sEventId = sap.ui.core.Core.M_EVENTS.ThemeChanged;
	var oEvent = jQuery.Event(sEventId);
	oEvent.theme = mParameters ? mParameters.theme : null;
	jQuery.each(this.mElements, function(sId, oElement) {
		oElement._handleEvent(oEvent);
	});
	
	jQuery.sap.act.refresh();
	
	// notify the listeners via a control event
	this.fireEvent(sEventId, mParameters);
};

/**
 * Fired when any of the localization relevant configuration settings has changed
 * (e.g. language, rtl, formatLocale, datePattern, timePattern, numberSymbol, legacy formats).
 * 
 * The parameter <code>changes</code> contains additional information about the change. 
 * It is a plain object that can contain one or more of the following properties 
 * <ul>
 *   <li>language - the language setting has changed</li>
 *   <li>rtl - the character orientation mode (aka 'LTR/RTL mode') has changed</li>
 *   <li>formatLocale - the format locale has changed</li>
 * </ul>
 * (there might be other, currently undocumented settings)
 *  
 * The value for each property will be the new corresponding setting.
 * 
 * @name sap.ui.core.Core#localizationChanged
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {object} oEvent.getParameters.changes a map of the changed localization properties
 * @public
 */

/**
 * Register a listener for the <code>localizationChanged</code> event.
 * 
 * @param {function} fnFunction callback to be called 
 * @param {object} oListener context object to cal lthe function on.
 * @public
 */
sap.ui.core.Core.prototype.attachLocalizationChanged = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.LocalizationChanged, fnFunction, oListener);
};

/**
 * Unregister a listener from the <code>localizationChanged</code> event.
 * 
 * The listener will only be unregistered if the same function/context combination 
 * is given as in the call to <code>attachLocalizationListener</code>.
 * 
 * @param {function} fnFunction callback to be deregistered
 * @param {object} oListener context object given in a previous call to attachLocalizationChanged.
 * @public
 */
sap.ui.core.Core.prototype.detachLocalizationChanged = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.LocalizationChanged, fnFunction, oListener);
};

/**
 * @private
 */
sap.ui.core.Core.prototype.fireLocalizationChanged = function(mChanges) {
	var that=this,
		sEventId = sap.ui.core.Core.M_EVENTS.LocalizationChanged,
		oBrowserEvent = jQuery.Event(sEventId, {changes : mChanges}),
		fnAdapt = sap.ui.base.ManagedObject._handleLocalizationChange,
		changedSettings = [];

	jQuery.each(mChanges, function(key,value) { changedSettings.push(key); } );
	jQuery.sap.log.info("localization settings changed: " + changedSettings.join(","), null, "sap.ui.core.Core");
	
	/*
	 * Notify models that are able to handle a localization change
	 */
	jQuery.each(this.oModels, function(sName, oModel) {
		if ( oModel && oModel._handleLocalizationChange ) {
			oModel._handleLocalizationChange(); 
		}
	});

	/*
	 * Notify all UIAreas, Components, Elements to first update their models (phase 1) 
	 * and then to update their bindings and corresponding data types (phase 2) 
	 */
	function notifyAll(iPhase) {
		jQuery.each(this.mUIAreas, function() {
			fnAdapt.call(this, iPhase);
		});
		jQuery.each(this.mObjects["component"], function() {
			fnAdapt.call(this, iPhase);
		});
		jQuery.each(this.mElements, function() {
			fnAdapt.call(this, iPhase);
		});
	}
	
	notifyAll.call(this,1);
	notifyAll.call(this,2);
	
	// special handling for changes of the RTL mode
	if ( mChanges.rtl != undefined ) {
		// update the dir attribute of the document
		jQuery(document.documentElement).attr("dir", mChanges.rtl ? "rtl" : "ltr");
		// modify style sheet URLs
		this._updateThemeUrls(this.sTheme);
		// invalidate all UIAreas
		jQuery.each(this.mUIAreas, function() {
			this.invalidate();
		});
		jQuery.sap.log.info("RTL mode " + mChanges.rtl ? "activated" : "deactivated");
	}

	// notify Elements via a pseudo browser event (onLocalizationChanged)
	jQuery.each(this.mElements, function(sId, oElement) {
		this._handleEvent(oBrowserEvent);
	});

	// notify registered Core listeners 
	this.fireEvent(sEventId, {changes : mChanges});
};

/**
 * Fired when the set of controls, elements etc. for a library has changed
 * or when the set of libraries has changed.
 * 
 * Note: while the parameters of this event could already describe <i>any</i> type of change,
 * the set of reported changes is currently restricted to the addition of libraries, 
 * controls and elements. Future implementations might extend the set of reported 
 * changes. Therefore applications should already check the operation and stereotype 
 * parameters.
 * 
 * @name sap.ui.core.Core#libraryChanged
 * @event
 * @param {sap.ui.base.Event} oEvent
 * @param {sap.ui.base.EventProvider} oEvent.getSource
 * @param {object} oEvent.getParameters
 * @param {string} oEvent.getParameters.name name of the newly added entity
 * @param {string} [oEvent.getParameters.stereotype] stereotype of the newly added entity type ("control", "element")
 * @param {string} [oEvent.getParameters.operation] type of operation ("add")
 * @param {sap.ui.base.Metadata|object} [oEvent.getParameters.metadata] metadata for the added entity type. 
 *         Either an instance of sap.ui.core.ElementMetadata if it is a Control or Element, or a library info object
 *         if it is a library. Note that the API of all metadata objects is not public yet and might change. 
 */

/**
 * Register a listener for the {@link sap.ui.core.Core#event:libraryChanged} event.
 */
sap.ui.core.Core.prototype.attachLibraryChanged = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.LibraryChanged, fnFunction, oListener);
};

/**
 * Unregister a listener from the {@link sap.ui.core.Core#event:libraryChanged} event.
 */
sap.ui.core.Core.prototype.detachLibraryChanged = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.LibraryChanged, fnFunction, oListener);
};

/**
 * @private
 */
sap.ui.core.Core.prototype.fireLibraryChanged = function(oParams) {
	// notify registered Core listeners 
	this.fireEvent(sap.ui.core.Core.M_EVENTS.LibraryChanged, oParams);
};

/**
 * Enforces an immediate update of the visible UI (aka "rendering").
 *
 * In general, applications should avoid calling this method and
 * instead let the framework manage any necessary rendering.
 * @public
 */
sap.ui.core.Core.prototype.applyChanges = function() {
	this._rerenderAllUIAreas();
};

/**
 * @private
 */
sap.ui.core.Core.prototype.registerElementClass = function(oMetadata) {
	var sName = oMetadata.getName(),
		sLibraryName = oMetadata.getLibraryName() || "",
		oLibrary = this.mLibraries[sLibraryName],
		bControl = sap.ui.core.Control.prototype.isPrototypeOf(oMetadata.getClass().prototype),
		bChanged = false;
	
	if ( !oLibrary ) {
		oLibrary = this.mLibraries[sLibraryName] = {
			dependencies : [],
			types : [],
			interfaces : [],
			controls: [],
			elements : []
		}
	}
	
	if ( bControl ) {
		if ( jQuery.inArray(sName, oLibrary.controls) < 0 ) {
			oLibrary.controls.push(sName);
			bChanged=true;
		}
	} else {
		if ( jQuery.inArray(sName, oLibrary.elements) < 0 ) {
			oLibrary.elements.push(sName);
			bChanged=true;
		}
	}
	
	if ( bChanged ) {
		jQuery.sap.log.debug("Class " + oMetadata.getName() + " registered for library " + oMetadata.getLibraryName());
		this.fireLibraryChanged({name : oMetadata.getName(), stereotype : oMetadata.getStereotype(), operation: "add", metadata : oMetadata});
	}
};

/**
 * Registers the given element. Must be called once during construction.
 * @param {sap.ui.core.Element} oElement
 * @private
 */
sap.ui.core.Core.prototype.registerElement = function(oElement) {
	var oldElement = this.byId(oElement.getId());
	if ( oldElement && oldElement !== oElement ) {
		// duplicate ID detected => fail or at least log a warning
		if (this.oConfiguration.getNoDuplicateIds()) {
			jQuery.sap.log.error("adding element with duplicate id '" + oElement.getId() + "'");
			throw new Error("Error: adding element with duplicate id '" + oElement.getId() + "'");
		} else {
			jQuery.sap.log.warning("adding element with duplicate id '" + oElement.getId() + "'");
		}
	}

	this.mElements[oElement.getId()] = oElement;
};

/**
 * Deregisters the given element. Must be called once during destruction.
 * @param {sap.ui.core.Element} oElement
 * @private
 */
sap.ui.core.Core.prototype.deregisterElement = function(oElement) {
	delete this.mElements[oElement.getId()];
};

/**
 * Registers the given object. Must be called once during construction.
 * @param {sap.ui.core.ManagedObject} oObject the object instance
 * @private
 */
sap.ui.core.Core.prototype.registerObject = function(oObject) {
	var sId = oObject.getId(),
	    sType = oObject.getMetadata().getStereotype(),
	    oldObject = this.getObject(sType, sId);
	
	if ( oldObject && oldObject !== oObject ) {
		jQuery.sap.log.error("adding object \"" + sType + "\" with duplicate id '" + sId + "'");
		throw new Error("Error: adding object \"" + sType + "\" with duplicate id '" + sId + "'");
	}

	this.mObjects[sType][sId] = oObject;
};

/**
 * Deregisters the given object. Must be called once during destruction.
 * @param {sap.ui.core.ManagedObject} oObject the object instance
 * @private
 */
sap.ui.core.Core.prototype.deregisterObject = function(oObject) {
	var sId = oObject.getId(),
      sType = oObject.getMetadata().getStereotype();
	delete this.mObjects[sType][sId];
};


/**
 * Returns the registered element for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @public
 */
sap.ui.core.Core.prototype.byId = function(sId) {
	jQuery.sap.assert(sId == null || typeof sId === "string", "sId must be a string when defined");
	// allow null, as this occurs frequently and it is easier to check whether there is a control in the end than
	// first checking whether there is an ID and then checking for a control

	/*
	// test alternative implementation
	function findById(sId, mUIAreas) {
		function _find(oControl) {
			if ( !oControl )
				return undefined;
			if ( oControl.getId() === sId ) {
				return oControl;
			}
			for (var n in oControl.mAggregations) {
				var a = oControl.mAggregations[n];
				if ( jQuery.isArray(a) ) {
					for (var i=0; i<a.length; i++) {
						var r = _find(a[i]);
						if ( r ) return r;
					}
				} else if ( a instanceof sap.ui.core.Element ) {
					var r = _find(a[i]);
					if ( r ) return r;
				}
			}
			return undefined;
		}

		//var t0=new Date().getTime();
		var r=undefined;
		for (var n in mUIAreas) {
			r=_find(mUIAreas[n].getRootControl()); //TODO: Adapt to mUIAreas[n].getContent
			if ( r ) break;
		}
		//var t1=new Date().getTime();
		//t=t+(t1-t0);
		return r;
	}

	if ( findById(sId, this.mUIAreas) !== this.mElements[sId] ) {
		jQuery.sap.log.error("failed to resolve " + sId + " (" + this.mElements[sId] + ")");
	}
	*/
	return sId == null ? undefined : this.mElements[sId];
};

/**
 * Returns the registered element for the given ID, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
 * @function
 * @public
 */
sap.ui.core.Core.prototype.getControl = sap.ui.core.Core.prototype.byId;

/**
 * Returns the registered element for the given ID, if any.
 * @param {string} sId
 * @return {sap.ui.core.Element} the element for the given id
 * @deprecated use <code>sap.ui.core.Core.byId</code> instead!
 * @function
 * @public
 */
sap.ui.core.Core.prototype.getElementById = sap.ui.core.Core.prototype.byId;

/**
 * Returns the registered object for the given id, if any.
 * @param {string} sType
 * @param {string} sId
 * @return {sap.ui.core.Component} the component for the given id
 * @private
 */
sap.ui.core.Core.prototype.getObject = function(sType, sId) {
	jQuery.sap.assert(sId == null || typeof sId === "string", "sId must be a string when defined");
	jQuery.sap.assert(this.mObjects[sType] !== undefined, "sType must be a supported stereotype");
	return sId == null ? undefined : this.mObjects[sType] && this.mObjects[sType][sId];
};

/**
 * Returns the registered component for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Component} the component for the given id
 * @public
 */
sap.ui.core.Core.prototype.getComponent = function(sId) {
	return this.getObject("component", sId);
};

/**
 * Returns the registered template for the given id, if any.
 * @param {string} sId
 * @return {sap.ui.core.Component} the template for the given id
 * @public
 */
sap.ui.core.Core.prototype.getTemplate = function(sId) {
	return this.getObject("template", sId);
};

/**
 * Returns the static, hidden area reference belonging to this core instance.<br/> It can be used e.g. for hiding
 * elements like Popups, Shadow, Blocklayer etc.<br/> If it is not yet available, creates one HTML element and attaches
 * it to the body.
 *
 * @return {DOMNode} the static, hidden area reference belonging to this core instance.
 * @public
 */
sap.ui.core.Core.prototype.getStaticAreaRef = function() {
	var sStaticId = "sap-ui-static";
	var oStatic = jQuery.sap.domById(sStaticId);
	if(!oStatic){
		var leftRight = this.getConfiguration().getRTL() ? "right" : "left";
		oStatic = jQuery("<DIV/>",{id:sStaticId})
					.css("visibility", "hidden")
					.css("height", "0")
					.css("width", "0")
					.css("overflow", "hidden")
					.css("float", leftRight)
					.prependTo(document.body)[0];

		// TODO Check whether this is sufficient
		this.createUIArea(oStatic).bInitial = false;
	}
	return oStatic;
};

/**
 * Used to find out whether a certain DOM element is the static area
 * 
 * @return {boolean} whether the given DomRef is the StaticAreaRef
 * @protected
 */
sap.ui.core.Core.prototype.isStaticAreaRef = function(oDomRef) {
	return oDomRef && (oDomRef.id === "sap-ui-static");
};

/**
 * Interval for central interval timer.
 * @private
 */
sap.ui.core.Core._I_INTERVAL = 200;

/**
 * Obsolete but kept for backward compatibility.
 * Note that the ResizeHandler has been required above, so we can access it here.
 * @private
 */
sap.ui.core.ResizeHandler.prototype.I_INTERVAL = sap.ui.core.Core._I_INTERVAL;

/**
 * Registers a listener to the central interval timer.
 * 
 * @param {function} fnFunction callback to be called periodically
 * @param {object} [oListener] optional context object to call the callback on.
 * @since 1.16.0
 * @public
 */
sap.ui.core.Core.prototype.attachIntervalTimer = function(fnFunction, oListener) {
	if(!this.oTimedTrigger){
		jQuery.sap.require("sap.ui.core.IntervalTrigger");
		this.oTimedTrigger = new sap.ui.core.IntervalTrigger(sap.ui.core.Core._I_INTERVAL);
	}
	this.oTimedTrigger.addListener(fnFunction, oListener);
};

/**
 * Unregisters a listener for the central interval timer.
 * 
 * A listener will only be unregistered if the same function/context combination
 * is given as in the attachIntervalTimer call.
 *  
 * @param {function} fnFunction function to unregister
 * @param {object} [oListener] context object given during registration
 * @since 1.16.0
 * @public
 */
sap.ui.core.Core.prototype.detachIntervalTimer = function(fnFunction, oListener) {
	if(this.oTimedTrigger){
		this.oTimedTrigger.removeListener(fnFunction, oListener);
	}
};

/**
 * Registers a listener for control events.
 * 
 * @param {function} fnFunction callback to be called for each control event
 * @param {object} [oListener] optional context object to call the callback on.
 * @public
 */
sap.ui.core.Core.prototype.attachControlEvent = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.ControlEvent, fnFunction, oListener);
};

/**
 * Unregisters a listener for control events.
 * 
 * A listener will only be unregistered if the same function/context combination
 * is given as in the attachControlEvent call.
 *  
 * @param {function} fnFunction function to unregister
 * @param {object} [oListener] context object given during registration
 * @public
 */
sap.ui.core.Core.prototype.detachControlEvent = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.ControlEvent, fnFunction, oListener);
};

/**
 * Notifies the listeners that a event on a control occures
 * @param {map} mParameters { browserEvent: jQuery.EventObject }
 * @private
 */
sap.ui.core.Core.prototype.fireControlEvent = function(mParameters) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.ControlEvent, mParameters);
};

/**
 * Handles a control event and forwards it to the registered control event listeners.
 * 
 * @param {jQuery.EventObject} oEvent control event
 * @param {string} sUIAreaId id of the UIArea that received the event
 * @private
 */
sap.ui.core.Core.prototype._handleControlEvent = function(/**event*/oEvent, sUiAreaId) {
	// Create a copy of the event
	var oEventClone = jQuery.Event(oEvent.type);
	jQuery.extend(oEventClone, oEvent);
	oEventClone.originalEvent = undefined;

	this.fireControlEvent({"browserEvent": oEventClone, "uiArea": sUiAreaId});
};


/**
 * Returns the instance of the application (if exists).
 *
 * @return {sap.ui.app.Application} instance of the current application
 * @public
 */
sap.ui.core.Core.prototype.getApplication = function() {
	return this.oApplication;
};

/**
 * Sets the instance of the application.
 *
 * @param {sap.ui.app.Application} oApplication instance of the new application
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Core.prototype.setApplication = function(oApplication) {
	this.oApplication = oApplication;
	// propagate Models to newly applied application
	jQuery.each(this.oModels, function (sName, oModel){
		oApplication.oPropagatedProperties.oModels[sName] = oModel;
	});
	oApplication.propagateProperties(true);
	return this;
};

/**
 * Registers a Plugin to the <code>sap.ui.core.Core</code>, which lifecycle
 * will be managed (start and stop).
 * <br/>
 * Plugin object need to implement two methods:
 * <ul>
 *   <li><code>startPlugin(oCore)</code>: will be invoked, when the Plugin
 *       should start (as parameter the reference to the Core will be provided</li>
 *   <li><code>stopPlugin()</code>: will be invoked, when the Plugin should stop</li>
 * </ul>
 *
 * @param {object} oPlugin reference to a Plugin object
 * @public
 */
sap.ui.core.Core.prototype.registerPlugin = function(oPlugin) {
	jQuery.sap.assert(typeof oPlugin === "object", "oPlugin must be an object");

	// check for a valid plugin
	if (!oPlugin) {
		return;
	}

	// check if the plugin is already registered
	// if yes, the exit this function
	for (var i = 0, l = this.aPlugins.length; i < l; i++) {
		if (this.aPlugins[i] === oPlugin) {
			return;
		}
	}

	// register the plugin (keep the plugin in the plugin array)
	this.aPlugins.push(oPlugin);

	// if the Core is initialized also start the plugin
	if (this.bInitialized && oPlugin && oPlugin.startPlugin) {
		oPlugin.startPlugin(this);
	}

};

/**
 * Unregisters a Plugin out of the <code>sap.ui.core.Core</code>
 *
 * @param {object} oPlugin reference to a Plugin object
 * @public
 */
sap.ui.core.Core.prototype.unregisterPlugin = function(oPlugin) {
	jQuery.sap.assert(typeof oPlugin === "object", "oPlugin must be an object");

	// check for a valid plugin
	if (!oPlugin) {
		return;
	}

	// check if the plugin is already registered
	var iPluginIndex = -1;
	for (var i = this.aPlugins.length; i--; i >= 0) {
		if (this.aPlugins[i] === oPlugin) {
			iPluginIndex = i;
			break;
		}
	}

	// plugin was not registered!
	if (iPluginIndex == -1) {
		return;
	}

	// stop the plugin
	if (this.bInitialized && oPlugin && oPlugin.stopPlugin) {
		oPlugin.stopPlugin(this);
	}

	// remove the plugin
	this.aPlugins.splice(iPluginIndex, 1);

};

/**
 * Internal method to start all registered plugins
 * @private
 */
sap.ui.core.Core.prototype.startPlugins = function() {
	for (var i = 0, l = this.aPlugins.length; i < l; i++) {
		var oPlugin = this.aPlugins[i];
		if (oPlugin && oPlugin.startPlugin) {
			oPlugin.startPlugin(this, /* onInit*/ true);
		}
	}
};

/**
 * Internal method to stop all registered plugins
 * @private
 */
sap.ui.core.Core.prototype.stopPlugins = function() {
	for (var i = 0, l = this.aPlugins.length; i < l; i++) {
		var oPlugin = this.aPlugins[i];
		if (oPlugin && oPlugin.stopPlugin) {
			oPlugin.stopPlugin(this);
		}
	}
};

/**
 * Sets or unsets a model for the given model name. 
 * 
 * The <code>sName</code> must either be <code>undefined</code> (or omitted) or a non-empty string.
 * When the name is omitted, the default model is set/unset. 
 * 
 * When <code>oModel</code> is <code>null</code> or <code>undefined</code>, a previously set model 
 * with that name is removed from the Core.
 *  
 * Any change (new model, removed model) is propagated to all existing UIAreas and their descendants
 * as long as a descendant doesn't have its own model set for the given name.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name. 
 *  
 * @param {sap.ui.model.Model} oModel the model to be set or <code>null</code> or <code>undefined</code>
 * @param {string} [sName] the name of the model or <code>undefined</code>
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.setModel = function(oModel, sName) {
	jQuery.sap.assert(oModel == null || oModel instanceof sap.ui.model.Model, "oModel must be an instance of sap.ui.model.Model, null or undefined");
	jQuery.sap.assert(sName === undefined || (typeof sName === "string" && !/^(undefined|null)?$/.test(sName)), "sName must be a string or omitted");
	if (!oModel && this.oModels[sName]) {
		delete this.oModels[sName];
		// progagate Models to application
		if (this.oApplication) {
			delete this.oApplication.oPropagatedProperties.oModels[sName];
			this.oApplication.propagateProperties(sName);
		}
		// propagate Models to all UI areas 
		jQuery.each(this.mUIAreas, function (i, oUIArea){
			delete oUIArea.oPropagatedProperties.oModels[sName];
			oUIArea.propagateProperties(sName);
		});
	} else if (oModel && oModel !== this.oModels[sName] ) { 
		this.oModels[sName] = oModel;
		// progagate Models to application
		if (this.oApplication) {
			this.oApplication.oPropagatedProperties.oModels[sName] = oModel;
			this.oApplication.propagateProperties(sName);
		}
		// propagate Models to all UI areas 
		jQuery.each(this.mUIAreas, function (i, oUIArea){
			oUIArea.oPropagatedProperties.oModels[sName] = oModel;
			oUIArea.propagateProperties(sName);
		});
	} else {
		// nothing to do
	}
	return this;
};

/**
 * Get the model with the given model name.
 * 
 * The name can be omitted to reference the default model or it must be a non-empty string.
 * 
 * Note: to be compatible with future versions of this API, applications must not use the value <code>null</code>,
 * the empty string <code>""</code> or the string literals <code>"null"</code> or <code>"undefined"</code> as model name. 
 * 
 * @param {string|undefined} [sName] name of the model to be retrieved
 * @return {sap.ui.model.Model} oModel
 * @public
 */
sap.ui.core.Core.prototype.getModel = function(sName) {
	jQuery.sap.assert(sName === undefined || (typeof sName === "string" && !/^(undefined|null)?$/.test(sName)), "sName must be a string or omitted");
	return this.oModels[sName];
};

/**
 * Check if a Model is set to the core
 * @return {boolean} true or false
 * @public
 */
sap.ui.core.Core.prototype.hasModel = function() {
	return !jQuery.isEmptyObject(this.oModels);
};

/**
 * Returns the event bus.
 * @return {sap.ui.core.EventBus} the event bus
 * @since 1.8.0
 * @public
 */
sap.ui.core.Core.prototype.getEventBus = function() {
	if(!this.oEventBus){
		jQuery.sap.require("sap.ui.core.EventBus");
		this.oEventBus = new sap.ui.core.EventBus();
	}
	return this.oEventBus;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 *
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.attachValidationError = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.ValidationError, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'validationError' event of <code>sap.ui.core.Core</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.detachValidationError = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.ValidationError, fnFunction, oListener);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.attachParseError = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.ParseError, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'parseError' event of <code>sap.ui.core.Core</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The callback function to unregister.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.detachParseError = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.ParseError, fnFunction, oListener);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.attachFormatError = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.FormatError, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'formatError' event of <code>sap.ui.core.Core</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.detachFormatError = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.FormatError, fnFunction, oListener);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
 * Please note that this event is a bubbling event and may already be canceled before reaching the core.<br/>
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, this Model is used.
 *
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.attachValidationSuccess = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.Core.M_EVENTS.ValidationSuccess, fnFunction, oListener);
	return this;
};

/**
 * Detach event-handler <code>fnFunction</code> from the 'validationSuccess' event of <code>sap.ui.core.Core</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Core.prototype.detachValidationSuccess = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.Core.M_EVENTS.ValidationSuccess, fnFunction, oListener);
	return this;
};


/**
 * Fire event parseError to attached listeners.
 *
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Core.prototype.fireParseError = function(mArguments) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.ParseError, mArguments);
	return this;
};

/**
 * The 'parseError' event is fired when input parsing fails.
 *
 * @name sap.ui.core.Core#parseError
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the parse error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the parse error occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the parse error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the parse error)
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the parse error
 * @public
 */

/**
 * Fire event validationError to attached listeners.
 *
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Core.prototype.fireValidationError = function(mArguments) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.ValidationError, mArguments);
	return this;
};

/**
 * The 'validationError' event is fired when validation of the input fails.
 *
 * @name sap.ui.core.Core#validationError
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the validation error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the validation error occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the validation error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the validation error)
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the validation error
 * @public
 */

/**
 * Fire event formatError to attached listeners.
 *
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * <li>'exception' of type <code>object</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Core.prototype.fireFormatError = function(mArguments) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.FormatError, mArguments);
	return this;
};

/**
 * The 'formatError' event is fired when a value formatting fails. This can happen when a value stored in the model cannot be formatted to be displayed in an element property.
 *
 * @name sap.ui.core.Core#formatError
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the format error occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the format error occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the format error occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the format error)
 * @param {object} oControlEvent.getParameters.exception The exception object which occurred and has more information about the format error
 * @public
 */

/**
 * Fire event validationSuccess to attached listeners.
 *
 * Expects following event parameters:
 * <ul>
 * <li>'element' of type <code>sap.ui.core.Element</code> </li>
 * <li>'property' of type <code>string</code> </li>
 * <li>'type' of type <code>string</code> </li>
 * <li>'newValue' of type <code>object</code> </li>
 * <li>'oldValue' of type <code>object</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Core} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.Core.prototype.fireValidationSuccess = function(mArguments) {
	this.fireEvent(sap.ui.core.Core.M_EVENTS.ValidationSuccess, mArguments);
	return this;
};

/**
 * The 'validationSuccess' event is fired when a value validation was successfully completed.
 *
 * @name sap.ui.core.Core#validationSuccess
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Element} oControlEvent.getParameters.element The Element where the successful validation occurred
 * @param {string} oControlEvent.getParameters.property The property name of the element where the successfull validation occurred
 * @param {type} oControlEvent.getParameters.type The type of the property
 * @param {object} oControlEvent.getParameters.newValue The value of the property which was entered when the validation occurred
 * @param {object} oControlEvent.getParameters.oldValue The value of the property which was present before a new value was entered (before the validation)
 * @public
 */

/**
 * Check if the script is running on mobile
 * @return {boolean} true or false
 * @public
 */
sap.ui.core.Core.prototype.isMobile = function() {
	return sap.ui.Device.browser.mobile;
};

/**
 * @name sap.ui.core.CorePlugin
 * @interface Contract for plugins that want to extend the core runtime
 */

/**
 * Called by the Core after it has been initialized.
 * If a plugin is added to the core after its initialization, then
 * this method is called during registration of the plugin.
 *
 * Implementing this method is optional for a plugin.
 *
 * @name sap.ui.core.CorePlugin.prototype.startPlugin
 * @param {sap.ui.core.Core} oCore reference to the core
 * @param {boolean} bOnInit whether the hook is called during Core.init() or later
 * @function
 */

/**
 * Called by the Core when it is shutdown or when a plugin is
 * deregistered from the core.
 *
 * Implementing this method is optional for a plugin.
 *
 * @name sap.ui.core.CorePlugin.prototype.stopPlugin
 * @param {sap.ui.core.Core} oCore reference to the core
 * @function
 */


// TODO come up with more sophisticated solution.
// e.g. check for script tag, check for config... if not (yet) there, delay creation by e.g. 500ms or so.
if(!window.sap.ui.getCore){
	/**
	 * Create Core instance and make it available.
	 */
	(function(){
		new sap.ui.core.Core();
	}());
}

/**
 * Displays the control tree with the given root inside the area of the given
 * DOM reference (or inside the DOM node with the given ID) or in the given Control.
 *
 * Example:
 * <pre>
 *   &lt;div id="SAPUI5UiArea">&lt;/div>
 *   &lt;script type="text/javascript">
 *     var oRoot = new sap.ui.commons.Label();
 *     oRoot.setText("Hello world!");
 *     sap.ui.setRoot("SAPUI5UiArea", oRoot);
 *   &lt;/script>
 * </pre>
 * <p>
 *
 * This is a shortcut for <code>sap.ui.getCore().setRoot()</code>.
 *
 * Internally, if a string is given that does not identify an UIArea or a control
 * then implicitly a new <code>UIArea</code> is created for the given DOM reference
 * and the given control is added.
 *
 * @param {string|DOMRef|sap.ui.core.Control} oDomRef a Dom Reference or Id String of the UIArea
 * @param {sap.ui.base.Interface | sap.ui.core.Control}
 *            oControl the Control that should be added to the <code>UIArea</code>.
 * @public
 * @deprecated Use function <code>placeAt</code> of <code>sap.ui.core.Control</code> instead.
 */
sap.ui.setRoot = function(oDomRef, oControl) {
	jQuery.sap.assert(typeof oDomRef === "string" || typeof oDomRef === "object", "oDomRef must be a string or object");
	jQuery.sap.assert(oControl instanceof sap.ui.base.Interface || oControl instanceof sap.ui.core.Control, "oControl must be a Control or Interface");

	sap.ui.getCore().setRoot(oDomRef, oControl);
};

}; // end of sap/ui/core/Core.js
if ( !jQuery.sap.isDeclared('sap.ui.core.AppCacheBuster') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/*
 * Provides the AppCacheBuster mechanism to load application files using a timestamp
 */
jQuery.sap.declare("sap.ui.core.AppCacheBuster");



/*global URI *///declare unusual global vars for JSLint/SAPUI5 validation

(function() {

	/*
	 * The AppCacheBuster is only aware of resources which are relative to the
	 * current application or have been registered via:
	 *   - jQuery.sap.registerModulePath
	 */
	
	// intercept function to avoid usage of cachebuster
	
	// URL normalizer
	
	
	// 1.) Enableable
	// 2.) Must match to index
	// 3.) hook to suppress
	
	// ==> ManagedObject -> validateProperty
	
	// API 
	// setURLFilter,onConvertURL => return true, false
	// convertURL
	
	// what about being not on the root with the HTML page
	//   appcachebuster is always relative to the HTML page 
	
	
	// we need a detection for the root location
	//   --> to avoid registerComponent("./")
	//   --> configuration?
	
	// nested components? 
	//   indexOf check in convertURL will not work here!
	
	
	// determine the language and loading mode from the configuration
	var oConfiguration = sap.ui.getCore().getConfiguration();
	var sLanguage = oConfiguration.getLanguage();
	var bSync = oConfiguration.getAppCacheBusterMode() === "sync";
	var bBatch = oConfiguration.getAppCacheBusterMode() === "batch"
	
	// file index (maps file to timestamp) / avoid duplicate loading of known base paths
	var mIndex = {};
	
	// store the original function to intercept
	var fnAjaxOrig = jQuery.ajax;
	var fnIncludeScript = jQuery.sap.includeScript;
	var fnIncludeStyleSheet = jQuery.sap.includeStyleSheet;
	var fnValidateProperty = sap.ui.base.ManagedObject.prototype.validateProperty;
	
	// determine the application base url
	var sLocation = document.location.href.replace(/\?.*|#.*/g, "");
	var oBaseUri = URI("./").absoluteTo(sLocation); // "./" removes the html doc from path
	var sAppBaseUrl = oBaseUri.toString();
	
	// determine the base urls (normalize and then calculate the resources and test-resources urls) 
	var oUri = URI(jQuery.sap.getModulePath("", "/../"));
	var sOrgBaseUrl = oUri.toString();
	if (oUri.is("relative")) {
		oUri = oUri.absoluteTo(sLocation);
	}
	var sBaseUrl = oUri.normalize().toString();
	var sResBaseUrl = URI("resources").absoluteTo(sBaseUrl).toString();
	//var sTestResBaseUrl = URI("test-resources").absoluteTo(sBaseUrl).toString();
	
	// create resources check regex
	var oFilter = new RegExp("^" + jQuery.sap.escapeRegExp(sResBaseUrl));
	
	// helper function to append the trailing slashes if missing
	var fnEnsureTrailingSlash = function(sUrl) {
		// append the missing trailing slash
		if (sUrl.length > 0 && sUrl.slice(-1) !== "/") {
			sUrl += "/"; 
		}
		return sUrl;
	};
	
	// internal registration function (with SyncPoint usage)
	var fnRegister = function(sBaseUrl, oSyncPoint) {
		
		// the request object
		var oRequest;
		
		// in case of an incoming array we register each base url on its own
		// except in case of the batch mode => there we pass all URLs in a POST request.
		if (jQuery.isArray(sBaseUrl) && !bBatch) {
			
			jQuery.each(sBaseUrl, function(iIndex, sBaseUrlEntry) {
				fnRegister(sBaseUrlEntry, oSyncPoint);
			});
			
		} else if (jQuery.isArray(sBaseUrl) && bBatch) {

			// BATCH MODE: send all base urls via POST request to the server
			//   -> server returns an JSON object for containing the index for
			//      different base urls.
			//
			// returns e.g.:
			// {
			//    "<absolute_url>": { ...<index>... },
			//    ...
			// }
			var sRootUrl = fnEnsureTrailingSlash(sBaseUrl[0]);
			var sContent = [];
			
			// log
			jQuery.sap.log.debug("sap.ui.core.AppCacheBuster.register(\"" + sRootUrl + "\"); // BATCH MODE!");

			// determine the base URL
			var sAbsoluteRootUrl = sap.ui.core.AppCacheBuster.normalizeURL(sRootUrl); // "./" removes the html doc from path
			
			// log
			jQuery.sap.log.debug("  --> normalized to: \"" + sAbsoluteRootUrl + "\"");
			
			// create the list of absolute base urls
			jQuery.each(sBaseUrl, function(iIndex, sUrlEntry) {
				var sUrl = fnEnsureTrailingSlash(sUrlEntry);
				var sAbsoluteUrl = sap.ui.core.AppCacheBuster.normalizeURL(sUrl);
				if (!mIndex[sAbsoluteBaseUrl]) {
					sContent.push(sAbsoluteUrl);
				}
			});

			// if we need to fetch some base urls we trigger the request otherwise
			// we gracefully ignore the function call
			if (sContent.length > 0) {

				// create the URL for the index file
				var sUrl = sAbsoluteRootUrl + "sap-ui-cachebuster-info.json?sap-ui-language=" + sLanguage;
				
				// configure request; check how to execute the request (sync|async)
				oRequest = {
						url: sUrl,
						type: "POST",
						async: !bSync && !!oSyncPoint,
						dataType: "json",
						contentType: "text/plain",
						data: sContent.join("\n"),
						success: function(data) {
							// add the index file to the index map
							jQuery.extend(mIndex, data);
						},
						error: function() {
							jQuery.sap.log.error("Failed to batch load AppCacheBuster index file from: \"" + sUrl + "\".");
						}
				};

			}
			
		} else {
			
			// ensure the trailing slash
			sBaseUrl = fnEnsureTrailingSlash(sBaseUrl);
			
			// log
			jQuery.sap.log.debug("sap.ui.core.AppCacheBuster.register(\"" + sBaseUrl + "\");");

			// determine the base URL
			var sAbsoluteBaseUrl = sap.ui.core.AppCacheBuster.normalizeURL(sBaseUrl); // "./" removes the html doc from path
			
			// log
			jQuery.sap.log.debug("  --> normalized to: \"" + sAbsoluteBaseUrl + "\"");
			
			// if the index file has not been loaded yet => load!
			if (!mIndex[sAbsoluteBaseUrl]) {
				
				// create the URL for the index file
				var sUrl = sAbsoluteBaseUrl + "sap-ui-cachebuster-info.json?sap-ui-language=" + sLanguage;
				
				// configure request; check how to execute the request (sync|async)
				oRequest = {
						url: sUrl,
						async: !bSync && !!oSyncPoint,
						dataType: "json",
						success: function(data) {
							// add the index file to the index map
							mIndex[sAbsoluteBaseUrl] = data;
						},
						error: function() {
							jQuery.sap.log.error("Failed to load AppCacheBuster index file from: \"" + sUrl + "\".");
						}
				};

			}
			
		}
		
		// only request in case of having a correct request object!
		if (oRequest) {
			
			// use the syncpoint only during boot => otherwise the syncpoint
			// is not given because during runtime the registration needs to
			// be done synchrously.
			if (oRequest.async) {
				var iSyncPoint = oSyncPoint.startTask("load " + sUrl);
				var fnSuccess = oRequest.success, fnError = oRequest.error;
				jQuery.extend(oRequest, {
					success: function(data) {
						fnSuccess.apply(this, arguments);
						oSyncPoint.finishTask(iSyncPoint);
					}, 
					error: function() {
						fnError.apply(this, arguments);
						oSyncPoint.finishTask(iSyncPoint, false);
					}
				});
			}

			// load it
			jQuery.sap.log.info("Loading AppCacheBuster index file from: \"" + sUrl + "\".");
			jQuery.ajax(oRequest);
			
		}
		
	};

	/**
	 * The AppCacheBuster is used to hook into URL relevant functions in jQuery
	 * and SAPUI5 and rewrite the URLs with a timestamp segment. The timestamp
	 * information is fetched from the server and used later on for the URL
	 * rewriting.
	 *  
	 * @namespace
	 * @public
	 */
	sap.ui.core.AppCacheBuster = {
			
			/**
			 * Boots the AppCacheBuster by initializing and registering the 
			 * base URLs configured in the UI5 bootstrap.
			 * 
			 * @param {jQuery.sap.syncPoint} [oSyncPoint] the sync point
			 *  
			 * @namespace
			 * @private
			 */
			boot: function(oSyncPoint) {
				
				// application cachebuster mechanism (copy of array for later modification)
				var oConfig = oConfiguration.getAppCacheBuster();

				if (oConfig && oConfig.length > 0) {

					oConfig = oConfig.slice();

					// flag to activate the cachebuster
					var bActive = true;
					
					// fallback for old boolean configuration (only 1 string entry)
					// restriction: the values true, false and x are reserved as fallback values 
					//              and cannot be used as base url locations  
					var sValue = String(oConfig[0]).toLowerCase();
					if (oConfig.length === 1) {
						if (sValue === "true" || sValue === "x") {
							// register the current base URL (if it is a relative URL)
							// hint: if UI5 is referenced relative on a server it might be possible
							//       with the mechanism to register another base URL. 
							var oUri = URI(sOrgBaseUrl);
							oConfig =oUri.is("relative") ? [oUri.toString()] : [];
						} else if (sValue === "false") {
							bActive = false;
						}
					}
					
					// activate the cachebuster
					if (bActive) {
						
						// initialize the AppCacheBuster
						sap.ui.core.AppCacheBuster.init();

						// register the components
						fnRegister(oConfig, oSyncPoint);
						
					}
					
				}
				
			},
			
			/**
			 * Initializes the AppCacheBuster. Hooks into the relevant functions
			 * in the Core to intercept the code which are dealing with URLs and
			 * converts those URLs into cachebuster URLs. 
			 * 
			 * The intercepted functions are:
			 * <ul>
			 * <li><code>jQuery.ajax</code></li>
			 * <li><code>jQuery.sap.includeScript</code></li>
			 * <li><code>jQuery.sap.includeStyleSheet</code></li>
			 * <li><code>sap.ui.base.ManagedObject.prototype.validateProperty</code></li>
			 * </ul>
			 *  
			 * @namespace
			 * @private
			 */
			init: function() {
				
				// function shortcuts (better performance when used frequently!)
				var fnConvertUrl = sap.ui.core.AppCacheBuster.convertURL;
				var fnNormalizeUrl = sap.ui.core.AppCacheBuster.normalizeURL;
				
				// resources URL's will be handled via standard
				// UI5 cachebuster mechanism (so we simply ignore them)
				var fnIsACBUrl = function(sUrl) {
					if (sUrl && typeof(sUrl) === "string") {
						sUrl = fnNormalizeUrl(sUrl);
						return !sUrl.match(oFilter);
					}
					return false;
				};
				
				// enhance the original ajax function with appCacheBuster functionality 
				jQuery.ajax = function(url, options) {
					if (url && url.url && fnIsACBUrl(url.url)) {
						url.url = fnConvertUrl(url.url);
					}
					return fnAjaxOrig.apply(this, arguments);
				};
				
				// enhance the includeScript function
				jQuery.sap.includeScript = function(sUrl, sId) {
					var oArgs = Array.prototype.slice.apply(arguments);
					if (fnIsACBUrl(oArgs[0] /* sUrl */)) {
						oArgs[0] = fnConvertUrl(oArgs[0] /* sUrl */);
					}
					return fnIncludeScript.apply(this, oArgs);
				};
				
				// enhance the includeStyleSheet function
				jQuery.sap.includeStyleSheet = function(sUrl, sId) {
					var oArgs = Array.prototype.slice.apply(arguments);
					if (fnIsACBUrl(oArgs[0] /* sUrl */)) {
						oArgs[0] = fnConvertUrl(oArgs[0] /* sUrl */);
					}
					return fnIncludeStyleSheet.apply(this, oArgs);
				};
				
				// enhance the validateProperty function to intercept URI types
				//  test via: new sap.ui.commons.Image({src: "acctest/img/Employee.png"}).getSrc()
				//            new sap.ui.commons.Image({src: "./acctest/../acctest/img/Employee.png"}).getSrc()
				sap.ui.base.ManagedObject.prototype.validateProperty = function(sPropertyName, oValue) {
					var oMetadata = this.getMetadata(),
					    oProperty = oMetadata.getAllProperties()[sPropertyName],
					    oArgs;
					if (oProperty && oProperty.type === "sap.ui.core.URI") {
						oArgs = Array.prototype.slice.apply(arguments);
						try {
							if (fnIsACBUrl(oArgs[1] /* oValue */)) {
								oArgs[1] = fnConvertUrl(oArgs[1] /* oValue */);
							}
						} catch (e) {
							// URI normalization or conversion failed, fall back to normal processing 
						}
					}
					// either forward the modified or the original arguments
					return fnValidateProperty.apply(this, oArgs || arguments);
				};
				
			},
			
			/**
			 * Terminates the AppCacheBuster and removes the hooks from the URL 
			 * specific functions. This will also clear the index which is used 
			 * to prefix matching URLs.
			 *  
			 * @namespace
			 * @private
			 */
			exit: function() {

				// remove the function interceptions
				jQuery.ajax = fnAjaxOrig;
				jQuery.sap.includeScript = fnIncludeScript;
				jQuery.sap.includeStyleSheet = fnIncludeStyleSheet;
				sap.ui.base.ManagedObject.prototype.validateProperty = fnValidateProperty;
				
				// clear the index
				mIndex = {};
				
			},
			
			/**
			 * Registers an application. Loads the cachebuster index file from this
			 * locations. All registered files will be considered by the cachebuster
			 * and the URLs will be prefixed with the timestamp of the index file.
			 * 
			 * @param {string} base URL of an application providing a cachebuster index file
			 * 
			 * @namespace
			 * @public
			 */
			register: function(sBaseUrl) {
				fnRegister(sBaseUrl);
			},
			
			/**
			 * Converts the given URL if it matches a URL in the cachebuster index. 
			 * If not then the same URL will be returned. To prevent URLs from being
			 * modified by the application cachebuster you can implement the function
			 * <code>sap.ui.core.AppCacheBuster.handleURL</code>. 
			 * 
			 * @param {string} sUrl any URL
			 * @return {string} modified URL when matching the index or unmodified when not
			 * 
			 * @namespace
			 * @public
			 */
			convertURL: function(sUrl) {
				
				jQuery.sap.log.debug("sap.ui.core.AppCacheBuster.convertURL(\"" + sUrl + "\");");
					
				// modify the incoming url if found in the appCacheBuster file
				if (mIndex && sUrl) {
					
					// normalize the URL
					// local resources are registered with "./" => we remove the leading "./"! 
					// (code location for this: sap/ui/Global.js:sap.ui.localResources)
					var sNormalizedUrl = sap.ui.core.AppCacheBuster.normalizeURL(sUrl);
					jQuery.sap.log.debug("  --> normalized to: \"" + sNormalizedUrl + "\"");

					// should the URL be handled?
					if (sNormalizedUrl && sap.ui.core.AppCacheBuster.handleURL(sNormalizedUrl)) {
						
						// scan for a matching base URL (by default we use the default index)
						// we lookup the base url in the index list and if found we split the
						// url into the base and path where the timestamp is added in between
						jQuery.each(mIndex, function(sBaseUrl, mBaseUrlIndex) {
							var sUrlPath;
							if (sBaseUrl && sNormalizedUrl.length >= sBaseUrl.length && sNormalizedUrl.slice(0, sBaseUrl.length) === sBaseUrl ) {
								sUrlPath = sNormalizedUrl.slice(sBaseUrl.length);
								if (mBaseUrlIndex[sUrlPath]) {
									// return the normilzed URL only if found in the index
									sUrl = sBaseUrl + "~" + mBaseUrlIndex[sUrlPath] + "~/" + sUrlPath;
									jQuery.sap.log.debug("  ==> return \"" + sUrl + "\";");
									return false;
								}
							}
						});
						
					}
					
				}
				return sUrl;

			},
			
			/**
			 * Normalizes the given URL and make it absolute.
			 * 
			 * @param {string} sUrl any URL
			 * @return {string} normalized URL
			 * 
			 * @namespace
			 * @public
			 */
			normalizeURL: function(sUrl) {
				
				// local resources are registered with "./" => we remove the leading "./"! 
				// (code location for this: sap/ui/Global.js:sap.ui.localResources)
				// we by default normalize all relative URLs for a common base
				var oUri = URI(sUrl || "./");
				if (oUri.is("relative")) { //(sUrl.match(/^\.\/|\..\//g)) {
					oUri = oUri.absoluteTo(sLocation);
				}
				//return oUri.normalize().toString();
				// prevent to normalize the search and hash to avoid "+" in the search string
				// because for search strings the space will be normalized as "+"
				return oUri.normalizeProtocol().normalizeHostname().normalizePort().normalizePath().toString();

			},
			
			/**
			 * Callback function which can be overwritten to programmatically decide
			 * whether to rewrite the given URL or not. 
			 * 
			 * @param {string} sUrl any URL
			 * @return {boolean} <code>true</code> to rewrite or <code>false</code> to ignore 
			 * 
			 * @namespace
			 * @public
			 */
			handleURL: function(sUrl) {
				// API function to be overriden by apps 
				// to exclude URLs from being manipulated
				return true;
			}
			
	};
	
}());	

}; // end of sap/ui/core/AppCacheBuster.js
if ( !jQuery.sap.isDeclared('sap.ui.core.CustomizingConfiguration') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.core.CustomizingConfiguration");


(function() {
	
	// keys for configuration sections  
	var CONFIG_VIEW_REPLACEMENTS  = "sap.ui.viewReplacements",
		CONFIG_VIEW_EXTENSIONS    = "sap.ui.viewExtensions",
		CONFIG_VIEW_MODIFICATIONS = "sap.ui.viewModifications",
		CONFIG_CONTROLLER_EXTENSIONS = "sap.ui.controllerExtensions";
	
	// map of component configurations
	var mComponentConfigs = {};
	
	/**
	 * finds the config in the given type and use the check function to validate
	 * if the correct entry has been found!
	 * @param sType {string} name of the config section
	 * @param fnCheck {function} check function
	 */
	function findConfig(sType, fnCheck) {
		// TODO: checking order of components?
		jQuery.each(mComponentConfigs, function(sNamespace, oConfig) { 
			if (oConfig && oConfig[sType]) {
				if (fnCheck(oConfig[sType])) {
					return false;
				}
			}
		});
	};
	
	/**
	 * The static object <code>CustomizingConfiguration</code> contains configuration
	 * for view replacements, view extensions and custom properties. The configuration
	 * will be added from component metadata objects once the component gets activated.
	 * By deactivating the component the customizing configuration of the component
	 * gets removed again.
	 *
	 * @author SAP AG
	 * @version 1.18.9
	 * @constructor
	 * @private
	 * @since 1.15.1
	 * @name sap.ui.core.CustomizingConfiguration
	 */
	sap.ui.core.CustomizingConfiguration = {
		
		/**
		 * logging of customizing configuration
		 * @private
		 */
		log: function() {
			if (window.console) {
				window.console.log(mComponentConfigs);
			}
		},
			
		/**
		 * Activates the customizing of a component by registering the component
		 * configuration in the central customizing configuration.
		 * @param {string} sComponentName the name of the component
		 * @private
		 */
		activateForComponent: function(sComponentName) {
			jQuery.sap.log.info("CustomizingConfiguration: activateForComponent('" + sComponentName + "')");
			var sFullComponentName = sComponentName + ".Component";
			jQuery.sap.require(sFullComponentName);
			var oCustomizingConfig = jQuery.sap.getObject(sFullComponentName).getMetadata().getCustomizing();
			mComponentConfigs[sComponentName] = oCustomizingConfig;
		},
		
		/**
		 * Deactivates the customizing of a component by removing the component
		 * configuration in the central customizing configuration.
		 * @param {string} sComponentName the name of the component
		 * @private
		 */
		deactivateForComponent: function(sComponentName) {
			jQuery.sap.log.info("CustomizingConfiguration: deactivateForComponent('" + sComponentName + "')");
			delete mComponentConfigs[sComponentName];
		},

		/**
		 * returns the configuration of the replacement View or undefined
		 * @private
		 */ 
		getViewReplacement: function(sViewName) {
			var oResultConfig = undefined;
			// TODO: checking order of components?
			findConfig(CONFIG_VIEW_REPLACEMENTS, function(oConfig) {
				oResultConfig = oConfig[sViewName];
				return !!oResultConfig;
			});
			return oResultConfig;
		},
		
		/**
		 * returns the configuration of the given extension point or undefined
		 * @private
		 */ 
		getViewExtension: function(sViewName, sExtensionPointName) { // FIXME: currently ONE extension wins, but they should be somehow merged - but how to define the order?
			var oResultConfig = undefined;
			// TODO: checking order of components?
			findConfig(CONFIG_VIEW_EXTENSIONS, function(oConfig) {
				oResultConfig = oConfig[sViewName] && oConfig[sViewName][sExtensionPointName];
				return !!oResultConfig;
			});
			return oResultConfig;
		},
		
		/**
		 * returns the configuration of the controller extensions for the given
		 * controller name
		 * @private
		 */
		getControllerExtension: function(sControllerName) {
			var oResultConfig = undefined;
			findConfig(CONFIG_CONTROLLER_EXTENSIONS, function(oConfig) {
				oResultConfig = oConfig[sControllerName];
				return !!oResultConfig;
			});
			return oResultConfig;
		},
		
		/**
		 * currently returns an object (or undefined) because we assume there is 
		 * only one property modified and only once, but this
		 * @private
		 */
		getCustomProperties: function(sViewName, sControlId) { // TODO: Fragments and Views are mixed here
			var mSettings = {};
			// TODO: checking order of components?
			findConfig(CONFIG_VIEW_MODIFICATIONS, function(oConfig) {
				var oSettings = oConfig[sViewName] && oConfig[sViewName][sControlId];
				var oUsedSettings = {};
				if (oSettings) {
					jQuery.each(oSettings, function(sName, vValue) {
						if (sName === "visible") {
							oUsedSettings[sName] = vValue;
							jQuery.sap.log.info("Customizing: custom value for property '" + sName + "' of control '" + sControlId + "' in View '" + sViewName + "' applied: " + vValue);
						} else {
							jQuery.sap.log.warning("Customizing: custom value for property '" + sName + "' of control '" + sControlId + "' in View '" + sViewName + "' ignored: only the 'visible' property can be customized.");
						}
					});
					jQuery.extend(mSettings, oUsedSettings); // FIXME: this currently overrides customizations from different components in random order
				}
			});
			return mSettings;
		}
		
	};
	
	// when the customizing is disabled all the functions will be noop 
	if (sap.ui.getCore().getConfiguration().getDisableCustomizing()) {
		jQuery.sap.log.info("CustomizingConfiguration: disabling Customizing now");
		jQuery.each(sap.ui.core.CustomizingConfiguration, function(sName, vAny) {
			if (typeof vAny === "function") {
				sap.ui.core.CustomizingConfiguration[sName] = function() {};
			}
		});
	}
	
}());

}; // end of sap/ui/core/CustomizingConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ui.core.LocalBusyIndicatorSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides helper sap.ui.core.LocalBusyIndicatorSupport
jQuery.sap.declare("sap.ui.core.LocalBusyIndicatorSupport");

/**
 * This class is only here for compatibility reasons. LBI works automatically with all controls
 * 
 * @returns {sap.ui.core.LocalBusyIndicatorSupport}
 * @constructor
 * @private
 * @deprecated
 */
sap.ui.core.LocalBusyIndicatorSupport = function() {
	// "this" is the prototype now when called with apply()

	// Ensure only Element prototype is enhanced
	if (this === sap.ui.core.Control.prototype) {

		/**
		 * This function set the delay until the BusyIndicator is being shown
		 * 
		 * @private
		 * @param iDelay
		 */
		this.setDelay = function(iDelay) {
			this.setBusyIndicatorDelay(iDelay);
		};
		
	} else {
		jQuery.sap.log.error("Only controls can use the LocalBusyIndicator", this);
	}
};

//moved here to fix the cyclic dependency LocalBusyIndicatorSupport, Element, control


}; // end of sap/ui/core/LocalBusyIndicatorSupport.js
if ( !jQuery.sap.isDeclared('sap.ui.core.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ui.core (1.18.9)
 */
jQuery.sap.declare("sap.ui.core.library");

/**
 * The SAPUI5 Core Runtime. 
 *   
 *   Contains the UI5 jQuery plugin (jQuery.sap.*), the Core and all its components, 
 *   base classes for Controls and the Model View Controller components.
 *
 * @namespace
 * @name sap.ui.core
 * @public
 */


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ui.core",
  types: [
    "sap.ui.core.AccessibleRole",
    "sap.ui.core.BarColor",
    "sap.ui.core.CSSColor",
    "sap.ui.core.CSSSize",
    "sap.ui.core.CSSSizeShortHand",
    "sap.ui.core.Collision",
    "sap.ui.core.Design",
    "sap.ui.core.Dock",
    "sap.ui.core.HorizontalAlign",
    "sap.ui.core.ID",
    "sap.ui.core.IconColor",
    "sap.ui.core.ImeMode",
    "sap.ui.core.MessageType",
    "sap.ui.core.OpenState",
    "sap.ui.core.Percentage",
    "sap.ui.core.ScrollBarAction",
    "sap.ui.core.Scrolling",
    "sap.ui.core.TextAlign",
    "sap.ui.core.TextDirection",
    "sap.ui.core.TitleLevel",
    "sap.ui.core.URI",
    "sap.ui.core.ValueState",
    "sap.ui.core.VerticalAlign",
    "sap.ui.core.Wrapping",
    "any",
    "boolean",
    "float",
    "int",
    "sap.ui.core.mvc.ViewType",
    "object",
    "sap.ui.core.routing.HistoryDirection",
    "string",
    "void"
  ],
  interfaces: [
    "sap.ui.core.Label"
  ],
  controls: [
    "sap.ui.core.ComponentContainer",
    "sap.ui.core.Control",
    "sap.ui.core.HTML",
    "sap.ui.core.Icon",
    "sap.ui.core.LocalBusyIndicator",
    "sap.ui.core.ScrollBar",
    "sap.ui.core.TooltipBase",
    "sap.ui.core.UIComponent",
    "sap.ui.core.mvc.HTMLView",
    "sap.ui.core.mvc.JSONView",
    "sap.ui.core.mvc.JSView",
    "sap.ui.core.mvc.TemplateView",
    "sap.ui.core.mvc.View",
    "sap.ui.core.mvc.XMLView",
    "sap.ui.core.tmpl.DOMElement",
    "sap.ui.core.tmpl.Template",
    "sap.ui.core.tmpl.TemplateControl"
  ],
  elements: [
    "sap.ui.core.CustomData",
    "sap.ui.core.Element",
    "sap.ui.core.Item",
    "sap.ui.core.LayoutData",
    "sap.ui.core.ListItem",
    "sap.ui.core.Message",
    "sap.ui.core.SeparatorItem",
    "sap.ui.core.Title",
    "sap.ui.core.VariantLayoutData",
    "sap.ui.core.search.OpenSearchProvider",
    "sap.ui.core.search.SearchProvider",
    "sap.ui.core.tmpl.DOMAttribute"
  ],
  version: "1.18.9"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.AccessibleRole.
jQuery.sap.declare("sap.ui.core.AccessibleRole");


/**
 * @class Defines the accessible roles for ARIA support. This enumeration is used with the AccessibleRole control property.
 * For more information, goto "Roles for Accessible Rich Internet Applications (WAI-ARIA Roles)" at the www.w3.org homepage.
 * 
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.AccessibleRole = {
  
    /**
     * No explicit role is applicable. An AccessibleName should be specified for the control.
     *  
     * @public
     */
    None : "None",

    /**
     * A message with an alert or error information.
     *  
     * @public
     */
    Alert : "Alert",

    /**
     * A separate window with an alert or error information.
     *  
     * @public
     */
    AlertDialog : "AlertDialog",

    /**
     * A software unit executing a set of tasks for the user. 
     * @public
     */
    Application : "Application",

    /**
     * Usually defined as the advertisement at the top of a web page.
     * The banner content typically contains the site or company logo, or other key advertisements.
     *  
     * @public
     */
    Banner : "Banner",

    /**
     * Allows user-triggered actions.
     *  
     * @public
     */
    Button : "Button",

    /**
     * A control that has three possible values: true, false, mixed. 
     * @public
     */
    Checkbox : "Checkbox",

    /**
     * A table cell containing header information for a column. 
     * @public
     */
    ColumnHeader : "ColumnHeader",

    /**
     * Allows selecting an item from a list, or to enter data directly in the input field. 
     * @public
     */
    Combobox : "Combobox",

    /**
     * Information about the content on the page. Examples are footnotes, copyrights, or links to privacy statements.
     *  
     * @public
     */
    ContentInfo : "ContentInfo",

    /**
     * The content of the associated element represents a definition.
     * If there is a definition element within the content, this one represents the term being defined.
     *  
     * @public
     */
    Definition : "Definition",

    /**
     * Descriptive content for a page element. 
     * @public
     */
    Description : "Description",

    /**
     * A small window that is designed to interrupt the current application processing
     * in order to inform the user and to get some response. 
     * @public
     */
    Dialog : "Dialog",

    /**
     * A list of references to members of a single group.
     *  
     * @public
     */
    Directory : "Directory",

    /**
     * Content that contains related information, such as a book. 
     * @public
     */
    Document : "Document",

    /**
     * Contains cells of tabular data arranged in rows and columns, for example in a table. 
     * @public
     */
    Grid : "Grid",

    /**
     * A table cell in a grid where the cells can be active, editable, and selectable.
     * Cells may have functional relationships to controls, for example. 
     * @public
     */
    GridCell : "GridCell",

    /**
     * A section of user interface objects. 
     * @public
     */
    Group : "Group",

    /**
     * A heading for a section of the page. 
     * @public
     */
    Heading : "Heading",

    /**
     * A container for a collection of elements that form an image. 
     * @public
     */
    Img : "Img",

    /**
     * An interactive reference to a resource. 
     * @public
     */
    Link : "Link",

    /**
     * A container for non-interactive list items which are the children of the list. 
     * @public
     */
    List : "List",

    /**
     * A widget that allows the user to select one or more items from a list.
     * The items within the list are static and can contain images. 
     * @public
     */
    Listbox : "Listbox",

    /**
     * A single item in a list. 
     * @public
     */
    ListItem : "ListItem",

    /**
     * An area where new information is added, or old information disappears.
     * Information types are chat logs, messaging, or error logs, for example.
     * The log contains a sequence: New information is always added to the end of the log. 
     * @public
     */
    Log : "Log",

    /**
     * Defines the main content of a document.
     *  
     * @public
     */
    Main : "Main",

    /**
     * Is used to scroll text across the page.
     *  
     * @public
     */
    Marquee : "Marquee",

    /**
     * Offers a list of choices to the user.
     *  
     * @public
     */
    Menu : "Menu",

    /**
     * A container for menu items where each item may activate a submenu.
     *  
     * @public
     */
    Menubar : "Menubar",

    /**
     * A child in a menu. 
     * @public
     */
    MenuItem : "MenuItem",

    /**
     * A checkable menu item (tri-state). 
     * @public
     */
    MenuItemCheckbox : "MenuItemCheckbox",

    /**
     * A menu item which is part of a group of menuitemradio roles. 
     * @public
     */
    MenuItemRadio : "MenuItemRadio",

    /**
     * A collection of links suitable for use when navigating the document or related documents. 
     * @public
     */
    Navigation : "Navigation",

    /**
     * The content is parenthetic or ancillary to the main content of the resource. 
     * @public
     */
    Note : "Note",

    /**
     * A selectable item in a list represented by a select.
     *  
     * @public
     */
    Option : "Option",

    /**
     * An element whose role is presentational does not need to be mapped to the accessibility API. 
     * @public
     */
    Presentation : "Presentation",

    /**
     * Shows the execution progress in applications providing functions that take a long time. 
     * @public
     */
    ProgressBar : "ProgressBar",

    /**
     * An option in single-select list. Only one radio control in a radiogroup can be selected at the same time.
     *  
     * @public
     */
    Radio : "Radio",

    /**
     * A group of radio controls. 
     * @public
     */
    RadioGroup : "RadioGroup",

    /**
     * A large section on the web page. 
     * @public
     */
    Region : "Region",

    /**
     * A row of table cells. 
     * @public
     */
    Row : "Row",

    /**
     * A table cell containing header information for a row. 
     * @public
     */
    RowHeader : "RowHeader",

    /**
     * A search section of a web document. In many cases, this is a form used to submit search requests about the site,
     * or a more general Internet wide search service. 
     * @public
     */
    Search : "Search",

    /**
     * A unique section of the document. In the case of a portal, this may include time display, weather forecast,
     * or stock price. 
     * @public
     */
    Secondary : "Secondary",

    /**
     * Indicates that the element contains content that is related to the main content of the page. 
     * @public
     */
    SeeAlso : "SeeAlso",

    /**
     * A line or bar that separates sections of content. 
     * @public
     */
    Separator : "Separator",

    /**
     * A user input where the user selects an input in a given range. This form of range expects an analogous keyboard
     * interface. 
     * @public
     */
    Slider : "Slider",

    /**
     * Allows users to select a value from a list of given entries where exactly one value is displayed at runtime, and
     * the other ones can be displayed by scrolling using the arrow up and arrow down key.
     *  
     * @public
     */
    SpinButton : "SpinButton",

    /**
     * A container for processing advisory information. 
     * @public
     */
    Status : "Status",

    /**
     * A header for a tab panel. 
     * @public
     */
    Tab : "Tab",

    /**
     * A list of tabs which are references to tab panels.
     *  
     * @public
     */
    Tablist : "Tablist",

    /**
     * A container for the resources associated with a tab. 
     * @public
     */
    Tabpanel : "Tabpanel",

    /**
     * Inputs that allow free-form text as their value. 
     * @public
     */
    Textbox : "Textbox",

    /**
     * A numerical counter which indicates an amount of elapsed time from a start point,
     * or of the time remaining until a certain end point. 
     * @public
     */
    Timer : "Timer",

    /**
     * A collection of commonly used functions represented in compact visual form. 
     * @public
     */
    Toolbar : "Toolbar",

    /**
     * A popup that displays a description for an element when the user passes over or rests on that element.
     * Supplement to the normal tooltip processing of the user agent.
     *  
     * @public
     */
    Tooltip : "Tooltip",

    /**
     * A form of a list (tree) having groups (subtrees) inside groups (subtrees), where the sub trees can be collapsed and expanded.
     *  
     * @public
     */
    Tree : "Tree",

    /**
     * A grid whose rows are expandable and collapsable in the same manner as the ones of trees. 
     * @public
     */
    TreeGrid : "TreeGrid",

    /**
     * A tree node 
     * @public
     */
    TreeItem : "TreeItem"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.BarColor.
jQuery.sap.declare("sap.ui.core.BarColor");


/**
 * @class Configuration options for the colors of a progress bar
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.BarColor = {
  
    /**
     * Color: blue (#b8d0e8) 
     * @public
     */
    NEUTRAL : "NEUTRAL",

    /**
     * Color: green (#b5e7a8) 
     * @public
     */
    POSITIVE : "POSITIVE",

    /**
     * Color: yellow (#faf2b0) 
     * @public
     */
    CRITICAL : "CRITICAL",

    /**
     * Color: red (#ff9a90) 
     * @public
     */
    NEGATIVE : "NEGATIVE"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.CSSColor
jQuery.sap.declare('sap.ui.core.CSSColor');


/**
 * @class A string type that represents CSS color values. Allowed values are CSS hex colors like "#666666" or
 * 	"#fff", RGB/HSL values like "rgb(0,0,0)" or "hsla(50%,10%,30%,0.5)" as well as css color
 * 	names like "green" and "darkblue" and values like "inherit" and "transparent".
 * 	The empty string is also allowed and has the same effect as setting no color.
 *
 * @static
 * @public
 */
sap.ui.core.CSSColor = sap.ui.base.DataType.createType('sap.ui.core.CSSColor', {
    isValid : function(vValue) {
      return /^(#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})|rgb\(\s*((1?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))|([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*(,\s*((1?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))|([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*){2}\)|rgba\((\s*((1?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))|([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*,){3}\s*(0(\.[0-9]+)?|1(\.0+)?)\s*\)|hsl\(\s*([0-2]?[0-9]?[0-9]|3([0-5][0-9]|60))\s*(,\s*(([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*){2}\)|hsla\(\s*([0-2]?[0-9]?[0-9]|3([0-5][0-9]|60))\s*,(\s*(([0-9]?[0-9](\.[0-9]+)?|100(\.0+)?)%)\s*,){2}\s*(0(\.[0-9]+)?|1(\.0+)?)\s*\)|aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coralcornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silverskyblue|slateblue|slategray|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen|transparent|inherit|)$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.CSSSize
jQuery.sap.declare('sap.ui.core.CSSSize');


/**
 * @class A string type that represents CSS size values. Allowed values are CSS sizes like "1px" or "2em" or "50%", but also the special values "auto" and "inherit". 
 * Note that CSS does not allow all of these values for every CSS property representing a size. E.g. "auto" is not an allowed value for a padding size.
 *
 * @static
 * @public
 */
sap.ui.core.CSSSize = sap.ui.base.DataType.createType('sap.ui.core.CSSSize', {
    isValid : function(vValue) {
      return /^(auto|inherit|[-+]?(0*|([0-9]+|[0-9]*\.[0-9]+)([rR][eE][mM]|[eE][mM]|[eE][xX]|[pP][xX]|[cC][mM]|[mM][mM]|[iI][nN]|[pP][tT]|[pP][cC]|%)))$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.CSSSizeShortHand
jQuery.sap.declare('sap.ui.core.CSSSizeShortHand');


/**
 * @class This type checks the short hand form of a margin or
 * 		padding definition. E.g. "1px 1px" or up to four values are allowed.
 * 	
 *
 * @static
 * @public
 */
sap.ui.core.CSSSizeShortHand = sap.ui.base.DataType.createType('sap.ui.core.CSSSizeShortHand', {
    isValid : function(vValue) {
      return /^(inherit|(auto|[-+]?(0*|(\d+|\d*\.\d+)([eE][mM]|[eE][xX]|[pP][xX]|[cC][mM]|[mM][mM]|[iI][nN]|[pP][tT]|[pP][cC]|%))){1}(\s(auto|[-+]?(0*|(\d+|\d*\.\d+)([eE][mM]|[eE][xX]|[pP][xX]|[cC][mM]|[mM][mM]|[iI][nN]|[pP][tT]|[pP][cC]|%)))){0,3})$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.Collision
jQuery.sap.declare('sap.ui.core.Collision');


/**
 * @class Collision behavior: horizontal/vertical.
 * Defines how the position of an element should be adjusted in case it overflows the window in some direction. For both
 * directions this can be "flip", "fit" or "none". If only one behavior is provided it is applied to both directions.
 * Examples: "flip", "fit none".
 *
 * @static
 * @public
 */
sap.ui.core.Collision = sap.ui.base.DataType.createType('sap.ui.core.Collision', {
    isValid : function(vValue) {
      return /^((flip|fit|none)( (flip|fit|none))?)$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.Design.
jQuery.sap.declare("sap.ui.core.Design");


/**
 * @class Font design for texts
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.Design = {
  
    /**
     * Standard font 
     * @public
     */
    Standard : "Standard",

    /**
     * Mono space font 
     * @public
     */
    Monospace : "Monospace"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.Dock
jQuery.sap.declare('sap.ui.core.Dock');


/**
 * @class Docking position: horizontal/vertical.
 * Defines a position on the element which is used for aligned positioning of another element (e.g. the left top 
 * corner of a popup is positioned at the left bottom corner of the input field). For the horizontal position possible values 
 * are "begin", "left", "center", "right" and "end", where left/right always are left and right, or begin/end which are 
 * dependent on the text direction. For the vertical position possible values are "top", "center" and "bottom".
 * Examples: "left top", "end bottom", "center center".
 *
 * @static
 * @public
 */
sap.ui.core.Dock = sap.ui.base.DataType.createType('sap.ui.core.Dock', {
    isValid : function(vValue) {
      return /^((begin|left|center|right|end) (top|center|bottom))$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.HorizontalAlign.
jQuery.sap.declare("sap.ui.core.HorizontalAlign");


/**
 * @class Configuration options for horizontal alignments of controls
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.HorizontalAlign = {
  
    /**
     * Locale-specific positioning at the beginning of the line 
     * @public
     */
    Begin : "Begin",

    /**
     * Locale-specific positioning at the end of the line 
     * @public
     */
    End : "End",

    /**
     * Hard option for left alignment 
     * @public
     */
    Left : "Left",

    /**
     * Hard option for right alignment 
     * @public
     */
    Right : "Right",

    /**
     * Centered alignment of text 
     * @public
     */
    Center : "Center"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.ID
jQuery.sap.declare('sap.ui.core.ID');


/**
 * @class A string type representing an Id or a name.
 *
 * @static
 * @public
 */
sap.ui.core.ID = sap.ui.base.DataType.createType('sap.ui.core.ID', {
    isValid : function(vValue) {
      return /^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.IconColor.
jQuery.sap.declare("sap.ui.core.IconColor");


/**
 * @class Semantic Colors of an icon.
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.IconColor = {
  
    /**
     * Default color (brand color) 
     * @public
     */
    Default : "Default",

    /**
     * Positive color 
     * @public
     */
    Positive : "Positive",

    /**
     * Negative color 
     * @public
     */
    Negative : "Negative",

    /**
     * Critical color 
     * @public
     */
    Critical : "Critical",

    /**
     * Neutral color. 
     * @public
     */
    Neutral : "Neutral"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.ImeMode.
jQuery.sap.declare("sap.ui.core.ImeMode");


/**
 * @class State of the Input Method Editor (IME) for the control. Depending on its value, it allows users to enter and edit for example Chinese characters.
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.ImeMode = {
  
    /**
     * The value is automatically computed by the user agent. 
     * @public
     */
    Auto : "Auto",

    /**
     * IME is used for entering characters. 
     * @public
     */
    Active : "Active",

    /**
     * IME is not used for entering characters. 
     * @public
     */
    Inactive : "Inactive",

    /**
     * IME is disabled. 
     * @public
     */
    Disabled : "Disabled"

  };
/**
 * 
 *   Marker interface for controls which are suitable for use as label.
 *   
 *
 * @name sap.ui.core.Label
 * @interface
 * @public
 */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.MessageType.
jQuery.sap.declare("sap.ui.core.MessageType");


/**
 * @class Defines the different message types of a message
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.MessageType = {
  
    /**
     * Message should be just an information 
     * @public
     */
    Information : "Information",

    /**
     * Message is a warning 
     * @public
     */
    Warning : "Warning",

    /**
     * Message is an error 
     * @public
     */
    Error : "Error",

    /**
     * Message has no specific level 
     * @public
     */
    None : "None",

    /**
     * Message is an success message 
     * @public
     */
    Success : "Success"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.OpenState.
jQuery.sap.declare("sap.ui.core.OpenState");


/**
 * @class Defines the different possible states of an element that can be open or closed and does not only toggle between these states, but also spends some time in between (e.g. because of an animation).
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.OpenState = {
  
    /**
     * Open and currently not changing states. 
     * @public
     */
    OPEN : "OPEN",

    /**
     * Closed and currently not changing states. 
     * @public
     */
    CLOSED : "CLOSED",

    /**
     * Already left the CLOSED state, is not OPEN yet, but in the process of getting OPEN. 
     * @public
     */
    OPENING : "OPENING",

    /**
     * Still open, but in the process of going to the CLOSED state. 
     * @public
     */
    CLOSING : "CLOSING"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.Percentage
jQuery.sap.declare('sap.ui.core.Percentage');


/**
 * @class A string type that represents a percentage value.
 *
 * @static
 * @public
 */
sap.ui.core.Percentage = sap.ui.base.DataType.createType('sap.ui.core.Percentage', {
    isValid : function(vValue) {
      return /^([0-9][0-9]*(\.[0-9]+)?%)$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.ScrollBarAction.
jQuery.sap.declare("sap.ui.core.ScrollBarAction");


/**
 * @class Actions are: Click on track, button, drag of thumb, or mouse wheel click
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.ScrollBarAction = {
  
    /**
     * Single step scrolling caused by clicking an arrow button or arrow key. 
     * @public
     */
    Step : "Step",

    /**
     * Range scrolling caused by clicking track area or using page up or page down key. 
     * @public
     */
    Page : "Page",

    /**
     * Scrolling done by mouse wheel 
     * @public
     */
    MouseWheel : "MouseWheel",

    /**
     * Scrolling done by dragging the scroll bar's paint thumb 
     * @public
     */
    Drag : "Drag"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.Scrolling.
jQuery.sap.declare("sap.ui.core.Scrolling");


/**
 * @class Defines the possible values for horizontal and vertical scrolling behavior.
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.Scrolling = {
  
    /**
     * No scroll bar provided even if the content is larger than the available space. 
     * @public
     */
    None : "None",

    /**
     * A scroll bar is shown if the content requires more space than the given space (rectangle) provides. 
     * @public
     */
    Auto : "Auto",

    /**
     * A scroll bar is always shown even if the space is large enough for the current content. 
     * @public
     */
    Scroll : "Scroll",

    /**
     * No scroll bar is shown, and the content stays in the given rectangle. 
     * @public
     */
    Hidden : "Hidden"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.TextAlign.
jQuery.sap.declare("sap.ui.core.TextAlign");


/**
 * @class Configuration options for text alignments.
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.TextAlign = {
  
    /**
     * Locale-specific positioning at the beginning of the line. 
     * @public
     */
    Begin : "Begin",

    /**
     * Locale-specific positioning at the end of the line. 
     * @public
     */
    End : "End",

    /**
     * Hard option for left alignment. 
     * @public
     */
    Left : "Left",

    /**
     * Hard option for right alignment. 
     * @public
     */
    Right : "Right",

    /**
     * Centered text alignment. 
     * @public
     */
    Center : "Center"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.TextDirection.
jQuery.sap.declare("sap.ui.core.TextDirection");


/**
 * @class Configuration options for the direction of texts.
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.TextDirection = {
  
    /**
     * Specifies left-to-right text direction. 
     * @public
     */
    LTR : "LTR",

    /**
     * Specifies right-to-left text direction. 
     * @public
     */
    RTL : "RTL",

    /**
     * Inherits the direction from its parent control/container. 
     * @public
     */
    Inherit : "Inherit"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.TitleLevel.
jQuery.sap.declare("sap.ui.core.TitleLevel");


/**
 * @class Level of a title.
 *
 * @version 1.18.9
 * @static
 * @public
 * @since 1.9.1
 */
sap.ui.core.TitleLevel = {
  
    /**
     * The level of the title is choosen by the control rendering the title. 
     * @public
     */
    Auto : "Auto",

    /**
     * The Title is of level 1. 
     * @public
     */
    H1 : "H1",

    /**
     * The Title is of level 2 
     * @public
     */
    H2 : "H2",

    /**
     * The Title is of level 3 
     * @public
     */
    H3 : "H3",

    /**
     * The Title is of level 4 
     * @public
     */
    H4 : "H4",

    /**
     * The Title is of level 5 
     * @public
     */
    H5 : "H5",

    /**
     * The Title is of level 6 
     * @public
     */
    H6 : "H6"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.core.URI
jQuery.sap.declare('sap.ui.core.URI');


/**
 * @class A string type that represents an RFC 3986 conformant URI.
 *
 * @static
 * @public
 */
sap.ui.core.URI = sap.ui.base.DataType.createType('sap.ui.core.URI', {
    isValid : function(vValue) {
      return /^((([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?)$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.ValueState.
jQuery.sap.declare("sap.ui.core.ValueState");


/**
 * @class Marker for the correctness of the current value.
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.ValueState = {
  
    /**
     * State is not valid. 
     * @public
     */
    Error : "Error",

    /**
     * State is valid but with a warning. 
     * @public
     */
    Warning : "Warning",

    /**
     * State is valid. 
     * @public
     */
    Success : "Success",

    /**
     * State is not specified. 
     * @public
     */
    None : "None"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.VerticalAlign.
jQuery.sap.declare("sap.ui.core.VerticalAlign");


/**
 * @class
 * Configuration options for vertical alignments, for example of a layout cell content within the borders.
 * 
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.VerticalAlign = {
  
    /**
     * 
     * Content is aligned at the bottom.
     *  
     * @public
     */
    Bottom : "Bottom",

    /**
     * 
     * Content is centered vertically .
     *  
     * @public
     */
    Middle : "Middle",

    /**
     * 
     * Content is aligned at the top.
     *  
     * @public
     */
    Top : "Top",

    /**
     * 
     * Content respect the parent's vertical alignment.
     *  
     * @public
     */
    Inherit : "Inherit"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.Wrapping.
jQuery.sap.declare("sap.ui.core.Wrapping");


/**
 * @class Configuration options for text wrapping.
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.Wrapping = {
  
    /**
     * The standard browser behavior is considered for wrapping. 
     * @public
     */
    None : "None",

    /**
     * The text is actually on the same line but displayed within several lines. 
     * @public
     */
    Soft : "Soft",

    /**
     * Inserts actual line breaks in the text at the wrap point. 
     * @public
     */
    Hard : "Hard",

    /**
     * Wrapping shall not be allowed. 
     * @public
     */
    Off : "Off"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.mvc.ViewType.
jQuery.sap.declare("sap.ui.core.mvc.ViewType");


/**
 * @class Specifies possible view types
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.mvc.ViewType = {
  
    /**
     * JSON View 
     * @public
     */
    JSON : "JSON",

    /**
     * XML view 
     * @public
     */
    XML : "XML",

    /**
     * HTML view 
     * @public
     */
    HTML : "HTML",

    /**
     * JS View 
     * @public
     */
    JS : "JS",

    /**
     * Template View 
     * @public
     */
    Template : "Template"

  };
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.core.routing.HistoryDirection.
jQuery.sap.declare("sap.ui.core.routing.HistoryDirection");


/**
 * @class Enumaration for different HistoryDirections
 *
 * @version 1.18.9
 * @static
 * @public
 */
sap.ui.core.routing.HistoryDirection = {
  
    /**
     * The page has already been navigated to and it was the successor of the previous page 
     * @public
     */
    Forwards : "Forwards",

    /**
     * The page has already been navigated to and it was the precessor of the previous page 
     * @public
     */
    Backwards : "Backwards",

    /**
     * A new Entry is added to the history 
     * @public
     */
    NewEntry : "NewEntry",

    /**
     * A Navigation took place, but it could be any of the other three states 
     * @public
     */
    Unknown : "Unknown"

  };

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

(function() {
	
	var lazy = sap.ui.lazyRequire;
	
	function each(sPackage,aClasses,sShortcutPkg) {
		for(var i=0; i<aClasses.length; i++) {
			if ( sShortcutPkg ) {
				lazy(sShortcutPkg, aClasses[i].toLowerCase(), sPackage + aClasses[i]);
			} else {
			  lazy(sPackage + aClasses[i], "new extend getMetadata");
			}
		}
	}
	
	// lazy imports
	lazy("sap.ui.core.BusyIndicator", "show hide attachOpen detachOpen attachClose detachClose");
	lazy("sap.ui.core.tmpl.Template", "registerType unregisterType");
	lazy("sap.ui.core.Fragment", "registerType");
	
	lazy("sap.ui", "xmlfragment", "sap.ui.core.Fragment"); // cannot use "each" as it assumes a module to exist for each function name
	lazy("sap.ui", "jsfragment", "sap.ui.core.Fragment");
	lazy("sap.ui", "htmlfragment", "sap.ui.core.Fragment");

	each("sap.ui.model.", ["Filter","Sorter","json.JSONModel","resource.ResourceModel","odata.ODataModel","xml.XMLModel"]);
	each("sap.ui.model.type.", ["Boolean","Integer","Float","String","Date","Time","DateTime"]);
	each("sap.ui.core.", ["Locale","LocaleData","mvc.Controller"]);
	each("sap.ui.core.mvc.", ["Controller", "View", "JSView", "JSONView", "XMLView", "HTMLView", "TemplateView"], "sap.ui");
	each("sap.ui.core.", ["Component"], "sap.ui");
	each("sap.ui.core.tmpl.", ["Template"], "sap.ui");

}());

}; // end of sap/ui/core/library.js
if ( !jQuery.sap.isDeclared('sap.ui.core.plugin.TemplatingSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.plugin.TemplatingSupport
jQuery.sap.declare("sap.ui.core.plugin.TemplatingSupport");




/**
 * Creates an instance of the class <code>sap.ui.core.plugin.TemplatingSupport</code>
 * The plugin uses the <code>sap.ui.core.tmpl.Template</code>.
 *
 * @author Peter Muessig
 * @public
 * @since 1.15.0
 * @version 1.18.9
 */
sap.ui.core.plugin.TemplatingSupport = function() {
};


/**
 * Will be invoked by <code>sap.ui.core.Core</code> to notify the plugin to start.
 *
 * @param {sap.ui.core.Core} oCore reference to the Core
 * @param {boolean} [bOnInit] whether the hook is called during core initialization
 * @public
 */
sap.ui.core.plugin.TemplatingSupport.prototype.startPlugin = function(oCore, bOnInit) {
	jQuery.sap.log.info("Starting TemplatingSupport plugin.");
	this.oCore = oCore;
	sap.ui.template();
};

/**
 * Will be invoked by <code>sap.ui.core.Core</code> to notify the plugin to start
 * @param {sap.ui.core.Core} oCore reference to the Core
 * @public
 */
sap.ui.core.plugin.TemplatingSupport.prototype.stopPlugin = function() {
	jQuery.sap.log.info("Stopping TemplatingSupport plugin.");
	this.oCore = null;
};


/**
 * Create the <code>sap.ui.core.plugin.TemplatingSupport</code> plugin and
 * register it within the <code>sap.ui.core.Core</code>.
 */
(function(){
	var oThis = new sap.ui.core.plugin.TemplatingSupport();
	sap.ui.getCore().registerPlugin(oThis);
}());
}; // end of sap/ui/core/plugin/TemplatingSupport.js
if ( !jQuery.sap.isDeclared('sap.ui.core.search.SearchProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.search.SearchProvider.
jQuery.sap.declare("sap.ui.core.search.SearchProvider");




/**
 * Constructor for a new search/SearchProvider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Abstract base class for all SearchProviders which can be e.g. attached to a SearchField. Do not create instances of this class, but use a concrete sub class instead.
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.search.SearchProvider
 */
sap.ui.core.Element.extend("sap.ui.core.search.SearchProvider", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"suggest"
	],

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"icon" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.search.SearchProvider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.search.SearchProvider.extend
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon of the Search Provider
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ui.core.search.SearchProvider#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.core.search.SearchProvider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.search.SearchProvider#setIcon
 * @function
 */


/**
 * Call this function to get suggest values from the search provider. The given callback function is called with the suggest value (type 'string', 1st parameter) and an array of the suggestions (type '[string]', 2nd parameter).
 *
 * @name sap.ui.core.search.SearchProvider.prototype.suggest
 * @function
 * @param {string} 
 *         sSValue
 *         The value for which suggestions are requested.
 * @param {any} 
 *         oFCallBack
 *         The callback function which is called when the suggestions are available.

 * @type void
 * @public
 */


// Start of sap\ui\core\search\SearchProvider.js
/**
 * Call this function to get suggest values from the search provider.
 * The given callback function is called with the suggest value (type 'string', 1st parameter)
 * and an array of the suggestions (type '[string]', 2nd parameter).
 *
 * @name sap.ui.core.search.SearchProvider.prototype.suggest
 * @function
 * @param {string} sValue The value for which suggestions are requested.
 * @param {function} fCallBack The callback function which is called when the suggestions are available.
 * @type void
 * @public
 */
sap.ui.core.search.SearchProvider.prototype.suggest = function(sValue, fCallback) {
	jQuery.sap.log.warning("sap.ui.core.search.SearchProvider is the abstract base class for all SearchProviders. Do not create instances of this class, but use a concrete sub class instead.");
};

}; // end of sap/ui/core/search/SearchProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.core.theming.Parameters') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/**
 * @namespace
 * @name sap.ui.core.theming
 * @public
 */

jQuery.sap.declare("sap.ui.core.theming.Parameters");


(function(){

	/**
	 * A helper used for (read-only) access to CSS parameters at runtime.
	 *
	 * @class A helper used for (read-only) access to CSS parameters at runtime
	 * @author SAP AG
	 * @static
	 *
	 * @public
	 */
	sap.ui.core.theming.Parameters = {};

	var mParameters = null;
	var sTheme = null;
	
	function resetParameters() {
		mParameters = null;
	}

	/*
	 * Load parameters for a library/theme combination as identified by the URL of the library.css 
	 */
	function loadParameters(sUrl) {
		var oResponse,
			oResult;
		
		// derive parameter file URL from CSS file URL
		// $1: name of library (incl. variants)
		// $2: additional parameters, e.g. for sap-ui-merged use case
		sUrl = sUrl.replace(/\/library([^\/.]*)\.(?:css|less)($|[?#])/, function($0,$1,$2) {
			return "/library-parameters" + $1 + ".json" + ($2 ? $2 : "");
		});
		
		// load and evaluate parameter file 
		oResponse = jQuery.sap.sjax({url:sUrl,dataType:'json'});
		if (oResponse.success) {
			oResult = (typeof oResponse.data == "string") ? jQuery.parseJSON(oResponse.data) : oResponse.data; // FIXME jQuery1.7.1 always parses JSON, so why is it checked here?
			if ( jQuery.isArray(oResult) ) {
				// in the sap-ui-merged use case, multiple JSON files are merged into and transfered as a single JSON array  
				for(var j=0; j<oResult.length; j++) {
				  mParameters = jQuery.extend(mParameters, oResult[j]);
				}
			} else {
			  mParameters = jQuery.extend(mParameters, oResult);
			}
		} else {
			// ignore failure at least temporarily as long as there are libraries built using outdated tools which produce no json file
			jQuery.sap.log.warning("Could not load theme parameters from: " + sUrl); // could be an error as well, but let's avoid more CSN messages...
		}

	}

	function getParameters() {
		if (!mParameters) {

			mParameters = {};
			sTheme = sap.ui.getCore().getConfiguration().getTheme();
			
			jQuery("link[id^=sap-ui-theme-]").each(function() {
				loadParameters(this.href);
			});
			
		}
		return mParameters;
	}

	/**
	 * Called by the Core when a new library and its stylesheet have been loaded.
	 * @param {string} sUrl URL of the library stylesheet
	 * @private
	 */
	sap.ui.core.theming.Parameters._addLibraryTheme = function(sUrl) {
		// only load parameters if someone had requested them before
		if ( mParameters ) {
			loadParameters(sUrl);
		}
	};
	
	/**
	 * Returns the current value for the given CSS parameter.
	 * If no parameter is given, a map containing all parameters is returned. This map is a copy, so changing values in the map does not have any effect.
	 * For any other input or an undefined parameter name, the result is undefined.
	 *
	 * @param {string} sName the CSS parameter name
	 * @returns the CSS parameter value
	 *
	 * @public
	 */
	sap.ui.core.theming.Parameters.get = function(sName) {

		if (arguments.length == 1) {
			return getParameters()[sName];

		} else if (arguments.length == 0) {
			var clone = {};
			return jQuery.extend(clone, getParameters());

		} else {
			return undefined;
		}
	};
	
	/**
	 * Resets the CSS parameters which finally will reload the parameters 
	 * the next time they are queried via the method <code>get</code>.
	 * 
	 * @public
	 */
	sap.ui.core.theming.Parameters.reset = function() {
		// hidden parameter {boolean} bOnlyWhenNecessary
		var bOnlyWhenNecessary = arguments[0] === true;
		if ( !bOnlyWhenNecessary || sap.ui.getCore().getConfiguration().getTheme() !== sTheme ) {
			resetParameters();
		}
	};

}());

}; // end of sap/ui/core/theming/Parameters.js
if ( !jQuery.sap.isDeclared('sap.ui.core.tmpl.DOMAttribute') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.tmpl.DOMAttribute.
jQuery.sap.declare("sap.ui.core.tmpl.DOMAttribute");




/**
 * Constructor for a new tmpl/DOMAttribute.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getValue value} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents a DOM attribute of a DOM element.
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @experimental Since version 1.15. 
 * The templating might be changed in future versions.
 * @name sap.ui.core.tmpl.DOMAttribute
 */
sap.ui.core.Element.extend("sap.ui.core.tmpl.DOMAttribute", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"name" : {type : "string", group : "Data", defaultValue : null},
		"value" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.tmpl.DOMAttribute with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.tmpl.DOMAttribute.extend
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * Name of the DOM attribute
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.ui.core.tmpl.DOMAttribute#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.core.tmpl.DOMAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMAttribute#setName
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Value of the DOM attribute
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.ui.core.tmpl.DOMAttribute#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.ui.core.tmpl.DOMAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMAttribute#setValue
 * @function
 */


// Start of sap\ui\core\tmpl\DOMAttribute.js
sap.ui.core.tmpl.DOMAttribute.prototype.setValue = function(sValue) {
	this.setProperty("value", sValue, true); // no re-rendering!
	// do DOM modification to avoid re-rendering
	var oParent = this.getParent(),
	    $this = oParent && oParent.$();
	if ($this && $this.length > 0) {
		$this.attr(this.getName(), this.getProperty("value"));
	}
	return this;
};

}; // end of sap/ui/core/tmpl/DOMAttribute.js
if ( !jQuery.sap.isDeclared('sap.ui.core.CustomData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.CustomData.
jQuery.sap.declare("sap.ui.core.CustomData");




/**
 * Constructor for a new CustomData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getKey key} : string</li>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getWriteToDom writeToDom} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Contains a single key/value pair of custom data attached to an Element. See method data().
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.CustomData
 */
sap.ui.core.Element.extend("sap.ui.core.CustomData", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"key" : {type : "string", group : "Data", defaultValue : null},
		"value" : {type : "any", group : "Data", defaultValue : null},
		"writeToDom" : {type : "boolean", group : "Data", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.CustomData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.CustomData.extend
 * @function
 */


/**
 * Getter for property <code>key</code>.
 * The key of the data in this CustomData object.
 * When the data is just stored, it can be any string, but when it is to be written to HTML (writeToDom == true) then it must also be a valid HTML attribute name (it must conform to the sap.ui.core.ID type and may contain no colon) to avoid collisions, it also may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
 * If any restriction is violated, a warning will be logged and nothing will be written to the DOM.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>key</code>
 * @public
 * @name sap.ui.core.CustomData#getKey
 * @function
 */

/**
 * Setter for property <code>key</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.ui.core.CustomData} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.CustomData#setKey
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The data stored in this CustomData object.
 * When the data is just stored, it can be any JS type, but when it is to be written to HTML (writeToDom == true) then it must be a string.
 * If this restriction is violated, a warning will be logged and nothing will be written to the DOM.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>value</code>
 * @public
 * @name sap.ui.core.CustomData#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oValue  new value for property <code>value</code>
 * @return {sap.ui.core.CustomData} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.CustomData#setValue
 * @function
 */


/**
 * Getter for property <code>writeToDom</code>.
 * If set to "true" and the value is of type "string" and the key conforms to the documented restrictions, this custom data is written to the HTML root element of the control as a "data-*" attribute.
 * If the key is "abc" and the value is "cde", the HTML will look as follows:
 * &lt;SomeTag ... data-abc="cde" ... &gt;
 * Thus the application can provide stable attributes by data binding which can be used for styling or identification purposes.
 * ATTENTION: use carefully to not create huge attributes or a large number of them.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>writeToDom</code>
 * @public
 * @since 1.9.0
 * @name sap.ui.core.CustomData#getWriteToDom
 * @function
 */

/**
 * Setter for property <code>writeToDom</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bWriteToDom  new value for property <code>writeToDom</code>
 * @return {sap.ui.core.CustomData} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.ui.core.CustomData#setWriteToDom
 * @function
 */


// Start of sap\ui\core\CustomData.js
sap.ui.core.CustomData.prototype.setValue = function(oValue) {
	this.setProperty("value", oValue, true);
	
	var oControl = this.getParent();
	if (oControl && oControl.getDomRef() && this.getWriteToDom()) {
		// update DOM directly
		var key = this.getKey();
		if (typeof oValue === "string") {
			if ((sap.ui.core.ID.isValid(key)) && (key.indexOf(":") == -1) && (key.indexOf("sap-ui") !== 0)) {
				oControl.$().attr("data-" + key, oValue);
			} else { // error case
				jQuery.sap.log.error("CustomData with key " + key + " should be written to HTML of " + oControl + " but the key is not valid (must be a valid sap.ui.core.ID without any colon and may not start with 'sap-ui').");
			}
		} else { // error case: non-string value
			jQuery.sap.log.error("CustomData with key " + key + " should be written to HTML of " + oControl + " but the value is not a string.");
		}
	}
	return this;
};

}; // end of sap/ui/core/CustomData.js
if ( !jQuery.sap.isDeclared('sap.ui.core.EnabledPropagator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides helper sap.ui.core.EnabledPropagator
jQuery.sap.declare("sap.ui.core.EnabledPropagator");


/**
 * @class Helper Class for enhancement of a Control with propagation of enabled property.
 *
 * <b>This constructor should be applied to the prototype of a control</b>
 *
 * Example:
 * <code>
 * sap.ui.core.EnabledPropagator.call(<i>Some-Control</i>.prototype, <i>Default-value, ...</i>);
 * </code>
 * e.g.
 * <code>
 * sap.ui.core.EnabledPropagator.call(sap.ui.commons.Button.prototype);
 * </code>
 *
 * @author Daniel Brinkmann
 * @version 1.18.9
 * @param {boolean} [bDefault=true] the value that should be used as default value for the enhancement of the control.
 * @param {boolean} [bLegacy=false] whether the introduced property should use the old name 'Enabled' 
 * @public
 */
sap.ui.core.EnabledPropagator = function(bDefault, bLegacy) {
	// Ensure only Controls are enhanced
	if (!(this instanceof sap.ui.core.Control)) {
		throw new Error("EnabledPropagator only supports subclasses of Control"); // TODO clarify why. Daniel has added this check, but it is not obvious why?
	}

	// default for the default
	if ( bDefault === undefined ) {
		bDefault = true;
	}

	// helper to find a parent that has a getEnabled() method 
	function findParentWithEnabled(/**sap.ui.core.Control*/oControl) {
		var oParent = oControl.getParent();
		while (oParent && !oParent.getEnabled && oParent.getParent) {
			oParent = oParent.getParent();
		}
		return oParent;
	}
	
	// Ensure not to overwrite existing implementations.
	if (this.getEnabled === undefined) {
		// set some default
		this.getEnabled = function() {
			var oParent = findParentWithEnabled(this);
			return (oParent && oParent.getEnabled && !oParent.getEnabled()) ? false : this.getProperty("enabled");
		};

		if ( bLegacy ) {
			// add Enabled with old spelling for compatibility reasons. Shares the getter and setter with new spelling. 
			this.getMetadata().addProperty("Enabled", {type : "boolean", group : "Behavior", defaultValue :  !!bDefault});
		}
		this.getMetadata().addProperty("enabled", {type : "boolean", group : "Behavior", defaultValue :  !!bDefault});
		this.getMetadata().addPublicMethods('getEnabled');

	} else {
		// 
		var fnOld = this.getEnabled;
		this.getEnabled = function() {
			var oParent = findParentWithEnabled(this);
			return (oParent && oParent.getEnabled && !oParent.getEnabled()) ? false : fnOld.apply(this);
		};
	}

	if (this.setEnabled === undefined) {
		this.setEnabled = function(bEnabled) {
			this.setProperty("enabled", bEnabled);
		};

		this.getMetadata().addPublicMethods('setEnabled');
	}
};

}; // end of sap/ui/core/EnabledPropagator.js
if ( !jQuery.sap.isDeclared('sap.ui.core.HTML') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.HTML.
jQuery.sap.declare("sap.ui.core.HTML");




/**
 * Constructor for a new HTML.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContent content} : string</li>
 * <li>{@link #getPreferDOM preferDOM} : boolean (default: true)</li>
 * <li>{@link #getSanitizeContent sanitizeContent} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.core.HTML#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Embeds standard HTML in a SAPUI5 control tree.
 * 
 * Security Hint: By default, the HTML content (property 'content') is not sanitized and therefore open to XSS attacks. Applications that want to show user defined input in an HTML control, should either sanitize the content on their own or activate automatic sanitizing through the 'sanitizeContent' property.
 * 
 * Although this control inherits the 'tooltip' feature from sap.ui.core.Element, it doesn't support it. Instead, the defined HTML content can contain a tooltip (title attribute).
 * 
 * For further hints about usage restrictions for this control, see also the documentation of the 'content' property.
 * @extends sap.ui.core.Control
 *
 * @author Frank Weigel 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.HTML
 */
sap.ui.core.Control.extend("sap.ui.core.HTML", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"content" : {type : "string", group : "Misc", defaultValue : null},
		"preferDOM" : {type : "boolean", group : "Misc", defaultValue : true},
		"sanitizeContent" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"afterRendering" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.HTML with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.HTML.extend
 * @function
 */

sap.ui.core.HTML.M_EVENTS = {'afterRendering':'afterRendering'};


/**
 * Getter for property <code>content</code>.
 * HTML content to be displayed, defined as a string. The content is converted to DOM nodes with a call to <code>new jQuery(content)</code>, so any restrictions for the jQuery constructor apply to the content of the HTML control as well.
 * 
 * Some of these restrictions (there might be others!) are:
 * <ul>
 * <li>the content must be enclosed in tags, pure text is not supported. </li>
 * <li>if the content contains script tags, they will be executed but they will not appear in the resulting DOM tree. When the contained code tries to find the corresponding script tag, it will fail.</li>
 * </ul>
 * 
 * Please consider to consult the jQuery documentation as well.
 * 
 * The HTML control currently doesn't prevent the usage of multiple root nodes in its DOM content (e.g. setContent("<div/><div/>")), but this is not a guaranteed feature. The accepted content might be restricted to single root nodes in future versions. To notify applications about this fact, a warning is written in the log when multiple root nodes are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>content</code>
 * @public
 * @name sap.ui.core.HTML#getContent
 * @function
 */

/**
 * Setter for property <code>content</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sContent  new value for property <code>content</code>
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * @SecSink {,XSS} The content of the 'content' property is rendered 1:1 to allow the full flexibility of HTML in UI5 applications. 
		Applications therefore must ensure, that they don't set malicious content (e.g. derived from user input). UI5 does not provide an HTML validation function. 
		jQuery.sap.encodeHTML will encode any HTML relevant character, but this is in nearly all cases not what applications want here.
 * @name sap.ui.core.HTML#setContent
 * @function
 */


/**
 * Getter for property <code>preferDOM</code>.
 * Whether existing DOM content is preferred over the given content string.
 * 
 * There are two scenarios where this flag is relevant (when set to true):
 * <ul>
 * <li>for the initial rendering: when an HTML control is added to an UIArea for the first time and if the root node of that UIArea contained DOM content with the same id as the HTML control, then that content will be used for rendering instead of any specified string content</li>
 * <li>any follow-up rendering: when an HTML control is rendered for the second or any later time and the preferDOM flag is set, then the DOM from the first rendering is preserved and not replaced by the string content</li>
 * </ul>
 * 
 * As preserving the existing DOM is the most common use case of the HTML control, the default value is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>preferDOM</code>
 * @public
 * @name sap.ui.core.HTML#getPreferDOM
 * @function
 */

/**
 * Setter for property <code>preferDOM</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bPreferDOM  new value for property <code>preferDOM</code>
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.HTML#setPreferDOM
 * @function
 */


/**
 * Getter for property <code>sanitizeContent</code>.
 * Whether to run the HTML sanitizer once the content (HTML markup) is applied or not. To configure allowed URLs please use the whitelist API via jQuery.sap.addUrlWhitelist.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>sanitizeContent</code>
 * @public
 * @name sap.ui.core.HTML#getSanitizeContent
 * @function
 */

/**
 * Setter for property <code>sanitizeContent</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSanitizeContent  new value for property <code>sanitizeContent</code>
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.HTML#setSanitizeContent
 * @function
 */


/**
 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
 * 
 * When the control doesn't have string content and no preserved DOM existed for this control, then this event will fire, but there won't be a DOM node for this control.
 *  
 *
 * @name sap.ui.core.HTML#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.isPreservedDOM Whether the current DOM of the control has been preserved (true) or not (e.g. rendered from content property or it is an empty HTML control).
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ui.core.HTML</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.core.HTML</code>.<br/> itself. 
 *  
 * Fired after the HTML control has been rendered. Allows to manipulate the resulting DOM.
 * 
 * When the control doesn't have string content and no preserved DOM existed for this control, then this event will fire, but there won't be a DOM node for this control.
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ui.core.HTML</code>.<br/> itself.
 *
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.HTML#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ui.core.HTML</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.HTML#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'isPreservedDOM' of type <code>boolean</code> Whether the current DOM of the control has been preserved (true) or not (e.g. rendered from content property or it is an empty HTML control).</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.HTML} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.HTML#fireAfterRendering
 * @function
 */


// Start of sap\ui\core\HTML.js
/**
 * @return {Element} The element's DOM reference or null
 * @public
 */
sap.ui.core.HTML.prototype.getDomRef = function(sSuffix) {
	var sId = sSuffix ? this.getId() + "-" + sSuffix : this.getId();
	return jQuery.sap.domById("sap-ui-dummy-" + sId) || jQuery.sap.domById(sId);
};

sap.ui.core.HTML.prototype.setContent = function(sContent) {
	
	function parseHTML(s) {
		if ( jQuery.parseHTML ) {
			var a = jQuery.parseHTML(s);
			if ( a ) {
				var start=0, end=a.length;
				while ( start < end && a[start].nodeType != 1 ) {
					start++;
				}
				while ( start < end && a[end-1].nodeType != 1 ) {
					end--;
				} 
				if ( start > 0 || end < a.length ) { 
					a = a.slice(start, end);
				}
				return jQuery(a);
			}
		}
		return jQuery(s);
	}
		
	if ( this.getSanitizeContent() ) {
		jQuery.sap.log.trace("sanitizing HTML content for " + this);
		sContent = jQuery.sap._sanitizeHTML(sContent);
	}

	this.setProperty("content", sContent, true);
	if ( /* sContent && */ this.getDomRef() ) {
		var $newContent = parseHTML(this.getContent()); // TODO what if content is not HTML (e.g. #something)?
		jQuery(this.getDomRef()).replaceWith($newContent);
		this._postprocessNewContent($newContent);
	} else {
		this.invalidate();
	}
	return this;
};


sap.ui.core.HTML.prototype.onBeforeRendering = function() {
	if(this.getPreferDOM() && this.getDomRef() && !sap.ui.core.RenderManager.isPreservedContent(this.getDomRef())){
		sap.ui.core.RenderManager.preserveContent(this.getDomRef(), /* bPreserveRoot */ true, /* bPreserveNodesWithId */ false);
	}
};


/**
 * If the HTML doesn't contain own content, it tries to reproduce existing content
 */
sap.ui.core.HTML.prototype.onAfterRendering = function() {

	var $placeholder = jQuery(jQuery.sap.domById("sap-ui-dummy-" + this.getId()));
	var $oldContent = sap.ui.core.RenderManager.findPreservedContent(this.getId());
	var $newContent = undefined;
	var isPreservedDOM = false;
	if ( /*this.getContent() && */ (!this.getPreferDOM() || $oldContent.size() == 0) ) {
		// remove old, preserved content
		$oldContent.remove();
		// replace placeholder with content string
		$newContent = new jQuery(this.getContent()); // TODO what if content is not HTML (e.g. #something)?
		$placeholder.replaceWith($newContent);
	} else if ( $oldContent.size() > 0 ) {
		// replace dummy with old content
		$placeholder.replaceWith($oldContent);
		$newContent = $oldContent;
		isPreservedDOM = true;
	} else {
		$placeholder.remove();
	}

	this._postprocessNewContent($newContent);

	this.fireAfterRendering({isPreservedDOM : isPreservedDOM});

};

sap.ui.core.HTML.prototype._postprocessNewContent = function($newContent) {
	if ( $newContent && $newContent.size() > 0 ) {
		if ( $newContent.length > 1 ) {
			jQuery.sap.log.warning("[Unsupported Feature]: " + this + " has rendered " + $newContent.length + " root nodes!");
		}else{
			var sContentId = $newContent.attr("id");
			if(sContentId && sContentId != this.getId()){
				jQuery.sap.log.warning("[Unsupported Feature]: Id of HTML Control '" + this.getId() + "' does not match with content id '"+sContentId+"'!");
			}
		}

		// set a marker that identifies all root nodes in $newContent as 'to-be-preserved'
		sap.ui.core.RenderManager.markPreservableContent($newContent, this.getId());
		// and if no node has the control id, search the first without an id and set it
		if ( $newContent.find("#" + this.getId().replace(/(:|\.)/g,'\\$1')).length === 0 ) {
			$newContent.filter(":not([id])").first().attr("id", this.getId());
		}
	} else {
		jQuery.sap.log.debug("" + this + " is empty after rendering, setting bOutput to false");
		this.bOutput = false; // clean up internal rendering bookkeeping
	}
};

/**
 * Sets some new DOM content for this HTML control. The content will replace the existing content
 * after the next rendering. Properties are not modified, but preferDOM should be set to true.
 *
 * @param {DOMNode} oDom the new DOM content
 * @return this for chaining
 * @public
 */
sap.ui.core.HTML.prototype.setDOMContent = function(oDom) {
	var $newContent = jQuery(oDom);
	if ( this.getDomRef() ) {
		jQuery(this.getDomRef()).replaceWith($newContent);
		this._postprocessNewContent($newContent);
	} else {
		$newContent.appendTo(sap.ui.core.RenderManager.getPreserveAreaRef());
		if ( this.getUIArea() ) {
			this.getUIArea().invalidate();
		} // TODO fix issue with Control.rerender()
		this._postprocessNewContent($newContent); // CHECK is it okay to set bOutput to false for empty content?
	}

	return this;
};

sap.ui.core.HTML.prototype.setTooltip = function(sTooltip) {
	jQuery.sap.log.warning("The sap.ui.core.HTML control doesn't support tooltips. Add the tooltip to the HTML content instead.");
	return sap.ui.core.Control.prototype.setTooltip.apply(this, arguments);
};

}; // end of sap/ui/core/HTML.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Icon') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.Icon.
jQuery.sap.declare("sap.ui.core.Icon");




/**
 * Constructor for a new Icon.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getColor color} : sap.ui.core.CSSColor</li>
 * <li>{@link #getHoverColor hoverColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getActiveColor activeColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getBackgroundColor backgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getHoverBackgroundColor hoverBackgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getActiveBackgroundColor activeBackgroundColor} : sap.ui.core.CSSColor</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.core.Icon#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Icon uses embeded font instead of pixel image. Comparing to image, Icon is easily scalable, color can be altered live and various effects can be added using css.
 * 
 * A set of built in Icons is available and they can be fetched by calling sap.ui.core.IconPool.getIconURI and set this value to the src property on the Icon.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @since 1.11.1
 * @name sap.ui.core.Icon
 */
sap.ui.core.Control.extend("sap.ui.core.Icon", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"src" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"size" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"color" : {type : "sap.ui.core.CSSColor", group : "Appearance", defaultValue : null},
		"hoverColor" : {type : "sap.ui.core.CSSColor", group : "Appearance", defaultValue : null},
		"activeColor" : {type : "sap.ui.core.CSSColor", group : "Appearance", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"backgroundColor" : {type : "sap.ui.core.CSSColor", group : "Appearance", defaultValue : null},
		"hoverBackgroundColor" : {type : "sap.ui.core.CSSColor", group : "Appearance", defaultValue : null},
		"activeBackgroundColor" : {type : "sap.ui.core.CSSColor", group : "Appearance", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"decorative" : {type : "boolean", group : "Accessibility", defaultValue : true}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.Icon with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.Icon.extend
 * @function
 */

sap.ui.core.Icon.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>src</code>.
 * This property should be set by the return value of calling sap.ui.core.IconPool.getIconURI with a Icon name parameter and an optional collection parameter which is required when using application extended Icons. A list of standard FontIcon is available here.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>src</code>
 * @public
 * @name sap.ui.core.Icon#getSrc
 * @function
 */

/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sSrc  new value for property <code>src</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setSrc
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Since Icon uses font, this property will be applied to the css font-size property on the rendered DOM element.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * @name sap.ui.core.Icon#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sSize  new value for property <code>size</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setSize
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * The color of the Icon. If color is not defined here, the Icon inherits the color from its DOM parent.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSColor} the value of property <code>color</code>
 * @public
 * @name sap.ui.core.Icon#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSColor} sColor  new value for property <code>color</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setColor
 * @function
 */


/**
 * Getter for property <code>hoverColor</code>.
 * This color is shown when icon is hovered. This property has no visual effect when run on mobile device.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSColor} the value of property <code>hoverColor</code>
 * @public
 * @name sap.ui.core.Icon#getHoverColor
 * @function
 */

/**
 * Setter for property <code>hoverColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSColor} sHoverColor  new value for property <code>hoverColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setHoverColor
 * @function
 */


/**
 * Getter for property <code>activeColor</code>.
 * This color is shown when icon is pressed/activated by the user.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSColor} the value of property <code>activeColor</code>
 * @public
 * @name sap.ui.core.Icon#getActiveColor
 * @function
 */

/**
 * Setter for property <code>activeColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSColor} sActiveColor  new value for property <code>activeColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setActiveColor
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * This is the width of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.core.Icon#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * This is the height of the DOM element which contains the Icon. Setting this property doesn't affect the size of the font. If you want to make the font bigger, increase the size property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.core.Icon#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setHeight
 * @function
 */


/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the Icon in normal state.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSColor} the value of property <code>backgroundColor</code>
 * @public
 * @name sap.ui.core.Icon#getBackgroundColor
 * @function
 */

/**
 * Setter for property <code>backgroundColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSColor} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setBackgroundColor
 * @function
 */


/**
 * Getter for property <code>hoverBackgroundColor</code>.
 * Background color for Icon in hover state. This property has no visual effect when run on mobile device.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSColor} the value of property <code>hoverBackgroundColor</code>
 * @public
 * @name sap.ui.core.Icon#getHoverBackgroundColor
 * @function
 */

/**
 * Setter for property <code>hoverBackgroundColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSColor} sHoverBackgroundColor  new value for property <code>hoverBackgroundColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setHoverBackgroundColor
 * @function
 */


/**
 * Getter for property <code>activeBackgroundColor</code>.
 * Background color for Icon in active state.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSColor} the value of property <code>activeBackgroundColor</code>
 * @public
 * @name sap.ui.core.Icon#getActiveBackgroundColor
 * @function
 */

/**
 * Setter for property <code>activeBackgroundColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSColor} sActiveBackgroundColor  new value for property <code>activeBackgroundColor</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setActiveBackgroundColor
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * An invisible icon is not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.core.Icon#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#setVisible
 * @function
 */


/**
 * Getter for property <code>decorative</code>.
 * A decorative icon is included for design reasons. Accessibility tools will ignore decorative icons. Decorative icons don't have tab stop.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>decorative</code>
 * @public
 * @since 1.16.4
 * @name sap.ui.core.Icon#getDecorative
 * @function
 */

/**
 * Setter for property <code>decorative</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDecorative  new value for property <code>decorative</code>
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.4
 * @name sap.ui.core.Icon#setDecorative
 * @function
 */


/**
 * This event is fired when icon is pressed/activated by the user. 
 *
 * @name sap.ui.core.Icon#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.core.Icon</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.core.Icon</code>.<br/> itself. 
 *  
 * This event is fired when icon is pressed/activated by the user. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ui.core.Icon</code>.<br/> itself.
 *
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.core.Icon</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Icon#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.Icon} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.Icon#firePress
 * @function
 */


// Start of sap\ui\core\Icon.js


(function(){
	var bTouchModeOff = (jQuery.sap.touchEventMode === "OFF"),
		sActiveEventName = (bTouchModeOff ? "onmousedown" : "ontouchstart"),
		sClickEventName = (bTouchModeOff ? "onclick" : "ontap");
	
	/**
	 * This binds to the mousedown/touchstart event to change the color and background color to the active values.
	 * @private
	 *
	 */
	sap.ui.core.Icon.prototype[sActiveEventName] = function(oEvent){
		//for control who need to know if they should handle events from the image control
		//TODO: here may also be relevant to the bTouchModeOff
		if(oEvent.srcControl.mEventRegistry["press"] || oEvent.srcControl.mEventRegistry["tap"]){
			oEvent.originalEvent._sapui_handledByControl = true;
		}
		var sActiveColor = this.getActiveColor(),
			sActiveBackgroundColor = this.getActiveBackgroundColor(),
			$this;
		if(sActiveColor || sActiveBackgroundColor){
			//change the source only when the first finger is on the Icon, the following fingers doesn't affect
			if((oEvent.targetTouches && oEvent.targetTouches.length === 1) || !oEvent.targetTouches){
				$this = this.$();
				
				$this.addClass("sapUiIconActive");
				
				if(sActiveColor){
					$this.css("color", sActiveColor);
				}
				
				if(sActiveBackgroundColor){
					$this.css("background-color", sActiveBackgroundColor);
				}
				
				this._isActiveState = true;
				if(!this._touchEndProxy){
					this._touchEndProxy = jQuery.proxy(this._ontouchend, this);
				}
				
				if(!sap.ui.Device.support.touch){
					//binding to document when runs in desktop browser
					//here also bound to the mouseup event to enable it working in desktop browsers
					jQuery(window.document).bind("mouseup", this._touchEndProxy);
				}else{
					//binding to the image itself when runs in mobile device
					//Galaxy Note (4.0.4) can't bubble the touchend event to document
					this.$().bind("touchcancel touchend", this._touchEndProxy);
				}
			}
		}
	};
	
	sap.ui.core.Icon.prototype[sClickEventName] = function(oEvent){
		this.firePress({/* no parameters */});
	};
	
	if(bTouchModeOff){
		sap.ui.core.Icon.prototype.onmouseover = function(oEvent){
			var sHoverColor = this.getHoverColor(),
				sHoverBackgroundColor = this.getHoverBackgroundColor(),
				$this = this.$();
				
			if(sHoverColor){
				$this.css("color", sHoverColor);
			}
			if(sHoverBackgroundColor){
				$this.css("background-color", sHoverBackgroundColor);
			}
		};
		
		sap.ui.core.Icon.prototype.onmouseout = function(oEvent){
			if(!this._isActiveState){
				this._restoreColors();
			}
		};
	}
}());

sap.ui.core.Icon.prototype.onAfterRendering = function(){
	var $this = this.$();
	
	//When cursor css style is set via css class, chrome doesn't return the set value by calling domNode.style.cursor
	//Therefore inline style has to be set here.
	if(sap.ui.Device.browser.chrome && this.hasListeners("press")){
		$this.css("cursor", "pointer");
	}
	//this is to check if no cursor property inherited from parent dom. If the current value is auto, set it to default.
	//this is to fix the cursor: auto interpreted as text cursor in firefox and IE.
	if($this.css("cursor") === "auto"){
		$this.css("cursor", "default");
	}
};

/**
 * Handle the key down event for SPACE and ENTER.
 *
 * @param {jQuery.Event} oEvent - the keyboard event.
 * @private
 */
sap.ui.core.Icon.prototype.onkeydown = function(oEvent) {
	if(oEvent.which == jQuery.sap.KeyCodes.SPACE || oEvent.which == jQuery.sap.KeyCodes.ENTER){
		var $this = this.$(),
			sActiveColor = this.getActiveColor(),
			sActiveBackgroundColor = this.getActiveBackgroundColor();
		$this.addClass("sapUiIconActive");
		if(sActiveColor){
			$this.css("color", sActiveColor);
		}
		if(sActiveBackgroundColor){
			$this.css("background-color", sActiveBackgroundColor);
		}
		this._isActiveState = true;
		
		oEvent.preventDefault();
	}
};

/**
 * Handle the key up event for SPACE and ENTER.
 *
 * @param {jQuery.Event} oEvent - the keyboard event.
 * @private
 */
sap.ui.core.Icon.prototype.onkeyup = function(oEvent) {
	if(oEvent.which == jQuery.sap.KeyCodes.SPACE || oEvent.which == jQuery.sap.KeyCodes.ENTER){
		this._isActiveState = false;
		this.$().removeClass("sapUiIconActive");
		this._restoreColors();
		this.firePress({/* no parameters */});
	}
};

/**
 * This changes the src property of the image back to the src property of the image control.
 * @private
 *
 */
sap.ui.core.Icon.prototype._ontouchend = function(oEvent){
	//change the source back only when all fingers leave the icon
	if((oEvent.targetTouches && oEvent.targetTouches.length === 0) || !oEvent.targetTouches){
		this._isActiveState = false;
		
		this.$().removeClass("sapUiIconActive");
		
		this._restoreColors();
		
		if(!sap.ui.Device.support.touch){
			jQuery(window.document).unbind("mouseup", this._touchEndProxy);
		}else{
			this.$().unbind("touchcancel touchend", this._touchEndProxy);
		}
	}
};

sap.ui.core.Icon.prototype._restoreColors = function(){	
	this.$().css({
		"color": this.getColor() || "",
		"background-color": this.getBackgroundColor() || ""
	});
};

sap.ui.core.Icon.prototype.setSrc = function(sSrc){
	var oIconInfo = sap.ui.core.IconPool.getIconInfo(sSrc),
		bTextNeeded = (!!sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 9),
		$this = this.$();
	if(oIconInfo){
		$this.css("font-family", oIconInfo.fontFamily);
		if(bTextNeeded){
			$this.text(oIconInfo.content);
		}else{
			$this.attr("data-sap-ui-icon-content", oIconInfo.content);
		}
		$this.toggleClass("sapUiIconMirrorInRTL", !oIconInfo.suppressMirroring);
	}
	//when the given sSrc can't be found in IconPool, rerender the icon is needed.
	this.setProperty("src", sSrc, !!oIconInfo);
	return this;
};

sap.ui.core.Icon.prototype.setWidth = function(sWidth){
	this.setProperty("width", sWidth, true);
	this.$().css("width", sWidth);
	
	return this;
};

sap.ui.core.Icon.prototype.setHeight = function(sHeight){
	this.setProperty("height", sHeight, true);
	this.$().css({
		"height": sHeight,
		"line-height": sHeight
	});
	
	return this;
};

sap.ui.core.Icon.prototype.setSize = function(sSize){
	this.setProperty("size", sSize, true);
	this.$().css("font-size", sSize);
	
	return this;
};

sap.ui.core.Icon.prototype.setColor = function(sColor){
	this.setProperty("color", sColor, true);
	this.$().css("color", sColor);
	
	return this;
};

sap.ui.core.Icon.prototype.setActiveColor = function(sColor){
	return this.setProperty("activeColor", sColor, true);
};

sap.ui.core.Icon.prototype.setHoverColor = function(sColor){
	return this.setProperty("hoverColor", sColor, true);
};

sap.ui.core.Icon.prototype.setBackgroundColor = function(sColor){
	this.setProperty("backgroundColor", sColor, true);
	this.$().css("background-color", sColor);
	
	return this;
};

sap.ui.core.Icon.prototype.setActiveBackgroundColor = function(sColor){
	return this.setProperty("activeBackgroundColor", sColor, true);
};

sap.ui.core.Icon.prototype.setHoverBackgroundColor = function(sColor){
	return this.setProperty("hoverBackgroundColor", sColor, true);
};
}; // end of sap/ui/core/Icon.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Item') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.Item.
jQuery.sap.declare("sap.ui.core.Item");




/**
 * Constructor for a new Item.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: "")</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getKey key} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A control base type.
 * 
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.Item
 */
sap.ui.core.Element.extend("sap.ui.core.Item", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : ""},
		"enabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Misc", defaultValue : sap.ui.core.TextDirection.Inherit},
		"key" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.Item with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.Item.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The text to be displayed for the item.
 *
 * Default value is <code>""</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.core.Item#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Item#setText
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Enabled items can be selected.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.core.Item#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Item#setEnabled
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Options are RTL and LTR. Alternatively, an item can inherit its text direction from its parent control.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.ui.core.Item#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Item#setTextDirection
 * @function
 */


/**
 * Getter for property <code>key</code>.
 * Can be used as input for subsequent actions.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>key</code>
 * @public
 * @name sap.ui.core.Item#getKey
 * @function
 */

/**
 * Setter for property <code>key</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.ui.core.Item} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Item#setKey
 * @function
 */


// Start of sap\ui\core\Item.js

}; // end of sap/ui/core/Item.js
if ( !jQuery.sap.isDeclared('sap.ui.core.LayoutData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.LayoutData.
jQuery.sap.declare("sap.ui.core.LayoutData");




/**
 * Constructor for a new LayoutData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A layout data base type.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.LayoutData
 */
sap.ui.core.Element.extend("sap.ui.core.LayoutData", { metadata : {

	// ---- object ----
	"abstract" : true,

	// ---- control specific ----
	library : "sap.ui.core"
}});


/**
 * Creates a new subclass of class sap.ui.core.LayoutData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.LayoutData.extend
 * @function
 */


// Start of sap\ui\core\LayoutData.js
sap.ui.core.LayoutData.prototype.invalidate = function() {
	//No call of Element.invalidate to avoid bubbling of invalidate
	var oParent = this.getParent();

	if(oParent && oParent.getMetadata().getName() == "sap.ui.core.VariantLayoutData"){
		// layout is part of a VariantLayout - so use parent of this one
		oParent = oParent.getParent();
	}

	if(oParent){
		var oLayout = oParent.getParent();
		if(oLayout){
			var oEvent = jQuery.Event("LayoutDataChange");
			oEvent.srcControl = oParent;
			oLayout._handleEvent(oEvent);
		}
	}
};

sap.ui.core.LayoutData.prototype.setLayoutData = function(oLayoutData) {

	// as LayoutData on LayoutData makes no sense just ignore it.
	return this;

};

}; // end of sap/ui/core/LayoutData.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.ListItem.
jQuery.sap.declare("sap.ui.core.ListItem");




/**
 * Constructor for a new ListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getAdditionalText additionalText} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An item that is used in lists or list-similar controls such as DropdownBox, for example.
 * The element foresees the usage of additional texts displayed in a second column.
 * 
 * @extends sap.ui.core.Item
 *
 * @author SAP AG 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.ListItem
 */
sap.ui.core.Item.extend("sap.ui.core.ListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"icon" : {type : "string", group : "Appearance", defaultValue : null},
		"additionalText" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.ListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.ListItem.extend
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The icon belonging to this list item instance.
 * This can be an URI to an image or an icon font URI.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ui.core.ListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.core.ListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>additionalText</code>.
 * Some additional text of type string, optionally to be displayed along with this item.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>additionalText</code>
 * @public
 * @name sap.ui.core.ListItem#getAdditionalText
 * @function
 */

/**
 * Setter for property <code>additionalText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAdditionalText  new value for property <code>additionalText</code>
 * @return {sap.ui.core.ListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ListItem#setAdditionalText
 * @function
 */


// Start of sap\ui\core\ListItem.js

}; // end of sap/ui/core/ListItem.js
if ( !jQuery.sap.isDeclared('sap.ui.core.LocalBusyIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.LocalBusyIndicator.
jQuery.sap.declare("sap.ui.core.LocalBusyIndicator");




/**
 * Constructor for a new LocalBusyIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100px')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100px')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The LocalBusyIndicator is a special version of the
 * BusyIndicator. This one doesn't block the whole screen - it just
 * blocks the corresponding control and puts a local animation over the
 * control. To use the functionality of this control the corresponding
 * control needs to be enabled via the 'LocalBusyIndicatorSupport'
 * accordingly to the ListBox control (see the init-function of the
 * ListBox).
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @since 1.11.0
 * @deprecated Since version 1.14.2. 
 * The LocalBusyIndicator Control is not needed anymore by the new implementation of the LBI. Hence, it is not used anymore.
 * @name sap.ui.core.LocalBusyIndicator
 */
sap.ui.core.Control.extend("sap.ui.core.LocalBusyIndicator", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100px'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100px'}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.LocalBusyIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.LocalBusyIndicator.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * This property is the width of the control that has to
 * be covered. With this width the position of the animation can be
 * properly set.
 * 
 *
 * Default value is <code>100px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.core.LocalBusyIndicator#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100px</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.core.LocalBusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.LocalBusyIndicator#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * This property is the height of the control that has to
 * be covered. With this height the position of the animation can be
 * properly set.
 * 
 *
 * Default value is <code>100px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.core.LocalBusyIndicator#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100px</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.core.LocalBusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.LocalBusyIndicator#setHeight
 * @function
 */


// Start of sap\ui\core\LocalBusyIndicator.js



(function() {
	sap.ui.core.LocalBusyIndicator.prototype.init = function() {
		var sRoot = "sap.ui.core.LocalBusyIndicator:";

		var sParam = "sapUiLocalBusyIndicatorBoxSize";
		sParam = sap.ui.core.theming.Parameters.get(sRoot + sParam);
		// this._iBoxSize = parseInt(sParam, 10);
		this._iBoxSize = 8;

		sParam = "sapUiLocalBusyIndicatorBoxColor";
		this._sBoxColor = sap.ui.core.theming.Parameters.get(sRoot + sParam);

		sParam = "sapUiLocalBusyIndicatorBoxColorActive";
		this._sBoxColorActive = sap.ui.core.theming.Parameters.get(sRoot + sParam);

		this._animateProxy = jQuery.proxy(fnAnimate, this);
	};

	sap.ui.core.LocalBusyIndicator.prototype.exit = function() {
		jQuery.sap.clearDelayedCall(this._delayedCallId);
		delete this._delayedCallId;
	};

	sap.ui.core.LocalBusyIndicator.prototype.onThemeChanged = function(oEvent) {
		if (this.getDomRef()) {
			this.invalidate();
		}
	};

	sap.ui.core.LocalBusyIndicator.prototype.onAfterRendering = function() {
		var w = parseInt(this.getWidth(), 10);
		var h = parseInt(this.getHeight(), 10);

		var $this = this.$();
		$this.css("width", w + "px");
		$this.css("height", h + "px");

		var sId = this.getId();
		var $animation = jQuery.sap.byId(sId + "-animation");

		var left = Math.floor(w / 2);
		left -= Math.floor((5 * this._iBoxSize) / 2);

		var top = Math.floor(h / 2) - Math.floor(this._iBoxSize / 2);

		$animation.css("left", left + "px");
		$animation.css("top", top + "px");

		if (!this._$left) {
			this._$left = jQuery.sap.byId(sId + "-leftBox");
		}
		if (!this._$middle) {
			this._$middle = jQuery.sap.byId(sId + "-middleBox");
		}
		if (!this._$right) {
			this._$right = jQuery.sap.byId(sId + "-rightBox");
		}

		this._delayedCallId = jQuery.sap.delayedCall(0, this, this._animateProxy);
	};

	var fnAnimate = function() {
		if (this.getDomRef()) {
			var oThis = this;
			var $left, $middle, $right;
			var color = "", colorActive = "";

			/*
			 * All this steps ensure that the control won't crash if during an
			 * animation the control was destroyed.
			 */
			if (oThis._$left) {
				$left = oThis._$left;
			} else {
				return;
			}
			if (oThis._$middle) {
				$middle = oThis._$middle;
			} else {
				return;
			}
			if (oThis._$right) {
				$right = oThis._$right;
			} else {
				return;
			}
			if (oThis._sBoxColor) {
				color = oThis._sBoxColor;
			} else {
				return;
			}
			if (oThis._sBoxColorActive) {
				colorActive = oThis._sBoxColorActive;
			} else {
				return;
			}

			$left.css("background-color", colorActive);

			setTimeout(function() {
				$left.css("background-color", color);

				$middle.css("background-color", colorActive);

				setTimeout(function() {
					$middle.css("background-color", color);

					$right.css("background-color", colorActive);

					setTimeout(function() {
						$right.css("background-color", color);
					}, 150);
				}, 150);
			}, 150);

			this._delayedCallId = jQuery.sap.delayedCall(1200, this, this._animateProxy);
		}
	};
}());
}; // end of sap/ui/core/LocalBusyIndicator.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Message') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.Message.
jQuery.sap.declare("sap.ui.core.Message");




/**
 * Constructor for a new Message.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getLevel level} : sap.ui.core.MessageType (default: sap.ui.core.MessageType.None)</li>
 * <li>{@link #getReadOnly readOnly} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This element used to provide messages. Rendering must be done within the control that uses this kind of element.
 * 
 * Its default level is none.
 * @extends sap.ui.core.Element
 *
 * @author SAP 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.Message
 */
sap.ui.core.Element.extend("sap.ui.core.Message", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getDefaultIcon"
	],

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"timestamp" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"level" : {type : "sap.ui.core.MessageType", group : "Misc", defaultValue : sap.ui.core.MessageType.None},
		"readOnly" : {type : "boolean", group : "Misc", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.Message with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.Message.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Message text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.core.Message#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Message#setText
 * @function
 */


/**
 * Getter for property <code>timestamp</code>.
 * Message's timestamp. It is just a simple String that will be used without any transformation. So the application that uses messages needs to format the timestamp to its own needs.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * @name sap.ui.core.Message#getTimestamp
 * @function
 */

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTimestamp  new value for property <code>timestamp</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Message#setTimestamp
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * A possible icon URI of the message
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.core.Message#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Message#setIcon
 * @function
 */


/**
 * Getter for property <code>level</code>.
 * Setting the message's level.
 *
 * Default value is <code>sap.ui.core.MessageType.None</code>
 *
 * @return {sap.ui.core.MessageType} the value of property <code>level</code>
 * @public
 * @name sap.ui.core.Message#getLevel
 * @function
 */

/**
 * Setter for property <code>level</code>.
 *
 * Default value is <code>sap.ui.core.MessageType.None</code> 
 *
 * @param {sap.ui.core.MessageType} oLevel  new value for property <code>level</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Message#setLevel
 * @function
 */


/**
 * Getter for property <code>readOnly</code>.
 * Determines whether the message should be read only. This helps the application to handle a message a different way if the application differentiates between read-only and common messages.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>readOnly</code>
 * @public
 * @since 1.19.0
 * @name sap.ui.core.Message#getReadOnly
 * @function
 */

/**
 * Setter for property <code>readOnly</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bReadOnly  new value for property <code>readOnly</code>
 * @return {sap.ui.core.Message} <code>this</code> to allow method chaining
 * @public
 * @since 1.19.0
 * @name sap.ui.core.Message#setReadOnly
 * @function
 */


/**
 * Returns the icon's default URI depending on given size. There are default icons for messages available that can be used this way. If no parameter is given the size will be 16x16 per default. If larger icons are needed the parameter "32x32" might be given.
 *
 * @name sap.ui.core.Message.prototype.getDefaultIcon
 * @function
 * @param {string} 
 *         sSize
 *         If parameter is not set the default icon's size will be 16x16. If parameter is set to "32x32" the icon size will be 32x32.

 * @type sap.ui.core.URI
 * @public
 */


// Start of sap\ui\core\Message.js

/**
 * This file defines behavior for the control,
 */
sap.ui.core.Message.prototype.getDefaultIcon = function(sSize) {
	var sModulePath = jQuery.sap.getModulePath("sap.ui.core", '/');
	var sTheme = "themes/" + sap.ui.getCore().getConfiguration().getTheme();

	var sImagesPath = "/img/message/";
	if (sSize && sSize == "32x32") {
		sImagesPath += "32x32/";
	} else {
		sImagesPath += "16x16/";
	}
	var sUrl = "";

	switch (this.getProperty("level")) {
	case sap.ui.core.MessageType.Error:
		sUrl = sModulePath + sTheme + sImagesPath + "Message_Icon_Error.png";
		break;

	case sap.ui.core.MessageType.Information:
		sUrl = sModulePath + sTheme + sImagesPath
				+ "Message_Icon_Information.png";
		break;

	case sap.ui.core.MessageType.Warning:
		sUrl = sModulePath + sTheme + sImagesPath + "Message_Icon_Warning.png";
		break;

	case sap.ui.core.MessageType.Success:
		sUrl = sModulePath + sTheme + sImagesPath + "Message_Icon_Success.png";
		break;

	case sap.ui.core.MessageType.None:
	default:
		sUrl = this.getProperty("icon");
		break;
	}

	return sUrl;
};

/**
 * See sap.ui.core.Message.compare
 * @public
 */
sap.ui.core.Message.prototype.compareByType = function(oOther) {
	sap.ui.core.Message.compareByType(this, oOther);
};

/**
 * Compares a given message with <strong>this</strong> message. The types of
 * {sap.ui.core.MessageType} is ordered from "Error" > "Warning" > "Success" >
 * "Information" > "None".
 * 
 * @static
 * @public
 * @param {sap.ui.core.Message}
 *            a message to compare with
 * @return {sap.ui.core.int} returns <strong>0</strong> if both messages are at
 *         the same level. <strong>-1</strong> if <strong>this</strong>
 *         message has a lower level. <strong>1</strong> if <strong>this</strong>
 *         message has a higher level.
 */
sap.ui.core.Message.compareByType = function(oMessage1, oMessage2) {
	if (!oMessage1 && !oMessage2) {
		return 0;
	}
	if (oMessage1 && !oMessage2) {
		return 1;
	}
	if (!oMessage1 && oMessage2) {
		return -1;
	}

	var sLvl1 = oMessage1.getLevel();
	var sLvl2 = oMessage2.getLevel();
	var t = sap.ui.core.MessageType;

	if (sLvl1 === sLvl2) {
		return 0;
	}

	switch (sLvl1) {
	case t.Error:
		return 1;

	case t.Warning:
		return sLvl2 === t.Error ? -1 : 1;

	case t.Success:
		return sLvl2 === t.Error || sLvl2 === t.Warning ? -1 : 1;

	case t.Information:
		return sLvl2 === t.None ? 1 : -1;

	case t.None:
		return -1;

	default:
		jQuery.sap.log.error("Comparison error", this);
		return 0;
	}
};
}; // end of sap/ui/core/Message.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Popup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides helper class sap.ui.core.Popup
jQuery.sap.declare("sap.ui.core.Popup");








/**
 * Creates an instance of <code>sap.ui.core.Popup</code> that can be used to open controls as a Popup,
 * visually appearing in front of other controls.
 *
 * @class Popup Class is a helper class for controls that want themselves or
 * parts of themselves or even other aggregated or composed controls
 * or plain HTML content to popup on the screen like menues, dialogs, drop down boxes.
 *
 * It allows the controls to be aligned to other dom elements
 * using the {@link sap.ui.core.Popup.Dock.html} method. With it you can define where
 * the popup should be docked. One can dock the popup to the top bottom left or right side
 * of a dom ref.
 *
 * In the case that the popup has no space to show itself in the view port
 * of the current window it tries to open itself to
 * the inverted direction.
 * 
 * <strong>Since 1.12.3</strong> it is possible to add further DOM-element-ids that can get the focus
 * when 'autoclose' is enabled. E.g. the RichTextEditor with running TinyMCE uses this method to
 * be able to focus the Popups of the TinyMCE if the RichTextEditor runs within a Popup/Dialog etc.
 * (see 'onAfterRenderingTinyMCE' within the RichTextEditor)
 * 
 *  To provide an additional DOM-element that can get the focus the following should be done:
 * 	// create an object with the corresponding DOM-id
 * 	var oObject = {
 *		id : "this_is_the_most_valuable_id_of_the_DOM_element"
 *	};
 *
 *	// add the event prefix for adding an element to the ID of the corresponding Popup
 *	var sEventId = "sap.ui.core.Popup.addFocusableContent-" + oPopup.getId();
 *
 *	// fire the event with the created event-id and the object with the DOM-id
 *	sap.ui.getCore().getEventBus().publish("sap.ui", sEventId, oObject);  
 *
 * @param {sap.ui.core.Control | sap.ui.core.Element | DOMNode} oContent the content to render in the popup. In case of sap.ui.core.Element or DOMNode, the content must be present in the page (i.e. rendered). In case of sap.ui.core.Control, the Popup ensures rendering before opening.
 * @param {boolean} [bModal=false] whether the popup should be opened in a modal way (i.e. with blocking background). Setting this to "true" effectively blocks all attempts to focus content outside the modal popup. A modal popup also automatically sets the focus back to whatever was focused when the popup opened.
 * @param {boolean} [bShadow=true] whether the popup should be have a visual shadow underneath (shadow appearance depends on active theme and browser support)
 * @param {boolean} [bAutoClose=false] whether the popup should automatically close when the focus moves out of the popup
 *
 * @constructor
 * @public
 * @name sap.ui.core.Popup
 */
sap.ui.base.EventProvider.extend("sap.ui.core.Popup", /** @lends sap.ui.core.Popup */ {
	constructor: function (oContent, bModal, bShadow, bAutoClose) {
		jQuery.sap.assert(arguments.length == 0 || (oContent && typeof oContent === "object"), "oContent must be an object or there may be no arguments at all");
		jQuery.sap.assert((bModal === undefined || bModal === true || bModal === false), "bModal must be true, false, or undefined");
		jQuery.sap.assert((bShadow === undefined || bShadow === true || bShadow === false), "bShadow must be true, false, or undefined");
		jQuery.sap.assert((bAutoClose === undefined || bAutoClose === true || bAutoClose === false), "bAutoClose must be true, false, or undefined");

		sap.ui.base.EventProvider.apply(this);

		this._id = jQuery.sap.uid(); // internal ID to make event handlers unique

		this.bOpen = false; // true exactly if the Popup is opening, open, or closing
		this.eOpenState = sap.ui.core.OpenState.CLOSED;

		if (oContent) {
			this.setContent(oContent);
		}

		this._oPosition = {
			my: sap.ui.core.Popup.Dock.CenterCenter,
			at: sap.ui.core.Popup.Dock.CenterCenter,
			of: document,
			offset: "0 0",
			collision: "flip"
		};

		this._bModal = !!bModal;
		this._oPreviousFocus = null;
		this._sInitialFocusId = null;
		this._bShadow = typeof(bShadow) === "boolean" ? bShadow : true;
		this._bAutoClose = !!bAutoClose;
		this._aAutoCloseAreas;
		this._animations = { open: null, close: null };
		this._durations = {	open: "fast", close: "fast" };
		this._iZIndex = -1;
		this._oBlindLayer = null;

		//autoclose handler for mobile or desktop browser in touch mode
		//this function needs to be put onto the instance other than the prototype because functions on the prototype are treated as same function and can't be bound twice.
		if (this.touchEnabled){
			this._fAutoCloseHandler = function(oEvent) {

				// call the close handler only when it's fully opened
				// this also prevents calling close while closing
				if (this.eOpenState === sap.ui.core.OpenState.CLOSING || this.eOpenState === sap.ui.core.OpenState.CLOSED) {
					return;
				}
				
				if((oEvent.originalEvent || oEvent)._sapui_cancelAutoClose){
					//when control needs to cancel the auto close event, set the flag _sapui_cancelAutoClose to true on touchstart.
					return;
				}

				var oDomNode = oEvent.target,
					oPopupDomNode = this._$().get(0),
					bInsidePopup = jQuery.contains(oPopupDomNode, oDomNode),
					bInsideAutoCloseAreas = false;

				if (this._aAutoCloseAreas) {
					for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
						if(jQuery.contains(this._aAutoCloseAreas[i], oDomNode)){
							bInsideAutoCloseAreas = true;
							break;
						}
					}
				}

				if (!(bInsidePopup || bInsideAutoCloseAreas)) {
					this.close();
				}
			};
		}
	},

	metadata : {
		publicMethods : ["open", "close", "setContent", "getContent", "setPosition", "setShadow", "setModal", "setAutoClose", "isOpen", "getAutoClose", "getOpenState", "setAnimations", "setDurations", "attachOpened", "attachClosed", "detachOpened", "detachClosed"]
	}

});

sap.ui.core.Popup._activateBlindLayer = true;

// stack used for storing z-indices for blocklayer
sap.ui.core.Popup.blStack = [];

sap.ui.core.Popup.M_EVENTS = {opened:'opened',closed:'closed'};

/**
 * Enumeration providing options for docking of some element to another.
 * "Right" and "Left" will stay the same in RTL mode, but "Begin" and "End" will flip to the other side ("Begin" is "Right" in RTL).
 *
 * @static
 * @namespace
 * @public
 */
sap.ui.core.Popup.Dock = {

		/**
		 * @public
		 */
		BeginTop      : "begin top",

		/**
		 * @public
		 */
		BeginCenter   : "begin center",

		/**
		 * @public
		 */
		BeginBottom   : "begin bottom",

		/**
		 * @public
		 */
		LeftTop      : "left top",

		/**
		 * @public
		 */
		LeftCenter   : "left center",

		/**
		 * @public
		 */
		LeftBottom   : "left bottom",

		/**
		 * @public
		 */
		CenterTop    : "center top",

		/**
		 * @public
		 */
		CenterCenter : "center center",

		/**
		 * @public
		 */
		CenterBottom : "center bottom",

		/**
		 * @public
		 */
		RightTop     : "right top",

		/**
		 * @public
		 */
		RightCenter  : "right center",

		/**
		 * @public
		 */
		RightBottom  : "right bottom",

		/**
		 * @public
		 */
		EndTop     : "end top",

		/**
		 * @public
		 */
		EndCenter  : "end center",

		/**
		 * @public
		 */
		EndBottom  : "end bottom"
};

/**
 * This property changes how the autoClose behaves on the Popup. When it's set to true, the Popup will be closed when tap outside of the Popup. Otherwise it will close as soon as the focus leaves the Popup.
 *
 * The default value of this property is true when running in touchable environments.
 *
 * @static
 * @type {boolean}
 * @private
 */
sap.ui.core.Popup.prototype.touchEnabled = sap.ui.Device.support.touch || jQuery.sap.simulateMobileOnDesktop;

/**
 * This property changes how focus handling works. When it's set to true, focus will be restored after Popup is closed to the previous focused element before Popup is open. Otherwise, this function is disabled.
 *
 * By default, the focus is restored only in non-touch environments.
 *
 * @static
 * @type {boolean}
 * @private
 */
sap.ui.core.Popup.prototype.restoreFocus = !sap.ui.Device.support.touch && !jQuery.sap.simulateMobileOnDesktop;

//****************************************************
// Event handlers
//****************************************************

/**
 * Attach event-handler <code>fnFunction</code> to the 'opened' event of this <code>sap.ui.core.Popup</code>.<br/>
 *
 * Event is fired when the popup has completely opened (after any animation).
 *
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present)
 * @param {object}
 *            [oListener] object on which to call the given function.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.attachOpened = function(fnFunction, oListener) {
	this.attachEvent("opened", fnFunction, oListener);
	return this;
};

/**
 * Attach event-handler <code>fnFunction</code> to the 'closed' event of this <code>sap.ui.core.Popup</code>.<br/>
 *
 * Event is fired when the popup has completely closed (after any animation).
 *
 *
 * @param {function}
 *            fnFunction The function to call when the popup has completely closed (after any animation).
 * @param {object}
 *            [oListener] object on which to call the given function.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.attachClosed = function(fnFunction, oListener) {
	this.attachEvent("closed", fnFunction, oListener);
	return this;
};

/**
 * Detach event handler <code>fnFunction</code> from the 'opened' event of this <code>sap.ui.core.Popup</code>.<br/>
 *
 * @param {function}
 *            fnFunction The function to call when the popup has completely opened (after any animation).
 * @param {object}
 *            oListener (optional) The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.detachOpened = function(fnFunction, oListener) {
	this.detachEvent("opened", fnFunction, oListener);
	return this;
};

/**
 * Detach event handler <code>fnFunction</code> from the 'closed' event of this <code>sap.ui.core.Popup</code>.<br/>
 *
 * @param {function}
 *            fnFunction The function to call when the popup has completely closed (after any animation).
 * @param {object}
 *            oListener (optional) The object, that wants to be notified, when the event occurs
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.detachClosed = function(fnFunction, oListener) {
	this.detachEvent("closed", fnFunction, oListener);
	return this;
};

//****************************************************
//Layer et al
//****************************************************

/**
* @class
* @private
*/
sap.ui.base.Object.extend("sap.ui.core.Popup.Layer", {
	constructor: function() {
		var sDomString = this.getDomString();
		this._$Ref = jQuery(sDomString).appendTo(sap.ui.getCore().getStaticAreaRef());
	}
});

/**
*
* @param oRef
* @param iZIndex
* @private
*/
sap.ui.core.Popup.Layer.prototype.init = function(/** jQuery */oRef, iZIndex) {
	this._$Ref
		.css("visibility", "visible")
		.css("z-index", iZIndex);
	this.update(oRef, iZIndex);
	this._$Ref.insertAfter(oRef).show();
};

/**
* @protected
*/
sap.ui.core.Popup.Layer.prototype.update = function(/** jQuery */oRef, iZIndex){
	var oRect = oRef.rect();
	this._$Ref
		.css("left", oRect.left)
		.css("top", oRect.top);

	if(oRef.css("right") != "auto" && oRef.css("right") != "inherit"){
		this._$Ref
			.css("right", oRef.css("right"))
			.css("width", "auto");
	}else{
		this._$Ref
			.css("width", oRect.width)
			.css("right", "auto");
	}
	if(oRef.css("bottom") != "auto" && oRef.css("bottom") != "inherit"){
		this._$Ref
			.css("bottom", oRef.css("bottom"))
			.css("height", "auto");
	} else {
		this._$Ref
			.css("height", oRect.height)
			.css("bottom", "auto");
	}

	if(typeof(iZIndex) === "number") {
		this._$Ref.css("z-index", iZIndex);
	}
};

sap.ui.core.Popup.Layer.prototype.reset = function(){
	this._$Ref
		.hide()
		.css("visibility", "hidden")
		.appendTo(sap.ui.getCore().getStaticAreaRef());
};

/**
 * Must be overwritten by sub class
 */
sap.ui.core.Popup.Layer.prototype.getDomString = function(){
	jQuery.sap.log.error("sap.ui.core.Popup.Layer: getDomString function must be overwritten!");

	return "";
};

//End of Layer

//****************************************************
// BlindLayer et al
//****************************************************

/**
 * @class
 * @private
 */
sap.ui.core.Popup.Layer.extend("sap.ui.core.Popup.BlindLayer", {
	constructor : function() {
		sap.ui.core.Popup.Layer.apply(this);
	}
});

sap.ui.core.Popup.BlindLayer.prototype.getDomString = function(){
	return "<div class=\"sapUiBliLy\" id=\"sap-ui-blindlayer-" + jQuery.sap.uid() + "\"><iframe scrolling=\"no\" src=\"javascript:''\"	tabIndex=\"-1\"></iframe></div>";
};

/**
 * Facility for reuse of created iframes.
 * @type sap.ui.base.ObjectPool
 * @private
 */
sap.ui.core.Popup.prototype.oBlindLayerPool = new sap.ui.base.ObjectPool(sap.ui.core.Popup.BlindLayer);
// End of BlindLayer

//****************************************************
//ShieldLayer et al
//****************************************************

/**
* @class
* @private
*/
sap.ui.core.Popup.Layer.extend("sap.ui.core.Popup.ShieldLayer", {
	constructor: function() {
		sap.ui.core.Popup.Layer.apply(this);
	}
});

sap.ui.core.Popup.ShieldLayer.prototype.getDomString = function(){
	return "<div class=\"sapUiPopupShield\" id=\"sap-ui-shieldlayer-" + jQuery.sap.uid() + "\"></div>";
};

/**
* Facility for reuse of created shield layers.
* @type sap.ui.base.ObjectPool
* @private
*/
sap.ui.core.Popup.prototype.oShieldLayerPool = new sap.ui.base.ObjectPool(sap.ui.core.Popup.ShieldLayer);
//End of ShieldLayer

// Begin of Popup-Stacking facilities
(function() {
	var iLastZIndex = 0;

	/**
	 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
	 *
	 * @returns {Number}
	 * @public
	 */
	sap.ui.core.Popup.getLastZIndex = function(){
		return iLastZIndex;
	};

	/**
	 * Returns the last z-index that has been handed out. does not increase the internal z-index counter.
	 *
	 * @returns {Number}
	 * @public
	 */
	sap.ui.core.Popup.prototype.getLastZIndex = function(){
		return sap.ui.core.Popup.getLastZIndex();
	};

	/**
	 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
	 *
	 * @returns {Number} the next z-index on top of the Popup stack
	 * @public
	 */
	sap.ui.core.Popup.getNextZIndex = function(){
		return (iLastZIndex += 10);
	};

	/**
	 * Returns the next available z-index on top of the existing/previous popups. Each call increases the internal z-index counter and the returned z-index.
	 *
	 * @returns {Number} the next z-index on top of the Popup stack
	 * @public
	 */
	sap.ui.core.Popup.prototype.getNextZIndex = function(){
		return sap.ui.core.Popup.getNextZIndex();
	};
}());
// End of Popup-Stacking facilites

/**
 * Opens the popup's content at the position either specified here or beforehand via {@link #setPosition}.
 * Content must be capable of being positioned via "position:absolute;"
 * All parameters are optional (open() may be called without any parameters). iDuration may just be omitted, but if any of "at", "of", "offset", "collision" is given, also the preceding positioning parameters ("my", at",...) must be given.
 *
 * If the Popup's OpenState is different from "CLOSED" (i.e. if the Popup is already open, opening or closing), the call is ignored.
 *
 * @param {int} [iDuration] animation duration in milliseconds; default is the jQuery preset "fast". For iDuration == 0 the opening happens synchronously without animation.
 * @param {sap.ui.core.Popup.Dock} [my=sap.ui.core.Popup.Dock.CenterCenter] the popup content's reference position for docking
 * @param {sap.ui.core.Popup.Dock} [at=sap.ui.core.Popup.Dock.CenterCenter] the "of" element's reference point for docking to
 * @param {DOMNode|sap.ui.core.Element} [of=document] the DOM element or control to dock to
 * @param {string} [offset="0 0"] the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
 * @param {string} [collision="flip"] defines how the position of an element should be adjusted in case it overflows the window in some direction.
 * @param {boolean} [followOf=false] defines whether the popup should follow the dock reference when the reference changes its position.
 * @public
 */
sap.ui.core.Popup.prototype.open = function(iDuration, my, at, of, offset, collision, followOf) {
	jQuery.sap.assert(this.oContent, "Popup content must have been set by now");
	// other asserts follow after parameter shifting

	if(this.eOpenState != sap.ui.core.OpenState.CLOSED) {
		return;
	}

	this.eOpenState = sap.ui.core.OpenState.OPENING;

	var oStatic = sap.ui.getCore().getStaticAreaRef();
	oStatic = sap.ui.getCore().getUIArea(oStatic);
	
	// If the content is a control and has no parent, add it to the static UIArea.
	// This makes automatic rerendering after invalidation work.
	// When the popup closes, the content is removed again from the static UIArea.
	this._bContentAddedToStatic = false;
	if ( this.oContent instanceof sap.ui.core.Control && !this.oContent.getParent() ) {
		oStatic.addContent(this.oContent, true);
		this._bContentAddedToStatic = true;
	}

	// Check if the content isn't connected properly to an UI-area. This could cause strange behavior of events and rendering.
	// To find a Popup issue in this case a warning should be logged to the console.
	//
	// E.g. if the content has a different UI-area than its parent -> warning is thrown if 'sap.ui.core.Popup._bEnableUIAreaCheck'
	// is set
	if(this.oContent.getUIArea) {
		var oArea = this.oContent.getUIArea();
		
		if(oArea === null) {
			jQuery.sap.log.warning("The Popup content is NOT connected with an UIArea and may not work properly!");
		} else if (sap.ui.core.Popup._bEnableUIAreaCheck && oArea.getRootNode().id !== oStatic.getRootNode().id) {

			// the variable 'sap.ui.core.Popup._bEnableUIAreaCheck' isn't defined anywhere. To enable this check this variable
			// has to be defined within the console or somehow else.
			jQuery.sap.log.warning("The Popup content is NOT connected with the static-UIArea and may not work properly!");
		}
	}

	// iDuration is optional... if not given:
	if (typeof(iDuration) == "string") {
		followOf = collision;
		collision = offset;
		offset = of;
		of = at;
		at = my;
		my = iDuration;
		iDuration = -1;
	}

	// if no arguments are passed iDuration has to be set to -1
	if (iDuration === undefined) {
		iDuration = -1;
	}

	// all other parameters must be given if any subsequent parameter is given, hence no more shifting
	// now every parameter should be in the right variable

	jQuery.sap.assert(iDuration === -1 || (typeof iDuration === "number" && iDuration % 1 == 0), "iDuration must be an integer (or omitted)"); // omitted results in -1
	jQuery.sap.assert(my === undefined || typeof my === "string", "my must be a string or empty");
	jQuery.sap.assert(at === undefined || typeof at === "string", "at must be a string or empty");
	jQuery.sap.assert(!of || typeof of === "object" || typeof of === "function", "of must be empty or an object");
	jQuery.sap.assert(!offset || typeof offset === "string", "offset must be empty or a string");
	jQuery.sap.assert(!collision || typeof collision === "string", "collision must be empty or a string");

	// disable for mobile or desktop browser in touch mode
	if(this.restoreFocus){

		// save current focused element to restore the focus after closing
		this._oPreviousFocus = sap.ui.core.Popup.getCurrentFocusInfo();
	}

	var $Ref = this._$(true);
	var iRealDuration = "fast";
	if((iDuration === 0) || (iDuration > 0)) {
		iRealDuration = iDuration;
	} else if ((this._durations.open === 0) || (this._durations.open > 0)) {
		iRealDuration = this._durations.open;
	}

	// Ensure right position is used for this call
	var _oPosition = {
			"my": my || this._oPosition.my,
			"at": at || this._oPosition.at,
			"of": of || this._oPosition.of || document,
			"offset": offset || this._oPosition.offset,
			"collision": collision || this._oPosition.collision
		};
	this._iZIndex = this._iZIndex === this.getLastZIndex() ? this._iZIndex : this.getNextZIndex();

	var oStaticArea = sap.ui.getCore().getStaticAreaRef();
	$Ref.css("position", "absolute").css("visibility", "hidden");
	
	if(!($Ref[0].parentNode == oStaticArea)) { // do not move in DOM if not required - otherwise this destroys e.g. the RichTextEditor
		$Ref.appendTo(oStaticArea);
	}
	$Ref.css("z-index", this._iZIndex);

	jQuery.sap.log.debug("position popup content " + $Ref.attr("id") + " at " + (window.JSON ? JSON.stringify(_oPosition.at) : String(_oPosition.at)));
	this._applyPosition(_oPosition);

	if (followOf !== undefined) {
		this.setFollowOf(followOf);
	}

	var that = this;

	// shield layer is needs for iOS devices to prevent the delayed mouse events from reaching the dom element in popup while it's being open.
	if(sap.ui.Device.os.ios && sap.ui.Device.support.touch){
		if(this._oTopShieldLayer){
			// very extreme case where the same popop is opened and closed again before the 500ms timed out.
			// reuse the same shieldlayer and clear the timeout
			jQuery.sap.clearDelayedCall(this._iTopShieldRemoveTimer);
			this._iTopShieldRemoveTimer = null;
		}else{
			this._oTopShieldLayer = this.oShieldLayerPool.borrowObject($Ref, this._iZIndex + 1);
		}

		// hide the shield layer after the delayed mouse events are fired.
		this._iTopShieldRemoveTimer = jQuery.sap.delayedCall(500, this, function(){
			this.oShieldLayerPool.returnObject(this._oTopShieldLayer);
			this._oTopShieldLayer = null;
			this._iTopShieldRemoveTimer = null;
		});
	}

	var fnOpened = function() {
		$Ref.css("display","block");

		// in modal and auto-close case the focus needs to be in the popup; provide this generic implementation as helper, but users can change the focus in the "opened" event handler
		if (that._bModal || that._bAutoClose || that._sInitialFocusId) {
			var domRefToFocus = null;
			if (that._sInitialFocusId) {
				var control = sap.ui.getCore().byId(that._sInitialFocusId);

				if (control) {
					domRefToFocus = control.getFocusDomRef();
				}
				domRefToFocus = domRefToFocus || jQuery.sap.domById(that._sInitialFocusId);
			}

			jQuery.sap.focus(domRefToFocus || $Ref.firstFocusableDomRef());
		}

		that.eOpenState = sap.ui.core.OpenState.OPEN;

		if(that.getFollowOf()){
			sap.ui.core.Popup.DockTrigger.addListener(sap.ui.core.Popup.checkDocking, that);
		}

		that._updateBlindLayer();

		// notify that opening has completed
		if (!!sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version == 9) {
			jQuery.sap.delayedCall(0,that,function(){
				that.fireEvent(sap.ui.core.Popup.M_EVENTS.opened);
			});
		} else {
			that.fireEvent(sap.ui.core.Popup.M_EVENTS.opened);
		}
	};

	// and show the popup content
	$Ref.toggleClass("sapUiShd", this._bShadow).hide().css("visibility", "visible");
	if (iRealDuration == 0) { // do not animate if there is a duration == 0
		// internal status that any animation has been finished should set to true;
		this.bOpen = true;
		fnOpened.apply(); // otherwise call after-opening functions directly
	} else {
		if (this._animations.open) { // if custom animation is defined, call it
			this._animations.open.call(null, $Ref, iRealDuration, fnOpened);
		} else { // otherwise play the default animation
			$Ref.fadeIn(iRealDuration, fnOpened);
		}
	}

	// get (and 'show' i.e. activate) the BlindLayer
	if(!!sap.ui.Device.browser.internet_explorer && sap.ui.core.Popup._activateBlindLayer) {
		this._oBlindLayer = this.oBlindLayerPool.borrowObject($Ref, this._iZIndex - 1);
	} // -1 = BlindLayer, -2 = BlockLayer

	if(this._bModal) {
		this._showBlockLayer();
	}

	// add Delegate to hosted content for handling of events (e.g. onfocusin)
	if(this.oContent instanceof sap.ui.core.Element) {
		this.oContent.addDelegate(this);
	}
	
	this.bOpen = true;

	if (this._bModal || this._bAutoClose) { // initialize focus handling
		this.fEventHandler = jQuery.proxy(this.onFocusEvent, this);
		// make sure to notice all blur's in the popup
		var jPopupRoot = $Ref;//this._$();
		if(document.addEventListener) { //FF, Safari
			document.addEventListener("focus", this.fEventHandler, true);
			jPopupRoot.get(0).addEventListener("blur", this.fEventHandler, true);
			if (this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					this._aAutoCloseAreas[i].addEventListener("blur", this.fEventHandler, true);
				}
			}
		} else { // IE8
			jQuery(document).bind("activate." + this._id, this.fEventHandler);
			jPopupRoot.bind("deactivate." + this._id, this.fEventHandler);
			if (this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					jQuery(this._aAutoCloseAreas[i]).bind("deactivate." + this._id, this.fEventHandler);
				}
			}
		}
	}

	//autoclose implementation for mobile or desktop browser in touch mode
	if(this.touchEnabled && !this._bModal && this._bAutoClose){
		jQuery(document).bind(sap.ui.Device.support.touch ? "touchstart" : "mousedown", jQuery.proxy(this._fAutoCloseHandler, this));
	}

	//  register resize handler for blindlayer resizing
	if(this._oBlindLayer) {
		this._resizeListenerId = sap.ui.core.ResizeHandler.register(this._$().get(0), jQuery.proxy(this.onresize, this));
	}
};

/**
 * Handles the focus/blur events.
 *
 * @param oBrowserEvent the browser event
 * @private
 */
sap.ui.core.Popup.prototype.onFocusEvent = function(oBrowserEvent) {
	var oEvent = jQuery.event.fix(oBrowserEvent);
	var type = (oEvent.type == "focus" || oEvent.type == "activate") ? "focus" : "blur";
	var bContains = false;

	if (type=="focus") {
		var oDomRef = this._$().get(0);
		if (oDomRef) {
			bContains = oDomRef == oEvent.target || jQuery.contains(oDomRef, oEvent.target);

			// if focus does not go into the popup, check any other areas belonging to it
			if (!bContains && this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					bContains = this._aAutoCloseAreas[i] == oEvent.target || jQuery.contains(this._aAutoCloseAreas[i], oEvent.target);
					if (bContains) {
						break;
					}
				}
			}

			// check if any additional focusable elements should be focused
			if (!bContains && this._aFocusableArea) {
				var j = this._aFocusableArea.length;
				for (i = 0; i < j; i++) {
					if (jQuery.sap.domById(this._aFocusableArea[i])) {
						bContains = oEvent.target.id === this._aFocusableArea[i] || jQuery.contains(jQuery.sap.domById(this._aFocusableArea[i]), oEvent.target);
						if (bContains) {
							break;
						}
					}
				}
			}

			jQuery.sap.log.debug("focus event on " + oEvent.target.id + ", contains: " + bContains);

			if (this._bModal && !bContains) { // case: modal popup and focus has gone somewhere else in the document

				// The popup is modal, but the focus has moved to a part of the document that is NOT inside the popup
				// check whether this modal popup is the topmost one
				var bTopMost = (sap.ui.core.Popup.getLastZIndex() == this._iZIndex);

				if (bTopMost) {

					// if in desktop browser or the DOM node which has the focus is input outside the popup,
					// focus on the last blurred element
					if (!sap.ui.Device.support.touch || jQuery(oEvent.target).is(":input")) {

						// set the focus back to the last focused element inside the popup or at least to the popup root
						var oDomRefToFocus = this.oLastBlurredElement ? this.oLastBlurredElement : oDomRef;
						jQuery.sap.focus(oDomRefToFocus);
					}
				}
			} else if (this._bAutoClose && bContains && this._sTimeoutId) { // case: autoclose popup and focus has returned into the popup immediately

				// focus has returned, so it did only move inside the popup => clear timeout
				if(this._sTimeoutId){
					jQuery.sap.clearDelayedCall(this._sTimeoutId);
					this._sTimeoutId = null;
				}
			}
		}
	} else if (type=="blur") { // an element inside the popup is loosing focus - remember in case we need to re-set
		jQuery.sap.log.debug("blur event on " + oEvent.target.id);
		if (this._bModal) {
			this.oLastBlurredElement = oEvent.target;
		} else if (this._bAutoClose) {
			// focus/blur for handling autoclose is disabled for desktop browsers which are not in the touch simulation mode
			// create timeout for closing the popup if there is no focus immediately returning to the popup
			if (!this.touchEnabled && !this._sTimeoutId) {
				this._sTimeoutId = jQuery.sap.delayedCall(0, this, "close"); // TODO: do we need a "onBeforeClose" event?
			}
		}
	}
};

/**
 * Sets the ID of the element that should be focused once the popup opens.
 * If the given ID is the ID of an existing Control, this Control's focusDomRef will be focused instead, which may be an HTML element with a different ID (usually a sub-element inside the Control).
 * If no existing element ID is supplied and the Popup is modal or auto-close, the Popup will instead focus the first focusable element.
 *
 * @param sId the ID of the DOM element to focus
 * @public
 */
sap.ui.core.Popup.prototype.setInitialFocusId = function(sId) {
	jQuery.sap.assert(!sId || typeof sId === "string", "sId must be a string or empty");
	this._sInitialFocusId = sId;
};

/**
 * Closes the popup.
 *
 * If the Popup is already closed or in the process of closing, calling this method does nothing.
 * If the Popup is in the process of being opened and closed with a duration of 0, calling this method does nothing.
 * If the Popup is in the process of being opened and closed with an animation duration, the animation will be chained, but this functionality is dangerous,
 * may lead to inconsistent behavior and is thus not recommended and may even be removed.
 *
 * @param {int} [iDuration] animation duration in milliseconds; default is the jQuery preset "fast".  For iDuration == 0 the closing happens synchronously without animation.
 * @public
 */
sap.ui.core.Popup.prototype.close = function(iDuration) {
	jQuery.sap.assert(iDuration === undefined || (typeof iDuration === "number" && (iDuration % 1 == 0)), "iDuration must be empty or an integer");

	if(this.eOpenState == sap.ui.core.OpenState.CLOSED || this.eOpenState == sap.ui.core.OpenState.CLOSING) {
		return;
	} // also close when OPENING
	// the above will queue the animations (close only after opening), but may lead to the CLOSED event happening before the OPENED event

	var iRealDuration = "fast";
	if((iDuration === 0) || (iDuration > 0)) {
		iRealDuration = iDuration;
	} else if ((this._durations.close === 0) || (this._durations.close > 0)) {
		iRealDuration = this._durations.close;
	}

	if (iRealDuration === 0 && this.eOpenState == sap.ui.core.OpenState.OPENING) {
		return;
	} // do not allowed immediate closing while opening

	//if(this.eOpenState != sap.ui.core.OpenState.OPEN) return; // this is the more conservative approach: to only close when the Popup is OPEN

	this.eOpenState = sap.ui.core.OpenState.CLOSING;
	
	if (this.getFollowOf()) {
		sap.ui.core.Popup.DockTrigger.removeListener(sap.ui.core.Popup.checkDocking, this);
	}

	if (this._aFocusableArea) {
		delete this._aFocusableArea;
	}

	// unsubscribe the event listeners from EventBus
	if (this._bFocusableListenersRegistered) {
		delete this._bFocusableListenersRegistered;

		var sEventId = "sap.ui.core.Popup.addFocusableContent-" + this._id;
		sap.ui.getCore().getEventBus().unsubscribe("sap.ui", sEventId, this._addFocusableArea, this);

		sEventId = "sap.ui.core.Popup.removeFocusableContent-" + this._id;
		sap.ui.getCore().getEventBus().unsubscribe("sap.ui", sEventId, this._removeFocusableArea, this);
	}

	// If we added the content control to the static UIArea,
	// then we should remove it again now.
	// Assumption: application did not move the content in the meantime!
	if ( this.oContent && this._bContentAddedToStatic ) {

		//Fix for RTE in PopUp
		sap.ui.getCore().getEventBus().publish("sap.ui","__beforePopupClose", { domNode : this._$().get(0) });
		var oStatic = sap.ui.getCore().getStaticAreaRef();
		oStatic = sap.ui.getCore().getUIArea(oStatic);
		oStatic.removeContent(oStatic.indexOfContent(this.oContent), true);
	}

	this._bContentAddedToStatic = false;

	this._sTimeoutId = null;

	if (this.fEventHandler) { // remove focus handling
		var jPopupRoot = this._$();
		if(document.removeEventListener) { //FF, Safari
			document.removeEventListener("focus", this.fEventHandler, true);
			jPopupRoot.get(0).removeEventListener("blur", this.fEventHandler, true);
			if (this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					this._aAutoCloseAreas[i].removeEventListener("blur", this.fEventHandler, true);
				}
			}
		} else { // IE8
			jQuery(document).unbind("activate." + this._id, this.fEventHandler);
			jPopupRoot.unbind("deactivate." + this._id, this.fEventHandler);
			if (this._aAutoCloseAreas) {
				for (var i = 0; i < this._aAutoCloseAreas.length; i++) {
					jQuery(this._aAutoCloseAreas[i]).unbind("deactivate." + this._id, this.fEventHandler);
				}
			}
		}
		this.fEventHandler = null;
	}

	//deregister the autoclose handler for mobile
	if(this.touchEnabled){
		if(!this._bModal && this._bAutoClose){
			jQuery(document).unbind(sap.ui.Device.support.touch ? "touchstart" : "mousedown", this._fAutoCloseHandler);
		}
	}
	
	if(this.oContent instanceof sap.ui.core.Element) {
		this.oContent.removeDelegate(this);
	}

	var $Ref = this._$();

	// get (and 'hide' i.e. remove) the BlindLayer
	if(this._oBlindLayer) {
		this.oBlindLayerPool.returnObject(this._oBlindLayer);
	}
	this._oBlindLayer = null;

	var that = this;
	
	// shield layer is needs for iOS devices to prevent the delayed mouse events from reaching the underneath dom element.
	if(sap.ui.Device.os.ios && sap.ui.Device.support.touch){
		if(this._oBottomShieldLayer){

			// very extreme case where the same popop is opened and closed again before the 500ms timed out.
			// reuse the same shieldlayer and clear the timeout
			jQuery.sap.clearDelayedCall(this._iBottomShieldRemoveTimer);
			this._iBottomShieldRemoveTimer = null;
		}else{
			this._oBottomShieldLayer = this.oShieldLayerPool.borrowObject($Ref, this._iZIndex - 3);
		}

		// hide the shield layer after the delayed mouse events are fired.
		this._iBottomShieldRemoveTimer = jQuery.sap.delayedCall(500, this, function(){
			this.oShieldLayerPool.returnObject(this._oBottomShieldLayer);
			this._oBottomShieldLayer = null;
			this._iBottomShieldRemoveTimer = null;
		});
	}
	
	var fnClose = function() { // the function to call when the popup closing animation has completed
		jQuery($Ref).hide().
			css("visibility", "inherit").
			css("left", "0px").
			css("top", "0px").
			css("right", "");

		//disabled for mobile or desktop browser in touch mode
		if(that.restoreFocus){
			if (that._bModal){

				// try to set the focus back to whatever was focused before. Do this here because animation needs to be finished.
				//- TODO: currently focus is restored only for modal popups. Non modal popups have to do it themselves because the outside focus can change!
				sap.ui.core.Popup.applyFocusInfo(that._oPreviousFocus);
				that._oPreviousFocus = null;
				that.oLastBlurredElement = null;
			}
		}

		that.bOpen = false;
		that.eOpenState = sap.ui.core.OpenState.CLOSED;

		// notify users that the popup is now officially closed
		that.fireEvent(sap.ui.core.Popup.M_EVENTS.closed);
	};

	if (iRealDuration == 0) { // iRealDuration == 0 means: no animation!
		fnClose.apply();
	} else {
		if (this._animations.close) {
			this._animations.close.call(null, $Ref, iRealDuration, fnClose); // play custom animation, if supplied
		} else {
			$Ref.fadeOut(iRealDuration, fnClose); // otherwise use jQuery animation
		}
	}

	if(this._bModal) {
		this._hideBlockLayer();
	}

	//deregister resize handler
	if (this._resizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._resizeListenerId);
		this._resizeListenerId = null;
	}
};

/**
 * Returns an object containing as much information about the current focus as possible, or null if no focus is present or no focus information can be gathered.
 */
sap.ui.core.Popup.getCurrentFocusInfo = function() {
	var _oPreviousFocus = null;
	var focusedControlId = sap.ui.getCore().getCurrentFocusedControlId();
	if(focusedControlId) {

		// a SAPUI5 control was focused before
		var oFocusedControl = sap.ui.getCore().getControl(focusedControlId);
		_oPreviousFocus = {'sFocusId':focusedControlId,'oFocusInfo': oFocusedControl ? oFocusedControl.getFocusInfo() : {}}; // add empty oFocusInfo to avoid the need for all recipients to check
	} else {
		try {

			// not a SAPUI5 control... but if something has focus, save as much information about it as available
			var oElement = document.activeElement;
			if (oElement) {
				_oPreviousFocus = {'sFocusId':oElement.id,'oFocusedElement':oElement,'oFocusInfo':{}}; // add empty oFocusInfo to avoid the need for all recipients to check
			}
		} catch (ex) {

			// IE9 throws an Unspecified Error when accessing document.activeElement inside a frame before body.onload
			// This is not an issue, as there is just no focus yet to restore
			// Other browsers do not fail here, but even if they would, the worst thing would be a non-restored focus
			_oPreviousFocus = null;
		}
	}
	return _oPreviousFocus;
};

/**
 *
 */
sap.ui.core.Popup.applyFocusInfo = function(oPreviousFocus) {
	if(oPreviousFocus) {
		var oFocusedControl = sap.ui.getCore().getControl(oPreviousFocus.sFocusId);
		if(oFocusedControl) {

			// if a SAPUI5 control had been focused, just re-focus it
			oFocusedControl.applyFocusInfo(oPreviousFocus.oFocusInfo);
		} else {

			// no SAPUI5 control... try to find the control by ID if an ID was there
			var oElement = jQuery.sap.domById(oPreviousFocus.sFocusId)
					|| oPreviousFocus.oFocusedElement; // if not even an ID was available when focus was lost maybe the original DOM element is still there
			jQuery.sap.focus(oElement); // also works for oElement == null
		}
	}
};

/**
 * Sets the content this instance of the Popup should render.
 * Content must be capable of being positioned via position:absolute;
 * @param {sap.ui.core.Control | DOMRef } oContent
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setContent = function(oContent) {
	jQuery.sap.assert(typeof oContent === "object", "oContent must be an object");
	this.oContent = oContent;
	return this;
};

/**
 * Returns this Popup's content.
 * @return {sap.ui.core.Control | DOMRef } the content that has been set previously (if any)
 * @public
 */
sap.ui.core.Popup.prototype.getContent = function() {
	return this.oContent;
};

/**
 * Sets the position of the Popup (if you refer to a Control as anchor then do not
 * use the DOMRef of the control which might change after re-renderings).
 * Optional parameters can only be omitted when all subsequent parameters are omitted as well.
 *
 * @param {sap.ui.core.Popup.Dock} my specifies which point of the given Content should be aligned
 * @param {sap.ui.core.Popup.Dock | object {left: {sap.ui.core.CSSSize}, top: {sap.ui.core.CSSSize}}} at specifies the point of the reference element to which the given Content should be aligned
 * @param {string | sap.ui.core.Control | DOMRef | jQuery | jQuery.Event} [of=document] specifies the reference element to which the given content should be aligned as specified in the other parameters
 * @param {string} [offset="0 0"] the offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the popup 10 pixels to the right). If the docking of both "my" and "at" are both RTL-sensitive ("begin" or "end"), this offset is automatically mirrored in the RTL case as well.
 * @param {string} defines how the position of an element should be adjusted in case it overflows the window in some direction.
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setPosition = function(my, at, of, offset, collision) {
	jQuery.sap.assert(typeof my === "string", "my must be a string");
	jQuery.sap.assert(typeof at === "string" || (typeof at === "object" && (typeof at.left === "number") && (typeof at.top === "number")), "my must be a string or an object with 'left' and 'top' properties");
	jQuery.sap.assert(!of || typeof of === "object" || typeof of === "function", "of must be empty or an object");
	jQuery.sap.assert(!offset || typeof offset === "string", "offset must be empty or a string");
	jQuery.sap.assert(!collision || typeof collision === "string", "collision must be empty or a string");

	// defaults are implemented in Popup.open()
	this._oPosition = jQuery.extend({},this._oPosition, {
			"my": my,
			"at": at,
			"of": of,
			"offset": offset,
			"collision": collision
		});

	if(this.eOpenState != sap.ui.core.OpenState.CLOSED) {
		this._applyPosition(this._oPosition);
		this._oBlindLayer && this._oBlindLayer.update(this._$());
	}

	return this;
};

/**
 * Applies the given position to the Popup which is assumed to be currently open
 *
 * @private
 */
sap.ui.core.Popup.prototype._applyPosition = function(oPosition) {
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	var $Ref = this._$();
	var oAt = oPosition.at;
	
	if(typeof(oAt) === "string") {
		//TODO enable this stuff when a jQueryUI update has been made
		// this is the version where the offset was used as a separate parameter for positioning
		// this is not final and has to be edited when going to be used! 
		
//		var aVersOld = [1, 8, 23];
//		var aVers = jQuery.ui.version.split(".");
//		var bNewOffset = false;
//		
//		if (aVers.length === 3){
//			if (parseInt(aVers[0]) > aVersOld[0]){
//				bNewOffset = true;
//			}
//			if (parseInt(aVers[1]) > aVersOld[1]){
//				bNewOffset = true;
//			}
//			if (parseInt(aVers[2]) > aVersOld[2]){
//				bNewOffset = true;
//			}
//		} else {
//			bNewOffset = true;
//		}
//		
//		if (bNewOffset) {
//			var pattern;
//			
//			var aMy = oPosition.my.split(" ");
//			var aOffset = oPosition.offset.split(" ");
//			var _oPosition = jQuery.extend({}, oPosition);
//			
//			_oPosition.my = aMy[0] + aOffset[0] + " " + aMy[1] + aOffset[1];
//				
//			$Ref.css("display", "block").position(this._resolveReference(this._convertPositionRTL(_oPosition, bRtl))); // must be visible, so browsers can calculate its offset!
//			this._fixPositioning(_oPosition, bRtl);
//		} else {
		$Ref.css("display", "block").position(this._resolveReference(this._convertPositionRTL(oPosition, bRtl))); // must be visible, so browsers can calculate its offset!
		this._fixPositioning(oPosition, bRtl);
//		}
	} else if(sap.ui.core.CSSSize.isValid(oAt.left) && sap.ui.core.CSSSize.isValid(oAt.top)) {
		$Ref.css("left", oAt.left).css("top", oAt.top);
	} else if(sap.ui.core.CSSSize.isValid(oAt.right) && sap.ui.core.CSSSize.isValid(oAt.top)) {
		$Ref.css("right", oAt.right).css("top", oAt.top);
	} else if(typeof(oAt.left) === "number" && typeof(oAt.top) === "number") {
		var domRef = $Ref[0];
		if (domRef && domRef.style.right) { // in some RTL cases leave the Popup attached to the right side of the browser window
			var width = $Ref.outerWidth();
			$Ref.css("right", (document.documentElement.clientWidth - (oAt.left + width)) + "px").css("top", oAt.top + "px");
		} else {
			$Ref.css("left", oAt.left + "px").css("top", oAt.top + "px");
		}
	}

	// remember given position for later redraws
	this._oLastPosition = oPosition;
	this._oLastOfRect = this._calcOfRect(oPosition.of);
};

/**
 * Calculates the rect information of the given parameter.
 * 
 * @param {DOMNode|sap.ui.core.Element} oOf the DOM node or sap.ui.core.Element instance on which the calculation is done
 * @returns the rect infomartion which contains the top, left, width, height of the given object
 * @private
 */
sap.ui.core.Popup.prototype._calcOfRect = function(oOf){
	return  jQuery(oOf instanceof sap.ui.core.Element ? oOf.getDomRef() : oOf).rect();
};

/**
 * Converts a position string with RTL-independent settings like "begin top" or "end center" into a string understood by
 * jQuery UI position() by replacing "begin" and "end" with the respective concrete value, depending on RTL settings.
 * The returned object is a clone, the original is unchanged.
 *
 * @private
 */
sap.ui.core.Popup.prototype._convertPositionRTL = function(oPosition, bRtl) {
	var fixedPos = jQuery.extend({}, oPosition); // don't modify the original object
	if (bRtl) {
		if (oPosition.offset
				&& ((oPosition.my.indexOf("begin") > -1) || (oPosition.my.indexOf("end") > -1))
				&& ((oPosition.at.indexOf("begin") > -1) || (oPosition.at.indexOf("end") > -1))) {
			fixedPos.offset = this._mirrorOffset(oPosition.offset);
		}
		fixedPos.my = oPosition.my.replace("begin", "right").replace("end", "left");
		fixedPos.at = oPosition.at.replace("begin", "right").replace("end", "left");
	} else {
		fixedPos.my = oPosition.my.replace("end", "right").replace("begin", "left");
		fixedPos.at = oPosition.at.replace("end", "right").replace("begin", "left");
	}
	return fixedPos;
};

/**
 * Mirrors the given offset which is a string containing two integer numbers separated by whitespace.
 * (=negates the first number)
 *
 * @param sOffset
 * @returns {String}
 *
 * @private
 */
sap.ui.core.Popup.prototype._mirrorOffset = function(sOffset) {
	var aOffset = jQuery.trim(sOffset).split(/\s/);
	var posX = parseInt(aOffset[0], 10);
	return (-posX) + " " + aOffset[aOffset.length-1]; // array could be longer than 2 with multiple whitespace characters
};

/**
 * Changes the default positioning of the Popup ("left: ...px") to ("right: ...px"), maintaining the
 * actual screen position, if the Popup should "grow to the left" when increasing in size.
 * This is the case if:
 * - LTR mode and horizontal alignment is right or end
 * - RTL mode and horizontal alignment is right, begin or center
 *
 * @private
 */
sap.ui.core.Popup.prototype._fixPositioning = function(sPosition, bRtl) {
	var my = sPosition.my;
	if (typeof(my) === "string") {
		if (bRtl && ((my.indexOf("right") > -1) || (my.indexOf("begin") > -1) || (my.indexOf("center") > -1))) {
			var $Ref = this._$();
			var right = jQuery(window).width() - $Ref.outerWidth() - $Ref.offset().left;
			$Ref.css("right", right + "px").css("left", "");
		} else if ((my.indexOf("right") > -1) || (my.indexOf("end") > -1)) {

			// LTR
			var $Ref = this._$();
			var right = jQuery(window).width() - $Ref.outerWidth() - $Ref.offset().left;
			$Ref.css("right", right + "px").css("left", "");
		}
	}
};

/**
 * If the reference element is specified as a sap.ui.core.Element, then it is resovled to a DOM node
 * @param oPosition
 * @returns
 */
sap.ui.core.Popup.prototype._resolveReference = function(oPosition) {
	var oResult = oPosition;
	if ( oPosition.of instanceof sap.ui.core.Element ) {
		oResult = jQuery.extend({}, oPosition, { of : oPosition.of.getDomRef()});
	}

	return oResult;
};

/**
 * Determines whether the Popup should have a shadow (in supporting browsers).
 * This also affects a currently open popup.
 *
 * @param bShowShadow
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setShadow = function(bShowShadow) {
	jQuery.sap.assert(typeof bShowShadow === "boolean", "bShowShadow must be boolean");
	this._bShadow = bShowShadow;
	if(this.eOpenState != sap.ui.core.OpenState.CLOSED) {
		this._$().toggleClass("sapUiShd", bShowShadow);
	}

	return this;
};

/**
 * Used to specify whether the Popup should be modal. A modal popup will put some fading "block layer" over the background and
 * prevent attempts to put the focus outside/below the popup.
 * Setting this while the popup is open will change "block layer" immediately.
 *
 * @param {boolean} bModal whether the Popup is of modal type
 * @param {string} [sModalCSSClass] a CSS class (or space-separated list of classes) that should be added to the block layer
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setModal = function(bModal, sModalCSSClass) {
	jQuery.sap.assert(typeof bModal === "boolean", "bModal must be boolean");
	jQuery.sap.assert(!sModalCSSClass || typeof sModalCSSClass === "string", "sModalCSSClass must be empty or a string");

	var bOldModal = this._bModal;
	
	this._bModal = bModal;
	this._sModalCSSClass = sModalCSSClass;
	
	//update the blocklayer and autoclose handler when the popup is open
	if(this.isOpen()){
		if(bOldModal !== bModal){
			if(bModal){
				this._showBlockLayer();
			}else{
				this._hideBlockLayer();
			}
			
			if(this.touchEnabled && this._bAutoClose){
				if(!bModal){

					//register the autoclose handler when modal is set to false
					jQuery(document).bind(sap.ui.Device.support.touch ? "touchstart" : "mousedown", jQuery.proxy(this._fAutoCloseHandler, this));
				}else{

					//deregister the autoclose handler when modal is set to true
					jQuery(document).unbind(sap.ui.Device.support.touch ? "touchstart" : "mousedown", this._fAutoCloseHandler);
				}
			}
		}
	}
	return this;
};

/**
 * Used to specify whether the Popup should close as soon as
 * - for non-touch environment: the focus leaves
 * - for touch environment: user clicks the area which is outside the popup itself, the dom elemnt which popup aligns to (except document),
 *  and one of the autoCloseAreas set by calling setAutoCloseAreas.
 * @param {boolean} bAutoClose whether the Popup should close as soon as the focus leaves
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setAutoClose = function(bAutoClose) {
	jQuery.sap.assert(typeof bAutoClose === "boolean", "bAutoClose must be boolean");

	if(this.touchEnabled && this.isOpen() && this._bAutoClose !== bAutoClose){
		if(!this._bModal){
			if(bAutoClose){

				//register the autoclose hanlder when autoclose is set to true
				jQuery(document).bind(sap.ui.Device.support.touch ? "touchstart" : "mousedown", jQuery.proxy(this._fAutoCloseHandler, this));
			}else{

				//deregister the autoclose handler when autoclose is set to false
				jQuery(document).unbind(sap.ui.Device.support.touch ? "touchstart" : "mousedown", this._fAutoCloseHandler);
			}
		}
	}

	this._bAutoClose = bAutoClose;
	return this;
};

/**
 * Sets the additional areas in the page that are considered part of the Popup when autoclose is enabled. 
 * - non-touch environment: if the focus leaves the Popup but immediately enters one of these areas, the Popup does NOT close.
 * - touch environment: if user clicks one of these areas, the Popup does NOT close.
 *
 * @param {DomRef[]} aAutoCloseAreas an array containing DOM elements considered part of the Popup; a value of null removes all previous areas
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setAutoCloseAreas = function(aAutoCloseAreas) {
	jQuery.sap.assert(aAutoCloseAreas === null || jQuery.isArray(aAutoCloseAreas), "aAutoCloseAreas must be null or an array");
	this._aAutoCloseAreas = aAutoCloseAreas;
	return this;
};

/**
 * Sets the animation functions to use for opening and closing the Popup. Any null value will be ignored and not change the respective animation function.
 * When called, the animation functions receive three parameters:
 * - the jQuery object wrapping the DomRef of the popup
 * - the requested animation duration
 * - a function that MUST be called once the animation has completed
 *
 * @param {function} fnOpen
 * @param {function} fnClose
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setAnimations = function(fnOpen, fnClose) {
	jQuery.sap.assert(fnOpen === null || typeof fnOpen === "function", "fnOpen must be a function");
	jQuery.sap.assert(fnClose === null || typeof fnClose === "function", "fnClose must be a function");

	if (fnOpen && (typeof(fnOpen) == "function")) {
		this._animations.open = fnOpen;
	}

	if (fnClose && (typeof(fnClose) == "function")) {
		this._animations.close = fnClose;
	}

	return this;
};

/**
 * Sets the durations for opening and closing animations.
 * Null values and values < 0 are ignored.
 * A duration of 0 means no animation.
 * Default value is "fast" which is the jQuery constant for "200 ms".
 *
 * @param {int} iOpenDuration in milliseconds
 * @param {int} iCloseDuration in milliseconds
 * @return {sap.ui.core.Popup} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.Popup.prototype.setDurations = function(iOpenDuration, iCloseDuration) {
	jQuery.sap.assert(iOpenDuration === null || (typeof iOpenDuration === "number" && (iOpenDuration % 1 == 0)), "iOpenDuration must be null or an integer");
	jQuery.sap.assert(!iCloseDuration || (typeof iCloseDuration === "number" && (iCloseDuration % 1 == 0)), "iOpenDuration must be undefined or an integer");

	if ((iOpenDuration > 0) || (iOpenDuration === 0)) {
		this._durations.open = iOpenDuration;
	}

	if ((iCloseDuration > 0) || (iCloseDuration === 0)) {
		this._durations.close = iCloseDuration;
	}

	return this;
};

/**
 * This enabled/disables the Popup to follow its opening reference. If the Popup is open and a followOf should
 * be set the corresponding listener will be attached.
 * 
 * @param {boolean | function | null} a boolean value enabled/disables the default followOf-Handler. Or an individual handler can be given. 
 * null deletes all followOf settings.
 * @since 1.13.0
 * @public
 */
sap.ui.core.Popup.prototype.setFollowOf = function(followOf) {
	var bUpdateOfRect = false;

	// deregister any listener to ensure that in every state of the Popup the correct listener is attached (or not)
	sap.ui.core.Popup.DockTrigger.removeListener(sap.ui.core.Popup.checkDocking, this);

	if (typeof(followOf) === "function") {
		this._bFollowOf = true;
		this._followOfHandler = followOf;
		bUpdateOfRect = true;
	} else if (typeof(followOf) === "boolean") {
		this._bFollowOf = followOf;
		if (!this._bFollowOf) {
			this._followOfHandler = null;
		}
		bUpdateOfRect = followOf;
	} else {
		this._bFollowOf = false;
		this._followOfHandler = null;

		if (followOf != null) {
			jQuery.sap.log.error("Trying to set an invalid type to 'followOf: " + followOf);
		}
	}
	
	if(bUpdateOfRect && this._oLastPosition){
		this._oLastOfRect = this._calcOfRect(this._oLastPosition.of);
	}

	if (this._bFollowOf && this.getOpenState() === sap.ui.core.OpenState.OPEN) {
		sap.ui.core.Popup.DockTrigger.addListener(sap.ui.core.Popup.checkDocking, this);
	}
};

/**
 * Determines whether the pop-up should auto closes or not.
 *
 * @returns {boolean}
 * @since 1.16
 * @public
 */
sap.ui.core.Popup.prototype.getAutoClose = function() {
	return this._bAutoClose;
};

/**
 * This returns true/false if the default followOf method should be used. If a separate followOf-handler was previously added
 * the correspodning function is returned.
 * 
 * @returns {boolean | function} if a function was set it is returned otherwise a boolean value whether the follow of is activated
 * @since 1.13.0
 * @public
 */
sap.ui.core.Popup.prototype.getFollowOf = function() {
	if (this._bFollowOf) {
		return typeof(this._followOfHandler) === "function" ? this._followOfHandler : true;
	}

	return false;
};

/**
 * Returns whether the Popup is currently open (this includes opening and closing animations).
 *
 * @returns {Boolean} whether the Popup is opened (or currently being opened or closed)
 * @public
 */
sap.ui.core.Popup.prototype.isOpen = function() {
	return this.bOpen;
};

/**
 * Returns whether the Popup is currently open, closed, or transitioning between these states.
 *
 * @returns {OpenState} whether the Popup is opened
 * @public
 */
sap.ui.core.Popup.prototype.getOpenState = function() {
	return this.eOpenState;
};

/**
 * Closes and destroys this instance of Popup.
 * Does not destroy the hosted content.
 * @public
 */
sap.ui.core.Popup.prototype.destroy = function() {

	// deregister resize handler
	if (this._resizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._resizeListenerId);
		this._resizeListenerId = null;
	}

	this.close();
	this.oContent = null;

	if (this._bFollowOf) {
		this.setFollowOf(null);
	}

	// deregister all additional focusable stuff
	if (this._aFocusableArea) {
		delete this._aFocusableArea;
	}

	if (this._bFocusableListenersRegistered) {
		delete this._bFocusableListenersRegistered;

		var sEventId = "sap.ui.core.Popup.addFocusableContent-" + this._id;
		sap.ui.getCore().getEventBus().unsubscribe("sap.ui", sEventId, this._addFocusableArea);

		sEventId = "sap.ui.core.Popup.removeFocusableContent-" + this._id;
		sap.ui.getCore().getEventBus().unsubscribe("sap.ui", sEventId, this._removeFocusableArea);
	}
};

/**
 * This listener is called by the EventBus when an element-id should be added to the
 * focusable area. The event is fired when a control publishes the corresponding event
 * according to the channel id "sap.ui" with the event id:
 * "sap.ui.core.Popup.addFocusableContent-<Popup-ID>". The Popup-id can be obtained by this._id.
 * 
 * @param {string} 'sChannel': channel of the EventBus
 * @param {string} 'sEvent': name of the event
 * @param {Object} 'oFocusable': object with an id-property
 * @since 1.12.3
 * @private
 */
sap.ui.core.Popup.prototype._addFocusableArea = function(sChannel, sEvent, oFocusable) {
	if (!this._aFocusableArea) {
		this._aFocusableArea = [];
	}

	if (oFocusable.id && typeof(oFocusable.id) === "string") {
		this._aFocusableArea.push(oFocusable.id);
	} else {
		jQuery.sap.log.warning("Either no id given or id is no string");
	}
};

/**
 * This listener is called by the EventBus when an element-id should be removed from the
 * focusable area. The event is fired when a control publishes the corresponding event
 * according to the channel id "sap.ui" with the event id:
 * "sap.ui.core.Popup.removeFocusableContent-<Popup-ID>". The Popup-id can be obtained by this._id.
 * 
 * @param {string} 'sChannel': channel of the EventBus
 * @param {string} 'sEvent': name of the event
 * @param {Object} 'oFocusable': object with an id-property and if a autoClose machanism should occur
 * @since 1.17.0
 * @private
 */
sap.ui.core.Popup.prototype._removeFocusableArea = function(sChannel, sEvent, oFocusable) {
	if (this._aFocusableArea && this._aFocusableArea.length > 0) {
		for (var i=0; i < this._aFocusableArea.length; i++) {
			if (this._aFocusableArea[i] === oFocusable.id) {
				// remove corresponding id and stop looping
				this._aFocusableArea = this._aFocusableArea.splice(i, i);
				break;
			}
		}
		
		if (oFocusable.bAutoClose && this._bAutoClose) {
			this.close();
		}
	}
};

/**
 * This adds the Popup's id to the given DOM-reference right into the HTML as
 * an attribute to identify the Popup within the static UI-area.
 * 
 * Additionally the corresponding event-listener is registered to the EventBus. The event is registered
 * to the reserved channel "sap.ui" and is called "sap.ui.core.Popup.addFocusableContent-"
 * with the corresponding Popup-id.
 * This event can be published via the EventBus to add a focusable DOM-element-id to the focusable area when
 * the Popup looses its focus. 
 * 
 * @param {jQuery} $Ref to which DOM-reference the Popup-id should be added to
 * @private 
 */
sap.ui.core.Popup.prototype._setIdentity = function($Ref) {
	if (typeof $Ref === "object") {
		$Ref.attr("data-sap-ui-popup", this._id);
	} else {
		jQuery.sap.log.warning("Incorrect DomRef-type for 'setIdentity': " + $Ref, this);
		return;
	}

	if (!this._bFocusableListenersRegistered) {
		this._bFocusableListenersRegistered = true;

		var sEventId = "sap.ui.core.Popup.addFocusableContent-" + this._id;
		sap.ui.getCore().getEventBus().subscribe("sap.ui", sEventId, this._addFocusableArea, this);

		sEventId = "sap.ui.core.Popup.removeFocusableContent-" + this._id;
		sap.ui.getCore().getEventBus().subscribe("sap.ui", sEventId, this._removeFocusableArea, this);
	}
};

/**
 * Returns the jQuery object containing the root of the content of the Popup
 * @returns {jQuery} the jQuery object containing the root of the content of the Popup
 * @private
 */
sap.ui.core.Popup.prototype._$ = function(bForceReRender){
	var $ContentRef;

	if(this.oContent instanceof sap.ui.core.Control){
		$ContentRef = this.oContent.$();
		if ($ContentRef.length === 0 || bForceReRender) {
			jQuery.sap.log.info("Rendering of popup content: " + this.oContent.getId());
			if ($ContentRef.length > 0) {
				sap.ui.core.RenderManager.preserveContent($ContentRef[0], /* bPreserveRoot */ true, /* bPreserveNodesWithId */ false);
			}
			sap.ui.getCore().getRenderManager().render(this.oContent, sap.ui.getCore().getStaticAreaRef());
			$ContentRef = this.oContent.$();
		}
	} else if(this.oContent instanceof sap.ui.core.Element){
		$ContentRef = this.oContent.$();
	} else {
		$ContentRef = jQuery(this.oContent);
	}

	this._setIdentity($ContentRef);

	return $ContentRef;
};

/**
 *
 * @param iZIndex
 * @private
 */
sap.ui.core.Popup.prototype._showBlockLayer = function() {
	var $BlockRef = jQuery("#sap-ui-blocklayer-popup"),
		sClassName = "sapUiBLy" + (this._sModalCSSClass ? " " + this._sModalCSSClass : "");

	if ($BlockRef.length === 0) {
		$BlockRef = jQuery('<div id="sap-ui-blocklayer-popup" tabindex="0" class="' + sClassName + '"></div>');
		$BlockRef.appendTo(sap.ui.getCore().getStaticAreaRef());
	} else {
		$BlockRef.removeClass().addClass(sClassName);
	}

	// push current z-index to stack
	sap.ui.core.Popup.blStack.push(this._iZIndex - 2);
	$BlockRef.css("z-index", this._iZIndex - 2).css("visibility","visible").show();
};

sap.ui.core.Popup.prototype._hideBlockLayer = function() {

	// a dialog was closed so pop his z-index from the stack
	sap.ui.core.Popup.blStack.pop();

	// if there are more z-indices this means there are more dialogs stacked up. So redisplay the blocklayer (with new z-index) under the new current dialog which should be displayed.
	if (sap.ui.core.Popup.blStack.length > 0) {

		// set the blocklayer z-index to the last z-index in the stack and show it
		jQuery("#sap-ui-blocklayer-popup").css("z-index", sap.ui.core.Popup.blStack[sap.ui.core.Popup.blStack.length-1]).css("visibility","visible").show();
	} else {

		// the last dialog was closed so we can hide the block layer now
		jQuery("#sap-ui-blocklayer-popup").css("visibility","inherit").hide();
	}
};

//****************************************************
//Handling of movement of the dock references
//****************************************************
sap.ui.core.Popup.DockTrigger = new sap.ui.core.IntervalTrigger(200);

sap.ui.core.Popup.checkDocking = function(){
	if (this.getOpenState() === sap.ui.core.OpenState.OPEN) {
		var oCurrentOfRect = jQuery(this._oLastPosition.of instanceof sap.ui.core.Element ? this._oLastPosition.of.getDomRef() : this._oLastPosition.of).rect();

		if (oCurrentOfRect.left === 0 
				&& oCurrentOfRect.top === 0
				&& oCurrentOfRect.width === 0
				&& oCurrentOfRect.height === 0) {
			
			// Try to get the newest 
			if (this._oLastPosition.of.id && this._oLastPosition.of.id !== "") {
				// If the 'of' was rerendered the newest DOM-element has to be taken for the corresponding rect-object.
				// Because the id of the 'of' may be still the same but due to its rerendering the reference changed and has to be taken 
				var oNewestOfRect = jQuery(jQuery.sap.domById(this._oLastPosition.of.id)).rect();
				
				// if there is a newest corresponding DOM-reference and it differs from the current -> use the newest one
				if (oNewestOfRect && oNewestOfRect !== oCurrentOfRect) {
					oCurrentOfRect = oNewestOfRect;
				}
			} 
		}

		/*
		 * It's possible that the triggering has already started since the listener is added in 'open' and the Popup hasn't opened yet.
		 * Therefore '_oLastOfRect' wasn't set due to the Popup didn't set it in '_applyPosition'.
		 */
		if (this._oLastOfRect) {
			if (this._oLastOfRect.left != oCurrentOfRect.left
					|| this._oLastOfRect.top != oCurrentOfRect.top
					|| this._oLastOfRect.width != oCurrentOfRect.width
					|| this._oLastOfRect.height != oCurrentOfRect.height) {

				if (this._followOfHandler) {

					// provide the last position additionally if the call back needs it also
					// e.g. the Callout needs it => create deep copy of old positioning object
					var oLastCopy = jQuery.extend(true, {}, this._oLastPosition);
					this._followOfHandler(oLastCopy);
				} else {
					this._applyPosition(this._oLastPosition);
				}
			}
		}
	}
};

//****************************************************
//Focus Handling Delegate function for use with the given content (of type sap.ui.core.Element)
//****************************************************
/**
 * Delegate function for handling of touchstart event on sap.ui.core.Elements as content
 * 
 * This is a fix for preventing the Popup A from getting higher z-index than popup B when popup B is opened within popup A.
 * 
 * Mousedown event is fired with 300ms delay and when the event is caught by popup A, the popup B is already opened. Therefore popup A increases its z-index to be on the front.
 * When ontouchstart is called, the next mousedown event which comes with a 300ms delay will be ignored. 
 * 
 * @private
 */
sap.ui.core.Popup.prototype.ontouchstart = function(oEvent){
	this.onmousedown(oEvent, true);
	// this marks that the onmousedown function is already called by listening to touchstart event on device which supports touchstart.
	// the onmousedown won't be called again by listening to mousedown event
	this._bMousedownCalled = true;
};

/**
 * Delegate function for handling of mousedown event on sap.ui.core.Elements as content
 * @private
 */
sap.ui.core.Popup.prototype.onmousedown = function(oEvent, bSupressChecking) {
	if(this._bMousedownCalled && !bSupressChecking){
		//if onmousedown is already called, isn't needed to be called again.
		this._bMousedownCalled = false;
		return;
	}
	
	if (this._iZIndex === this.getLastZIndex()) {
		return;
	} // we are 'uppermost' and therefore everything is ok

	this._iZIndex = this.getNextZIndex();

	var $Ref = this._$();
	$Ref.css("z-index", this._iZIndex);

	if (this._oBlindLayer) {
		this._oBlindLayer.update($Ref, this._iZIndex -1);
	}
};

//****************************************************
//Rerendering Handling Delegate function for use with the given content (of type sap.ui.core.Element)
//****************************************************

/**
 * Delegate function for onAfterRendering.
 * Only active when Popup is opened.
 * @private
 */
sap.ui.core.Popup.prototype.onAfterRendering = function(oEvent){
	var $Ref = this.getContent().$();

	// TODO all stuff done in 'open' is destroyed if the content was rerendered 
	$Ref.toggleClass("sapUiShd", this._bShadow);
	$Ref.css("position", "absolute");
	
	// set/update the identification properly
	this._setIdentity($Ref);

	// Ensure right position is used for this call
	var ref = $Ref[0];
	var left = ref.style.left;
	var right = ref.style.right;
	var top = ref.style.top;
	var bottom = ref.style.bottom;

	if (!(left && left != "auto" || right && right != "auto" || top && top != "auto" || bottom && bottom != "auto")) {
		jQuery.sap.log.debug("reposition popup content " + $Ref.attr("id") + " at " + (window.JSON ? JSON.stringify(this._oLastPosition.at) : String(this._oLastPosition.at)));
		this._applyPosition(this._oLastPosition);
	}

	$Ref.show()
		.css("visibility", "visible")
		.css("z-index", this._iZIndex);

	// register resize handler for blindlayer resizing
	if (this._oBlindLayer) {
		this._resizeListenerId = sap.ui.core.ResizeHandler.register(this._$().get(0), jQuery.proxy(this.onresize, this));
	}
};

/**
* Delegate function for onBeforeRendering.
* @private
*/
sap.ui.core.Popup.prototype.onBeforeRendering = function(oEvent) {
	// deregister resize handler
	if (this._resizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._resizeListenerId);
		this._resizeListenerId = null;
	}
};

/**
 * Resize handler listening to the popup. If the Popup changes its size the blindlayer
 * should be updated as well. For example necessary when popup content has absolute positions.
 *
 * @private
 */
sap.ui.core.Popup.prototype.onresize = function(oEvent) {
	if (this.eOpenState != sap.ui.core.OpenState.CLOSED && this._oBlindLayer) {
		var that = this;
		setTimeout(function(){that._updateBlindLayer();}, 0);
	}
};

sap.ui.core.Popup.prototype._updateBlindLayer = function() {
	if (this.eOpenState != sap.ui.core.OpenState.CLOSED && this._oBlindLayer) {
		this._oBlindLayer.update(this._$());
	}
};

}; // end of sap/ui/core/Popup.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ScrollBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.ScrollBar.
jQuery.sap.declare("sap.ui.core.ScrollBar");




/**
 * Constructor for a new ScrollBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVertical vertical} : boolean (default: true)</li>
 * <li>{@link #getScrollPosition scrollPosition} : int</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentSize contentSize} : sap.ui.core.CSSSize</li>
 * <li>{@link #getSteps steps} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.core.ScrollBar#event:scroll scroll} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The ScrollBar control can be used for virtual scrolling of a certain area.
 * This means: to simulate a very large scrollable area when technically the area is small and the control takes care of displaying the respective part only. E.g. a Table control can take care of only rendering the currently visible rows and use this ScrollBar control to make the user think he actually scrolls through a long list.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.ScrollBar
 */
sap.ui.core.Control.extend("sap.ui.core.ScrollBar", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"bind", "unbind", "pageUp", "pageDown"
	],

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"vertical" : {type : "boolean", group : "Behavior", defaultValue : true},
		"scrollPosition" : {type : "int", group : "Behavior", defaultValue : null},
		"size" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"contentSize" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"steps" : {type : "int", group : "Dimension", defaultValue : null}
	},
	events : {
		"scroll" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.ScrollBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.ScrollBar.extend
 * @function
 */

sap.ui.core.ScrollBar.M_EVENTS = {'scroll':'scroll'};


/**
 * Getter for property <code>vertical</code>.
 * Orientation. Defines if the Scrollbar is vertical or horizontal.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>vertical</code>
 * @public
 * @name sap.ui.core.ScrollBar#getVertical
 * @function
 */

/**
 * Setter for property <code>vertical</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVertical  new value for property <code>vertical</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ScrollBar#setVertical
 * @function
 */


/**
 * Getter for property <code>scrollPosition</code>.
 * Scroll position in steps or pixels.
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>scrollPosition</code>
 * @public
 * @name sap.ui.core.ScrollBar#getScrollPosition
 * @function
 */

/**
 * Setter for property <code>scrollPosition</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iScrollPosition  new value for property <code>scrollPosition</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ScrollBar#setScrollPosition
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Size of the Scrollbar (in pixels).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * @name sap.ui.core.ScrollBar#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sSize  new value for property <code>size</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ScrollBar#setSize
 * @function
 */


/**
 * Getter for property <code>contentSize</code>.
 * Size of the scrollable content (in pixels).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentSize</code>
 * @public
 * @name sap.ui.core.ScrollBar#getContentSize
 * @function
 */

/**
 * Setter for property <code>contentSize</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentSize  new value for property <code>contentSize</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ScrollBar#setContentSize
 * @function
 */


/**
 * Getter for property <code>steps</code>.
 * Number of steps to scroll. Used if the size of the content is not known as the data is loaded dynamically.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>steps</code>
 * @public
 * @name sap.ui.core.ScrollBar#getSteps
 * @function
 */

/**
 * Setter for property <code>steps</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iSteps  new value for property <code>steps</code>
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ScrollBar#setSteps
 * @function
 */


/**
 * Scroll event. 
 *
 * @name sap.ui.core.ScrollBar#scroll
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.ScrollBarAction} oControlEvent.getParameters.action Actions are: Click on track, button, drag of thumb, or mouse wheel click.
 * @param {boolean} oControlEvent.getParameters.forward Direction of scrolling: back (up) or forward (down).
 * @param {int} oControlEvent.getParameters.newScrollPos Current Scroll position either in pixels or in steps.
 * @param {int} oControlEvent.getParameters.oldScrollPos Old Scroll position - can be in pixels or in steps.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'scroll' event of this <code>sap.ui.core.ScrollBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.core.ScrollBar</code>.<br/> itself. 
 *  
 * Scroll event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ui.core.ScrollBar</code>.<br/> itself.
 *
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ScrollBar#attachScroll
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'scroll' event of this <code>sap.ui.core.ScrollBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ScrollBar#detachScroll
 * @function
 */

/**
 * Fire event scroll to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'action' of type <code>sap.ui.core.ScrollBarAction</code> Actions are: Click on track, button, drag of thumb, or mouse wheel click.</li>
 * <li>'forward' of type <code>boolean</code> Direction of scrolling: back (up) or forward (down).</li>
 * <li>'newScrollPos' of type <code>int</code> Current Scroll position either in pixels or in steps.</li>
 * <li>'oldScrollPos' of type <code>int</code> Old Scroll position - can be in pixels or in steps.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.ScrollBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.ScrollBar#fireScroll
 * @function
 */


/**
 * Binds the mouse wheel scroll event of the control that has the scrollbar to the scrollbar itself.
 *
 * @name sap.ui.core.ScrollBar.prototype.bind
 * @function
 * @param {string} 
 *         sOOwnerDomRef
 *         Dom ref of the control that uses the scrollbar

 * @type void
 * @public
 */


/**
 * Unbinds the mouse wheel scroll event of the control that has the scrollbar
 *
 * @name sap.ui.core.ScrollBar.prototype.unbind
 * @function
 * @param {string} 
 *         sOOwnerDomRef
 *         Dom ref of the Control that uses the scrollbar

 * @type void
 * @public
 */


/**
 * Page Up is used to scroll one page back.
 *
 * @name sap.ui.core.ScrollBar.prototype.pageUp
 * @function

 * @type void
 * @public
 */


/**
 * Page Down is used to scroll one page forward.
 *
 * @name sap.ui.core.ScrollBar.prototype.pageDown
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\core\ScrollBar.js
/**
 * This file defines behavior for the control,
 */

// =============================================================================
// BASIC CONTROL API
// =============================================================================

/**
 * Initialization of the Scrollbar control
 * @private
 */
sap.ui.core.ScrollBar.prototype.init = function(){

	// JQuery Object - Dom reference of the scroll bar
	this._$ScrollDomRef = null;

	// In pixels - exact position
	this._iOldScrollPos = 0;

	// In steps
	this._iOldStep = 0;

	// True if the scroll position was verified. And false if the check was not done yet - for example if the rendering is not done completely
	this._bScrollPosIsChecked = false;

	// RTL mode
	this._bRTL = sap.ui.getCore().getConfiguration().getRTL();

	// Supress scroll event
	this._bSuppressScroll = false;
	
	this._iMaxContentDivSize = 1000000;  // small value that all browsers still can render without any problems
	
	if (jQuery.sap.touchEventMode === "ON") {
		jQuery.sap.require("sap.ui.thirdparty.zyngascroll");

		// Remember last touch scroller position to prevent unneeded rendering
		this._iLastTouchScrollerPosition = null;
		
		// The threshold in pixel for a step when scrolled by touch events
		this._iTouchStepTreshold = 24;
		
		// Some zynga scroller methods call the touch handler. By settings this variable to false, touch handling is prevented and
		// number of unneeded rendering is reduced.
		this._bSkipTouchHandling = false;
		
		this._oTouchScroller = new window.Scroller(jQuery.proxy(this._handleTouchScroll,this), {
			bouncing:false
		});
	}
};


/**
 * Rerendering handling
 * @private
 */
sap.ui.core.ScrollBar.prototype.onBeforeRendering = function() {
	jQuery.sap.byId(this.getId() + "-sb").unbind("scroll", this.onscroll);
};


/**
 * Rerendering handling
 * @private
 */
sap.ui.core.ScrollBar.prototype.onAfterRendering = function () {
	 // count of steps (comes per API)
	this._iSteps = this.getSteps();

	// content size in pixel
	var sContentSize = this.getContentSize();

	// determine the mode
	this._bStepMode = !sContentSize;

	var iScrollBarSize = this.getSize();
	if(jQuery.sap.endsWith(iScrollBarSize,"px")){
		iScrollBarSize = iScrollBarSize.substr(0, iScrollBarSize.length -2);
	} else {
		iScrollBarSize = this.getVertical() ? this.$().height() : this.$().width();
	}

	var stepSize = null;

	var $ffsize = jQuery.sap.byId(this.getId() + "-ffsize");
	if (!!sap.ui.Device.browser.firefox) {
		stepSize = $ffsize.outerHeight();
	}
	$ffsize.remove();

	if (!!sap.ui.Device.browser.webkit) {
		// document.width - was not supported by Chrome 17 anymore, but works again with Chrome from 18 to 30, and does not work in chrom 31.
		if  (!document.width) {
			stepSize = Math.round(40 / (window.outerWidth / jQuery(document).width()));
		} else {
			stepSize = Math.round(40 / (document.width / jQuery(document).width()));
			//jQuery.sap.log.debug( stepSize + " ****************************STEP SIZE*************************************************************");
		}
	}

	if (this.getVertical()) {
		this._iFactor = !!sap.ui.Device.browser.firefox ? stepSize :	!!sap.ui.Device.browser.webkit ? stepSize : Math.floor(iScrollBarSize  * 0.125);
		this._iFactorPage = !!sap.ui.Device.browser.firefox ? iScrollBarSize - stepSize : Math.floor(iScrollBarSize * 0.875)
	} else {
		this._iFactor = !!sap.ui.Device.browser.firefox ? 10 : !!sap.ui.Device.browser.webkit ? stepSize :  7 ;
		this._iFactorPage = !!sap.ui.Device.browser.firefox ? Math.floor(iScrollBarSize * 0.8) : !!sap.ui.Device.browser.webkit ? Math.floor(iScrollBarSize  * 0.875) : iScrollBarSize-14;
	}

	this._$ScrollDomRef = jQuery.sap.byId(this.getId() + "-sb");

	if (this._bStepMode) {
		
		if (this.getVertical()) {
			// calculate the height of the content size => scroll bar height + (steps * browser step size)
			var iSize = this._iSteps * this._iFactor;
			
			if (iSize > this._iMaxContentDivSize) {
				this._iFactor = Math.ceil(this._iFactor/Math.ceil(iSize/this._iMaxContentDivSize));
			}
			
			var iContentSize = this._$ScrollDomRef.height() + this._iSteps * this._iFactor;
			// set the content size
			this._$ScrollDomRef.find("div").height(iContentSize);
		} else {
			// calculate the height of the content size => scroll bar size + (steps * browser step size)
			var iContentSize = this._$ScrollDomRef.width() + this._iSteps * this._iFactor;
			// set the content size
			this._$ScrollDomRef.find("div").width(iContentSize);
		}
	}

	this.setCheckedScrollPosition(this.getScrollPosition() ? this.getScrollPosition() : 0, true);

	this._$ScrollDomRef.bind("scroll", jQuery.proxy(this.onscroll, this));

	if (jQuery.sap.touchEventMode === "ON") {
		this._bSkipTouchHandling = true;
		
		var oContent = {
				width:0,
				height:0
		};
		oContent[this.getVertical()? "height" : "width"] = this._bStepMode ? (this.getSteps() * this._iTouchStepTreshold) : parseInt(this.getContentSize(), 10);

		this._oTouchScroller.setDimensions(0, 0, oContent.width, oContent.height);
	
		var oElement = this._$ScrollDomRef.get(0);
		var oRect = oElement.getBoundingClientRect();
		this._oTouchScroller.setPosition(oRect.left + oElement.clientLeft, oRect.top + oElement.clientTop);
		this._bSkipTouchHandling = false;
	}
};

//=============================================================================
// CONTROL EVENT HANDLING
//=============================================================================

/**
 * Event object contains detail (for Firefox and Opera), and wheelData (for Internet Explorer, Safari, and Opera).
 * Scrolling down is a positive number for detail, but a negative number for wheelDelta.
 * @param {jQuery.Event} oEvent Event object contains detail (for Firefox and Opera), and wheelData (for Internet Explorer, Safari, and Opera).
 * @private
*/
sap.ui.core.ScrollBar.prototype.onmousewheel = function(oEvent)  {

	// ignore the mousewheel events when the scrollbar is not visible
	if (this.$().is(":visible")) {
	
		// So let's scale and make negative value for all scroll down in all browsers.
		var oOriginalEvent = oEvent.originalEvent;
		var wheelData = oOriginalEvent.detail ? oOriginalEvent.detail : oOriginalEvent.wheelDelta * (-1) / 40;
	
		// find out if the user is scrolling up= back or down= forward.
		var bForward = wheelData > 0 ? true : false;
	
		if (jQuery.sap.containsOrEquals(this._$ScrollDomRef[0], oEvent.target)) {
			this._doScroll(sap.ui.core.ScrollBarAction.MouseWheel, bForward);
		} else {
	
			this._bMouseWheel = true;
			var pos = null;
			if (this._bStepMode) {
				pos = wheelData + this._iOldStep;
			} else {
				pos = wheelData * this._iFactor + this._iOldScrollPos;
			}
	
			this.setCheckedScrollPosition(pos, true);
		}
	
		// prevent the default behavior
		oEvent.preventDefault();
		oEvent.stopPropagation();
		return false;
		
	}
		
};


/**
 * Touch start handler. Called when the "touch start" event occurs on this control.
 * @param {jQuery.Event} oEvent Touch Event object 
 * @private
*/
sap.ui.core.ScrollBar.prototype.ontouchstart = function(oEvent) {
	// Don't react if initial down happens on a form element
	var aTouches =  oEvent.touches;
	var oFirstTouch = aTouches[0];
	if (oFirstTouch && oFirstTouch.target && oFirstTouch.target.tagName.match(/input|textarea|select/i)) {
		return;
	}
	if (this._oTouchScroller) {
		this._oTouchScroller.doTouchStart(aTouches, oEvent.timeStamp);
	}
	if (aTouches.length == 1) {
		oEvent.preventDefault();
	}
};


/**
 * Touch move handler. Called when the "touch move" event occurs on this control.
 * @param {jQuery.Event} oEvent Touch Event object 
 * @private
*/
sap.ui.core.ScrollBar.prototype.ontouchmove = function(oEvent) {
	if (this._oTouchScroller) {
		this._oTouchScroller.doTouchMove(oEvent.touches, oEvent.timeStamp, oEvent.scale);
	}
};


/**
 * Touch end handler. Called when the "touch end" event occurs on this control.
 * @param {jQuery.Event} oEvent Touch Event object 
 * @private
*/
sap.ui.core.ScrollBar.prototype.ontouchend = function(oEvent) {
	if (this._oTouchScroller) {
		this._oTouchScroller.doTouchEnd(oEvent.timeStamp);
	}
};

/**
 * Touch cancel handler. Called when the "touch cancel" event occurs on this control.
 * @param {jQuery.Event} oEvent Touch Event object 
 * @private
*/
sap.ui.core.ScrollBar.prototype.ontouchcancel = function(oEvent) {
	if (this._oTouchScroller) {
		this._oTouchScroller.doTouchEnd(oEvent.timeStamp);
	}
};

/**
 * Handles the Scroll event.
 *
 * @param {jQuery.Event}  oEvent Event object
 * @private
 */
sap.ui.core.ScrollBar.prototype.onscroll = function(oEvent) {
	//jQuery.sap.log.debug("*****************************onScroll************************ SUPRESS SCROLL:  " + this._bSuppressScroll );
	if (this._bSuppressScroll) {
		this._bSuppressScroll = false;
		oEvent.preventDefault();
		oEvent.stopPropagation();
		return false;
	}

	// Set new Scroll position
	var iScrollPos = null;
	if (this._$ScrollDomRef){
		if (this.getVertical()) {
			iScrollPos = this._$ScrollDomRef.scrollTop();
		} else {
			iScrollPos = this._$ScrollDomRef.scrollLeft();
			if ( !!sap.ui.Device.browser.firefox && this._bRTL ) {
				iScrollPos = Math.abs(iScrollPos);
			} else if ( !!sap.ui.Device.browser.webkit && this._bRTL ) {
				var oScrollDomRef = this._$ScrollDomRef.get(0);
				iScrollPos = oScrollDomRef.scrollWidth - oScrollDomRef.clientWidth - oScrollDomRef.scrollLeft;
			}
		}
	}

	var iDelta = iScrollPos - this._iOldScrollPos;

	var bForward = iDelta > 0 ? true : false;
	if (iDelta < 0) {
		iDelta = iDelta*(-1);
	}

	var eAction = sap.ui.core.ScrollBarAction.Drag;
	if (iDelta == this._iFactor) {
		eAction = sap.ui.core.ScrollBarAction.Step;
	} else if (iDelta == this._iFactorPage) {
		eAction = sap.ui.core.ScrollBarAction.Page;
	} else if (this._bMouseWheel) {
		eAction = sap.ui.core.ScrollBarAction.MouseWheel;
	}

	// Proceed scroll
	this._doScroll(eAction, bForward);

	oEvent.preventDefault();
	oEvent.stopPropagation();
	return false;
};


/**
 * Handler for the touch scroller instance. Called only when touch mode is enabled.
 *   
 * @param {number} left Horizontal scroll position
 * @param {number} top Vertical scroll position 
 * @param {number} zoom The zoom level
 * @private
 */
sap.ui.core.ScrollBar.prototype._handleTouchScroll = function(iLeft, iTop, iZoom) {
	if (this._bSkipTouchHandling) {
		return;
	}

	var iValue = this.getVertical() ? iTop : iLeft; 	
	if (this._bStepMode) {
		var iPos = Math.max(Math.round(iValue / this._iTouchStepTreshold), 0);
	} else {
		var iPos = Math.round(iValue);
	}
	if (this._iLastTouchScrollerPosition !== iPos) {
		this._iLastTouchScrollerPosition = iPos;
		this.setCheckedScrollPosition(iPos, true);
		this.fireScroll();	
	}
};


//=============================================================================
// PUBLIC API METHODS
//=============================================================================

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.unbind = function (oOwnerDomRef) {
	if (oOwnerDomRef) {
		this._$OwnerDomRef = jQuery(oOwnerDomRef);
		if (this.getVertical()) {
			this._$OwnerDomRef.unbind(!!sap.ui.Device.browser.firefox ? "DOMMouseScroll" : "mousewheel", this.onmousewheel);			
		}
		
		if (jQuery.sap.touchEventMode === "ON") {
			this._$OwnerDomRef.unbind(this._getTouchEventType("touchstart"), jQuery.proxy(this.ontouchstart, this));
			this._$OwnerDomRef.unbind(this._getTouchEventType("touchmove"), jQuery.proxy(this.ontouchmove, this));
			this._$OwnerDomRef.unbind(this._getTouchEventType("touchend"), jQuery.proxy(this.ontouchend, this));
			this._$OwnerDomRef.unbind(this._getTouchEventType("touchcancle"), jQuery.proxy(this.ontouchcancle, this));
		}
	}
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.bind = function (oOwnerDomRef) {
	if (oOwnerDomRef) {
		this._$OwnerDomRef = jQuery(oOwnerDomRef);
		if (this.getVertical()) {
			this._$OwnerDomRef.bind(!!sap.ui.Device.browser.firefox ? "DOMMouseScroll" : "mousewheel", jQuery.proxy(this.onmousewheel, this));
		}

		if (jQuery.sap.touchEventMode === "ON") {
			this._$OwnerDomRef.bind(this._getTouchEventType("touchstart"), jQuery.proxy(this.ontouchstart, this));
			this._$OwnerDomRef.bind(this._getTouchEventType("touchmove"), jQuery.proxy(this.ontouchmove, this));
			this._$OwnerDomRef.bind(this._getTouchEventType("touchend"), jQuery.proxy(this.ontouchend, this));
			this._$OwnerDomRef.bind(this._getTouchEventType("touchcancle"), jQuery.proxy(this.ontouchcancle, this));
		}
	}
};

/**
 * Returns the event type for a given touch event type base on the current touch event mode (jQuery.sap.touchEventMod).
 *   
 * @param {string} sType The touch event to convert
 * @return {string} The converted event type.
 * @private
 */
sap.ui.core.ScrollBar.prototype._getTouchEventType = function (sType) {
	return jQuery.sap.touchEventMode === "SIM" ? ("sap" + sType) : sType;
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.pageUp = function() {
	// call on scroll
	this._doScroll(sap.ui.core.ScrollBarAction.Page, false);
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.pageDown = function() {
    // call on scroll
    this._doScroll(sap.ui.core.ScrollBarAction.Page, true);
};

//=============================================================================
// OVERRIDE OF SETTERS
//=============================================================================

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.setScrollPosition = function (scrollPosition) {
	if (this._$ScrollDomRef) {
		this.setCheckedScrollPosition(scrollPosition, true);
	} else {
		this.setProperty("scrollPosition", scrollPosition);
	}
	return this;
};

/*
 * After the Scrollbar is rendered, we check the validity of the scroll position and set Scroll Left and ScrollTop.
 * @private
 */
sap.ui.core.ScrollBar.prototype.setCheckedScrollPosition = function (scrollPosition, callScrollEvent) {

	var iCheckedSP = Math.max(scrollPosition, 0);

	if ( this._bStepMode === undefined) {
		this._bStepMode = !this.getContentSize();
	}

	var iScrollPos = iCheckedSP;
	if ( this._bStepMode) {

		iCheckedSP = Math.min(iCheckedSP, this.getSteps());

		// STEPS MODE - Calculate the position in PX
		iScrollPos = iCheckedSP * this._iFactor;
	}

	iCheckedSP = Math.floor(iCheckedSP);

	this._bSuppressScroll = !callScrollEvent;
	this.setProperty("scrollPosition", iCheckedSP, true);

	if ( this.getVertical()) {
			this._$ScrollDomRef.scrollTop(iScrollPos);
		} else {
		if ( !!sap.ui.Device.browser.firefox && this._bRTL ) {
			this._$ScrollDomRef.scrollLeft(-iScrollPos);
		} else if ( !!sap.ui.Device.browser.webkit && this._bRTL ) {
			var oScrollDomRef = this._$ScrollDomRef.get(0);
			this._$ScrollDomRef.scrollLeft(oScrollDomRef.scrollWidth - oScrollDomRef.clientWidth - iScrollPos);
		} else {
			this._$ScrollDomRef.scrollLeft(iScrollPos);
		}
	}

 	if (jQuery.sap.touchEventMode === "ON") {
		var value = iCheckedSP;
		if (this._bStepMode) {
			value = Math.round(iCheckedSP * this._iTouchStepTreshold);
		}

		this._oTouchScroller.__scrollTop = this.getVertical() ? value : 0;
		this._oTouchScroller.__scrollLeft =  this.getVertical() ? 0 : value;
	}
};

/*
 * @see JSDoc generated by SAPUI5 control API generator
 */
sap.ui.core.ScrollBar.prototype.setContentSize = function (sContentSize) {

	// Trigger the rerendering when switching the from step mode.
	this.setProperty("contentSize", sContentSize);
	this._bStepMode = false;
		var $SbCnt = jQuery.sap.byId(this.getId() + "-sbcnt");
		if ($SbCnt) {
			if (this.getVertical()) {
				$SbCnt.height(sContentSize);
			} else {
				$SbCnt.width(sContentSize);
			}
		}
	return this;
};

//=============================================================================
// PRIVATE METHODS
//=============================================================================

/**
* Process scroll events and fire scroll event
* @param eAction Action type that can be mouse wheel, Drag, Step or Page.
* @param bForward Scroll Direction - forward or back
* @private
*/
sap.ui.core.ScrollBar.prototype._doScroll = function(eAction, bForward) {

	// Get new scroll position
	var iScrollPos = null;
	if (this._$ScrollDomRef){
		if (this.getVertical()) {
			iScrollPos = this._$ScrollDomRef.scrollTop();
		} else {
			iScrollPos = this._$ScrollDomRef.scrollLeft();
			if (!!sap.ui.Device.browser.firefox && this._bRTL ) {
				iScrollPos = Math.abs(iScrollPos);
			} else if ( !!sap.ui.Device.browser.webkit && this._bRTL ) {
				var oScrollDomRef = this._$ScrollDomRef.get(0);
				iScrollPos = oScrollDomRef.scrollWidth - oScrollDomRef.clientWidth - oScrollDomRef.scrollLeft;
			}
		}
	}

	if (this._bStepMode) {

		// STEP MODE
		var iStep = Math.round(iScrollPos / this._iFactor);
		var iOldStep = this._iOldStep;

		if (iOldStep !== iStep) {

			// Set new scrollposition without the rerendering
			this.setCheckedScrollPosition(iStep, false);

			jQuery.sap.log.debug("-----STEPMODE-----: New Step: " + iStep + " --- Old Step: " +  iOldStep  + " --- Scroll Pos in px: " + iScrollPos + " --- Action: " + eAction + " --- Direction is forward: " + bForward);
			this.fireScroll({ action: eAction, forward: bForward, newScrollPos: iStep, oldScrollPos: iOldStep});
			this._iOldStep = iStep;

		}
	} else {

		// Set new scroll position without the rerendering:
		this.setProperty("scrollPosition", iScrollPos, true);

		jQuery.sap.log.debug("-----PIXELMODE-----: New ScrollPos: " + iScrollPos + " --- Old ScrollPos: " +  this._iOldScrollPos + " --- Action: " + eAction + " --- Direction is forward: " + bForward);
		this.fireScroll({ action: eAction, forward: bForward, newScrollPos: iScrollPos, oldScrollPos: this._iOldScrollPos});
	}
	this._bSuppressScroll = false;
	this._iOldScrollPos = iScrollPos;
	this._bMouseWheel = false;

};

sap.ui.core.ScrollBar.prototype.onThemeChanged = function() {
	this.rerender();
}

/**
 * return the native scroll position without any browser specific correction of 
 * the scroll position value (firefox & RTL => negative value / webkit & RTL =>
 * positive value not beginning with 0 because 0 is left and not as expected 
 * right for webkit RTL mode).
 * @return {int} native scroll position
 * @private
 */
sap.ui.core.ScrollBar.prototype.getNativeScrollPosition = function() {
	if (this._$ScrollDomRef) {
		if (this.getVertical()) {
			return this._$ScrollDomRef.scrollTop();
		} else {
			return this._$ScrollDomRef.scrollLeft();
		}
	}
	return 0;
}

/**
 * sets the scroll position directly

 * @param {int} iNativeScrollPos new native scroll position
 * @private
 */
sap.ui.core.ScrollBar.prototype.setNativeScrollPosition = function(iNativeScrollPos) {
	if (this._$ScrollDomRef) {
		if (this.getVertical()) {
			this._$ScrollDomRef.scrollTop(iNativeScrollPos);
		} else {
			this._$ScrollDomRef.scrollLeft(iNativeScrollPos);
		}
	}
}
}; // end of sap/ui/core/ScrollBar.js
if ( !jQuery.sap.isDeclared('sap.ui.core.SeparatorItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.SeparatorItem.
jQuery.sap.declare("sap.ui.core.SeparatorItem");




/**
 * Constructor for a new SeparatorItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An item that provides a visual separation. It borrows all its methods from the classes sap.ui.core.Item, sap.ui.core.Element,
 * sap.ui.base.EventProvider, and sap.ui.base.Object.
 * @extends sap.ui.core.Item
 *
 * @author SAP AG 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.SeparatorItem
 */
sap.ui.core.Item.extend("sap.ui.core.SeparatorItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core"
}});


/**
 * Creates a new subclass of class sap.ui.core.SeparatorItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.SeparatorItem.extend
 * @function
 */


// Start of sap\ui\core\SeparatorItem.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.core.SeparatorItem.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap/ui/core/SeparatorItem.js
if ( !jQuery.sap.isDeclared('sap.ui.core.Title') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.Title.
jQuery.sap.declare("sap.ui.core.Title");




/**
 * Constructor for a new Title.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getLevel level} : sap.ui.core.TitleLevel (default: sap.ui.core.TitleLevel.Auto)</li>
 * <li>{@link #getEmphasized emphasized} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents a title element that can be used for aggregation with other controls
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @since 1.16.0
 * @name sap.ui.core.Title
 */
sap.ui.core.Element.extend("sap.ui.core.Title", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"level" : {type : "sap.ui.core.TitleLevel", group : "Appearance", defaultValue : sap.ui.core.TitleLevel.Auto},
		"emphasized" : {type : "boolean", group : "Appearance", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.Title with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.Title.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the title text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.core.Title#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.core.Title} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Title#setText
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Defines the URL for icon display
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.core.Title#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.core.Title} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Title#setIcon
 * @function
 */


/**
 * Getter for property <code>level</code>.
 * Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.
 * 
 * Currently not all controls using the Title.control supporting this property.
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.ui.core.TitleLevel} the value of property <code>level</code>
 * @public
 * @name sap.ui.core.Title#getLevel
 * @function
 */

/**
 * Setter for property <code>level</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.ui.core.TitleLevel} oLevel  new value for property <code>level</code>
 * @return {sap.ui.core.Title} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Title#setLevel
 * @function
 */


/**
 * Getter for property <code>emphasized</code>.
 * If set the title is displayed emphasized.
 * This feature is nor supported by all controls using the Title.control.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>emphasized</code>
 * @public
 * @name sap.ui.core.Title#getEmphasized
 * @function
 */

/**
 * Setter for property <code>emphasized</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEmphasized  new value for property <code>emphasized</code>
 * @return {sap.ui.core.Title} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.Title#setEmphasized
 * @function
 */


// Start of sap\ui\core\Title.js

}; // end of sap/ui/core/Title.js
if ( !jQuery.sap.isDeclared('sap.ui.core.TooltipBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.TooltipBase.
jQuery.sap.declare("sap.ui.core.TooltipBase");




/**
 * Constructor for a new TooltipBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: "")</li>
 * <li>{@link #getOpenDuration openDuration} : int (default: 200)</li>
 * <li>{@link #getCloseDuration closeDuration} : int (default: 200)</li>
 * <li>{@link #getMyPosition myPosition} : sap.ui.core.Dock (default: 'begin top')</li>
 * <li>{@link #getAtPosition atPosition} : sap.ui.core.Dock (default: 'begin bottom')</li>
 * <li>{@link #getOffset offset} : string (default: '10 3')</li>
 * <li>{@link #getCollision collision} : sap.ui.core.Collision (default: 'flip')</li>
 * <li>{@link #getOpenDelay openDelay} : int (default: 500)</li>
 * <li>{@link #getCloseDelay closeDelay} : int (default: 100)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Abstract class that can be extended in order to implement any extended tooltip. For example, RichTooltip Control is based on it. It provides the opening/closing behavior and the main "text" property.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.TooltipBase
 */
sap.ui.core.Control.extend("sap.ui.core.TooltipBase", { metadata : {

	// ---- object ----
	"abstract" : true,

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : ""},
		"openDuration" : {type : "int", group : "Behavior", defaultValue : 200},
		"closeDuration" : {type : "int", group : "Behavior", defaultValue : 200},
		"myPosition" : {type : "sap.ui.core.Dock", group : "Behavior", defaultValue : 'begin top'},
		"atPosition" : {type : "sap.ui.core.Dock", group : "Behavior", defaultValue : 'begin bottom'},
		"offset" : {type : "string", group : "Behavior", defaultValue : '10 3'},
		"collision" : {type : "sap.ui.core.Collision", group : "Behavior", defaultValue : 'flip'},
		"openDelay" : {type : "int", group : "Misc", defaultValue : 500},
		"closeDelay" : {type : "int", group : "Misc", defaultValue : 100}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.TooltipBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.TooltipBase.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The text that is shown in the tooltip that extends the TooltipBase class, for example in RichTooltip.
 *
 * Default value is <code>""</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.core.TooltipBase#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.TooltipBase#setText
 * @function
 */


/**
 * Getter for property <code>openDuration</code>.
 * Optional. Open Duration in milliseconds.
 *
 * Default value is <code>200</code>
 *
 * @return {int} the value of property <code>openDuration</code>
 * @public
 * @name sap.ui.core.TooltipBase#getOpenDuration
 * @function
 */

/**
 * Setter for property <code>openDuration</code>.
 *
 * Default value is <code>200</code> 
 *
 * @param {int} iOpenDuration  new value for property <code>openDuration</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.TooltipBase#setOpenDuration
 * @function
 */


/**
 * Getter for property <code>closeDuration</code>.
 * Optional. Close Duration in milliseconds.
 *
 * Default value is <code>200</code>
 *
 * @return {int} the value of property <code>closeDuration</code>
 * @public
 * @name sap.ui.core.TooltipBase#getCloseDuration
 * @function
 */

/**
 * Setter for property <code>closeDuration</code>.
 *
 * Default value is <code>200</code> 
 *
 * @param {int} iCloseDuration  new value for property <code>closeDuration</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.TooltipBase#setCloseDuration
 * @function
 */


/**
 * Getter for property <code>myPosition</code>.
 * Optional. My position defines which position on the extended tooltip being positioned to align with the target control.
 *
 * Default value is <code>begin top</code>
 *
 * @return {sap.ui.core.Dock} the value of property <code>myPosition</code>
 * @public
 * @name sap.ui.core.TooltipBase#getMyPosition
 * @function
 */

/**
 * Setter for property <code>myPosition</code>.
 *
 * Default value is <code>begin top</code> 
 *
 * @param {sap.ui.core.Dock} sMyPosition  new value for property <code>myPosition</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.TooltipBase#setMyPosition
 * @function
 */


/**
 * Getter for property <code>atPosition</code>.
 * Optional. At position defines which position on the target control to align the positioned tooltip.
 *
 * Default value is <code>begin bottom</code>
 *
 * @return {sap.ui.core.Dock} the value of property <code>atPosition</code>
 * @public
 * @name sap.ui.core.TooltipBase#getAtPosition
 * @function
 */

/**
 * Setter for property <code>atPosition</code>.
 *
 * Default value is <code>begin bottom</code> 
 *
 * @param {sap.ui.core.Dock} sAtPosition  new value for property <code>atPosition</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.TooltipBase#setAtPosition
 * @function
 */


/**
 * Getter for property <code>offset</code>.
 * Optional. Offset adds these left-top values to the calculated position.
 * Example: "10 3".
 *
 * Default value is <code>10 3</code>
 *
 * @return {string} the value of property <code>offset</code>
 * @public
 * @name sap.ui.core.TooltipBase#getOffset
 * @function
 */

/**
 * Setter for property <code>offset</code>.
 *
 * Default value is <code>10 3</code> 
 *
 * @param {string} sOffset  new value for property <code>offset</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.TooltipBase#setOffset
 * @function
 */


/**
 * Getter for property <code>collision</code>.
 * Optional. Collision - when the positioned element overflows the window in some direction, move it to an alternative position.
 *
 * Default value is <code>flip</code>
 *
 * @return {sap.ui.core.Collision} the value of property <code>collision</code>
 * @public
 * @name sap.ui.core.TooltipBase#getCollision
 * @function
 */

/**
 * Setter for property <code>collision</code>.
 *
 * Default value is <code>flip</code> 
 *
 * @param {sap.ui.core.Collision} sCollision  new value for property <code>collision</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.TooltipBase#setCollision
 * @function
 */


/**
 * Getter for property <code>openDelay</code>.
 * Opening delay of the tooltip in milliseconds
 *
 * Default value is <code>500</code>
 *
 * @return {int} the value of property <code>openDelay</code>
 * @public
 * @name sap.ui.core.TooltipBase#getOpenDelay
 * @function
 */

/**
 * Setter for property <code>openDelay</code>.
 *
 * Default value is <code>500</code> 
 *
 * @param {int} iOpenDelay  new value for property <code>openDelay</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.TooltipBase#setOpenDelay
 * @function
 */


/**
 * Getter for property <code>closeDelay</code>.
 * Closing delay of the tooltip in milliseconds
 *
 * Default value is <code>100</code>
 *
 * @return {int} the value of property <code>closeDelay</code>
 * @public
 * @name sap.ui.core.TooltipBase#getCloseDelay
 * @function
 */

/**
 * Setter for property <code>closeDelay</code>.
 *
 * Default value is <code>100</code> 
 *
 * @param {int} iCloseDelay  new value for property <code>closeDelay</code>
 * @return {sap.ui.core.TooltipBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.TooltipBase#setCloseDelay
 * @function
 */


// Start of sap\ui\core\TooltipBase.js


/**
 * Return the popup to use but do not expose it to the outside.
 * @type sap.ui.commons.Popup
 * @return The popup to use
 * @private
 */
sap.ui.core.TooltipBase.prototype._getPopup = jQuery.sap.getter((function() {
		var oPopup = new sap.ui.core.Popup();
			oPopup.setShadow(true);
			return oPopup;
		}())
);

/**
 * When a control that has a Tooltip gets the focus, this method is called.
 * @param {jQuery.EventObject} oEvent The event that occurred on the Control that has extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.onfocusin = function(oEvent) {

	var oSC = jQuery(oEvent.target).control(0);
	if (oSC != null) {
		var oDomRef = oSC.getFocusDomRef();
		this.sStoredTooltip = null;
		if (oDomRef.title && oDomRef.title!= "") {
			this.sStoredTooltip = oDomRef.title;
			oDomRef.title = "";
		}

		var oPopup = this._getPopup();
		if (!(oPopup.isOpen() && oPopup.getContent() == this)) {
			// Update Tooltip or create a new span with texts.
			sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);
		}

		// Attach accessibility info to the control oSC
		var sValue = oDomRef.getAttribute("aria-describedby");
		var sIdsString = this.getId() + "-title " + this.getId() +"-txt";
		if (sValue == null || sValue== "" ) {
			oDomRef.setAttribute("aria-describedby", sIdsString);
		}
		else if (sValue.indexOf(sIdsString) == -1) {
			oDomRef.setAttribute("aria-describedby", sValue + " " + sIdsString);
		}
	}
};

/**
 * When a control that has a Tooltip looses the focus, this method is called.
 * @param {jQuery.EventObject} oEvent The event that occurred on the extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.onfocusout = function(oEvent) {
	var oSC = jQuery(oEvent.target).control(0);
	if (oSC != null) {

		var oDomRef = oSC.getFocusDomRef();
		if (this.sStoredTooltip) {
			oDomRef.title = this.sStoredTooltip;
		}

		// Detach accessibility information from control oSC.
		var sValue = oDomRef.getAttribute("aria-describedby");
		var sIdsString = this.getId() + "-title " + this.getId() +"-txt";
		if (sValue && sValue.indexOf(sIdsString) >= 0){
			if (jQuery.trim(sValue) == sIdsString) {
				oDomRef.removeAttribute("aria-describedby");
			}
			else  {
				sValue = sValue.replace(sIdsString, "");
				oDomRef.setAttribute("aria-describedby", sValue);
			}
		}
	}
	if (sap.ui.core.TooltipBase.sOpenTimeout) {
		jQuery.sap.clearDelayedCall(sap.ui.core.TooltipBase.sOpenTimeout);
		sap.ui.core.TooltipBase.sOpenTimeout = undefined;
	}

	// Avoid closing the popup when there is a move inside the control to another control or element (for example div)
	this.sCloseNowTimeout = jQuery.sap.delayedCall(this.getCloseDelay(), this, "closePopup");
};

/**
 *	Check if the parameter is a standard browser Tooltip.
 * @return {boolean} - true if the Tooltip is a standard tooltip type of string. False if not a string or empty.
 * @private
 */
sap.ui.core.TooltipBase.prototype.isStandardTooltip = function(oTooltip) {
	return  (typeof oTooltip === "string" &&  (jQuery.trim(oTooltip)) !== "");
};

/**
* Handle the mouseover event of a Control that has a Tooltip.
* @param {jQuery.EventObject} oEvent - The event that occurred on the Control.
* @private
 */
sap.ui.core.TooltipBase.prototype.onmouseover = function(oEvent) {

	// The Element or Control that initiated the event.
	var oEventSource = jQuery(oEvent.target).control(0);
    //jQuery.sap.log.debug("MOUSE OVER    " +  oEventSource + "  " + jQuery(oEvent.currentTarget).control(0));
	if ( oEventSource != null) {

		// If we move in the tooltip itself then do not close the tooltip.
		if ( oEventSource === this) {
			if (this.sCloseNowTimeout) {
					jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
					this.sCloseNowTimeout = null;
				}
				oEvent.stopPropagation();
				oEvent.preventDefault();
				return;
		}
		// The current Element or Control within the event bubbling phase.
		var oCurrentElement = jQuery(oEvent.currentTarget).control(0);
		// Cancel close event if we move from parent with extended tooltip to child without own tooltip
		if ( oCurrentElement !== oEventSource &&  !this.isStandardTooltip(oEventSource.getTooltip()))  {
			if (this.sCloseNowTimeout){
				jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
				this.sCloseNowTimeout = null;
				oEvent.stopPropagation();
				oEvent.preventDefault();
				return;
			}
		}

		// Indicates the element being exited.
		var oLeftElement = jQuery(oEvent.relatedTarget).control(0);
		if (oLeftElement) {

			// Cancel close event if we move from child without own tooltip to the parent with rtt - current element has to have rtt.
			if (oLeftElement.getParent()){
				if (oLeftElement.getParent() === oCurrentElement && oCurrentElement === oEventSource) {
					// It is a child of the current element and has no tooltip
					var oLeftElementTooltip = oLeftElement.getTooltip();
					if ( !this.isStandardTooltip(oLeftElementTooltip) && (!oLeftElementTooltip || !(oLeftElementTooltip instanceof sap.ui.core.TooltipBase))) {
						if (this.sCloseNowTimeout){
							jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
							this.sCloseNowTimeout = null;
								oEvent.stopPropagation();
								oEvent.preventDefault();
							return;
						}
					}
				}
			}
		}

		// Open the popup
		if (this._currentControl === oEventSource || !this.isStandardTooltip(oEventSource.getTooltip())) {
			// Set all standard tooltips to empty string
			this.removeStandardTooltips(oEventSource);
			// Open with delay 0,5 sec.
			if (sap.ui.core.TooltipBase.sOpenTimeout) {
				jQuery.sap.clearDelayedCall(sap.ui.core.TooltipBase.sOpenTimeout);
			}
			sap.ui.core.TooltipBase.sOpenTimeout = jQuery.sap.delayedCall(this.getOpenDelay(), this, "openPopup", [this._currentControl]);
			// We need this for the scenario if the both a child and his parent have an RichTooltip
			oEvent.stopPropagation();
			oEvent.preventDefault();
		}
	}
};

/**
 * Handle the mouseout event  of a Control that has a Tooltip.
 * @param {jQuery.EventObject} oEvent Event that occurred on the Control that has extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.onmouseout = function(oEvent) {
	//jQuery.sap.log.debug("MOUSE OUT    " + jQuery(oEvent.target).control(0) + "   "+ jQuery(oEvent.currentTarget).control(0) );
	if (sap.ui.core.TooltipBase.sOpenTimeout) {
		jQuery.sap.clearDelayedCall(sap.ui.core.TooltipBase.sOpenTimeout);
		sap.ui.core.TooltipBase.sOpenTimeout = undefined;
	}
	// Avoid closing the popup when there is a move inside the control to another control or element (for example div)
	if (!this.sCloseNowTimeout) {
		this.sCloseNowTimeout = jQuery.sap.delayedCall(this.getCloseDelay(), this, "closePopup");
	}
	this.restoreStandardTooltips();
	oEvent.stopPropagation();
	oEvent.preventDefault();
};

/**
 * Close the popup holding the content of the tooltip.
 * Clears all delayed calls for closing this popup as those are not needed anymore.
 * @private
 */
sap.ui.core.TooltipBase.prototype.closePopup = function() {
	
	var oPopup = this._getPopup();
	
	if (this.sCloseNowTimeout) {
		jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
	}
	this.sCloseNowTimeout = undefined;
	
	oPopup.attachClosed(this.handleClosed, this);
	oPopup.close();
	//jQuery.sap.log.debug("CLOSE POPUP  " + this.getId());
	this.restoreStandardTooltips();
};

sap.ui.core.TooltipBase.prototype.handleClosed = function(){
	this._getPopup().detachClosed(jQuery.proxy(this.handleClosed, this));
	this.fireEvent(sap.ui.core.Popup.M_EVENTS.closed);
};


/**
 * Open the popup holding the content of the tooltip.
 * @param {Object} oSC - the Control that has extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.openPopup = function(oSC) {
	if (oSC.getTooltip() != null) {

		// Clear Delayed Call if exist
		if (this.sCloseNowTimeout){
			jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
			this.sCloseNowTimeout = null;
			return;
		}

		// If already opened with the needed content then return
		var oPopup = this._getPopup();
		if (oPopup.isOpen() && oPopup.getContent() == this) {
			return;
		}

		// Tooltip will be displayed. Ensure the content is rendered. As this is no control, the popup will not take care of rendering.
		sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);

		// Open popup
		var oDomRef = oSC.getDomRef();
		oPopup.setContent(this);
		oPopup.setPosition(this.getMyPosition(), this.getAtPosition(), oDomRef, this.getOffset(), this.getCollision());
		oPopup.setDurations(this.getOpenDuration(), this.getCloseDuration());
		oPopup.open();
		this.removeStandardTooltips(this._currentControl);
	}
};

/**
 * Switch off the browser standard tooltips and store then in an array.
 * @private
*/
sap.ui.core.TooltipBase.prototype.removeStandardTooltips = function() {

	var oDomRef = this._currentControl.getDomRef();
	if (!this.aStoredTooltips) {
		this.aStoredTooltips = [];
	} else{
		return;
	}

	var tooltip = "";
	while (oDomRef && !(oDomRef === document)) {
		tooltip = oDomRef.title;
		if ( tooltip ) {
			this.aStoredTooltips.push({ domref : oDomRef, tooltip : tooltip });
			oDomRef.title = "";
		}
		oDomRef = oDomRef.parentNode;
	}

	// Do it for the specified elements under the root Dom ref.
	if (this._currentControl.getTooltipDomRefs) {
		// oDomRefs is jQuery Object that contains DOM nodes of the elements to remove the tooltips
		var aDomRefs = this._currentControl.getTooltipDomRefs();
		for (var i = 0; i < aDomRefs.length; i++) {
			oDomRef = aDomRefs[i];
			if (oDomRef) {
				tooltip = oDomRef.title;
				if (tooltip) {
					this.aStoredTooltips.push({ domref : oDomRef, tooltip : tooltip });
					oDomRef.title = "";
				}
			}
		}
	}
};

/**
 * Restore the standard browser tooltips.
 * @private
 */
sap.ui.core.TooltipBase.prototype.restoreStandardTooltips = function() {

	var oPopup = this._getPopup();
	var eState = oPopup.getOpenState();
	if (eState === sap.ui.core.OpenState.OPEN || eState === sap.ui.core.OpenState.OPENING) {
		//jQuery.sap.log.debug(oPopup.getOpenState());
		return;
	}
	if (sap.ui.core.TooltipBase.sOpenTimeout){
		return;
	}
	if (this.aStoredTooltips){
		for (var i = 0; i < this.aStoredTooltips.length; i++) {
			var oDomRef = this.aStoredTooltips[i].domref;
			oDomRef.title = this.aStoredTooltips[i].tooltip;
		}
	}
	this.aStoredTooltips = null;
};

/* Store reference to original setParent function */
sap.ui.core.TooltipBase.prototype._setParent = sap.ui.core.TooltipBase.prototype.setParent;

/**
 * Defines the new parent of this TooltipBase using {@link sap.ui.core.Element#setParent}.
 * Additionally closes the Tooltip.
 *
 * @param {sap.ui.core.Element} oParent The element that becomes this element's parent.
 * @param {string} sAggregationName - The name of the parent element's aggregation.
 * @private
 */
sap.ui.core.TooltipBase.prototype.setParent = function(oParent, sAggregationName) {
	// As there is a new parent, close popup.
	var _oPopup = this._getPopup(); 
	if (_oPopup && _oPopup.isOpen()) {
		this.closePopup();
	}
	this._setParent.apply(this, arguments);
};
/**
 * Handle the key down event Ctrl+i and ESCAPE.
 * @param {jQuery.Event} oEvent - the event that occurred on the Parent of the Extended Tooltip.
 * @private
 */
sap.ui.core.TooltipBase.prototype.onkeydown = function(oEvent) {
	// Ctrl is pressed together with "i" - Open Rich tooltip.
	if(oEvent.ctrlKey && oEvent.which == jQuery.sap.KeyCodes.I) {
		// The Element or Control that initiated the event.

		var oEventSource = jQuery(oEvent.target).control(0);
		if (oEventSource != null) {
			// If the current control is the event source or event source does not have a standard tooltip
			if (this._currentControl === oEventSource || !this.isStandardTooltip(oEventSource.getTooltip())) {

				// Set all standard tooltips to empty string
				this.removeStandardTooltips(oEventSource);

				// Open extended tooltip
				this.openPopup( this._currentControl);

				oEvent.preventDefault();
				oEvent.stopPropagation();
			}
		}
	}
	// If Ecs is pressed then close the Rich Tooltip.
	else if(oEvent.which == jQuery.sap.KeyCodes.ESCAPE) {
		if (sap.ui.core.TooltipBase.sOpenTimeout) {
			jQuery.sap.clearDelayedCall(sap.ui.core.TooltipBase.sOpenTimeout);
			sap.ui.core.TooltipBase.sOpenTimeout = undefined;
		}

		
		var bWasOpen = this.oPopup && this.oPopup.isOpen();
		this.closePopup();
		if (bWasOpen) {
			// Only prevent event propagation when there actually was an open Popup
			// that has now been closed
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
		
	}
};

/**
 * Closes the tooltip if open or clears the open timer.
 * @private
 */
sap.ui.core.TooltipBase.prototype._closeOrPreventOpen = function() {
	var oPopup = this._getPopup();
	if (oPopup.isOpen()) {
		this.closePopup();
	}else if (sap.ui.core.TooltipBase.sOpenTimeout) {
		jQuery.sap.clearDelayedCall(sap.ui.core.TooltipBase.sOpenTimeout);
		sap.ui.core.TooltipBase.sOpenTimeout = undefined;
	}
};

}; // end of sap/ui/core/TooltipBase.js
if ( !jQuery.sap.isDeclared('sap.ui.core.VariantLayoutData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.VariantLayoutData.
jQuery.sap.declare("sap.ui.core.VariantLayoutData");




/**
 * Constructor for a new VariantLayoutData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMultipleLayoutData multipleLayoutData} : sap.ui.core.LayoutData[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Allows to add multiple LayoutData to one control in case that a easy switch of layouts (e.g. in a Form) is needed.
 * @extends sap.ui.core.LayoutData
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @since 1.9.2
 * @name sap.ui.core.VariantLayoutData
 */
sap.ui.core.LayoutData.extend("sap.ui.core.VariantLayoutData", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	aggregations : {
    	"multipleLayoutData" : {type : "sap.ui.core.LayoutData", multiple : true, singularName : "multipleLayoutData"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.VariantLayoutData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.VariantLayoutData.extend
 * @function
 */


/**
 * Getter for aggregation <code>multipleLayoutData</code>.<br/>
 * Allows multiple LayoutData.
 * 
 * @return {sap.ui.core.LayoutData[]}
 * @public
 * @name sap.ui.core.VariantLayoutData#getMultipleLayoutData
 * @function
 */


/**
 * Inserts a multipleLayoutData into the aggregation named <code>multipleLayoutData</code>.
 *
 * @param {sap.ui.core.LayoutData}
 *          oMultipleLayoutData the multipleLayoutData to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the multipleLayoutData should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the multipleLayoutData is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the multipleLayoutData is inserted at 
 *             the last position        
 * @return {sap.ui.core.VariantLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.VariantLayoutData#insertMultipleLayoutData
 * @function
 */

/**
 * Adds some multipleLayoutData <code>oMultipleLayoutData</code> 
 * to the aggregation named <code>multipleLayoutData</code>.
 *
 * @param {sap.ui.core.LayoutData}
 *            oMultipleLayoutData the multipleLayoutData to add; if empty, nothing is inserted
 * @return {sap.ui.core.VariantLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.VariantLayoutData#addMultipleLayoutData
 * @function
 */

/**
 * Removes an multipleLayoutData from the aggregation named <code>multipleLayoutData</code>.
 *
 * @param {int | string | sap.ui.core.LayoutData} vMultipleLayoutData the multipleLayoutData to remove or its index or id
 * @return {sap.ui.core.LayoutData} the removed multipleLayoutData or null
 * @public
 * @name sap.ui.core.VariantLayoutData#removeMultipleLayoutData
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>multipleLayoutData</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.LayoutData[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.core.VariantLayoutData#removeAllMultipleLayoutData
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.LayoutData</code> in the aggregation named <code>multipleLayoutData</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.LayoutData}
 *            oMultipleLayoutData the multipleLayoutData whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.core.VariantLayoutData#indexOfMultipleLayoutData
 * @function
 */
	

/**
 * Destroys all the multipleLayoutData in the aggregation 
 * named <code>multipleLayoutData</code>.
 * @return {sap.ui.core.VariantLayoutData} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.VariantLayoutData#destroyMultipleLayoutData
 * @function
 */


// Start of sap\ui\core\VariantLayoutData.js

}; // end of sap/ui/core/VariantLayoutData.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.View') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.View.
jQuery.sap.declare("sap.ui.core.mvc.View");




/**
 * Constructor for a new mvc/View.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getViewName viewName} : string</li>
 * <li>{@link #getDisplayBlock displayBlock} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.core.mvc.View#event:afterInit afterInit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.core.mvc.View#event:beforeExit beforeExit} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.core.mvc.View#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.core.mvc.View#event:beforeRendering beforeRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * View
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.mvc.View
 */
sap.ui.core.Control.extend("sap.ui.core.mvc.View", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getController"
	],

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"viewName" : {type : "string", group : "Misc", defaultValue : null},
		"displayBlock" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	events : {
		"afterInit" : {}, 
		"beforeExit" : {}, 
		"afterRendering" : {}, 
		"beforeRendering" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.mvc.View with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.mvc.View.extend
 * @function
 */

sap.ui.core.mvc.View.M_EVENTS = {'afterInit':'afterInit','beforeExit':'beforeExit','afterRendering':'afterRendering','beforeRendering':'beforeRendering'};


/**
 * Getter for property <code>width</code>.
 * The width
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.core.mvc.View#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.core.mvc.View#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#setHeight
 * @function
 */


/**
 * Getter for property <code>viewName</code>.
 * Name of the View
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>viewName</code>
 * @public
 * @name sap.ui.core.mvc.View#getViewName
 * @function
 */

/**
 * Setter for property <code>viewName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sViewName  new value for property <code>viewName</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#setViewName
 * @function
 */


/**
 * Getter for property <code>displayBlock</code>.
 * Whether the CSS display should be set to "block".
 * Set this to "true" if the default display "inline-block" causes a vertical scrollbar with Views that are set to 100% height.
 * Do not set this to "true" if you want to display other content in the same HTML parent on either side of the View (setting to "true" may push that other content to the next/previous line).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displayBlock</code>
 * @public
 * @name sap.ui.core.mvc.View#getDisplayBlock
 * @function
 */

/**
 * Setter for property <code>displayBlock</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplayBlock  new value for property <code>displayBlock</code>
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#setDisplayBlock
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Child Controls of the view
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.core.mvc.View#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.core.mvc.View#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.core.mvc.View#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.core.mvc.View#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#destroyContent
 * @function
 */


/**
 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree). 
 *
 * @name sap.ui.core.mvc.View#afterInit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterInit' event of this <code>sap.ui.core.mvc.View</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.core.mvc.View</code>.<br/> itself. 
 *  
 * Fired when the View has parsed the UI description and instantiated the contained controls (/control tree). 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code>.<br/> itself.
 *
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#attachAfterInit
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterInit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#detachAfterInit
 * @function
 */

/**
 * Fire event afterInit to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.mvc.View#fireAfterInit
 * @function
 */


/**
 * Fired when the view has received the request to destroy itself, but before it has destroyed anything. 
 *
 * @name sap.ui.core.mvc.View#beforeExit
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeExit' event of this <code>sap.ui.core.mvc.View</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.core.mvc.View</code>.<br/> itself. 
 *  
 * Fired when the view has received the request to destroy itself, but before it has destroyed anything. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code>.<br/> itself.
 *
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#attachBeforeExit
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeExit' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#detachBeforeExit
 * @function
 */

/**
 * Fire event beforeExit to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.mvc.View#fireBeforeExit
 * @function
 */


/**
 * Fired when the View has been (re-)rendered and its HTML is present in the DOM. 
 *
 * @name sap.ui.core.mvc.View#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.core.mvc.View</code>.<br/> itself. 
 *  
 * Fired when the View has been (re-)rendered and its HTML is present in the DOM. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code>.<br/> itself.
 *
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.mvc.View#fireAfterRendering
 * @function
 */


/**
 * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc. 
 *
 * @name sap.ui.core.mvc.View#beforeRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.core.mvc.View</code>.<br/> itself. 
 *  
 * Fired before this View is re-rendered. Use to unbind event handlers from HTML elements etc. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ui.core.mvc.View</code>.<br/> itself.
 *
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#attachBeforeRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeRendering' event of this <code>sap.ui.core.mvc.View</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.mvc.View#detachBeforeRendering
 * @function
 */

/**
 * Fire event beforeRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.mvc.View} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.mvc.View#fireBeforeRendering
 * @function
 */


/**
 * Returns the view's Controller instance (if any)
 *
 * @name sap.ui.core.mvc.View.prototype.getController
 * @function

 * @type object
 * @public
 */


// Start of sap\ui\core\mvc\View.js
(function() {
	/**
	 * @namespace
	 * @name sap.ui.core.mvc
	 * @public
	 */

	/**
	 * initialize the View and connect (create if no instance is given) the Controller
	 *
	 * @private
	 */
	sap.ui.core.mvc.View.prototype._initCompositeSupport = function(mSettings) {

		// init View with constructor settings
		// (e.g. parse XML or identify default controller)

		// make user specific data available during view instantiation
		this.oViewData = mSettings.viewData;
		// remember the name of this View
		this.sViewName = mSettings.viewName;

		if (this.initViewSettings) {
			this.initViewSettings(mSettings);
		}

		createAndConnectController(this, mSettings);

		// the controller is connected now => notify the view implementations
		if (this.onControllerConnected) {
			this.onControllerConnected(this.oController);
		}

		// notifies the listeners that the View is initialized
		this.fireAfterInit();

	};

	/**
	 * may return null for controller-less View
	 *
	 * @return Controller of the View
	 * @public
	 */
	sap.ui.core.mvc.View.prototype.getController = function() {
		return this.oController;
	};

	/**
	 * returns an Element by its id in the context of the View
	 *
	 * @return Element by its id
	 * @public
	 */
	sap.ui.core.mvc.View.prototype.byId = function(sId) {
		return sap.ui.getCore().byId(this.createId(sId));
	};

	/**
	 * creates an id for an Element prefixed with the view id
	 *
	 * @return prefixed id
	 * @public
	 */
	sap.ui.core.mvc.View.prototype.createId = function(sId) {
		if (!this.isPrefixedId(sId)) {
			// views have 2 dashes as separator, components 3 and controls/elements 1
			sId = this.getId() + "--" + sId;
		}
		return sId;
	};
	
	/**
	 * Checks whether the given ID is already prefixed with this View's ID
	 *
	 * @param {string} potentially prefixed id
	 * @return whether the ID is already prefixed
	 */
	sap.ui.core.mvc.View.prototype.isPrefixedId = function(sId) {
		return (sId && sId.indexOf(this.getId() + "--") === 0);
	};

	/**
	 * creates and connects the controller if the controller is not given in the
	 * mSettings
	 *
	 * @private
	 */
	var createAndConnectController = function(oThis, mSettings) {

		// only set when used internally
		var oController = mSettings.controller;

		// check for default controller
		if (!oController && oThis.getControllerName) {
			// get optional default controller name
			var defaultController = oThis.getControllerName();
			if (defaultController) {
				// create controller
				oController = sap.ui.controller(defaultController);
			}
		}

		if (sap.ui.getCore().getConfiguration().getDesignMode() &&
			!sap.ui.getCore().getConfiguration().getSuppressDeactivationOfControllerCode ()) {
			// Stub all controller methods in design mode
			for (var sMethod in oController) {
				if (typeof oController[sMethod] === "function"
					// Do not stub abstract controller class methods as they are used internally.
					// Do not use oController.hasOwnProperty(sMethod),
					// as there could be a base class of the controller and we want only skip the methods of abstract controller
					&& !sap.ui.core.mvc.Controller.prototype[sMethod])
				{
					oController[sMethod] = function() {};
				}
			}
		}

		if ( oController ) {
			oThis.oController = oController;
			// connect controller
			oController.connectToView(oThis);
		}
	};

	/**
	 * Returns user specific data object
	 *
	 * @return object viewData
	 * @public
	 */
	sap.ui.core.mvc.View.prototype.getViewData = function(){
		return this.oViewData;
	};

	/**
	 * exit hook
	 *
	 * @private
	 */
	sap.ui.core.mvc.View.prototype.exit = function() {
		this.fireBeforeExit();
		this.oController = null;
	};

	/**
	 * onAfterRendering hook
	 *
	 * @private
	 */
	sap.ui.core.mvc.View.prototype.onAfterRendering = function() {
		this.fireAfterRendering();
	};

	/**
	 * onBeforeRendering hook
	 *
	 * @private
	 */
	sap.ui.core.mvc.View.prototype.onBeforeRendering = function() {
		this.fireBeforeRendering();
	};

	/**	
	 * Override clone method to avoid conflict between generic cloning of content
	 * and content creation as defined by the UI5 Model View Controller lifecycle.
	 * 
	 * For more details see the development guide section about Model View Controller in UI5.
	 * 
	 * @param {String} [sIdSuffix] a suffix to be appended to the cloned element id
	 * @param {Array} [aLocalIds] an array of local IDs within the cloned hierarchy (internally used)
	 * @return {sap.ui.core.Element} reference to the newly created clone
	 * @protected
	 */
	sap.ui.core.mvc.View.prototype.clone = function(sIdSuffix, aLocalIds) {
		var mSettings = {}, sKey, oClone;
		//Clone properties (only those with non-default value)
		for(sKey in this.mProperties  && !(this.isBound && this.isBound(sKey))) {
			if ( this.mProperties.hasOwnProperty(sKey) ) {
				mSettings[sKey] = this.mProperties[sKey];
			}
		}
		oClone = sap.ui.core.Control.prototype.clone.call(this, sIdSuffix, aLocalIds, {cloneChildren:false, cloneBindings: true});
		oClone.applySettings(mSettings);
		return oClone;
	};
	
	/**
	 * Creates a view of the given type, name and with the given id.
	 *
	 * The <code>oView</code> configuration object can have the following properties for the view
	 * instantiation:
	 * <ul>
	 * <li>The ID <code>oView.id</code> specifies an ID for the View instance. If no ID is given,
	 * an ID will be generated.</li>
	 * <li>The view name <code>oView.viewName</code> corresponds to an XML module that can be loaded
	 * via the module system (oView.viewName + suffix ".view.xml")</li>
	 * <li>The controller instance <code>oView.controller</code> must be a valid controller implementation.
	 * The given controller instance overrides the controller defined in the view definition</li>
	 * <li>The view type <code>oView.type</code> specifies what kind of view will be instantiated. All valid
	 * view types are listed in the enumeration sap.ui.core.mvc.ViewType.</li>
	 * <li>The view data <code>oView.viewData</code> can hold user specific data. This data is available
	 * during the whole lifecycle of the view and the controller</li>
	 * </ul>
	 *
	 * @param {string} sId id of the newly created view, only allowed for instance creation
	 * @param {object} [vView] the view configuration object
	 * @public
	 * @static
	 * @return {sap.ui.core.mvc.View} the created View instance
	 */
	sap.ui.view = function(sId, vView, sType /* used by factory functions */) {
		var view = null, oView = {};
		
		// if the id is a configuration object or a string
		// and the vView is not defined we shift the parameters
		if (typeof sId === "object" ||
				typeof sId === "string" && vView === undefined) {
			vView = sId;
			sId = undefined;
		}
		
		// prepare the parameters
		if (vView) {
			if (typeof vView === "string") {
				oView.viewName = vView;
			} else {
				oView = vView;
			}
		}
		
		// apply the id if defined
		if (sId) {
			oView.id = sId;
		}
		
		// apply the type defined in specialized factory functions
		if (sType) {
			oView.type = sType;
		}
		
		// view replacement
		if (sap.ui.core.CustomizingConfiguration) {
			var customViewConfig = sap.ui.core.CustomizingConfiguration.getViewReplacement(oView.viewName);
			if (customViewConfig) {
				jQuery.sap.log.info("Customizing: View replacement for view '" + oView.viewName + "' found and applied: " + customViewConfig.viewName + " (type: " + customViewConfig.type + ")");
				jQuery.extend(oView, customViewConfig);
			}
		}

		// view creation
		if (!oView.type) {
			throw new Error("No view type specified.");
		} else if (oView.type === sap.ui.core.mvc.ViewType.JS) {
			view = new sap.ui.core.mvc.JSView(oView);
		} else if (oView.type === sap.ui.core.mvc.ViewType.JSON) {
			view = new sap.ui.core.mvc.JSONView(oView);
		} else if (oView.type === sap.ui.core.mvc.ViewType.XML) {
			view = new sap.ui.core.mvc.XMLView(oView);
		} else if (oView.type === sap.ui.core.mvc.ViewType.HTML) {
			view = new sap.ui.core.mvc.HTMLView(oView);
		} else if (oView.type === sap.ui.core.mvc.ViewType.Template) {
			view = new sap.ui.core.mvc.TemplateView(oView);
		} else { // unknown view type
			throw new Error("Unknown view type "+oView.type+" specified.");
		}
		return view;
	};

	
	/**
	 * An (optional) method to be implemented by Views.
	 * When no controller instance is given at View instantiation time AND this method exists and returns the (package and class) name of a controller,
	 * the View tries to load and instantiate the controller and to connect it to itself.
	 * 
	 * @return {string} the name of the controller
	 * @public
	 * @name sap.ui.core.mvc.View#getControllerName
	 * @function
	 */


}());

}; // end of sap/ui/core/mvc/View.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.XMLView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.XMLView.
jQuery.sap.declare("sap.ui.core.mvc.XMLView");




/**
 * Constructor for a new mvc/XMLView.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor sap.ui.core.mvc.View}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A View defined using (P)XML and HTML markup.
 * @extends sap.ui.core.mvc.View
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.mvc.XMLView
 */
sap.ui.core.mvc.View.extend("sap.ui.core.mvc.XMLView", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core"
}});


/**
 * Creates a new subclass of class sap.ui.core.mvc.XMLView with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.mvc.XMLView.extend
 * @function
 */


// Start of sap\ui\core\mvc\XMLView.js





(function(){

	/**
	 * Instantiates an XMLView of the given name and with the given id.
	 *
	 * The <code>viewName</code> must either correspond to an XML module that can be loaded
	 * via the module system (viewName + suffix ".view.xml") and which defines the view or must
	 * be a configuration object for a view.
	 * The configuration object can have a viewName, viewContent and a controller property. The viewName
	 * behaves as described above. ViewContent is optional and can hold the view description as XML string; if not
	 * given, the View content definition is loaded by the module system.
	 * The controller property can hold an controller instance. If a controller instance is given it 
	 * overrides the controller defined in the view.
	 *
	 * Like with any other control, id is optional and one will be created automatically.
	 *
	 * @param {string} [sId] id of the newly created view
	 * @param {string | object} vView name of the view or view configuration as described above.
	 * @public
	 * @static
	 * @return {sap.ui.core.mvc.XMLView} the created XMLView instance
	 */
	sap.ui.xmlview = function(sId, vView) {
		return sap.ui.view(sId, vView, sap.ui.core.mvc.ViewType.XML);
	};

	/**
	 * The type of the view used for the <code>sap.ui.view</code> factory 
	 * function. This property is used by the parsers to define the specific 
	 * view type.
	 * @private
	 */
	sap.ui.core.mvc.XMLView._sType = sap.ui.core.mvc.ViewType.XML;
	
	sap.ui.core.mvc.XMLView.prototype.initViewSettings = function(mSettings) {
		if (!mSettings) {
			throw new Error("mSettings must be given");
		}

		// View template handling - either template name or XML node is given
		if (mSettings.viewName && mSettings.viewContent) {
			throw new Error("View name and view content are given. There is no point in doing this, so please decide.");
		} else if ((mSettings.viewName || mSettings.viewContent) && mSettings.xmlNode) {
			throw new Error("View name/content AND an XML node are given. There is no point in doing this, so please decide.");
		} else if (!(mSettings.viewName || mSettings.viewContent) && !mSettings.xmlNode) {
			throw new Error("Neither view name/content nor an XML node is given. One of them is required.");
		}

		if (mSettings.viewName) {
			this._xContent = sap.ui.core.XMLTemplateProcessor.loadTemplate(mSettings.viewName);
		} else if (mSettings.viewContent) {
			this.mProperties["viewContent"] = mSettings.viewContent;
			this._xContent = jQuery.sap.parseXML(mSettings.viewContent);
			if (this._xContent.parseError.errorCode != 0){
				var oParseError = this._xContent.parseError;
				throw new Error("The following problem occurred: XML parse Error for " + oParseError.url + " code: " + oParseError.errorCode + " reason: " +
						oParseError.reason +  " src: " + oParseError.srcText + " line: " +  oParseError.line +  " linepos: " + oParseError.linepos +  " filepos: " + oParseError.filepos);
			}else{
				this._xContent = this._xContent.documentElement;
			}

		} else if (mSettings.xmlNode) {
			this._xContent = mSettings.xmlNode;
		} else {
			// does not happen, already checked
		}
		this._oContainingView = mSettings.containingView || this;

		// extract the properties of the view from the XML element
		if ( !this.isSubView() ) {
			// for a real XMLView, we need to parse the attributes of the root node
			sap.ui.core.XMLTemplateProcessor.parseViewAttributes(this._xContent, this, mSettings);
		} else {
			// when used as fragment: prevent connection to controller, only top level XMLView must connect
			delete mSettings.controller;
		}

		if((this._resourceBundleName || this._resourceBundleUrl) && (!mSettings.models || !mSettings.models[this._resourceBundleAlias])) {
			var model = new sap.ui.model.resource.ResourceModel({bundleName:this._resourceBundleName, bundleUrl:this._resourceBundleUrl, bundleLocale:this._resourceBundleLocale});
			this.setModel(model,this._resourceBundleAlias);
		}

		// Delegate for after rendering notification before onAfterRendering of child controls
		var that = this;
		this.oAfterRenderingNotifier = new sap.ui.core.mvc.XMLAfterRenderingNotifier();
		this.oAfterRenderingNotifier.addDelegate({
			onAfterRendering: function() {
				that.onAfterRenderingBeforeChildren()
			}
		});
	};

	sap.ui.core.mvc.XMLView.prototype.exit = function() {
		this.oAfterRenderingNotifier.destroy();
		sap.ui.core.mvc.View.prototype.exit.apply(this, arguments);
	};

	sap.ui.core.mvc.XMLView.prototype.onControllerConnected = function(oController) {
		var that=this;
		// unset any preprocessors (e.g. from an enclosing JSON view)
		sap.ui.base.ManagedObject.runWithPreprocessors(function() {
			// parse the XML tree
			that._aParsedContent = sap.ui.core.XMLTemplateProcessor.parseTemplate(that._xContent, that);
		});
	};

	sap.ui.core.mvc.XMLView.prototype.getControllerName = function() {
		return this._controllerName;
	};


	sap.ui.core.mvc.XMLView.prototype.isSubView = function() {
		return this._oContainingView != this;
	};

	/**
	 * If the HTML doesn't contain own content, it tries to reproduce existing content
	 * This is executed before the onAfterRendering of the child controls, to ensure that
	 * the HTML is already at its final position, before additional operations are executed.
	 */
	sap.ui.core.mvc.XMLView.prototype.onAfterRenderingBeforeChildren = function() {

		if ( this._$oldContent.length !== 0 ) {
			// jQuery.sap.log.debug("after rendering for " + this);

			// move DOM of children into correct place in preserved DOM
			var aChildren = this.getAggregation("content");
			if ( aChildren ) {
				for(var i=0; i<aChildren.length; i++) {
					var $childDOM = aChildren[i].$();
					// jQuery.sap.log.debug("replacing placeholder for " + aChildren[i] + " with content");
					jQuery.sap.byId("sap-ui-dummy-" + aChildren[i].getId(), this._$oldContent).replaceWith($childDOM);
				}
			}
			// move preserved DOM into place
			// jQuery.sap.log.debug("moving preserved dom into place for " + this);
			jQuery.sap.byId("sap-ui-dummy-" + this.getId()).replaceWith(this._$oldContent);
		}
		this._$oldContent = undefined;
	};
	
	
	/**
	 * Dummy control for after rendering notification before onAfterRendering of
	 * child controls of the XMLView is called
	 */
	sap.ui.core.Control.extend("sap.ui.core.mvc.XMLAfterRenderingNotifier", {
		renderer: function(oRM, oControl) {
			oRM.write(""); // onAfterRendering is only called if control produces output
		}
	});

}());

}; // end of sap/ui/core/mvc/XMLView.js
if ( !jQuery.sap.isDeclared('sap.ui.core.search.OpenSearchProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.search.OpenSearchProvider.
jQuery.sap.declare("sap.ui.core.search.OpenSearchProvider");




/**
 * Constructor for a new search/OpenSearchProvider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSuggestUrl suggestUrl} : sap.ui.core.URI</li>
 * <li>{@link #getSuggestType suggestType} : string (default: 'json')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.search.SearchProvider#constructor sap.ui.core.search.SearchProvider}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A SearchProvider which uses the OpenSearch protocol (either JSON or XML).
 * @extends sap.ui.core.search.SearchProvider
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.search.OpenSearchProvider
 */
sap.ui.core.search.SearchProvider.extend("sap.ui.core.search.OpenSearchProvider", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"suggestUrl" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"suggestType" : {type : "string", group : "Misc", defaultValue : 'json'}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.search.OpenSearchProvider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.search.OpenSearchProvider.extend
 * @function
 */


/**
 * Getter for property <code>suggestUrl</code>.
 * The URL for suggestions of the search provider. As placeholder for the concrete search queries '{searchTerms}' must be used. For cross domain requests maybe a proxy must be used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>suggestUrl</code>
 * @public
 * @name sap.ui.core.search.OpenSearchProvider#getSuggestUrl
 * @function
 */

/**
 * Setter for property <code>suggestUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sSuggestUrl  new value for property <code>suggestUrl</code>
 * @return {sap.ui.core.search.OpenSearchProvider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.search.OpenSearchProvider#setSuggestUrl
 * @function
 */


/**
 * Getter for property <code>suggestType</code>.
 * The type of data which is provided by the given suggestUrl: either 'json' or 'xml'.
 *
 * Default value is <code>json</code>
 *
 * @return {string} the value of property <code>suggestType</code>
 * @public
 * @name sap.ui.core.search.OpenSearchProvider#getSuggestType
 * @function
 */

/**
 * Setter for property <code>suggestType</code>.
 *
 * Default value is <code>json</code> 
 *
 * @param {string} sSuggestType  new value for property <code>suggestType</code>
 * @return {sap.ui.core.search.OpenSearchProvider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.search.OpenSearchProvider#setSuggestType
 * @function
 */


// Start of sap\ui\core\search\OpenSearchProvider.js


/**
 * Call this function to get suggest values from the search provider.
 * The given callback function is called with the suggest value (type 'string', 1st parameter)
 * and an array of the suggestions (type '[string]', 2nd parameter).
 *
 * @name sap.ui.core.search.SearchProvider.prototype.suggest
 * @function
 * @param {string} sValue The value for which suggestions are requested.
 * @param {function} fCallBack The callback function which is called when the suggestions are available.
 * @type void
 * @public
 */
sap.ui.core.search.OpenSearchProvider.prototype.suggest = function(sValue, fCallback) {
	var sUrl = this.getSuggestUrl();
	if(!sUrl) {
		return;
	}
	sUrl = sUrl.replace("{searchTerms}", jQuery.sap.encodeURL(sValue));

	var sType = this.getSuggestType();
	var fSuccess;
	if(sType && sType.toLowerCase() === "xml"){
		//Docu: http://msdn.microsoft.com/en-us/library/cc891508%28v=vs.85%29.aspx
		sType = "xml";
		fSuccess = function(data){
			var jXMLDocument = jQuery(data);
			var jItems = jXMLDocument.find("Text");
			var aSuggestions = [];
			jItems.each(function(){
				aSuggestions.push(jQuery(this).text());
			});
			fCallback(sValue, aSuggestions);
		};
	}else{
		//Docu: http://www.opensearch.org/Specifications/OpenSearch/Extensions/Suggestions/1.1#Response_format
		sType = "json";
		fSuccess = function(data){
			fCallback(sValue, data[1]);
		};
	}

	jQuery.ajax({
		url: sUrl,
		dataType: sType,
		success: fSuccess,
		error: function(XMLHttpRequest, textStatus, errorThrown) {
			jQuery.sap.log.fatal("The following problem occurred: " + textStatus, XMLHttpRequest.responseText + ","
					+ XMLHttpRequest.status);
		}
	});
};

}; // end of sap/ui/core/search/OpenSearchProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.core.tmpl.DOMElement') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.tmpl.DOMElement.
jQuery.sap.declare("sap.ui.core.tmpl.DOMElement");




/**
 * Constructor for a new tmpl/DOMElement.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTag tag} : string (default: 'span')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.ui.core.tmpl.DOMAttribute[]</li>
 * <li>{@link #getElements elements} : sap.ui.core.tmpl.DOMElement[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents a DOM element. It allows to use databinding for the properties and nested DOM attributes.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @experimental Since version 1.15. 
 * The templating might be changed in future versions.
 * @name sap.ui.core.tmpl.DOMElement
 */
sap.ui.core.Control.extend("sap.ui.core.tmpl.DOMElement", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"attr", "removeAttr"
	],

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"tag" : {type : "string", group : "Behavior", defaultValue : 'span'}
	},
	aggregations : {
    	"attributes" : {type : "sap.ui.core.tmpl.DOMAttribute", multiple : true, singularName : "attribute"}, 
    	"elements" : {type : "sap.ui.core.tmpl.DOMElement", multiple : true, singularName : "element"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.tmpl.DOMElement with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.tmpl.DOMElement.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The text content of the DOM element
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.core.tmpl.DOMElement#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMElement#setText
 * @function
 */


/**
 * Getter for property <code>tag</code>.
 * The HTML-tag of the DOM element which contains the text
 *
 * Default value is <code>span</code>
 *
 * @return {string} the value of property <code>tag</code>
 * @public
 * @name sap.ui.core.tmpl.DOMElement#getTag
 * @function
 */

/**
 * Setter for property <code>tag</code>.
 *
 * Default value is <code>span</code> 
 *
 * @param {string} sTag  new value for property <code>tag</code>
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMElement#setTag
 * @function
 */


/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * DOM attributes which are rendered as part of the DOM element and bindable
 * 
 * @return {sap.ui.core.tmpl.DOMAttribute[]}
 * @public
 * @name sap.ui.core.tmpl.DOMElement#getAttributes
 * @function
 */


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.core.tmpl.DOMAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMElement#insertAttribute
 * @function
 */

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.ui.core.tmpl.DOMAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMElement#addAttribute
 * @function
 */

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.ui.core.tmpl.DOMAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.ui.core.tmpl.DOMAttribute} the removed attribute or null
 * @public
 * @name sap.ui.core.tmpl.DOMElement#removeAttribute
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.tmpl.DOMAttribute[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.core.tmpl.DOMElement#removeAllAttributes
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.tmpl.DOMAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.tmpl.DOMAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.core.tmpl.DOMElement#indexOfAttribute
 * @function
 */
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMElement#destroyAttributes
 * @function
 */


/**
 * Getter for aggregation <code>elements</code>.<br/>
 * Nested DOM elements to support nested bindable structures
 * 
 * @return {sap.ui.core.tmpl.DOMElement[]}
 * @public
 * @name sap.ui.core.tmpl.DOMElement#getElements
 * @function
 */


/**
 * Inserts a element into the aggregation named <code>elements</code>.
 *
 * @param {sap.ui.core.tmpl.DOMElement}
 *          oElement the element to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the element should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the element is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the element is inserted at 
 *             the last position        
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMElement#insertElement
 * @function
 */

/**
 * Adds some element <code>oElement</code> 
 * to the aggregation named <code>elements</code>.
 *
 * @param {sap.ui.core.tmpl.DOMElement}
 *            oElement the element to add; if empty, nothing is inserted
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMElement#addElement
 * @function
 */

/**
 * Removes an element from the aggregation named <code>elements</code>.
 *
 * @param {int | string | sap.ui.core.tmpl.DOMElement} vElement the element to remove or its index or id
 * @return {sap.ui.core.tmpl.DOMElement} the removed element or null
 * @public
 * @name sap.ui.core.tmpl.DOMElement#removeElement
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>elements</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.tmpl.DOMElement[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.core.tmpl.DOMElement#removeAllElements
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.tmpl.DOMElement</code> in the aggregation named <code>elements</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.tmpl.DOMElement}
 *            oElement the element whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.core.tmpl.DOMElement#indexOfElement
 * @function
 */
	

/**
 * Destroys all the elements in the aggregation 
 * named <code>elements</code>.
 * @return {sap.ui.core.tmpl.DOMElement} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.DOMElement#destroyElements
 * @function
 */


/**
 * Returns the value of a DOM attribute if available or undefined if the DOM attribute is not available when using this method with the parameter name only. When using the method with the parameter name and value the method acts as a setter and sets the value of a DOM attribute. Int this case the return value is the reference to this DOM element to support method chaining. If you pass null as value of the attribute the attribute will be removed.
 *
 * @name sap.ui.core.tmpl.DOMElement.prototype.attr
 * @function
 * @param {string} 
 *         sName
 *         The name of the DOM attribute.
 * @param {string} 
 *         sValue
 *         The value of the DOM attribute. If the value is undefined the DOM attribute will be removed.

 * @type string
 * @public
 */


/**
 * Removes the DOM attribute for the given name and returns the reference to this DOM element to support method chaining.
 *
 * @name sap.ui.core.tmpl.DOMElement.prototype.removeAttr
 * @function
 * @param {string} 
 *         sName
 *         The name of the DOM attribute.

 * @type sap.ui.core.tmpl.DOMElement
 * @public
 */


// Start of sap\ui\core\tmpl\DOMElement.js
// TODO: maybe this is something for the sap.ui.core itself - something more general for UI5!!

/*
 * cleanup of event handlers of input elements
 */
sap.ui.core.tmpl.DOMElement.prototype.applySettings = function(mSettings) {

	// apply the settings
	sap.ui.core.Control.prototype.applySettings.apply(this, arguments);

	// all unknown keys which value is a string will be added 
	// as attribute to the DOM element
	var that = this,
	    oMetadata = this.getMetadata(),
	    mJSONKeys = oMetadata.getJSONKeys();
	jQuery.each(mSettings, function(sKey, oValue) {
		if (sKey !== "id" && sKey !== "text" && !mJSONKeys[sKey] && typeof oValue === "string") {
			that.attr(sKey, oValue);
		}
	});
	
};

/*
 * cleanup of event handlers of input elements
 */
sap.ui.core.tmpl.DOMElement.prototype.exit = 
sap.ui.core.tmpl.DOMElement.prototype.onBeforeRendering = function() {
	var sTag = this.getTag().toLowerCase();
	if (sTag === "input" || sTag === "textarea" || sTag === "select") {
		this.$().off("change");
	}
};

/*
 * registers the event handlers for input elements
 */
sap.ui.core.tmpl.DOMElement.prototype.onAfterRendering = function() {
	var sTag = this.getTag().toLowerCase();
	if (sTag === "input" || sTag === "textarea" || sTag === "select") {
		this.$().on("change", jQuery.proxy(this.oninputchange, this));
	}
};

/**
 * Listens to the change event of the input elements and updates the properties.
 * @param {Event} oEvent the event object
 * @private
 */
sap.ui.core.tmpl.DOMElement.prototype.oninputchange = function(oEvent) {
	var sTag = this.getTag().toLowerCase();
	if (sTag === "input") {
		var sValue = this.$().val();
		jQuery.each(this.getAttributes(), function(iIndex, oAttribute) {
			if (oAttribute.getName().toLowerCase() === "value") {
				oAttribute.setValue(sValue);
			}
		});
	} else if (sTag === "textarea") {
		var sText = this.$().val();
		this.setText(sText);
	} else if (sTag === "select") {
		// TODO: how should we work with selects?
		var sText = "";
		this.$().find("select option:selected").each(function() {
			sText += jQuery(this).text() + " ";
		});
    this.setText(sText);
	}
};


/*
 * gets, sets or removes the attribute
 */
sap.ui.core.tmpl.DOMElement.prototype.attr = function(sKey, sValue) {

	// lookup the attribute (required for the setter and the getter)
	var aAttributes = this.getAttributes(),
	    oAttribute;
	jQuery.each(aAttributes, function(iIndex, oValue) {
		var sName = oValue.getName();
		if (sName.toLowerCase() === sKey) {
			oAttribute = oValue;
			return false;
		}
	});
	
	if (sValue === undefined) {
	
		// returns the found attribute
		return oAttribute && oAttribute.getValue();
		
	} else {
	
		// if we found the attribute in case of a null value, we remove it
		// and in case of a value we set the value
		if (oAttribute) {
			if (sValue === null) {
				this.removeAttribute(oAttribute);
			} else {
				oAttribute.setValue(sValue);
			}
		} else {
			// in case of a no attribute has been found we create and add
			// a new DOM attribute for the given key and value
			if (sValue !== null) {
				this.addAttribute(new sap.ui.core.tmpl.DOMAttribute({
					name: sKey,
					value: sValue
				}));
			}
		}
		
		// method chaining
		return this;
	
	}
	
}; 

/*
 * remove the attribute for the given name
 */
sap.ui.core.tmpl.DOMElement.prototype.removeAttr = function(sKey) {
	// remove the attribute
	this.attr(sKey, null);
	return this;
}; 


sap.ui.core.tmpl.DOMElement.prototype.setText = function(sText) {
	this.setProperty("text", sText, true); // no re-rendering!
	// do DOM modification to avoid re-rendering
	var $this = this.$();
	if ($this.length > 0) {
		var sTag = this.getTag().toLowerCase();
		if (sTag === "textarea") {
			$this.val(this.getProperty("text"));
		} else {
			$this.text(this.getProperty("text"));
		}
	}
};

}; // end of sap/ui/core/tmpl/DOMElement.js
if ( !jQuery.sap.isDeclared('sap.ui.core.tmpl.TemplateControl') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.tmpl.TemplateControl.
jQuery.sap.declare("sap.ui.core.tmpl.TemplateControl");




/**
 * Constructor for a new tmpl/TemplateControl.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getContext context} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getTemplate template} : string | sap.ui.core.tmpl.Template</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.core.tmpl.TemplateControl#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.core.tmpl.TemplateControl#event:beforeRendering beforeRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This is the base class for all template controls. Template controls are declared based on templates.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @experimental Since version 1.15. 
 * The templating might be changed in future versions.
 * @name sap.ui.core.tmpl.TemplateControl
 */
sap.ui.core.Control.extend("sap.ui.core.tmpl.TemplateControl", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"context" : {type : "object", group : "Data", defaultValue : null}
	},
	aggregations : {
    	"controls" : {type : "sap.ui.core.Control", multiple : true, singularName : "control", visibility : "hidden"}
	},
	associations : {
		"template" : {type : "sap.ui.core.tmpl.Template", multiple : false}
	},
	events : {
		"afterRendering" : {}, 
		"beforeRendering" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.tmpl.TemplateControl with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.tmpl.TemplateControl.extend
 * @function
 */

sap.ui.core.tmpl.TemplateControl.M_EVENTS = {'afterRendering':'afterRendering','beforeRendering':'beforeRendering'};


/**
 * Getter for property <code>context</code>.
 * The context is a data object. It can be used for default template expressions. A change of the context object leads to a re-rendering whereas a change of a nested property of the context object doesn't. By default the context is an empty object.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>context</code>
 * @public
 * @name sap.ui.core.tmpl.TemplateControl#getContext
 * @function
 */

/**
 * Setter for property <code>context</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oContext  new value for property <code>context</code>
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.TemplateControl#setContext
 * @function
 */


/**
 * The template on which the template control is based on.
 *
 * @return {string} Id of the element which is the current target of the <code>template</code> association, or null
 * @public
 * @name sap.ui.core.tmpl.TemplateControl#getTemplate
 * @function
 */

/**
 * The template on which the template control is based on.
 *
 * @param {string | sap.ui.core.tmpl.Template} vTemplate 
 *    Id of an element which becomes the new target of this <code>template</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.TemplateControl#setTemplate
 * @function
 */


	
/**
 * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM. 
 *
 * @name sap.ui.core.tmpl.TemplateControl#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/> itself. 
 *  
 * Fired when the Template Control has been (re-)rendered and its HTML is present in the DOM. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/> itself.
 *
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.TemplateControl#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.TemplateControl#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.tmpl.TemplateControl#fireAfterRendering
 * @function
 */


/**
 * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc. 
 *
 * @name sap.ui.core.tmpl.TemplateControl#beforeRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeRendering' event of this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/> itself. 
 *  
 * Fired before this Template Control is re-rendered. Use to unbind event handlers from HTML elements etc. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/> itself.
 *
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.TemplateControl#attachBeforeRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeRendering' event of this <code>sap.ui.core.tmpl.TemplateControl</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.tmpl.TemplateControl#detachBeforeRendering
 * @function
 */

/**
 * Fire event beforeRendering to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.core.tmpl.TemplateControl} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.core.tmpl.TemplateControl#fireBeforeRendering
 * @function
 */


// Start of sap\ui\core\tmpl\TemplateControl.js





/*
 * Initialization of the sap.ui.core.tmpl.TemplateControl
 */
sap.ui.core.tmpl.TemplateControl.prototype.init = function() {
		
	// list of binding informations to cleanup once the 
	// control is destroyed or re-rendering happens
	this._aBindingInfos = [];
	
};


/**
 * checks whether the control is inline or not
 * 
 * @return {boolean} flag, whether to control is inline or not
 * @protected
 */
sap.ui.core.tmpl.TemplateControl.prototype.isInline = function() {
	// in case of inline templates the ID of the UIArea root node is the same 
	// like the ID for the current template control (this can only be the case 
	// for inline templates)
	var bInline = false;
	if (this.getParent() instanceof sap.ui.core.UIArea && 
	    jQuery(this.getParent().getRootNode()).attr("id") === this.getId()) {
	  bInline = true;
	}
	return bInline;
};


/*
 * Overriden to remove the old content for inline templates and clean up the
 * old UIArea which is in the "nirvana" now 
 */
sap.ui.core.tmpl.TemplateControl.prototype.placeAt = function(oRef, oPosition) {
	// in case of placing an inline template somewhere else on the screen
	// we remove the content and destroy the UIArea's content
	// TODO: how to destroy the UIArea itself?
	var bInline = this.isInline();
	var $this = this.$(),
	    oUIArea = this.getUIArea();
	sap.ui.core.Control.prototype.placeAt.apply(this, arguments);
	if (bInline && $this.length === 1) {
		$this.remove();
		oUIArea.destroyContent();
	}
};

/**
 * Returns the instance specific renderer for an anoymous template control.
 * 
 * @return {function} the instance specific renderer function
 * @protected
 */
sap.ui.core.tmpl.TemplateControl.prototype.getTemplateRenderer = function() {
	return this.fnRenderer; 
};


/**
 * Sets the instance specific renderer for an anoymous template control.
 * 
 * @param {function} fnRenderer the instance specific renderer function
 * @return {sap.ui.core.tmpl.Template} <code>this</code> to allow method chaining
 * @protected
 */
sap.ui.core.tmpl.TemplateControl.prototype.setTemplateRenderer = function(fnRenderer) {
	this.fnRenderer = fnRenderer;
	return this; 
};


/**
 * cleanup of the controls and bindings
 * @private 
 */
sap.ui.core.tmpl.TemplateControl.prototype._cleanup = function() {

	// destroy the controls
	this.destroyAggregation("controls");
	
	// cleanup the bindings
	if (this._aBindingInfos) {
		var that = this;
		jQuery.each(this._aBindingInfos, function(iIndex, oBindingInfo) {
			that.getModel(oBindingInfo.model).removeBinding(oBindingInfo.binding);
		});
		this._aBindingInfos = [];
	}
	
};
 
/**
 * compile the declarative markup
 * @private 
 */
sap.ui.core.tmpl.TemplateControl.prototype._compile = function() {
	var oTemplate = sap.ui.getCore().byId(this.getTemplate()),
	    bDeclarativeSupport = oTemplate && oTemplate.getDeclarativeSupport();
	if (bDeclarativeSupport) {
		var that = this;
		setTimeout(function() {
			sap.ui.core.DeclarativeSupport.compile(that.getDomRef());
		});
	}
};
 
/*
 * cleanup of the controls and bindings 
 */
sap.ui.core.tmpl.TemplateControl.prototype.exit = function() {
	this._cleanup();
};
 
/*
 * cleanup of the  controls and bindings 
 */
sap.ui.core.tmpl.TemplateControl.prototype.onBeforeRendering = function() {
	this.fireBeforeRendering();
	this._cleanup();
};		
		
		
/*
 * parse nested controls which have been added via markup 
 */
sap.ui.core.tmpl.TemplateControl.prototype.onAfterRendering = function() {
	this.fireAfterRendering();
};
		

/*
 * get notified when the model changes, ...
 */		
sap.ui.core.tmpl.TemplateControl.prototype.updateBindings = function(bUpdateAll, sModelName) {
	sap.ui.base.ManagedObject.prototype.updateBindings.apply(this, arguments);
	// invalidate once the element is rendered 
	if (this.getDomRef()) {
		this.invalidate();
	}
};
		

/**
 * Creates a pseudo binding for a value to get notified once the value 
 * changes to invalidate the control and trigger a re-rendering.
 * 
 * @param {string} sPath the binding path
 * @param {string} sModelFunc the name of the model function
 * @return {any} the value of the path (typically an array)
 * @private 
 */		
sap.ui.core.tmpl.TemplateControl.prototype.bind = function(sPath, sType) {

	// parse the path and create the binding
	var oPathInfo = sap.ui.core.tmpl.Template.parsePath(sPath),
	    oModel = this.getModel(oPathInfo.model),
	    sPath = oPathInfo.path,
	    sModelFunc = sType ? "bind" + jQuery.sap.charToUpperCase(sType) : "bindProperty",
	    oBinding = oModel && oModel[sModelFunc](sPath),
	    that = this;

	// attach a change handler (if the binding exists)
	if (oBinding) {
		oBinding.attachChange(function() {
			jQuery.sap.log.debug("TemplateControl#" + that.getId() + ": " + sType + " binding changed for path \"" + sPath + "\"");
			that.invalidate();
		});
	}
	
	// store the binding info for later cleanup
	this._aBindingInfos.push({
		binding: oBinding,
		path: oPathInfo.path,
		model: oPathInfo.model
	});
	
	// return the external formatted value for the property
	return oBinding;

};
		
		
		
/**
 * Creates a pseudo binding for a property to get notified once the property 
 * changes to invalidate the control and trigger a re-rendering.
 * 
 * @param {string} sPath the binding path
 * @return {any} the value of the path
 * @protected 
 */		
sap.ui.core.tmpl.TemplateControl.prototype.bindProp = function(sPath) {
	var oBinding = this.bind(sPath, "property");
	return oBinding && oBinding.getExternalValue();
};
		
		
/**
 * Creates a pseudo binding for a aggregation to get notified once the property 
 * changes to invalidate the control and trigger a re-rendering.
 * 
 * @param {string} sPath the binding path
 * @return {any} the value of the path
 * @protected 
 */		
sap.ui.core.tmpl.TemplateControl.prototype.bindList = function(sPath) {
	var oBinding = this.bind(sPath, "list"),
	    oModel = oBinding && oBinding.getModel(),
	    sPath = oBinding && oBinding.getPath();
	return oBinding && oModel.getProperty(sPath);
};
		
		
/**
 * compiles (creates and registers) a new DOM element
 * 
 * @param {object} mSettings the settings for the new DOM element
 * @param {string} [sParentPath] the parent path for the DOM element
 * @param {boolean} [bDoNotAdd] if true, then the control will not be 
 *          added to the _controls aggregation
 * @return {sap.ui.core.Control} new DOM element instance 
 * 
 * @protected
 */
sap.ui.core.tmpl.TemplateControl.prototype.createDOMElement = function(mSettings, sParentPath, bDoNotAdd) {
	var oElement = new sap.ui.core.tmpl.DOMElement(mSettings);
	if (sParentPath) {
		// set the context for the DOM element
		oElement.bindElement(sParentPath);
	}
	if (!bDoNotAdd) {
		this.addAggregation("controls", oElement);
	}
	return oElement;
};
		
		
/**
 * compiles (creates and registers) a new control
 * 
 * @param {object} mSettings the settings for the new control
 * @param {string} [sParentPath] the parent path for the control
 * @param {boolean} [bDoNotAdd] if true, then the control will not be 
 *          added to the _controls aggregation
 * @return {sap.ui.core.Control} new control instance 
 * 
 * @protected
 */
sap.ui.core.tmpl.TemplateControl.prototype.createControl = function(mSettings, sParentPath, bDoNotAdd, oView) {
	// sap.ui.core.Element.create doesn't work because there is no type 
	// conversion for the values done (would be the better approach)
	var mHTMLSettings = {};
	jQuery.each(mSettings, function(sKey, oValue) {
		mHTMLSettings["data-" + jQuery.sap.hyphen(sKey)] = oValue;
	});
	var $control = jQuery("<div/>", mHTMLSettings);
	var oControl = sap.ui.core.DeclarativeSupport._createControl($control.get(0), oView);
	if (sParentPath) {
		// set the context for the control
		oControl.bindElement(sParentPath);
	}
	if (!bDoNotAdd) {
		this.addAggregation("controls", oControl);
	}
	return oControl;
};

}; // end of sap/ui/core/tmpl/TemplateControl.js
if ( !jQuery.sap.isDeclared('sap.ui.core.BusyIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// A static class to show a busy indicator
jQuery.sap.declare("sap.ui.core.BusyIndicator");



/**
 * @class Provides methods to show or hide a waiting animation covering the whole page and blocking user interaction.
 * @static 
 * @version 1.18.9
 * @public
 */
sap.ui.core.BusyIndicator = jQuery.extend(jQuery.sap.newObject(sap.ui.base.EventProvider.prototype), {
	oPopup: null,
	oDomRef: null,
	bOpenRequested: false,
	iDEFAULT_DELAY_MS: 1000,
	sDOM_ID: "sapUiBusyIndicator"
});

sap.ui.base.EventProvider.apply(sap.ui.core.BusyIndicator);

/**
 * Map of event names and ids, that are provided by this class
 * @private
 */
sap.ui.core.BusyIndicator.M_EVENTS = {Open: "Open", Close: "Close"};


/**
 * Sets up the BusyIndicator HTML and the Popup instance.
 *
 * @private
 */
sap.ui.core.BusyIndicator._init = function() {
	// Create the graphics element
	var root = document.createElement("div");
	root.id = this.sDOM_ID;

	// Render into invisible area, so the size settings from CSS are applied
	var oInvisible = sap.ui.getCore().getStaticAreaRef();
	oInvisible.appendChild(root);
	jQuery(root).addClass("sapUiBusy").attr("tabindex", 0).attr("role", "progressbar").attr("alt", "").attr("title", "Please Wait");
	this.oDomRef = root;

	this.oPopup = new sap.ui.core.Popup(root);
	this.oPopup.setModal(true, "sapUiBlyBusy");
	this.oPopup.setShadow(false);
};


/**
 * Displays the BusyIndicator and starts blocking all user input.
 * This only happens after some delay and if after that delay the BusyIndicator.hide() has not yet been called in the meantime.
 * There is a certain default value for the delay, but that one can be overridden.
 *
 * @public
 * @param {int} [iDelay] The delay in milliseconds before opening the BusyIndicator. It is not opened if hide() is called before end of the delay. If no delay (or no valid delay) is given, the default value is used.
 */
sap.ui.core.BusyIndicator.show = function(iDelay) {
	jQuery.sap.log.debug("sap.ui.core.BusyIndicator.show (delay: " + iDelay + ") at " + new Date().getTime());
	
	jQuery.sap.assert(iDelay === undefined || (typeof iDelay == "number" && (iDelay % 1 == 0)), "iDelay must be empty or an integer");

	if ((iDelay === undefined)
			|| ((iDelay != 0) && (parseInt(iDelay, 10) == 0))
			|| (parseInt(iDelay, 10) < 0)) {
		iDelay = this.iDEFAULT_DELAY_MS;
	}

	this.bOpenRequested = true;
	if (iDelay === 0) { // avoid async call when there is no delay
		this._showNowIfRequested();
	} else {
		jQuery.sap.delayedCall(iDelay, this, "_showNowIfRequested");
	}
};


/**
 * Immediately displays the BusyIndicator if the application has not called hide() yet.
 *
 * @private
 */
sap.ui.core.BusyIndicator._showNowIfRequested = function() {
	jQuery.sap.log.debug("sap.ui.core.BusyIndicator._showNowIfRequested (bOpenRequested: " + this.bOpenRequested + ") at " + new Date().getTime());
	
	// Do not open if the request has been canceled in the meantime
	if (!this.bOpenRequested) {
		return;
	}

	// If body/Core are not available yet, give them some more time and open later if still required
	if (!document.body || !sap.ui.getCore().isInitialized()) {
		jQuery.sap.delayedCall(100, this, "_showNowIfRequested");
		return;
	}

	this.bOpenRequested = false; // opening request is handled

	// Initialize/create the BusyIndicator if this has not been done yet
	if (!this.oDomRef) {
		this._init();
	}

	// Actually open the popup
	this.oPopup.open(0, sap.ui.core.Popup.Dock.CenterCenter, sap.ui.core.Popup.Dock.CenterCenter, document);

	// allow an event handler to do something with the indicator
	this.fireOpen({$Busy: this.oPopup._$()});

	// Grab the focus once opened
	var oDomRef = jQuery.sap.domById(sap.ui.core.BusyIndicator.sDOM_ID);
	jQuery.sap.focus(oDomRef);

	jQuery("body").attr("aria-busy", true);
};

/**
 * Removes the BusyIndicator from the screen
 *
 * @public
 */
sap.ui.core.BusyIndicator.hide = function() {
	jQuery.sap.log.debug("sap.ui.core.BusyIndicator.hide at " + new Date().getTime());
	
	var that = sap.ui.core.BusyIndicator; // Restore scope in case we are called with setTimeout or so...

	that.bOpenRequested = false;

	if (that.oDomRef) { // only if the BusyIndicator was shown before!
		jQuery("body").removeAttr("aria-busy");

		// allow an event handler to do something with the indicator
		this.fireClose({$Busy: this.oPopup._$()});

		that.oPopup.close(0);
	}
};


/*  EVENT HANDLING */

/**
 * Registers a handler for the "open" event.
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.BusyIndicator.attachOpen = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.BusyIndicator.M_EVENTS.Open, fnFunction, oListener);
	return this;
};

/**
 * Unregisters a handler for the "open" event
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.BusyIndicator.detachOpen = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.BusyIndicator.M_EVENTS.Open, fnFunction, oListener);
	return this;
};

/**
 * Registers a handler for the "close" event
 * 
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.BusyIndicator.attachClose = function(fnFunction, oListener) {
	this.attachEvent(sap.ui.core.BusyIndicator.M_EVENTS.Close, fnFunction, oListener);
	return this;
};

/**
 * Unregisters a handler for the "close" event
 * 
 * @param {function}
 *            fnFunction The callback function to unregister
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.core.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.core.BusyIndicator.detachClose = function(fnFunction, oListener) {
	this.detachEvent(sap.ui.core.BusyIndicator.M_EVENTS.Close, fnFunction, oListener);
	return this;
};

sap.ui.core.BusyIndicator.fireOpen = function(mParameters) {
	this.fireEvent(sap.ui.core.BusyIndicator.M_EVENTS.Open, mParameters);
};

sap.ui.core.BusyIndicator.fireClose = function(mParameters) {
	this.fireEvent(sap.ui.core.BusyIndicator.M_EVENTS.Close, mParameters);
};
}; // end of sap/ui/core/BusyIndicator.js
if ( !jQuery.sap.isDeclared('sap.ui.core.ComponentContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.ComponentContainer.
jQuery.sap.declare("sap.ui.core.ComponentContainer");




/**
 * Constructor for a new ComponentContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getUrl url} : sap.ui.core.URI</li>
 * <li>{@link #getSettings settings} : object</li>
 * <li>{@link #getPropagateModel propagateModel} : boolean (default: false)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getComponent component} : string | sap.ui.core.UIComponent</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Component Container
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @experimental Since version 1.9.2. 
 * The Component concept is still under construction, so some implementation details can be changed in future.
 * @name sap.ui.core.ComponentContainer
 */
sap.ui.core.Control.extend("sap.ui.core.ComponentContainer", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core",
	properties : {
		"name" : {type : "string", group : "", defaultValue : null},
		"url" : {type : "sap.ui.core.URI", group : "", defaultValue : null},
		"settings" : {type : "object", group : "", defaultValue : null},
		"propagateModel" : {type : "boolean", group : "", defaultValue : false},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null}
	},
	associations : {
		"component" : {type : "sap.ui.core.UIComponent", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.core.ComponentContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.ComponentContainer.extend
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * Component name, the package where the component is contained. The property can only be applied initially.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.ui.core.ComponentContainer#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ComponentContainer#setName
 * @function
 */


/**
 * Getter for property <code>url</code>.
 * The URL of the component. The property can only be applied initially.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>url</code>
 * @public
 * @name sap.ui.core.ComponentContainer#getUrl
 * @function
 */

/**
 * Setter for property <code>url</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sUrl  new value for property <code>url</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ComponentContainer#setUrl
 * @function
 */


/**
 * Getter for property <code>settings</code>.
 * The settings object passed to the component when created. The property can only be applied initially.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>settings</code>
 * @public
 * @name sap.ui.core.ComponentContainer#getSettings
 * @function
 */

/**
 * Setter for property <code>settings</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oSettings  new value for property <code>settings</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ComponentContainer#setSettings
 * @function
 */


/**
 * Getter for property <code>propagateModel</code>.
 * Defines whether binding information is propagated to the component.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>propagateModel</code>
 * @public
 * @name sap.ui.core.ComponentContainer#getPropagateModel
 * @function
 */

/**
 * Setter for property <code>propagateModel</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPropagateModel  new value for property <code>propagateModel</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ComponentContainer#setPropagateModel
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Container width in CSS size
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.core.ComponentContainer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ComponentContainer#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Container height in CSS size
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.core.ComponentContainer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ComponentContainer#setHeight
 * @function
 */


/**
 * The component displayed in this ComponentContainer.
 *
 * @return {string} Id of the element which is the current target of the <code>component</code> association, or null
 * @public
 * @name sap.ui.core.ComponentContainer#getComponent
 * @function
 */

/**
 * The component displayed in this ComponentContainer.
 *
 * @param {string | sap.ui.core.UIComponent} vComponent 
 *    Id of an element which becomes the new target of this <code>component</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.core.ComponentContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.core.ComponentContainer#setComponent
 * @function
 */


	
// Start of sap\ui\core\ComponentContainer.js
/**
 * Returns the real component instance which is associated with the container.
 * @return {sap.ui.core.UIComponent} the component instance
 */
sap.ui.core.ComponentContainer.prototype.getComponentInstance = function () {
	var sComponentId = this.getComponent();
	return sap.ui.getCore().getComponent(sComponentId);
};


/*
 * TODO: make sure once a component is assigned to the container it cannot be 
 * exchanged later when the container is rendered.
 * 
 * Exchanging the component via setComponent is still required - see existing
 * examples in sap/ui/core/ComponentShell.html - but this opens up another
 * question which was not answered before - what to do here when exchanging
 * the component - destroy or not? Right now we at least unlink the container. 
 */
sap.ui.core.ComponentContainer.prototype.setComponent = function(oComponent) {
	// unlink the old component from the container
	var oOldComponent = this.getComponentInstance();
	if (oOldComponent) {
		// TODO: destroy or not destroy 
		oOldComponent.setContainer(undefined);
	}
	// set the new component
	this.setAssociation("component", oComponent);
	// cross link the new component and propagate the properties (models)
	oComponent = this.getComponentInstance();
	if (oComponent) {
		oComponent.setContainer(this);
		this.propagateProperties();
	}
};


/*
 * delegate the onBeforeRendering to the component instance
 */
sap.ui.core.ComponentContainer.prototype.onBeforeRendering = function(){

	// check if we have already a valid component instance
	// in this case we skip the component creation via props
	// ==> not in applySettings to make sure that components are lazy instantiated,
	//     e.g. in case of invisible containers the component will not be created
	//     immediately in the constructor.
	var oComponent = this.getComponentInstance();
	if (!oComponent) {
		// create the component / link to the container (if a name is given)
		var sName = this.getName();
		if (sName) {
			oComponent = sap.ui.component({
				name: sName,
				url: this.getUrl(),
				settings: this.getSettings() 
			});
			this.setComponent(oComponent);
		}
	}

	// delegate the onBeforeRendering to the component instance
	if (oComponent && oComponent.onBeforeRendering) {
		oComponent.onBeforeRendering();
	}
	
};

/*
 * delegate the onAfterRendering to the component instance
 */
sap.ui.core.ComponentContainer.prototype.onAfterRendering = function(){
	var oComponent = this.getComponentInstance();
	if (oComponent && oComponent.onAfterRendering) {
		oComponent.onAfterRendering();
	}
};


/*
 * once the container is destroyed we also destroy the component 
 */
sap.ui.core.ComponentContainer.prototype.exit = function(){
	var oComponent = this.getComponentInstance();
	if (oComponent) {
		oComponent.destroy();
	}
};


/*
 * overriden to support property propagation to the associated component
 */
sap.ui.core.ComponentContainer.prototype.propagateProperties = function (vName) {
	var oComponent = this.getComponentInstance();
	if (oComponent && this.getPropagateModel()) {
		this._propagateProperties(vName, oComponent);
		sap.ui.core.Control.prototype.propagateProperties.apply(this, arguments);
	}
};
}; // end of sap/ui/core/ComponentContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.core.CompositeSupport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.core.CompositeSupport
jQuery.sap.declare("sap.ui.core.CompositeSupport");



/**
 * Helper for composite controls. Can be applied as a mixin to existing classes by calling
 *
 * <pre>
 * sap.ui.core.CompositeSupport.mixInto(your.Class, {
 *   createComponent1 : function() {
 *   },
 *   createComponent2 : function() {
 *   },
 *   ...
 * });
 * </pre>
 *
 * @class
 * @static
 */
sap.ui.core.CompositeSupport = {};

/**
 * Applies the CompositeMixin to the given control class <code>fnClass</code>. This includes the following steps:
 *
 * <ul>
 * <li>Creates a new subclass of {@link sap.ui.core.ComponentFactory} and adds it to the given class
 * <li>Merges the given methods into the prototype of the newly created class
 * <li>Enriches the prototype of the given control class with a getComponentFactory() method
 * <li>Hooks into init() and destroy() of the given class
 * </ul>
 *
 * @param {function} fnClass the class (constructor function) of a control calls to be enriched
 * @param {string} [sFactoryName='ComponentFactory'] name under which the newly created factory class will be added to the control class
 * @param {object} [oMethods] default factory methods and helper methods
 * @public
 */
sap.ui.core.CompositeSupport.mixInto = function(fnClass, sFactoryName, oMethods) {

	if ( arguments.length == 2 && typeof sFactoryName === "object" ) {
		oMethods = sFactoryName;
		sFactoryName = "ComponentFactory";
	}
	jQuery.sap.assert(typeof fnClass === "function" && fnClass.prototype instanceof sap.ui.core.Control, "CompositeSupport.mixInto: fnClass must be a subclass of Control");
	jQuery.sap.assert(typeof sFactoryName === "string" && sFactoryName, "CompositeSupport.mixInto: sFactoryName must be a non-empty string");
	jQuery.sap.assert(typeof oMethods === "object", "oMethods must be an object");

	function _getBaseFactory() {
		var oMetadata = fnClass.getMetadata();
		do {
			oMetadata = oMetadata.getParent();
			if ( oMetadata && oMetadata.getComponentFactoryClass ) {
				return oMetadata.getComponentFactoryClass();
			}
		} while ( oMetadata );
		return sap.ui.core.ComponentFactory;
	}

	// create a new component factory class
	fnClass[sFactoryName] = (_getBaseFactory()).subclass(oMethods);

	// add factory class info to metadata
	fnClass.getMetadata().getComponentFactoryClass = jQuery.sap.getter(fnClass[sFactoryName]);

	// initialization and getter for the component factory
	if ( !fnClass.prototype._initCompositeSupport ) {
		fnClass.prototype._initCompositeSupport = function(mSettings) {

			var oFactory = new (this.getMetadata().getComponentFactoryClass())(this);

			if ( mSettings.componentFactory ) {

				// assert a pure object literal
				jQuery.sap.assert(jQuery.isPlainObject(mSettings.componentFactory));

				// customize the factory with it
				oFactory.customize(mSettings.componentFactory);

				// cleanup settings
				delete mSettings.componentFactory;

			}

			this.getComponentFactory = jQuery.sap.getter(oFactory);
		};
	}

	if ( !fnClass.prototype._exitCompositeSupport ) {
		fnClass.prototype._exitCompositeSupport = function() {

			this.getComponentFactory().destroy();
			delete this.getComponentFactory;
		};
	}

};

/**
 * @class Base class for component factories. Subclasses are created by the CompositeSupport mixin.
 *
 * @param oComposite Composite control that this factory is used for.
 * @name sap.ui.core.ComponentFactory
 */
sap.ui.base.EventProvider.extend("sap.ui.core.ComponentFactory", /** @lends sap.ui.core.ComponentFactory */ {
	constructor: function(oComposite) {
		sap.ui.base.EventProvider.apply(this);
		this.oComposite = oComposite;
		return this;
	}
});

/**
 * Attaches a change notification listener to this factory. The listener will be informed when
 * any of the API objects of the composite API will change.
 * @param {function} f listener function to call
 * @param {object} [o=window] Object to call the function on
 * @return {sap.ui.core.ComponentFactory} returns this to facilitate method chaining
 * @public
 */
sap.ui.core.ComponentFactory.prototype.attachChange = function (f,o) {
	this.getModel();
	this.attachEvent("change", f,o);
	return this;
};

/**
 * Detaches the given change notification listener from this factory.
 * The listener must have been registered with the exact same parameters before
 * @param {function} f listener function to remove
 * @param {object} [o=window] Object that the listener function had to be called for
 * @return {sap.ui.core.ComponentFactory} returns this to facilitate method chaining
 * @public
 */
sap.ui.core.ComponentFactory.prototype.detachChange = function (f,o) {
	this.getModel();
	this.detachEvent("change", f,o);
	return this;
};

/**
 * Returns a control model for the composite that this factory belongs to.
 *
 * The model can be used to bind properties of created components against it.
 *
 * @return {sap.ui.model.control.ControlModel} A model for the composite of this factory
 * @public
 */
sap.ui.core.ComponentFactory.prototype.getModel = function() {
	if ( !this.oModel ) {
		var that=this;
		this.oModel = new sap.ui.model.control.ControlModel(this.oComposite);
		this.oModel._onchange = function(e) {
			that.fireEvent("change", e.getParameters && e.getParameters());
		};
	}
	return this.oModel;
};

/**
 * Adds an element to the facade of the composite. To be called by the composite application.
 * @param {sap.ui.core.Element} oElement element to be added to the facade
 * @return {void}
 * @public
 */
sap.ui.core.ComponentFactory.prototype.addFacadeComponent = function(oElement) {
	this.getModel().add(oElement);
};

/**
 * Removes an element from the facade of the composite. To be called by the composite application.
 * @param {sap.ui.core.Element} oElement element to be removed to the facade
 * @return {void}
 * @public
 */
sap.ui.core.ComponentFactory.prototype.removeFacadeComponent = function(oElement) {
	this.getModel().remove(oElement);
};

(function() {

	function _extend(o, oMethods, bDefaults) {
		jQuery.each(oMethods, function(sName, fnFunc) {
			if ( sName.indexOf("default") != 0 ) {
				o[sName] = fnFunc;
			}
			// for create functions keep a backup
			if ( bDefaults && sName.indexOf("create") == 0 ) {
				o["defaultC" + sName.substring(1)] = o[sName];
			}
		});
	}

	function _createExtendFunction(fnBaseClass) {
		return function(oMethods) {

			// create a new constructor function
			var fnCtor = function(/* anonymous arguments */) {
				// invoke base class
				fnBaseClass.apply(this, arguments);
			};
			// properly chain the prototypes
			fnCtor.prototype = jQuery.sap.newObject(fnBaseClass.prototype);
			_extend(fnCtor.prototype, oMethods, /* bDefaults */ true);

			fnCtor.customize = function(oMethods) {
				_extend(fnCtor.prototype, oMethods);
				return this;
			};

			fnCtor.subclass = _createExtendFunction(fnCtor);

			return fnCtor;
		};
	}

	/**
	 * @function
	 * @param oMethods
	 * @return
	 */
	sap.ui.core.ComponentFactory.subclass = _createExtendFunction(sap.ui.core.ComponentFactory);

	/**
	 * Overrides factory methods with a customized implementation.
	 *
	 * The members in the <code>mMethods</code> parameter should match
	 * the documented factory methods in the concrete ComponentFactory subclass
	 * of a composite.
	 *
	 * @see Application Developers guide for component customization
	 *
	 * @param {object} mMethods
	 * @return this to allow method chaining
	 * @public
	 */
	sap.ui.core.ComponentFactory.prototype.customize = function (mMethods) {
		_extend(this, mMethods);
		if ( this.oComposite && this.oComposite._onComponentFactoryChanged ) {
			//
			this.oComposite._onComponentFactoryChanged();
		}
		return this;
	};

}());
}; // end of sap/ui/core/CompositeSupport.js
if ( !jQuery.sap.isDeclared('sap.ui.core.UIComponent') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides base class sap.ui.core.Component for all components
jQuery.sap.declare("sap.ui.core.UIComponent");




/**
 * Creates and initializes a new UI component with the given <code>sId</code> and
 * settings.
 * 
 * The set of allowed entries in the <code>mSettings</code> object depends on
 * the concrete subclass and is described there. See {@link sap.ui.core.Component}
 * for a general description of this argument.
 * 
 * @param {string}
 *            [sId] optional id for the new control; generated automatically if
 *            no non-empty id is given Note: this can be omitted, no matter
 *            whether <code>mSettings</code> will be given or not!
 * @param {object}
 *            [mSettings] optional map/JSON-object with initial settings for the
 *            new component instance
 * @public
 * 
 * @class Base Class for UI Component.
 * @extends sap.ui.core.Component
 * @abstract
 * @author SAP
 * @version 1.18.9
 * @name sap.ui.core.UIComponent
 * @experimental Since 1.9.2. The Component concept is still under construction, so some implementation details can be changed in future.
 */
sap.ui.core.Component.extend("sap.ui.core.UIComponent", /** @lends sap.ui.core.UIComponent */

{
	constructor : function(sId, mSettings) {

		try {
			sap.ui.core.Component.apply(this, arguments);
		} catch (e) {
			if (this._oRouter) {
				this._oRouter.destroy();
			}
			throw e;
		}

	},

	metadata : {
		"abstract": true,
		rootView : null, // the rootView to open (view name as string or view configuration object)
		publicMethods: [ "render" ],
		aggregations: {
			"rootControl": { type: "sap.ui.core.Control", multiple: false, visibility: "hidden" }
		},
		routing: {
			/*
			config: { // default values for routing
				viewType : "XML",
				viewPath: "NavigationWithoutMasterDetailPattern.view",
				targetParent: "myViewId",
				targetControl: "app",
				targetAggregation: "pages",
				clearTarget: false
			},
			*/
			/*
			routes: [ // contains routing configuration objects
				{
					name : "myRouteName1",
					pattern : "FirstView/{from}",
					view : "myViewId"
				},
			]
			*/
		}
		//autoDestroy: false // TODO: destroy component when view should be destroyed (not implemented yet!)
	}

}, /* Metadata constructor */ sap.ui.core.UIComponentMetadata);

/**
 * Initializes the Component instance after creation.
 *
 * Applications must not call this hook method directly, it is called by the
 * framework while the constructor of an Component is executed.
 *
 * Subclasses of Component should override this hook to implement any necessary
 * initialization. <b>When overriding this function make sure to invoke the
 * init function of the UIComponent as well!</b> 
 *
 * @function
 * @name sap.ui.core.Component.prototype.init
 * @protected
 */
sap.ui.core.UIComponent.prototype.init = function() {
	
	var that = this;
	var oPreprocessors = {};
	
	// when auto prefixing is enabled we add the prefix
	if (this.getAutoPrefixId()) {
		oPreprocessors.id = function(sId) {
			return that.createId(sId);
		};
	}

	// create the routing
	var oMetadata = this.getMetadata();
	// extend the metadata config, so that the metadata object cannot be modified afterwards
	var oRoutingConfig = jQuery.extend({}, oMetadata.getRoutingConfig());
	var aRoutes = oMetadata.getRoutes();

	// create the router for the component instance
	if (aRoutes) {
		jQuery.sap.require("sap.ui.core.routing.Router");
		this._oRouter = new sap.ui.core.routing.Router(aRoutes, oRoutingConfig, this);
	}

	// create the content
	sap.ui.base.ManagedObject.runWithOwner(function() {
		sap.ui.base.ManagedObject.runWithPreprocessors(function() {
			that.setAggregation("rootControl", that.createContent());
		}, oPreprocessors);
	}, this);

	// only for root "views" we automatically define the target parent
	var oRootControl = this.getAggregation("rootControl");
	if (oRootControl instanceof sap.ui.core.mvc.View) {
		if(oRoutingConfig.targetParent === undefined) {
			oRoutingConfig.targetParent = oRootControl.getId();
		}
	}
};

/*
 * Destruction of the UIComponent
 */
sap.ui.core.UIComponent.prototype.destroy = function() {
	// destroy the router
	if (this._oRouter) {
		this._oRouter.destroy();
		delete this._oRouter;
	}
	// make sure that the component is destroyed properly
	sap.ui.core.Component.prototype.destroy.apply(this, arguments);
};

/**
 * Returns the reference to the router instance. The passed controller or view
 * have to be created in the context of a UIComponent to return the router 
 * instance. Otherwise this function will return undefined.
 * @param {sap.ui.core.mvc.View|sap.ui.core.mvc.Controller} either a view or controller
 * @return {sap.ui.core.routing.Router} the router instance
 * @since 1.16.1
 * @public
 */
sap.ui.core.UIComponent.getRouterFor = function(oControllerOrView) {
	var oView = oControllerOrView;
	if (oView instanceof sap.ui.core.mvc.Controller) {
		oView = oView.getView();
	}
	if (oView instanceof sap.ui.core.mvc.View) {
		var sOwner = sap.ui.core.Component.getOwnerIdFor(oView),
			oComponent = sap.ui.component(sOwner);
		
		if (oComponent) {
			return oComponent.getRouter();
		} else {
			return undefined;
		}
	}
};

/**
 * Returns the reference to the router instance which has been created by
 * the UIComponent once the routes in the routing metadata has been defined.
 * @since 1.16.1
 * @return {sap.ui.core.routing.Router} the router instance
 * @public
 */
sap.ui.core.UIComponent.prototype.getRouter = function() {
	return this._oRouter;
};

/**
 * A method to be implemented by UIComponents, returning the flag whether to prefix 
 * the IDs of controls automatically or not if the controls are created inside
 * the {@link sap.ui.core.UIComponent#createContent} function. By default this 
 * feature is not activated. 
 * 
 * You can overwrite this function and return true to activate the automatic
 * prefixing.
 * 
 * @since 1.15.1
 * @experimental Since 1.15.1. This feature might be changed in future.
 * @return {boolean} true, if the controls IDs should be prefixed automatically
 * @protected
 */
sap.ui.core.UIComponent.prototype.getAutoPrefixId = function() {
	return false;
};

/**
 * returns an Element by its id in the context of the Component
 *
 * @return Element by its id
 * @public
 */
sap.ui.core.UIComponent.prototype.byId = function(sId) {
	return sap.ui.getCore().byId(this.createId(sId));
};

/**
 * creates an id for an Element prefixed with the component id
 *
 * @return prefixed id
 * @public
 */
sap.ui.core.UIComponent.prototype.createId = function(sId) {
	if (!this.isPrefixedId(sId)) {
		// components have 3 dashes as separator, views 2 and controls/elements 1
		sId = this.getId() + "---" + sId;
	}
	return sId;
};

/**
 * Checks whether the given ID is already prefixed with this View's ID
 *
 * @param {string} potentially prefixed id
 * @return whether the ID is already prefixed
 */
sap.ui.core.UIComponent.prototype.isPrefixedId = function(sId) {
	return (sId && sId.indexOf(this.getId() + "---") === 0);
};

/**
 * The method to create the Content (UI Control Tree) of the Component. 
 * This method has to be overwritten in the implementation of the component
 * if the root view is not declared in the component metadata.
 *
 * @public
 */
sap.ui.core.UIComponent.prototype.createContent = function() {
	var oRootView = this.getMetadata().getRootView();
	if (oRootView) {
		return sap.ui.view(oRootView);
	}
	return null;
};

/**
 * Renders the the root control of the UIComponent.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager a RenderManager instance
 * @public
 */
sap.ui.core.UIComponent.prototype.render = function(oRenderManager) {
	var oControl = this.getAggregation("rootControl");
	if (oControl && oRenderManager) {
		oRenderManager.renderControl(oControl);
	}
};

/**
 * Returns the reference to the UIArea of the container.
 *
 * @return {sap.ui.core.UIArea} reference to the UIArea of the container
 * @public
 */
sap.ui.core.UIComponent.prototype.getUIArea = function() {
	return (this.oContainer ? this.oContainer.getUIArea() : null);
};

/**
 * @see sap.ui.base.EventProvider#getEventingParent
 * @protected
 */
sap.ui.core.UIComponent.prototype.getEventingParent = function() {
	return this.getUIArea();
};

/**
 * Sets the reference to the ComponentContainer - later required for the 
 * determination of the UIArea for the UIComponent.
 *
 * @param {sap.ui.core.ComponentContainer} oContainer reference to a ComponentContainer
 * @return {sap.ui.core.UIComponent} reference to this instance to allow method chaining
 * @public
 */
sap.ui.core.UIComponent.prototype.setContainer = function(oContainer) {
	this.oContainer = oContainer;
	return this;
};

/**
 * Function is called when the rendering of the Component Container is started.
 *
 * Applications must not call this hook method directly, it is called from ComponentContainer.
 *
 * Subclasses of UIComponent override this hook to implement any necessary actions before the rendering.
 *
 * @function
 * @name sap.ui.core.UIComponent.prototype.onBeforeRendering
 * @protected
 */
sap.ui.core.UIComponent.prototype.onBeforeRendering = function() {};

/**
 * Function is called when the rendering of the Component Container is completed.
 *
 * Applications must not call this hook method directly, it is called from ComponentContainer.
 *
 * Subclasses of UIComponent override this hook to implement any necessary actions after the rendering.
 *
 * @function
 * @name sap.ui.core.UIComponent.prototype.onAfterRendering
 * @protected
 */
sap.ui.core.UIComponent.prototype.onAfterRendering = function() {};

}; // end of sap/ui/core/UIComponent.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.HTMLView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.HTMLView.
jQuery.sap.declare("sap.ui.core.mvc.HTMLView");




/**
 * Constructor for a new mvc/HTMLView.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor sap.ui.core.mvc.View}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A view defined/constructed by declarative HTML.
 * @extends sap.ui.core.mvc.View
 *
 * @author Stefan Hipfel, Tino Butz 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @since 1.9.2
 * @name sap.ui.core.mvc.HTMLView
 */
sap.ui.core.mvc.View.extend("sap.ui.core.mvc.HTMLView", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core"
}});


/**
 * Creates a new subclass of class sap.ui.core.mvc.HTMLView with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.mvc.HTMLView.extend
 * @function
 */


// Start of sap\ui\core\mvc\HTMLView.js



(function(){
	/**
	 * Defines or creates an instance of a declarative HTML view.
	 *
	 * The behavior of this method depends on the signature of the call and on the current context.
	 *
	 * <ul>
	 * <li>View Definition <code>sap.ui.htmlview(sId, vView)</code>: Defines a view of the given name with the given
	 * implementation. sId must be the views name, vView must be an object and can contain
	 * implementations for any of the hooks provided by HTMLView</li>
	 * <li>View Instantiation <code>sap.ui.htmlview(sId?, vView)</code>: Creates an instance of the view with the given name (and id)</li>.
	 * </ul>
	 *
	 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
	 * be created automatically.
	 *
	 * @param {string} [sId] id of the newly created view, only allowed for instance creation
	 * @param {string | object} vView name or implementation of the view.
	 * @public
	 * @static
	 * @return {sap.ui.core.mvc.HTMLView | undefined} the created HTMLView instance in the creation case, otherwise undefined
	 */
	sap.ui.htmlview = function(sId, vView) {
		return sap.ui.view(sId, vView, sap.ui.core.mvc.ViewType.HTML);
	};
	
	/**
	 * The type of the view used for the <code>sap.ui.view</code> factory 
	 * function. This property is used by the parsers to define the specific 
	 * view type.
	 * @private
	 */
	sap.ui.core.mvc.HTMLView._sType = sap.ui.core.mvc.ViewType.HTML;
	
	/**
	 * The template cache. Templates are only loaded once.
	 * 
	 * @private
	 * @static
	 */
	sap.ui.core.mvc.HTMLView._mTemplates = {};


	/**
	 * A map with the allowed settings for the view.
	 * 
	 * @private
	 * @static
	 */
	sap.ui.core.mvc.HTMLView._mAllowedSettings = {
			"viewName" : true,
			"controller" : true,
			"viewContent" : true,
			"controllerName" : true,
			"resourceBundleName" : true,
			"resourceBundleUrl" : true,
			"resourceBundleLocale" : true,
			"resourceBundleAlias" : true
	};
	
	
	/**
	 * Loads and returns a template for the given template name. Templates are only loaded once {@link sap.ui.core.mvc.HTMLView._mTemplates}.
	 * 
	 * @param {string} sTemplateName The name of the template
	 * @return {string} the template data
	 * @private
	 * @static
	 */
	sap.ui.core.mvc.HTMLView._getTemplate = function(sTemplateName) {
		var sUrl = this._getViewUrl(sTemplateName);
		var sHTML = this._mTemplates[sUrl];
		
		if (!sHTML) {
			sHTML = this._loadTemplate(sTemplateName);
			// TODO discuss 
			// a) why caching at all (more precise: why for HTMLView although we refused to do it for other view types - risk of a memory leak!)
			// b) why cached via URL instead of via name? Any special scenario in mind?
			this._mTemplates[sUrl] = sHTML;
		}
		return sHTML;
	};


	/**
	 * Abstract method implementation. Returns the name of the controller.
	 * @return {string} the name of the set controller. Returns undefined when no controller is set.
	 * @private
	 */
	sap.ui.core.mvc.HTMLView.prototype.getControllerName = function() {
		return this._controllerName;
	};


	/**
	 * Returns the view URL for a given template name in respect of the module path.
	 * 
	 * @param {string} sTemplateName The name of the template
	 * @return {string} the view url
	 * @private
	 * @static
	 */
	sap.ui.core.mvc.HTMLView._getViewUrl = function(sTemplateName) {
		return jQuery.sap.getModulePath(sTemplateName, ".view.html");
	};


	/**
	 * Loads and returns the template from a given URL.
	 * 
	 * @param {string} sTemplateName The name of the template
	 * @return {string} the template data
	 * @private
	 * @static
	 */
	sap.ui.core.mvc.HTMLView._loadTemplate = function(sTemplateName) {
		var sResourceName = jQuery.sap.getResourceName(sTemplateName, ".view.html"); 
		return jQuery.sap.loadResource(sResourceName);
	};


	/**
	 * Abstract method implementation.
	 * 
	 * @see sap.ui.core.mvc.View#initViewSettings
	 * 
	 * @private
	 */
	sap.ui.core.mvc.HTMLView.prototype.initViewSettings = function (mSettings) {
		if (!mSettings) {
			throw new Error("mSettings must be given");
		}

		// View template handling - no JSON template given
		if (mSettings.viewName && mSettings.viewContent) {
			throw new Error("View name and view content are given. There is no point in doing this, so please decide.");
		} else if (!mSettings.viewName && !mSettings.viewContent) {
			throw new Error("Neither view name nor view content is given. One of them is required.");
		}

		var sHTML = mSettings.viewContent || sap.ui.core.mvc.HTMLView._getTemplate(mSettings.viewName);
		this._oTemplate = document.createElement("div");
		var sHTML = sap.ui.core.RenderManager.prepareHTML5(sHTML);

		if (typeof sHTML === "string") {
			this._oTemplate.innerHTML = sHTML;
		} else {
			var oNodeList = sHTML;
			var oFragment = document.createDocumentFragment();
			for (var i=0; i<oNodeList.length;i++) {
				oFragment.appendChild(oNodeList.item(i));
			}
			this._oTemplate.appendChild(oFragment);
		}

		var oMetaElement = this._oTemplate.getElementsByTagName("template")[0];
		var oProperties = this.getMetadata().getAllProperties();

		if (oMetaElement) {
			var self = this;
			var DeclarativeSupport = sap.ui.core.DeclarativeSupport;
			jQuery.each(oMetaElement.attributes, function(iIndex, oAttr) {
				var sName = DeclarativeSupport.convertAttributeToSettingName(oAttr.name, self.getId());
				var sValue = oAttr.value;
				var oProperty = oProperties[sName];
				if (!mSettings[sName]) {
					if (oProperty) {
						mSettings[sName] = DeclarativeSupport.convertValueToType(DeclarativeSupport.getPropertyDataType(oProperty),sValue);
					} else if (sap.ui.core.mvc.HTMLView._mAllowedSettings[sName]){
						mSettings[sName] = sValue;	
					}
				}
			});
			this._oTemplate = oMetaElement;
		}

		// This is a fix for browsers that support web components
		if (this._oTemplate.content) {
			var oFragment = this._oTemplate.content;
			// Create a new template, as innerHTML would be empty for TemplateElements when the fragment is appended directly
			this._oTemplate = document.createElement("div");
			// Make the shadow DOM available in the DOM
			this._oTemplate.appendChild(oFragment);
		}

		if (mSettings.controllerName) {
		  this._controllerName = mSettings.controllerName;
		}
		if((mSettings.resourceBundleName || mSettings.resourceBundleUrl) && (!mSettings.models || !mSettings.models[mSettings.resourceBundleAlias])) {
			var model = new sap.ui.model.resource.ResourceModel({bundleName:mSettings.resourceBundleName, bundleUrl:mSettings.resourceBundleUrl, bundleLocale:mSettings.resourceBundleLocale});
			this.setModel(model, mSettings.resourceBundleAlias);
		}
	};

	
	/**
	 * Abstract method implementation.
	 * 
	 * @see sap.ui.core.mvc.View#onControllerConnected
	 * 
	 * @private
	 */
	sap.ui.core.mvc.HTMLView.prototype.onControllerConnected = function(oController) {
		// unset any preprocessors (e.g. from an enclosing HTML view)
		var self = this;
		sap.ui.base.ManagedObject.runWithPreprocessors(function() {
			sap.ui.core.DeclarativeSupport.compile(self._oTemplate, self);
		});
	};
	
	
	/**
	 * Called when the control is destroyed. Use this one to free resources and finalize activities.
	 */
	sap.ui.core.mvc.HTMLView.prototype.exit = function() {
		this._oTemplate = null;
		sap.ui.core.mvc.View.prototype.exit.call(this);
		// Destroy all unassociated controls that are connected with the view
		if (this._connectedControls) {
			for (var i = 0; i < this._connectedControls.length; i++) {
				this._connectedControls[i].destroy();
			}
			this._connectedControls = null;
		}
	};


	/**
	 * Internal method to connect unassociated controls to the view. All controls will be destroyed when the view is destroyed. 
     *
	 * @param {sap.ui.core.Control} oControl reference to a Control
	 * @private
	 */
	 sap.ui.core.mvc.HTMLView.prototype.connectControl = function(oControl) {
		this._connectedControls = this._connectedControls || [];
		this._connectedControls.push(oControl);
	};
}());
}; // end of sap/ui/core/mvc/HTMLView.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.JSONView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.JSONView.
jQuery.sap.declare("sap.ui.core.mvc.JSONView");




/**
 * Constructor for a new mvc/JSONView.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor sap.ui.core.mvc.View}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A View defined using JSON.
 * @extends sap.ui.core.mvc.View
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.mvc.JSONView
 */
sap.ui.core.mvc.View.extend("sap.ui.core.mvc.JSONView", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core"
}});


/**
 * Creates a new subclass of class sap.ui.core.mvc.JSONView with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.mvc.JSONView.extend
 * @function
 */


// Start of sap\ui\core\mvc\JSONView.js
(function(){

	/**
	 * Creates a JSON view of the given name and id.
	 *
	 * The <code>viewName</code> must either correspond to an JSON module that can be loaded
	 * via the module system (viewName + suffix ".view.json") and which defines the view or must
	 * be a configuration object for a view.
	 * The configuration object can have a vieName, viewContent and a controller property. The viewName
	 * behaves as described above. ViewContent can hold the view description as JSON string. The controller
	 * property can hold an controller instance. If a controller instance is given it overrides the
	 * controller defined in the view.
	 *
	 * Like with any other control, an id is optional and will be created when missing.
	 *
	 * @param {string} [sId] id of the newly created view
	 * @param {string | object} vView name of the view or view configuration as described above.
	 * @public
	 * @static
	 * @return {sap.ui.core.mvc.JSONView} the created JSONView instance
	 */
	sap.ui.jsonview = function(sId, vView) {
		return sap.ui.view(sId, vView, sap.ui.core.mvc.ViewType.JSON);
	};
	
	/**
	 * The type of the view used for the <code>sap.ui.view</code> factory 
	 * function. This property is used by the parsers to define the specific 
	 * view type.
	 * @private
	 */
	sap.ui.core.mvc.JSONView._sType = sap.ui.core.mvc.ViewType.JSON;
	
	sap.ui.core.mvc.JSONView.prototype.initViewSettings = function(mSettings) {
		if (!mSettings) {
			throw new Error("mSettings must be given");
		}

		// View template handling - no JSON template given
		if (mSettings.viewName && mSettings.viewContent) {
			throw new Error("View name and view content are given. There is no point in doing this, so please decide.");
		} else if (!mSettings.viewName && !mSettings.viewContent) {
			throw new Error("Neither view name nor view content is given. One of them is required.");
		}

		if (mSettings.viewName) {
			this._loadTemplate(mSettings.viewName);
		} else if (mSettings.viewContent) {
			this.mProperties["viewContent"] = mSettings.viewContent;
			if (typeof mSettings.viewContent === "string") {
				this._oJSONView = jQuery.parseJSON(mSettings.viewContent);
				if (!this._oJSONView) { // would lead to errors later on
					throw new Error("error when parsing viewContent: " + mSettings.viewContent);
				}
			} else if (typeof mSettings.viewContent === "object") {
				this._oJSONView = mSettings.viewContent;
			} else {
				throw new Error("viewContent must be a JSON string or object, but is a " + (typeof mSettings.viewContent));
			}
		} else {
			// does not happen, already checked
		}

		if((this._oJSONView.resourceBundleName || this._oJSONView.resourceBundleUrl) && (!mSettings.models || !mSettings.models[this._oJSONView.resourceBundleAlias])) {
			var model = new sap.ui.model.resource.ResourceModel({bundleName:this._oJSONView.resourceBundleName, bundleUrl:this._oJSONView.resourceBundleUrl});
			this.setModel(model, this._oJSONView.resourceBundleAlias);
		}

	};

	sap.ui.core.mvc.JSONView.prototype.onControllerConnected = function(oController) {
		var that = this;

		// use preprocessors to fix IDs, associations and event handler references
		sap.ui.base.ManagedObject.runWithPreprocessors(function() {
				// parse
				that.applySettings({ content : that._oJSONView.content});
			},

			{
				// preprocessors
				id : function(sId) {
					// prefix only if prefix doesn't exist already. Avoids double prefixes 
					// for composite components (now done in createId)
					return that.createId(sId);
				},
				// preprocess 'mSettings' for setting the controller as Listener for defined events
				// => make sure to store old preprocessor in case of nested views
				settings : function(oSettings) {
					var oMetadata = this.getMetadata(),
					aValidKeys = oMetadata.getJSONKeys(),
					sKey, oValue, oKeyInfo;
					for(sKey in oSettings) {
						// get info object for the key
						if ( oKeyInfo = aValidKeys[sKey] ) {
							oValue = oSettings[sKey];
							switch(oKeyInfo._iKind) {
							case 3: // SINGLE ASSOCIATIONS
								// prefix the association ids with the view id
								oSettings[sKey] = that.createId(oValue);
								break;
							case 5: // EVENTS
								if ( typeof oSettings[sKey] === "string" ) {
									oSettings[sKey] = [oController[oSettings[sKey]], oController];
								}
								break;
							}
						}
					}
				}
			});
		
	};

	sap.ui.core.mvc.JSONView.prototype._loadTemplate = function(sTemplateName) {
		var sResourceName = jQuery.sap.getResourceName(sTemplateName, ".view.json"); 
		this._oJSONView = jQuery.sap.loadResource(sResourceName);
	};

	sap.ui.core.mvc.JSONView.prototype.getControllerName = function() {
		return this._oJSONView.controllerName;
	};

}());

}; // end of sap/ui/core/mvc/JSONView.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.JSView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.JSView.
jQuery.sap.declare("sap.ui.core.mvc.JSView");




/**
 * Constructor for a new mvc/JSView.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor sap.ui.core.mvc.View}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A View defined/constructed by JavaScript code.
 * @extends sap.ui.core.mvc.View
 *
 * @author  
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @name sap.ui.core.mvc.JSView
 */
sap.ui.core.mvc.View.extend("sap.ui.core.mvc.JSView", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core"
}});


/**
 * Creates a new subclass of class sap.ui.core.mvc.JSView with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.mvc.JSView.extend
 * @function
 */


// Start of sap\ui\core\mvc\JSView.js
(function(){
	var mRegistry = {};
	/**
	 * Defines or creates an instance of a JavaScript view.
	 *
	 * The behavior of this method depends on the signature of the call and on the current context.
	 *
	 * <ul>
	 * <li>View Definition <code>sap.ui.jsview(sId, vView)</code>: Defines a view of the given name with the given
	 * implementation. sId must be the views name, vView must be an object and can contain
	 * implementations for any of the hooks provided by JSView</li>
	 * <li>View Instantiation <code>sap.ui.jsview(sId?, vView)</code>: Creates an instance of the view with the given name (and id).
	 * If no view implementation has been defined for that view name, a JavaScript module with the same name and with suffix "view.js" will be loaded
	 * and executed. The module should contain a view definition (1st. variant above). </li>
	 * </ul>
	 *
	 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
	 * be created automatically.
	 *
	 * @param {string} [sId] id of the newly created view, only allowed for instance creation
	 * @param {string | object} vView name or implementation of the view.
	 * @public
	 * @static
	 * @return {sap.ui.core.mvc.JSView | undefined} the created JSView instance in the creation case, otherwise undefined
	 */
	sap.ui.jsview = function(sId, vView) {
		var mSettings = {};

		if (vView && typeof (vView) == "string") { // instantiation sap.ui.jsview("id","name")
			mSettings.viewName = vView;
			mSettings.controller = arguments[2];
			var oView = new sap.ui.core.mvc.JSView(sId, mSettings);
			return oView;

		} else if (vView && typeof (vView) == "object"){ // definition sap.ui.jsview("name",definitionObject)
			// sId is not given, but contains the desired value of sViewName
			mRegistry[sId] = vView;
			jQuery.sap.declare({modName:sId,type:"view"}, false);

		} else if (arguments.length == 1 && typeof(arguments[0]) == "string") { // instantiation sap.ui.jsview("name")
			mSettings.viewName = sId;
			mSettings.controller = arguments[1];
			/*** STEP 1: create View ***/
			var oView = mSettings.id ? new sap.ui.core.mvc.JSView(mSettings.id,mSettings): new sap.ui.core.mvc.JSView(mSettings);
			/*** Step 3B and 4B (create and connect controller) happen in View ***/
			return oView;
		} else {
			throw new Error("Wrong arguments! Either call sap.ui.jsview([sId,] sViewName) to instantiate a View or sap.ui.jsview(sViewName, oViewImpl) to define a View type.");
		}
	};

	sap.ui.core.mvc.JSView.prototype.initViewSettings = function (mSettings) {
		/*** require view definition if not yet done... ***/
		if (!mRegistry[mSettings.viewName]) {
			jQuery.sap.require({modName: mSettings.viewName, type: "view"});
		}
		/*** Step 2: extend() ***/
		jQuery.extend(this, mRegistry[mSettings.viewName]);
	};

	sap.ui.core.mvc.JSView.prototype.onControllerConnected = function(oController) {
		var that=this;
		var oPreprocessors = {};
		// when auto prefixing is enabled we add the prefix
		if (this.getAutoPrefixId()) {
			oPreprocessors.id = function(sId) {
				return that.createId(sId);
			};
		}
		// unset any preprocessors (e.g. from an enclosing JSON view)
		sap.ui.base.ManagedObject.runWithPreprocessors(function() { 
			that.applySettings({ content : that.createContent(oController) });
		}, oPreprocessors);
	};

	/**
	 * A method to be implemented by JSViews, returning the flag whether to prefix 
	 * the IDs of controls automatically or not if the controls are created inside
	 * the {@link sap.ui.core.mvc.JSView#createContent} function. By default this 
	 * feature is not activated. 
	 * 
	 * You can overwrite this function and return true to activate the automatic
	 * prefixing.
	 * 
	 * @since 1.15.1
	 * @experimental Since 1.15.1. This feature might be changed in future.
	 * @return {boolean} true, if the controls IDs should be prefixed automatically
	 * @protected
	 */
	sap.ui.core.mvc.JSView.prototype.getAutoPrefixId = function() {
		return false;
	};

	/**
	 * A method to be implemented by JSViews, returning the View UI.
	 * While for declarative View types like XMLView or JSONView the user interface definition is declared in a separate file,
	 * JSViews programmatically construct the UI. This happens in the createContent method which every JSView needs to implement.
	 * The View implementation can construct the complete UI in this method - or only return the root control and create the rest of the UI lazily later on.
	 * 
	 * @return {sap.ui.core.Control} a control or (typically) tree of controls representing the View user interface
	 * @public
	 * @name sap.ui.core.mvc.JSView#createContent
	 * @function
	 */

}());
}; // end of sap/ui/core/mvc/JSView.js
if ( !jQuery.sap.isDeclared('sap.ui.core.mvc.TemplateView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.core.mvc.TemplateView.
jQuery.sap.declare("sap.ui.core.mvc.TemplateView");




/**
 * Constructor for a new mvc/TemplateView.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.mvc.View#constructor sap.ui.core.mvc.View}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A view defined in a template.
 * @extends sap.ui.core.mvc.View
 *
 * @author SAP AG 
 * @version 1.18.9
 *
 * @constructor   
 * @public
 * @since 1.16.0
 * @name sap.ui.core.mvc.TemplateView
 */
sap.ui.core.mvc.View.extend("sap.ui.core.mvc.TemplateView", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.core"
}});


/**
 * Creates a new subclass of class sap.ui.core.mvc.TemplateView with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.core.mvc.TemplateView.extend
 * @function
 */


// Start of sap\ui\core\mvc\TemplateView.js
(function(){
	
	/**
	 * Defines or creates an instance of a template view.
	 *
	 * The behavior of this method depends on the signature of the call and on the current context.
	 *
	 * <ul>
	 * <li>View Definition <code>sap.ui.templateview(sId, vView)</code>: Defines a view of the given name with the given
	 * implementation. sId must be the views name, vView must be an object and can contain
	 * implementations for any of the hooks provided by templateview</li>
	 * <li>View Instantiation <code>sap.ui.templateview(sId?, vView)</code>: Creates an instance of the view with the given name (and id)</li>.
	 * </ul>
	 *
	 * Any other call signature will lead to a runtime error. If the id is omitted in the second variant, an id will
	 * be created automatically.
	 *
	 * @param {string} [sId] id of the newly created view, only allowed for instance creation
	 * @param {string | object} vView name or implementation of the view.
	 * @public
	 * @static
	 * @return {sap.ui.core.mvc.TemplateView | undefined} the created TemplateView instance in the creation case, otherwise undefined
	 */
	sap.ui.templateview = function(sId, vView) {
		return sap.ui.view(sId, vView, sap.ui.core.mvc.ViewType.Template);
	};

	/**
	 * The type of the view used for the <code>sap.ui.view</code> factory 
	 * function. This property is used by the parsers to define the specific 
	 * view type.
	 * @private
	 */
	sap.ui.core.mvc.TemplateView._sType = sap.ui.core.mvc.ViewType.Template;
	
	/**
	 * Abstract method implementation. Returns the name of the controller.
	 * @return {string} the name of the set controller. Returns undefined when no controller is set.
	 * @private
	 */
	sap.ui.core.mvc.TemplateView.prototype.getControllerName = function() {
		return this._sControllerName;
	};


	/**
	 * Returns the view URL for a given template name in respect of the module path.
	 * 
	 * @param {string} sTemplateName The name of the template
	 * @return {string} the view url
	 * @private
	 * @static
	 */
	sap.ui.core.mvc.TemplateView._getViewUrl = function(sTemplateName) {
		return jQuery.sap.getModulePath(sTemplateName, ".view.tmpl");
	};

	/**
	 * Abstract method implementation.
	 * 
	 * @see sap.ui.core.mvc.View#initViewSettings
	 * 
	 * @private
	 */
	sap.ui.core.mvc.TemplateView.prototype.initViewSettings = function (mSettings) {
		if (!mSettings) {
			throw new Error("mSettings must be given");
		}

		// View template handling - no Tmpl template given
		if (!mSettings.viewName) {
			throw new Error("No view name is given.");
		}
		
		this._oTemplate = sap.ui.template({
			id: this.getId(),
			src: sap.ui.core.mvc.TemplateView._getViewUrl(mSettings.viewName)
		});
		this._sControllerName = this._oTemplate._sControllerName;
		this._oTemplate = this._oTemplate.createControl(undefined, undefined, this);
	};

}());
}; // end of sap/ui/core/mvc/TemplateView.js

// as this module contains the Core, we ensure that the Core has been booted
sap.ui.getCore().boot && sap.ui.getCore().boot();

